
MPC_12_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f4  080049f4  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  080049f4  080049f4  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049f4  080049f4  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080049fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200000f4  08004af0  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08004af0  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b96f  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa7  00000000  00000000  0003ba93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00015b59  00000000  00000000  0003ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00054598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a70  00000000  00000000  00055188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021982  00000000  00000000  00057bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c706  00000000  00000000  0007957a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d31ec  00000000  00000000  00095c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00168e6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d68  00000000  00000000  00168ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f4 	.word	0x200000f4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080049a0 	.word	0x080049a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f8 	.word	0x200000f8
 80001d4:	080049a0 	.word	0x080049a0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <SVPWM.part.0>:
 *
 */
void SVPWM(){
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	if(run == 1){
		n = (uint8_t)(floor(wt/60))+1;
 8000884:	4a9d      	ldr	r2, [pc, #628]	; (8000afc <SVPWM.part.0+0x278>)
 8000886:	4b9e      	ldr	r3, [pc, #632]	; (8000b00 <SVPWM.part.0+0x27c>)
 8000888:	8810      	ldrh	r0, [r2, #0]
 800088a:	fba3 2300 	umull	r2, r3, r3, r0
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	3301      	adds	r3, #1
 8000892:	b2db      	uxtb	r3, r3
void SVPWM(){
 8000894:	b4f0      	push	{r4, r5, r6, r7}

		T1 = (uint16_t)(V*sin2(n*60 - wt));
 8000896:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
		n = (uint8_t)(floor(wt/60))+1;
 800089a:	4c9a      	ldr	r4, [pc, #616]	; (8000b04 <SVPWM.part.0+0x280>)
		T1 = (uint16_t)(V*sin2(n*60 - wt));
 800089c:	ebc0 0181 	rsb	r1, r0, r1, lsl #2
 80008a0:	b20a      	sxth	r2, r1
		n = (uint8_t)(floor(wt/60))+1;
 80008a2:	7023      	strb	r3, [r4, #0]
		T1 = (uint16_t)(V*sin2(n*60 - wt));
 80008a4:	b28c      	uxth	r4, r1
		return ((360+theta) - 360*(1+(theta/360)));
 80008a6:	4998      	ldr	r1, [pc, #608]	; (8000b08 <SVPWM.part.0+0x284>)
	if(theta < 0){
 80008a8:	2a00      	cmp	r2, #0
		return ((360+theta) - 360*(1+(theta/360)));
 80008aa:	fb81 5102 	smull	r5, r1, r1, r2
	if(theta < 0){
 80008ae:	f2c0 80d0 	blt.w	8000a52 <SVPWM.part.0+0x1ce>
		return (theta - 360*(theta/360));
 80008b2:	4411      	add	r1, r2
 80008b4:	17d2      	asrs	r2, r2, #31
 80008b6:	ebc2 2221 	rsb	r2, r2, r1, asr #8
 80008ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80008be:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80008c2:	eba4 02c2 	sub.w	r2, r4, r2, lsl #3
 80008c6:	b294      	uxth	r4, r2
 80008c8:	b212      	sxth	r2, r2
  if(theta <= 90){
 80008ca:	2a5a      	cmp	r2, #90	; 0x5a
 80008cc:	dd14      	ble.n	80008f8 <SVPWM.part.0+0x74>
  } else if(theta > 90 && theta <=180){
 80008ce:	f1a4 015b 	sub.w	r1, r4, #91	; 0x5b
 80008d2:	2959      	cmp	r1, #89	; 0x59
 80008d4:	d90e      	bls.n	80008f4 <SVPWM.part.0+0x70>
  } else if(theta > 180 && theta <= 270){
 80008d6:	3cb5      	subs	r4, #181	; 0xb5
 80008d8:	2c59      	cmp	r4, #89	; 0x59
    return -sinTable[theta - 180];
 80008da:	bf98      	it	ls
 80008dc:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - theta];
 80008de:	4c8b      	ldr	r4, [pc, #556]	; (8000b0c <SVPWM.part.0+0x288>)
 80008e0:	bf88      	it	hi
 80008e2:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 80008e6:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 80008ea:	4252      	negs	r2, r2
 80008ec:	b212      	sxth	r2, r2
 80008ee:	ee07 2a10 	vmov	s14, r2
 80008f2:	e006      	b.n	8000902 <SVPWM.part.0+0x7e>
    return sinTable[180 - theta];
 80008f4:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80008f8:	4c84      	ldr	r4, [pc, #528]	; (8000b0c <SVPWM.part.0+0x288>)
 80008fa:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
 80008fe:	ee07 2a10 	vmov	s14, r2
		T1 = (uint16_t)(V*sin2(n*60 - wt));
 8000902:	4a83      	ldr	r2, [pc, #524]	; (8000b10 <SVPWM.part.0+0x28c>)
 8000904:	4983      	ldr	r1, [pc, #524]	; (8000b14 <SVPWM.part.0+0x290>)
 8000906:	edd2 6a00 	vldr	s13, [r2]
 800090a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 800090e:	3b01      	subs	r3, #1
		T1 = (uint16_t)(V*sin2(n*60 - wt));
 8000910:	ee27 7a26 	vmul.f32	s14, s14, s13
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 8000914:	eba3 1303 	sub.w	r3, r3, r3, lsl #4
		T1 = (uint16_t)(V*sin2(n*60 - wt));
 8000918:	eebc 7ac7 	vcvt.u32.f32	s14, s14
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 800091c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		T1 = (uint16_t)(V*sin2(n*60 - wt));
 8000920:	ee17 2a10 	vmov	r2, s14
 8000924:	b295      	uxth	r5, r2
 8000926:	600d      	str	r5, [r1, #0]
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 8000928:	b21a      	sxth	r2, r3
		return ((360+theta) - 360*(1+(theta/360)));
 800092a:	4977      	ldr	r1, [pc, #476]	; (8000b08 <SVPWM.part.0+0x284>)
	if(theta < 0){
 800092c:	2a00      	cmp	r2, #0
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 800092e:	b29b      	uxth	r3, r3
		return ((360+theta) - 360*(1+(theta/360)));
 8000930:	fb81 6102 	smull	r6, r1, r1, r2
	if(theta < 0){
 8000934:	db7c      	blt.n	8000a30 <SVPWM.part.0+0x1ac>
		return (theta - 360*(theta/360));
 8000936:	4411      	add	r1, r2
 8000938:	17d2      	asrs	r2, r2, #31
 800093a:	ebc2 2221 	rsb	r2, r2, r1, asr #8
 800093e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000942:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000946:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 800094a:	b293      	uxth	r3, r2
 800094c:	b212      	sxth	r2, r2
  if(theta <= 90){
 800094e:	2a5a      	cmp	r2, #90	; 0x5a
 8000950:	dd12      	ble.n	8000978 <SVPWM.part.0+0xf4>
  } else if(theta > 90 && theta <=180){
 8000952:	f1a3 015b 	sub.w	r1, r3, #91	; 0x5b
 8000956:	2959      	cmp	r1, #89	; 0x59
 8000958:	d90c      	bls.n	8000974 <SVPWM.part.0+0xf0>
  } else if(theta > 180 && theta <= 270){
 800095a:	3bb5      	subs	r3, #181	; 0xb5
 800095c:	2b59      	cmp	r3, #89	; 0x59
    return -sinTable[theta - 180];
 800095e:	bf94      	ite	ls
 8000960:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - theta];
 8000962:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000966:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800096a:	425b      	negs	r3, r3
 800096c:	b21b      	sxth	r3, r3
 800096e:	ee07 3a90 	vmov	s15, r3
 8000972:	e005      	b.n	8000980 <SVPWM.part.0+0xfc>
    return sinTable[180 - theta];
 8000974:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000978:	f934 3012 	ldrsh.w	r3, [r4, r2, lsl #1]
 800097c:	ee07 3a90 	vmov	s15, r3
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 8000980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		T0 = Ts - (T1+T2) + 5;
 8000984:	4b64      	ldr	r3, [pc, #400]	; (8000b18 <SVPWM.part.0+0x294>)
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 8000986:	4e65      	ldr	r6, [pc, #404]	; (8000b1c <SVPWM.part.0+0x298>)
		T0 = Ts - (T1+T2) + 5;
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	4965      	ldr	r1, [pc, #404]	; (8000b20 <SVPWM.part.0+0x29c>)
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 800098c:	ee67 7aa6 	vmul.f32	s15, s15, s13

		if(wt < 60) {
 8000990:	283b      	cmp	r0, #59	; 0x3b
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 8000992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000996:	ee17 3a90 	vmov	r3, s15
 800099a:	b29b      	uxth	r3, r3
		T0 = Ts - (T1+T2) + 5;
 800099c:	eb05 0403 	add.w	r4, r5, r3
 80009a0:	eba2 0204 	sub.w	r2, r2, r4
 80009a4:	f102 0205 	add.w	r2, r2, #5
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60)));
 80009a8:	6033      	str	r3, [r6, #0]
		T0 = Ts - (T1+T2) + 5;
 80009aa:	600a      	str	r2, [r1, #0]
		if(wt < 60) {
 80009ac:	d814      	bhi.n	80009d8 <SVPWM.part.0+0x154>
			Ta = T1 + T2 + (T0/2);
 80009ae:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80009b2:	f3c2 064f 	ubfx	r6, r2, #1, #16
 80009b6:	4d5b      	ldr	r5, [pc, #364]	; (8000b24 <SVPWM.part.0+0x2a0>)
			Tb = T2 + (T0/2);
 80009b8:	485b      	ldr	r0, [pc, #364]	; (8000b28 <SVPWM.part.0+0x2a4>)
			Tc = (T0/2);
 80009ba:	4f5c      	ldr	r7, [pc, #368]	; (8000b2c <SVPWM.part.0+0x2a8>)
			Ta = T1 + T2 + (T0/2);
 80009bc:	1931      	adds	r1, r6, r4
			Tb = T2 + (T0/2);
 80009be:	4433      	add	r3, r6
			Ta = T1 + T2 + (T0/2);
 80009c0:	b289      	uxth	r1, r1
			Tb = T2 + (T0/2);
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4632      	mov	r2, r6
			Ta = T1 + T2 + (T0/2);
 80009c6:	8029      	strh	r1, [r5, #0]
			Tb = T2 + (T0/2);
 80009c8:	8003      	strh	r3, [r0, #0]
			Tc = (T0/2);
 80009ca:	803e      	strh	r6, [r7, #0]
		} else {
			Ta = 0;
			Tb = 0;
			Tc = 0;
		}
		TIM1->CCR1 = Ta;
 80009cc:	4858      	ldr	r0, [pc, #352]	; (8000b30 <SVPWM.part.0+0x2ac>)
		TIM1->CCR1 = 0;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
}
 80009ce:	bcf0      	pop	{r4, r5, r6, r7}
		TIM1->CCR1 = Ta;
 80009d0:	6341      	str	r1, [r0, #52]	; 0x34
		TIM1->CCR2 = Tb;
 80009d2:	6383      	str	r3, [r0, #56]	; 0x38
		TIM1->CCR3 = Tc;
 80009d4:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 80009d6:	4770      	bx	lr
		} else if(wt >= 60 && wt < 120) {
 80009d8:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
 80009dc:	293b      	cmp	r1, #59	; 0x3b
 80009de:	d80f      	bhi.n	8000a00 <SVPWM.part.0+0x17c>
			Ta = T1 + (T0/2);
 80009e0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80009e4:	f3c2 064f 	ubfx	r6, r2, #1, #16
 80009e8:	19a9      	adds	r1, r5, r6
			Tb = T1 + T2 + (T0/2);
 80009ea:	1933      	adds	r3, r6, r4
			Ta = T1 + (T0/2);
 80009ec:	4d4d      	ldr	r5, [pc, #308]	; (8000b24 <SVPWM.part.0+0x2a0>)
			Tb = T1 + T2 + (T0/2);
 80009ee:	4c4e      	ldr	r4, [pc, #312]	; (8000b28 <SVPWM.part.0+0x2a4>)
			Tc = (T0/2);
 80009f0:	484e      	ldr	r0, [pc, #312]	; (8000b2c <SVPWM.part.0+0x2a8>)
			Ta = T1 + (T0/2);
 80009f2:	b289      	uxth	r1, r1
			Tb = T1 + T2 + (T0/2);
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4632      	mov	r2, r6
			Ta = T1 + (T0/2);
 80009f8:	8029      	strh	r1, [r5, #0]
			Tb = T1 + T2 + (T0/2);
 80009fa:	8023      	strh	r3, [r4, #0]
			Tc = (T0/2);
 80009fc:	8006      	strh	r6, [r0, #0]
 80009fe:	e7e5      	b.n	80009cc <SVPWM.part.0+0x148>
		} else if(wt >= 120 && wt < 180) {
 8000a00:	f1a0 0178 	sub.w	r1, r0, #120	; 0x78
 8000a04:	293b      	cmp	r1, #59	; 0x3b
 8000a06:	d935      	bls.n	8000a74 <SVPWM.part.0+0x1f0>
		} else if(wt >= 180 && wt < 240) {
 8000a08:	f1a0 01b4 	sub.w	r1, r0, #180	; 0xb4
 8000a0c:	293b      	cmp	r1, #59	; 0x3b
 8000a0e:	d842      	bhi.n	8000a96 <SVPWM.part.0+0x212>
			Ta = (T0/2);
 8000a10:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 8000a14:	f3c1 004f 	ubfx	r0, r1, #1, #16
			Tb = T1 + (T0/2);
 8000a18:	182b      	adds	r3, r5, r0
 8000a1a:	4f43      	ldr	r7, [pc, #268]	; (8000b28 <SVPWM.part.0+0x2a4>)
			Tc = T1 + T2 + (T0/2);
 8000a1c:	4e43      	ldr	r6, [pc, #268]	; (8000b2c <SVPWM.part.0+0x2a8>)
			Ta = (T0/2);
 8000a1e:	4d41      	ldr	r5, [pc, #260]	; (8000b24 <SVPWM.part.0+0x2a0>)
			Tc = T1 + T2 + (T0/2);
 8000a20:	4404      	add	r4, r0
			Tb = T1 + (T0/2);
 8000a22:	b29b      	uxth	r3, r3
			Tc = T1 + T2 + (T0/2);
 8000a24:	b2a2      	uxth	r2, r4
 8000a26:	4601      	mov	r1, r0
			Tb = T1 + (T0/2);
 8000a28:	803b      	strh	r3, [r7, #0]
			Tc = T1 + T2 + (T0/2);
 8000a2a:	8032      	strh	r2, [r6, #0]
			Ta = (T0/2);
 8000a2c:	8028      	strh	r0, [r5, #0]
			Tc = T1 + T2 + (T0/2);
 8000a2e:	e7cd      	b.n	80009cc <SVPWM.part.0+0x148>
		return ((360+theta) - 360*(1+(theta/360)));
 8000a30:	188e      	adds	r6, r1, r2
 8000a32:	17d1      	asrs	r1, r2, #31
 8000a34:	ebc1 2126 	rsb	r1, r1, r6, asr #8
 8000a38:	b209      	sxth	r1, r1
 8000a3a:	3101      	adds	r1, #1
 8000a3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000a40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a44:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000a48:	eba3 01c1 	sub.w	r1, r3, r1, lsl #3
 8000a4c:	b28b      	uxth	r3, r1
 8000a4e:	b20a      	sxth	r2, r1
 8000a50:	e77d      	b.n	800094e <SVPWM.part.0+0xca>
 8000a52:	188d      	adds	r5, r1, r2
 8000a54:	17d1      	asrs	r1, r2, #31
 8000a56:	ebc1 2125 	rsb	r1, r1, r5, asr #8
 8000a5a:	b209      	sxth	r1, r1
 8000a5c:	3101      	adds	r1, #1
 8000a5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000a62:	f504 72b4 	add.w	r2, r4, #360	; 0x168
 8000a66:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000a6a:	eba2 01c1 	sub.w	r1, r2, r1, lsl #3
 8000a6e:	b28c      	uxth	r4, r1
 8000a70:	b20a      	sxth	r2, r1
 8000a72:	e72a      	b.n	80008ca <SVPWM.part.0+0x46>
			Ta = (T0/2);
 8000a74:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 8000a78:	f3c1 004f 	ubfx	r0, r1, #1, #16
			Tc = T2 + (T0/2);
 8000a7c:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <SVPWM.part.0+0x2a8>)
			Tb = T1 + T2 + (T0/2);
 8000a7e:	4f2a      	ldr	r7, [pc, #168]	; (8000b28 <SVPWM.part.0+0x2a4>)
			Ta = (T0/2);
 8000a80:	4d28      	ldr	r5, [pc, #160]	; (8000b24 <SVPWM.part.0+0x2a0>)
			Tc = T2 + (T0/2);
 8000a82:	181e      	adds	r6, r3, r0
			Tb = T1 + T2 + (T0/2);
 8000a84:	4404      	add	r4, r0
			Tc = T2 + (T0/2);
 8000a86:	b2b6      	uxth	r6, r6
			Tb = T1 + T2 + (T0/2);
 8000a88:	b2a3      	uxth	r3, r4
			Tc = T2 + (T0/2);
 8000a8a:	8016      	strh	r6, [r2, #0]
 8000a8c:	4601      	mov	r1, r0
			Tb = T1 + T2 + (T0/2);
 8000a8e:	803b      	strh	r3, [r7, #0]
 8000a90:	4632      	mov	r2, r6
			Ta = (T0/2);
 8000a92:	8028      	strh	r0, [r5, #0]
			Tc = T2 + (T0/2);
 8000a94:	e79a      	b.n	80009cc <SVPWM.part.0+0x148>
		} else if(wt >= 240 && wt < 300) {
 8000a96:	f1a0 01f0 	sub.w	r1, r0, #240	; 0xf0
 8000a9a:	293b      	cmp	r1, #59	; 0x3b
 8000a9c:	d914      	bls.n	8000ac8 <SVPWM.part.0+0x244>
		} else if(wt >= 300 && wt < 360) {
 8000a9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8000aa2:	283b      	cmp	r0, #59	; 0x3b
 8000aa4:	d820      	bhi.n	8000ae8 <SVPWM.part.0+0x264>
			Ta = T1 + T2 + (T0/2);
 8000aa6:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8000aaa:	f3c3 064f 	ubfx	r6, r3, #1, #16
			Tc = T1 + (T0/2);
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <SVPWM.part.0+0x2a8>)
			Ta = T1 + T2 + (T0/2);
 8000ab0:	1931      	adds	r1, r6, r4
			Tc = T1 + (T0/2);
 8000ab2:	19a8      	adds	r0, r5, r6
			Tb = (T0/2);
 8000ab4:	4c1c      	ldr	r4, [pc, #112]	; (8000b28 <SVPWM.part.0+0x2a4>)
			Ta = T1 + T2 + (T0/2);
 8000ab6:	4d1b      	ldr	r5, [pc, #108]	; (8000b24 <SVPWM.part.0+0x2a0>)
			Tb = (T0/2);
 8000ab8:	8026      	strh	r6, [r4, #0]
			Tc = T1 + (T0/2);
 8000aba:	b280      	uxth	r0, r0
			Ta = T1 + T2 + (T0/2);
 8000abc:	b289      	uxth	r1, r1
			Tc = T1 + (T0/2);
 8000abe:	8010      	strh	r0, [r2, #0]
 8000ac0:	4633      	mov	r3, r6
			Ta = T1 + T2 + (T0/2);
 8000ac2:	8029      	strh	r1, [r5, #0]
			Tc = T1 + (T0/2);
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	e781      	b.n	80009cc <SVPWM.part.0+0x148>
			Ta = T2 + (T0/2);
 8000ac8:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8000acc:	f3c0 054f 	ubfx	r5, r0, #1, #16
 8000ad0:	1959      	adds	r1, r3, r5
			Tc = T1 + T2 + (T0/2);
 8000ad2:	192a      	adds	r2, r5, r4
			Ta = T2 + (T0/2);
 8000ad4:	4f13      	ldr	r7, [pc, #76]	; (8000b24 <SVPWM.part.0+0x2a0>)
			Tc = T1 + T2 + (T0/2);
 8000ad6:	4e15      	ldr	r6, [pc, #84]	; (8000b2c <SVPWM.part.0+0x2a8>)
			Tb = (T0/2);
 8000ad8:	4c13      	ldr	r4, [pc, #76]	; (8000b28 <SVPWM.part.0+0x2a4>)
			Ta = T2 + (T0/2);
 8000ada:	b289      	uxth	r1, r1
			Tc = T1 + T2 + (T0/2);
 8000adc:	b292      	uxth	r2, r2
 8000ade:	462b      	mov	r3, r5
			Ta = T2 + (T0/2);
 8000ae0:	8039      	strh	r1, [r7, #0]
			Tc = T1 + T2 + (T0/2);
 8000ae2:	8032      	strh	r2, [r6, #0]
			Tb = (T0/2);
 8000ae4:	8025      	strh	r5, [r4, #0]
			Tc = T1 + T2 + (T0/2);
 8000ae6:	e771      	b.n	80009cc <SVPWM.part.0+0x148>
			Ta = 0;
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <SVPWM.part.0+0x2a0>)
			Tc = 0;
 8000aea:	4910      	ldr	r1, [pc, #64]	; (8000b2c <SVPWM.part.0+0x2a8>)
			Tb = 0;
 8000aec:	480e      	ldr	r0, [pc, #56]	; (8000b28 <SVPWM.part.0+0x2a4>)
			Ta = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	8013      	strh	r3, [r2, #0]
			Tc = 0;
 8000af2:	800b      	strh	r3, [r1, #0]
 8000af4:	461a      	mov	r2, r3
			Tb = 0;
 8000af6:	8003      	strh	r3, [r0, #0]
			Tc = 0;
 8000af8:	4619      	mov	r1, r3
 8000afa:	e767      	b.n	80009cc <SVPWM.part.0+0x148>
 8000afc:	20000138 	.word	0x20000138
 8000b00:	88888889 	.word	0x88888889
 8000b04:	2000012d 	.word	0x2000012d
 8000b08:	b60b60b7 	.word	0xb60b60b7
 8000b0c:	20000018 	.word	0x20000018
 8000b10:	20000004 	.word	0x20000004
 8000b14:	20000114 	.word	0x20000114
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000118 	.word	0x20000118
 8000b20:	20000110 	.word	0x20000110
 8000b24:	2000011c 	.word	0x2000011c
 8000b28:	2000011e 	.word	0x2000011e
 8000b2c:	20000120 	.word	0x20000120
 8000b30:	40012c00 	.word	0x40012c00
 8000b34:	00000000 	.word	0x00000000

08000b38 <computePosition>:
	Ea = ((short)Eab[0]-1880)*81/100;
 8000b38:	4975      	ldr	r1, [pc, #468]	; (8000d10 <computePosition+0x1d8>)
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8000b3a:	eddf 6a76 	vldr	s13, [pc, #472]	; 8000d14 <computePosition+0x1dc>
	Ea = ((short)Eab[0]-1880)*81/100;
 8000b3e:	f9b1 2000 	ldrsh.w	r2, [r1]
	Eb =  (short)Eab[1]-1768;
 8000b42:	6849      	ldr	r1, [r1, #4]
	Xalbt->beta = (b-c)*250/433;
 8000b44:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8000d18 <computePosition+0x1e0>
	Eb =  (short)Eab[1]-1768;
 8000b48:	4874      	ldr	r0, [pc, #464]	; (8000d1c <computePosition+0x1e4>)
	Ea = ((short)Eab[0]-1880)*81/100;
 8000b4a:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
void computePosition(){
 8000b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Ea = ((short)Eab[0]-1880)*81/100;
 8000b52:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8000b56:	4e72      	ldr	r6, [pc, #456]	; (8000d20 <computePosition+0x1e8>)
	Ec = -(Ea+Eb);
 8000b58:	4d72      	ldr	r5, [pc, #456]	; (8000d24 <computePosition+0x1ec>)
	Ea = ((short)Eab[0]-1880)*81/100;
 8000b5a:	4c73      	ldr	r4, [pc, #460]	; (8000d28 <computePosition+0x1f0>)
 8000b5c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8000b60:	fb86 3602 	smull	r3, r6, r6, r2
 8000b64:	17d3      	asrs	r3, r2, #31
 8000b66:	ebc3 1366 	rsb	r3, r3, r6, asr #5
	Eb =  (short)Eab[1]-1768;
 8000b6a:	f5a1 62dd 	sub.w	r2, r1, #1768	; 0x6e8
	Ec = -(Ea+Eb);
 8000b6e:	fa13 f182 	uxtah	r1, r3, r2
 8000b72:	4249      	negs	r1, r1
 8000b74:	b209      	sxth	r1, r1
	clarkeTransform(Ea,Eb,Ec, &Ealbt);
 8000b76:	ee07 1a90 	vmov	s15, r1
	Eb =  (short)Eab[1]-1768;
 8000b7a:	b212      	sxth	r2, r2
void computePosition(){
 8000b7c:	ed2d 8b04 	vpush	{d8-d9}
	clarkeTransform(Ea,Eb,Ec, &Ealbt);
 8000b80:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000b84:	ee07 2a90 	vmov	s15, r2
	Ea = ((short)Eab[0]-1880)*81/100;
 8000b88:	b21b      	sxth	r3, r3
	clarkeTransform(Ea,Eb,Ec, &Ealbt);
 8000b8a:	ee06 3a10 	vmov	s12, r3
 8000b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b92:	eef8 9ac6 	vcvt.f32.s32	s19, s12
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8000b96:	ee37 9a88 	vadd.f32	s18, s15, s16
 8000b9a:	eddf 8a64 	vldr	s17, [pc, #400]	; 8000d2c <computePosition+0x1f4>
	Ec = -(Ea+Eb);
 8000b9e:	8029      	strh	r1, [r5, #0]
	Xalbt->beta = (b-c)*250/433;
 8000ba0:	ee77 7ac8 	vsub.f32	s15, s15, s16
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8000ba4:	ee29 9a26 	vmul.f32	s18, s18, s13
 8000ba8:	ee69 9aa8 	vmul.f32	s19, s19, s17
	Xalbt->beta = (b-c)*250/433;
 8000bac:	ee27 8a87 	vmul.f32	s16, s15, s14
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8000bb0:	495f      	ldr	r1, [pc, #380]	; (8000d30 <computePosition+0x1f8>)
	Eb =  (short)Eab[1]-1768;
 8000bb2:	8002      	strh	r2, [r0, #0]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8000bb4:	ee79 8ac9 	vsub.f32	s17, s19, s18
   abs_y = mod(y)+0.0000001;
 8000bb8:	eef0 7ac8 	vabs.f32	s15, s16
 8000bbc:	ee17 0a90 	vmov	r0, s15
	Ea = ((short)Eab[0]-1880)*81/100;
 8000bc0:	8023      	strh	r3, [r4, #0]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8000bc2:	edc1 8a00 	vstr	s17, [r1]
	Xalbt->beta = (b-c)*250/433;
 8000bc6:	ed81 8a01 	vstr	s16, [r1, #4]
   abs_y = mod(y)+0.0000001;
 8000bca:	f7ff fd93 	bl	80006f4 <__aeabi_f2d>
 8000bce:	a34a      	add	r3, pc, #296	; (adr r3, 8000cf8 <computePosition+0x1c0>)
 8000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd4:	f7ff fc30 	bl	8000438 <__adddf3>
 8000bd8:	f7ff fe04 	bl	80007e4 <__aeabi_d2f>
 8000bdc:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <computePosition+0x1fc>)
   if (x>=0){
 8000bde:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   abs_y = mod(y)+0.0000001;
 8000be6:	ee07 0a10 	vmov	s14, r0
 8000bea:	6018      	str	r0, [r3, #0]
   if (x>=0){
 8000bec:	db69      	blt.n	8000cc2 <computePosition+0x18a>
      r = (x - abs_y)/(x + abs_y);
 8000bee:	ee78 7ac7 	vsub.f32	s15, s17, s14
 8000bf2:	ee78 8a87 	vadd.f32	s17, s17, s14
      angle = (1-r)*c1;
 8000bf6:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <computePosition+0x200>)
      r = (x - abs_y)/(x + abs_y);
 8000bf8:	eec7 6aa8 	vdiv.f32	s13, s15, s17
      angle = (1-r)*c1;
 8000bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c00:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000c04:	edd3 7a00 	vldr	s15, [r3]
 8000c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c0c:	4b4b      	ldr	r3, [pc, #300]	; (8000d3c <computePosition+0x204>)
	   return((uint16_t)(180-(angle*57)));
 8000c0e:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8000d40 <computePosition+0x208>
 8000c12:	edc3 6a00 	vstr	s13, [r3]
   if (y < 0){
 8000c16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	   return((uint16_t)(180-(angle*57)));
 8000c1a:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8000d44 <computePosition+0x20c>
 8000c1e:	4a4a      	ldr	r2, [pc, #296]	; (8000d48 <computePosition+0x210>)
   if (y < 0){
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	   return((uint16_t)(180-(angle*57)));
 8000c24:	bf4c      	ite	mi
 8000c26:	eee7 7a66 	vfmsmi.f32	s15, s14, s13
	   return((uint16_t)(180+(angle*57)));
 8000c2a:	eee7 7a26 	vfmapl.f32	s15, s14, s13
 8000c2e:	ed82 7a00 	vstr	s14, [r2]
 8000c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 8000c36:	4a45      	ldr	r2, [pc, #276]	; (8000d4c <computePosition+0x214>)
	   return((uint16_t)(180+(angle*57)));
 8000c38:	ee17 3a90 	vmov	r3, s15
 8000c3c:	b29b      	uxth	r3, r3
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 8000c3e:	b21c      	sxth	r4, r3
	if(theta < 0){
 8000c40:	2c00      	cmp	r4, #0
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 8000c42:	8014      	strh	r4, [r2, #0]
	if(theta < 0){
 8000c44:	db4e      	blt.n	8000ce4 <computePosition+0x1ac>
		theta = thetaOld;
 8000c46:	4d42      	ldr	r5, [pc, #264]	; (8000d50 <computePosition+0x218>)
 8000c48:	f9b5 3000 	ldrsh.w	r3, [r5]
	if(theta > 360){
 8000c4c:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
		theta = thetaOld;
 8000c50:	bfc4      	itt	gt
 8000c52:	8013      	strhgt	r3, [r2, #0]
 8000c54:	461c      	movgt	r4, r3
	dTheta = theta - thetaOld;
 8000c56:	1ae3      	subs	r3, r4, r3
 8000c58:	ee08 3a10 	vmov	s16, r3
 8000c5c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	if(dTheta < 100){
 8000c60:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8000d54 <computePosition+0x21c>
	dTheta = mod(dTheta);
 8000c64:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <computePosition+0x220>)
 8000c66:	eeb0 8ac8 	vabs.f32	s16, s16
	if(dTheta < 100){
 8000c6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	dTheta = mod(dTheta);
 8000c72:	ed83 8a00 	vstr	s16, [r3]
	if(dTheta < 100){
 8000c76:	d51f      	bpl.n	8000cb8 <computePosition+0x180>
		speed = (uint16_t)(0.999*speed + dTheta*0.486);
 8000c78:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8000d60 <computePosition+0x228>
 8000c7c:	f8b8 0000 	ldrh.w	r0, [r8]
 8000c80:	f7ff fd26 	bl	80006d0 <__aeabi_i2d>
 8000c84:	a31e      	add	r3, pc, #120	; (adr r3, 8000d00 <computePosition+0x1c8>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	f7ff faa5 	bl	80001d8 <__aeabi_dmul>
 8000c8e:	4606      	mov	r6, r0
 8000c90:	ee18 0a10 	vmov	r0, s16
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fd2d 	bl	80006f4 <__aeabi_f2d>
 8000c9a:	a31b      	add	r3, pc, #108	; (adr r3, 8000d08 <computePosition+0x1d0>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	f7ff fa9a 	bl	80001d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fbc4 	bl	8000438 <__adddf3>
 8000cb0:	f7ff fd78 	bl	80007a4 <__aeabi_d2uiz>
 8000cb4:	f8a8 0000 	strh.w	r0, [r8]
}
 8000cb8:	ecbd 8b04 	vpop	{d8-d9}
	thetaOld = theta;
 8000cbc:	802c      	strh	r4, [r5, #0]
}
 8000cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = (x + abs_y) / (abs_y - x);
 8000cc2:	ee39 9a69 	vsub.f32	s18, s18, s19
 8000cc6:	ee78 7a87 	vadd.f32	s15, s17, s14
 8000cca:	ee79 8a07 	vadd.f32	s17, s18, s14
      angle = c2 - (r*c1);
 8000cce:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <computePosition+0x200>)
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <computePosition+0x224>)
 8000cd2:	ed92 6a00 	vldr	s12, [r2]
 8000cd6:	ed93 7a00 	vldr	s14, [r3]
      r = (x + abs_y) / (abs_y - x);
 8000cda:	eec7 6aa8 	vdiv.f32	s13, s15, s17
      angle = c2 - (r*c1);
 8000cde:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8000ce2:	e793      	b.n	8000c0c <computePosition+0xd4>
		theta += 360;
 8000ce4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ce8:	4d19      	ldr	r5, [pc, #100]	; (8000d50 <computePosition+0x218>)
 8000cea:	b21c      	sxth	r4, r3
 8000cec:	8014      	strh	r4, [r2, #0]
	if(theta > 360){
 8000cee:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000cf2:	e7b0      	b.n	8000c56 <computePosition+0x11e>
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	9abcaf48 	.word	0x9abcaf48
 8000cfc:	3e7ad7f2 	.word	0x3e7ad7f2
 8000d00:	d916872b 	.word	0xd916872b
 8000d04:	3feff7ce 	.word	0x3feff7ce
 8000d08:	be76c8b4 	.word	0xbe76c8b4
 8000d0c:	3fdf1a9f 	.word	0x3fdf1a9f
 8000d10:	200001cc 	.word	0x200001cc
 8000d14:	3eaaaaab 	.word	0x3eaaaaab
 8000d18:	3f13ce56 	.word	0x3f13ce56
 8000d1c:	200001e0 	.word	0x200001e0
 8000d20:	51eb851f 	.word	0x51eb851f
 8000d24:	20000180 	.word	0x20000180
 8000d28:	200001b4 	.word	0x200001b4
 8000d2c:	3f2aaaab 	.word	0x3f2aaaab
 8000d30:	200001f8 	.word	0x200001f8
 8000d34:	20000124 	.word	0x20000124
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000134 	.word	0x20000134
 8000d40:	43340000 	.word	0x43340000
 8000d44:	42640000 	.word	0x42640000
 8000d48:	20000128 	.word	0x20000128
 8000d4c:	2000018e 	.word	0x2000018e
 8000d50:	200001c0 	.word	0x200001c0
 8000d54:	42c80000 	.word	0x42c80000
 8000d58:	20000170 	.word	0x20000170
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	200001ca 	.word	0x200001ca

08000d64 <predictCurrent>:
}

float d[4] = {1,0.75,0.5,0.25};

void predictCurrent(){
	Va = states[i] & 0x01;
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <predictCurrent+0xb8>)
 8000d66:	4a2e      	ldr	r2, [pc, #184]	; (8000e20 <predictCurrent+0xbc>)
 8000d68:	6819      	ldr	r1, [r3, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000d6a:	482e      	ldr	r0, [pc, #184]	; (8000e24 <predictCurrent+0xc0>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <predictCurrent+0xc4>)
	Va = states[i] & 0x01;
 8000d6e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000d72:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <predictCurrent+0xc8>)
 8000d74:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8000e30 <predictCurrent+0xcc>
void predictCurrent(){
 8000d78:	b4f0      	push	{r4, r5, r6, r7}
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000d7a:	8805      	ldrh	r5, [r0, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000d7c:	8818      	ldrh	r0, [r3, #0]
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <predictCurrent+0xd0>)
	Vb = (states[i]>>1) & 0x01;
 8000d80:	4e2d      	ldr	r6, [pc, #180]	; (8000e38 <predictCurrent+0xd4>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000d82:	881f      	ldrh	r7, [r3, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000d84:	8814      	ldrh	r4, [r2, #0]
 8000d86:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <predictCurrent+0xd8>)
	Vb = (states[i]>>1) & 0x01;
 8000d88:	f3c1 0340 	ubfx	r3, r1, #1, #1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000d8c:	fb15 f503 	smulbb	r5, r5, r3
	Vb = (states[i]>>1) & 0x01;
 8000d90:	8033      	strh	r3, [r6, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000d92:	fb10 f003 	smulbb	r0, r0, r3
	Va = states[i] & 0x01;
 8000d96:	f001 0601 	and.w	r6, r1, #1
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <predictCurrent+0xdc>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000d9c:	8812      	ldrh	r2, [r2, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000d9e:	881b      	ldrh	r3, [r3, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000da0:	fb14 5406 	smlabb	r4, r4, r6, r5
	Vc = (states[i]>>2) & 0x01;

	parkTransform(Va,Vb,Vc,&Vdq);

	IdPred = (float)(Vdc*Vdq.d + 2*Idq.d - Edq.d);
 8000da4:	4d27      	ldr	r5, [pc, #156]	; (8000e44 <predictCurrent+0xe0>)
	Vc = (states[i]>>2) & 0x01;
 8000da6:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8000daa:	edd5 5a00 	vldr	s11, [r5]
 8000dae:	ed95 4a01 	vldr	s8, [r5, #4]
	IdPred = (float)(Vdc*Vdq.d + 2*Idq.d - Edq.d);
 8000db2:	4d25      	ldr	r5, [pc, #148]	; (8000e48 <predictCurrent+0xe4>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000db4:	fb16 0007 	smlabb	r0, r6, r7, r0
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000db8:	fb12 4201 	smlabb	r2, r2, r1, r4
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000dbc:	fb11 0303 	smlabb	r3, r1, r3, r0
 8000dc0:	ed95 6a00 	vldr	s12, [r5]
 8000dc4:	edd5 6a01 	vldr	s13, [r5, #4]
	Vc = (states[i]>>2) & 0x01;
 8000dc8:	4c20      	ldr	r4, [pc, #128]	; (8000e4c <predictCurrent+0xe8>)
	IdPred = (float)(Vdc*Vdq.d + 2*Idq.d - Edq.d);
 8000dca:	4821      	ldr	r0, [pc, #132]	; (8000e50 <predictCurrent+0xec>)
	Vc = (states[i]>>2) & 0x01;
 8000dcc:	8021      	strh	r1, [r4, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000dce:	ee07 2a10 	vmov	s14, r2
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8000dda:	ee95 6aa4 	vfnms.f32	s12, s11, s9
	IdPred = (float)(Vdc*Vdq.d + 2*Idq.d - Edq.d);
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <predictCurrent+0xf0>)
	Va = states[i] & 0x01;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <predictCurrent+0xf4>)
	IdPred = (float)(Vdc*Vdq.d + 2*Idq.d - Edq.d);
 8000de2:	edd2 5a00 	vldr	s11, [r2]
	Va = states[i] & 0x01;
 8000de6:	801e      	strh	r6, [r3, #0]
	Vc = (states[i]>>2) & 0x01;
 8000de8:	eed4 6a24 	vfnms.f32	s13, s8, s9
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <predictCurrent+0xf8>)
	IqPred = (float)(Vdc*Vdq.q + 2*Idq.q - Edq.q);
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <predictCurrent+0xfc>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000df0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000df8:	ee27 7a05 	vmul.f32	s14, s14, s10
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000dfc:	ee67 7a85 	vmul.f32	s15, s15, s10
	IdPred = (float)(Vdc*Vdq.d + 2*Idq.d - Edq.d);
 8000e00:	eea5 6a87 	vfma.f32	s12, s11, s14
}
 8000e04:	bcf0      	pop	{r4, r5, r6, r7}
	IqPred = (float)(Vdc*Vdq.q + 2*Idq.q - Edq.q);
 8000e06:	eee5 6aa7 	vfma.f32	s13, s11, s15
	IdPred = (float)(Vdc*Vdq.d + 2*Idq.d - Edq.d);
 8000e0a:	ed80 6a00 	vstr	s12, [r0]
	IqPred = (float)(Vdc*Vdq.q + 2*Idq.q - Edq.q);
 8000e0e:	edc2 6a00 	vstr	s13, [r2]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000e12:	ed83 7a00 	vstr	s14, [r3]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000e16:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000194 	.word	0x20000194
 8000e20:	200000cc 	.word	0x200000cc
 8000e24:	20000190 	.word	0x20000190
 8000e28:	20000140 	.word	0x20000140
 8000e2c:	200001a2 	.word	0x200001a2
 8000e30:	3aaaaaab 	.word	0x3aaaaaab
 8000e34:	200001c6 	.word	0x200001c6
 8000e38:	200001c4 	.word	0x200001c4
 8000e3c:	200001d8 	.word	0x200001d8
 8000e40:	20000174 	.word	0x20000174
 8000e44:	200001e4 	.word	0x200001e4
 8000e48:	200001b8 	.word	0x200001b8
 8000e4c:	200001a4 	.word	0x200001a4
 8000e50:	2000017c 	.word	0x2000017c
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000182 	.word	0x20000182
 8000e5c:	20000184 	.word	0x20000184
 8000e60:	200001dc 	.word	0x200001dc

08000e64 <modelPredictiveControl>:

void modelPredictiveControl(){
 8000e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sin000 = sin2(theta);
 8000e68:	4b8a      	ldr	r3, [pc, #552]	; (8001094 <modelPredictiveControl+0x230>)
		return ((360+theta) - 360*(1+(theta/360)));
 8000e6a:	4a8b      	ldr	r2, [pc, #556]	; (8001098 <modelPredictiveControl+0x234>)
	sin000 = sin2(theta);
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
		return ((360+theta) - 360*(1+(theta/360)));
 8000e70:	fb82 1203 	smull	r1, r2, r2, r3
 8000e74:	18d1      	adds	r1, r2, r3
	if(theta < 0){
 8000e76:	2b00      	cmp	r3, #0
		return ((360+theta) - 360*(1+(theta/360)));
 8000e78:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000e7c:	ebc2 2221 	rsb	r2, r2, r1, asr #8
	if(theta < 0){
 8000e80:	f2c0 8224 	blt.w	80012cc <modelPredictiveControl+0x468>
		return (theta - 360*(theta/360));
 8000e84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e88:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 8000e92:	b291      	uxth	r1, r2
 8000e94:	b212      	sxth	r2, r2
  if(theta <= 90){
 8000e96:	2a5a      	cmp	r2, #90	; 0x5a
 8000e98:	dd11      	ble.n	8000ebe <modelPredictiveControl+0x5a>
  } else if(theta > 90 && theta <=180){
 8000e9a:	f1a1 005b 	sub.w	r0, r1, #91	; 0x5b
 8000e9e:	2859      	cmp	r0, #89	; 0x59
 8000ea0:	d90b      	bls.n	8000eba <modelPredictiveControl+0x56>
  } else if(theta > 180 && theta <= 270){
 8000ea2:	39b5      	subs	r1, #181	; 0xb5
 8000ea4:	2959      	cmp	r1, #89	; 0x59
    return -sinTable[360 - theta];
 8000ea6:	487d      	ldr	r0, [pc, #500]	; (800109c <modelPredictiveControl+0x238>)
    return -sinTable[theta - 180];
 8000ea8:	bf94      	ite	ls
 8000eaa:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - theta];
 8000eac:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000eb0:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 8000eb4:	4264      	negs	r4, r4
 8000eb6:	b224      	sxth	r4, r4
 8000eb8:	e004      	b.n	8000ec4 <modelPredictiveControl+0x60>
    return sinTable[180 - theta];
 8000eba:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000ebe:	4877      	ldr	r0, [pc, #476]	; (800109c <modelPredictiveControl+0x238>)
 8000ec0:	f930 4012 	ldrsh.w	r4, [r0, r2, lsl #1]
	sin000 = sin2(theta);
 8000ec4:	4d76      	ldr	r5, [pc, #472]	; (80010a0 <modelPredictiveControl+0x23c>)
  return sin2(theta+90);
 8000ec6:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 8000eca:	b20a      	sxth	r2, r1
	if(theta < 0){
 8000ecc:	2a00      	cmp	r2, #0
	sin000 = sin2(theta);
 8000ece:	802c      	strh	r4, [r5, #0]
  return sin2(theta+90);
 8000ed0:	b289      	uxth	r1, r1
	if(theta < 0){
 8000ed2:	f2c0 81e7 	blt.w	80012a4 <modelPredictiveControl+0x440>
		return (theta - 360*(theta/360));
 8000ed6:	4d70      	ldr	r5, [pc, #448]	; (8001098 <modelPredictiveControl+0x234>)
 8000ed8:	fb85 6502 	smull	r6, r5, r5, r2
 8000edc:	4415      	add	r5, r2
 8000ede:	17d2      	asrs	r2, r2, #31
 8000ee0:	ebc2 2225 	rsb	r2, r2, r5, asr #8
 8000ee4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ee8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000eec:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 8000ef0:	b291      	uxth	r1, r2
 8000ef2:	b212      	sxth	r2, r2
  if(theta <= 90){
 8000ef4:	2a5a      	cmp	r2, #90	; 0x5a
 8000ef6:	dd10      	ble.n	8000f1a <modelPredictiveControl+0xb6>
  } else if(theta > 90 && theta <=180){
 8000ef8:	f1a1 055b 	sub.w	r5, r1, #91	; 0x5b
 8000efc:	2d59      	cmp	r5, #89	; 0x59
 8000efe:	d90a      	bls.n	8000f16 <modelPredictiveControl+0xb2>
  } else if(theta > 180 && theta <= 270){
 8000f00:	39b5      	subs	r1, #181	; 0xb5
 8000f02:	2959      	cmp	r1, #89	; 0x59
    return -sinTable[theta - 180];
 8000f04:	bf94      	ite	ls
 8000f06:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - theta];
 8000f08:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000f0c:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
 8000f10:	4249      	negs	r1, r1
 8000f12:	b209      	sxth	r1, r1
 8000f14:	e003      	b.n	8000f1e <modelPredictiveControl+0xba>
    return sinTable[180 - theta];
 8000f16:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000f1a:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
	cos000 = cos2(theta);
 8000f1e:	4e61      	ldr	r6, [pc, #388]	; (80010a4 <modelPredictiveControl+0x240>)
	sin120 = sin2(theta+120);
 8000f20:	f103 0578 	add.w	r5, r3, #120	; 0x78
 8000f24:	b22a      	sxth	r2, r5
	if(theta < 0){
 8000f26:	2a00      	cmp	r2, #0
	cos000 = cos2(theta);
 8000f28:	8031      	strh	r1, [r6, #0]
	sin120 = sin2(theta+120);
 8000f2a:	b2ad      	uxth	r5, r5
	if(theta < 0){
 8000f2c:	f2c0 81a6 	blt.w	800127c <modelPredictiveControl+0x418>
		return (theta - 360*(theta/360));
 8000f30:	4e59      	ldr	r6, [pc, #356]	; (8001098 <modelPredictiveControl+0x234>)
 8000f32:	fb86 7602 	smull	r7, r6, r6, r2
 8000f36:	4416      	add	r6, r2
 8000f38:	17d2      	asrs	r2, r2, #31
 8000f3a:	ebc2 2226 	rsb	r2, r2, r6, asr #8
 8000f3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f42:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000f46:	eba5 02c2 	sub.w	r2, r5, r2, lsl #3
 8000f4a:	b295      	uxth	r5, r2
 8000f4c:	b212      	sxth	r2, r2
  if(theta <= 90){
 8000f4e:	2a5a      	cmp	r2, #90	; 0x5a
 8000f50:	dd10      	ble.n	8000f74 <modelPredictiveControl+0x110>
  } else if(theta > 90 && theta <=180){
 8000f52:	f1a5 065b 	sub.w	r6, r5, #91	; 0x5b
 8000f56:	2e59      	cmp	r6, #89	; 0x59
 8000f58:	d90a      	bls.n	8000f70 <modelPredictiveControl+0x10c>
  } else if(theta > 180 && theta <= 270){
 8000f5a:	3db5      	subs	r5, #181	; 0xb5
 8000f5c:	2d59      	cmp	r5, #89	; 0x59
    return -sinTable[theta - 180];
 8000f5e:	bf94      	ite	ls
 8000f60:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - theta];
 8000f62:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000f66:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
 8000f6a:	4276      	negs	r6, r6
 8000f6c:	b236      	sxth	r6, r6
 8000f6e:	e003      	b.n	8000f78 <modelPredictiveControl+0x114>
    return sinTable[180 - theta];
 8000f70:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000f74:	f930 6012 	ldrsh.w	r6, [r0, r2, lsl #1]
	sin120 = sin2(theta+120);
 8000f78:	4f4b      	ldr	r7, [pc, #300]	; (80010a8 <modelPredictiveControl+0x244>)
	sin240 = sin2(theta+240);
 8000f7a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8000f7e:	b22a      	sxth	r2, r5
	if(theta < 0){
 8000f80:	2a00      	cmp	r2, #0
	sin120 = sin2(theta+120);
 8000f82:	803e      	strh	r6, [r7, #0]
	sin240 = sin2(theta+240);
 8000f84:	b2ad      	uxth	r5, r5
	if(theta < 0){
 8000f86:	f2c0 8165 	blt.w	8001254 <modelPredictiveControl+0x3f0>
		return (theta - 360*(theta/360));
 8000f8a:	4f43      	ldr	r7, [pc, #268]	; (8001098 <modelPredictiveControl+0x234>)
 8000f8c:	fb87 c702 	smull	ip, r7, r7, r2
 8000f90:	4417      	add	r7, r2
 8000f92:	17d2      	asrs	r2, r2, #31
 8000f94:	ebc2 2227 	rsb	r2, r2, r7, asr #8
 8000f98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f9c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000fa0:	eba5 05c2 	sub.w	r5, r5, r2, lsl #3
 8000fa4:	b2aa      	uxth	r2, r5
 8000fa6:	b22d      	sxth	r5, r5
  if(theta <= 90){
 8000fa8:	2d5a      	cmp	r5, #90	; 0x5a
 8000faa:	dd10      	ble.n	8000fce <modelPredictiveControl+0x16a>
  } else if(theta > 90 && theta <=180){
 8000fac:	f1a2 075b 	sub.w	r7, r2, #91	; 0x5b
 8000fb0:	2f59      	cmp	r7, #89	; 0x59
 8000fb2:	d90a      	bls.n	8000fca <modelPredictiveControl+0x166>
  } else if(theta > 180 && theta <= 270){
 8000fb4:	3ab5      	subs	r2, #181	; 0xb5
 8000fb6:	2a59      	cmp	r2, #89	; 0x59
    return -sinTable[theta - 180];
 8000fb8:	bf94      	ite	ls
 8000fba:	3db4      	subls	r5, #180	; 0xb4
    return -sinTable[360 - theta];
 8000fbc:	f5c5 75b4 	rsbhi	r5, r5, #360	; 0x168
 8000fc0:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
 8000fc4:	426d      	negs	r5, r5
 8000fc6:	b22d      	sxth	r5, r5
 8000fc8:	e003      	b.n	8000fd2 <modelPredictiveControl+0x16e>
    return sinTable[180 - theta];
 8000fca:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8000fce:	f930 5015 	ldrsh.w	r5, [r0, r5, lsl #1]
	sin240 = sin2(theta+240);
 8000fd2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80010ac <modelPredictiveControl+0x248>
  return sin2(theta+90);
 8000fd6:	f103 07d2 	add.w	r7, r3, #210	; 0xd2
 8000fda:	b23a      	sxth	r2, r7
	if(theta < 0){
 8000fdc:	2a00      	cmp	r2, #0
	sin240 = sin2(theta+240);
 8000fde:	f8ac 5000 	strh.w	r5, [ip]
  return sin2(theta+90);
 8000fe2:	b2bf      	uxth	r7, r7
	if(theta < 0){
 8000fe4:	f2c0 8196 	blt.w	8001314 <modelPredictiveControl+0x4b0>
		return (theta - 360*(theta/360));
 8000fe8:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8001098 <modelPredictiveControl+0x234>
 8000fec:	fb8c ec02 	smull	lr, ip, ip, r2
 8000ff0:	4494      	add	ip, r2
 8000ff2:	17d2      	asrs	r2, r2, #31
 8000ff4:	ebc2 222c 	rsb	r2, r2, ip, asr #8
 8000ff8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ffc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001000:	eba7 02c2 	sub.w	r2, r7, r2, lsl #3
 8001004:	b297      	uxth	r7, r2
 8001006:	b212      	sxth	r2, r2
  if(theta <= 90){
 8001008:	2a5a      	cmp	r2, #90	; 0x5a
 800100a:	dd11      	ble.n	8001030 <modelPredictiveControl+0x1cc>
  } else if(theta > 90 && theta <=180){
 800100c:	f1a7 0c5b 	sub.w	ip, r7, #91	; 0x5b
 8001010:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
 8001014:	d90a      	bls.n	800102c <modelPredictiveControl+0x1c8>
  } else if(theta > 180 && theta <= 270){
 8001016:	3fb5      	subs	r7, #181	; 0xb5
 8001018:	2f59      	cmp	r7, #89	; 0x59
    return -sinTable[theta - 180];
 800101a:	bf94      	ite	ls
 800101c:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - theta];
 800101e:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8001022:	f830 7012 	ldrh.w	r7, [r0, r2, lsl #1]
 8001026:	427f      	negs	r7, r7
 8001028:	b23f      	sxth	r7, r7
 800102a:	e003      	b.n	8001034 <modelPredictiveControl+0x1d0>
    return sinTable[180 - theta];
 800102c:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8001030:	f930 7012 	ldrsh.w	r7, [r0, r2, lsl #1]
	cos120 = cos2(theta+120);
 8001034:	f8df e078 	ldr.w	lr, [pc, #120]	; 80010b0 <modelPredictiveControl+0x24c>
  return sin2(theta+90);
 8001038:	f503 7ca5 	add.w	ip, r3, #330	; 0x14a
 800103c:	fa0f f28c 	sxth.w	r2, ip
	if(theta < 0){
 8001040:	2a00      	cmp	r2, #0
	cos120 = cos2(theta+120);
 8001042:	f8ae 7000 	strh.w	r7, [lr]
  return sin2(theta+90);
 8001046:	fa1f fc8c 	uxth.w	ip, ip
	if(theta < 0){
 800104a:	f2c0 814d 	blt.w	80012e8 <modelPredictiveControl+0x484>
		return (theta - 360*(theta/360));
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <modelPredictiveControl+0x234>)
 8001050:	fb83 e302 	smull	lr, r3, r3, r2
 8001054:	4413      	add	r3, r2
 8001056:	17d2      	asrs	r2, r2, #31
 8001058:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 800105c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001060:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001064:	ebac 02c2 	sub.w	r2, ip, r2, lsl #3
 8001068:	fa1f fc82 	uxth.w	ip, r2
 800106c:	b213      	sxth	r3, r2
  if(theta <= 90){
 800106e:	2b5a      	cmp	r3, #90	; 0x5a
 8001070:	dd22      	ble.n	80010b8 <modelPredictiveControl+0x254>
  } else if(theta > 90 && theta <=180){
 8001072:	f1ac 025b 	sub.w	r2, ip, #91	; 0x5b
 8001076:	2a59      	cmp	r2, #89	; 0x59
 8001078:	d91c      	bls.n	80010b4 <modelPredictiveControl+0x250>
  } else if(theta > 180 && theta <= 270){
 800107a:	f1ac 0cb5 	sub.w	ip, ip, #181	; 0xb5
 800107e:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
    return -sinTable[theta - 180];
 8001082:	bf94      	ite	ls
 8001084:	3bb4      	subls	r3, #180	; 0xb4
    return -sinTable[360 - theta];
 8001086:	f5c3 73b4 	rsbhi	r3, r3, #360	; 0x168
 800108a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800108e:	425b      	negs	r3, r3
 8001090:	b21b      	sxth	r3, r3
 8001092:	e013      	b.n	80010bc <modelPredictiveControl+0x258>
 8001094:	2000018e 	.word	0x2000018e
 8001098:	b60b60b7 	.word	0xb60b60b7
 800109c:	20000018 	.word	0x20000018
 80010a0:	200001a2 	.word	0x200001a2
 80010a4:	200001c6 	.word	0x200001c6
 80010a8:	200001d8 	.word	0x200001d8
 80010ac:	20000190 	.word	0x20000190
 80010b0:	20000174 	.word	0x20000174
    return sinTable[180 - theta];
 80010b4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80010b8:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
	computeSinCos();

	Ia = ((short)Iab[0] - 1945);
 80010bc:	4a9f      	ldr	r2, [pc, #636]	; (800133c <modelPredictiveControl+0x4d8>)
	Ib = ((short)Iab[1] - 1923);
	Ic = -(Ia+Ib);

	parkTransform(Ia,Ib,Ic,&Idq);
	parkTransform(Ea,Eb,Ec,&Edq);
 80010be:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8001374 <modelPredictiveControl+0x510>
 80010c2:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8001378 <modelPredictiveControl+0x514>
 80010c6:	f9bc b000 	ldrsh.w	fp, [ip]
 80010ca:	f9b8 a000 	ldrsh.w	sl, [r8]
 80010ce:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800137c <modelPredictiveControl+0x518>

	Idq.d = Idq.d/1241; // 3.3/4096 = 1/1241
 80010d2:	eddf 5a9b 	vldr	s11, [pc, #620]	; 8001340 <modelPredictiveControl+0x4dc>
	parkTransform(Ea,Eb,Ec,&Edq);
 80010d6:	f9b8 9000 	ldrsh.w	r9, [r8]
	Ic = -(Ia+Ib);
 80010da:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8001380 <modelPredictiveControl+0x51c>
	cost = 100000;

	for(i=0;i<7;i++){
		predictCurrent(i);

		costTemp[i] = ((float)square(mod((short)(IdPred*1000))) + (float)square(mod(500 - (short)(IqPred*1000))))/1000000;
 80010de:	eddf 3a99 	vldr	s7, [pc, #612]	; 8001344 <modelPredictiveControl+0x4e0>
 80010e2:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8001348 <modelPredictiveControl+0x4e4>
	Ib = ((short)Iab[1] - 1923);
 80010e6:	e9d2 0200 	ldrd	r0, r2, [r2]
	Ia = ((short)Iab[0] - 1945);
 80010ea:	f46f 6cf3 	mvn.w	ip, #1944	; 0x798
 80010ee:	4484      	add	ip, r0
	Ib = ((short)Iab[1] - 1923);
 80010f0:	f2a2 7283 	subw	r2, r2, #1923	; 0x783
	Ia = ((short)Iab[0] - 1945);
 80010f4:	fa1f f08c 	uxth.w	r0, ip
	Ic = -(Ia+Ib);
 80010f8:	fa10 f082 	uxtah	r0, r0, r2
	Ib = ((short)Iab[1] - 1923);
 80010fc:	b212      	sxth	r2, r2
	Ia = ((short)Iab[0] - 1945);
 80010fe:	fa0f fc8c 	sxth.w	ip, ip
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8001102:	fb05 f802 	mul.w	r8, r5, r2
	Ic = -(Ia+Ib);
 8001106:	4240      	negs	r0, r0
 8001108:	b200      	sxth	r0, r0
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 800110a:	fb0b f505 	mul.w	r5, fp, r5
 800110e:	fb04 880c 	mla	r8, r4, ip, r8
 8001112:	fb0a 5504 	mla	r5, sl, r4, r5
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8001116:	fb0b fb03 	mul.w	fp, fp, r3
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 800111a:	fb06 8400 	mla	r4, r6, r0, r8
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 800111e:	fb0a bb01 	mla	fp, sl, r1, fp
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8001122:	ee06 4a10 	vmov	s12, r4
 8001126:	fb09 5406 	mla	r4, r9, r6, r5
 800112a:	ee07 4a90 	vmov	s15, r4
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 800112e:	fb09 b407 	mla	r4, r9, r7, fp
 8001132:	ee06 4a90 	vmov	s13, r4
 8001136:	fb02 f403 	mul.w	r4, r2, r3
 800113a:	fb0c 4101 	mla	r1, ip, r1, r4
 800113e:	fb00 1107 	mla	r1, r0, r7, r1
 8001142:	ee07 1a10 	vmov	s14, r1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8001146:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 800114a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8001152:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	Idq.d = Idq.d/1241; // 3.3/4096 = 1/1241
 8001156:	4e7d      	ldr	r6, [pc, #500]	; (800134c <modelPredictiveControl+0x4e8>)
	Edq.d = Edq.d/1241; // 3.3/4096 = 1/1241
 8001158:	4f7d      	ldr	r7, [pc, #500]	; (8001350 <modelPredictiveControl+0x4ec>)
	Ia = ((short)Iab[0] - 1945);
 800115a:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8001384 <modelPredictiveControl+0x520>
	Ib = ((short)Iab[1] - 1923);
 800115e:	4d7d      	ldr	r5, [pc, #500]	; (8001354 <modelPredictiveControl+0x4f0>)
	cos240 = cos2(theta+240);
 8001160:	497d      	ldr	r1, [pc, #500]	; (8001358 <modelPredictiveControl+0x4f4>)
	cost = 100000;
 8001162:	4c7e      	ldr	r4, [pc, #504]	; (800135c <modelPredictiveControl+0x4f8>)
	for(i=0;i<7;i++){
 8001164:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8001388 <modelPredictiveControl+0x524>
	Ic = -(Ia+Ib);
 8001168:	f8ae 0000 	strh.w	r0, [lr]
	Idq.d = Idq.d/1241; // 3.3/4096 = 1/1241
 800116c:	ee26 6a25 	vmul.f32	s12, s12, s11
	Idq.q = Idq.q/1241;
 8001170:	ee27 7a25 	vmul.f32	s14, s14, s11
	Edq.d = Edq.d/1241; // 3.3/4096 = 1/1241
 8001174:	ee67 7aa5 	vmul.f32	s15, s15, s11
	Edq.q = Edq.q/1241;
 8001178:	ee66 6aa5 	vmul.f32	s13, s13, s11
	cost = 100000;
 800117c:	f8df e20c 	ldr.w	lr, [pc, #524]	; 800138c <modelPredictiveControl+0x528>
	Ia = ((short)Iab[0] - 1945);
 8001180:	f8a9 c000 	strh.w	ip, [r9]
	for(i=0;i<7;i++){
 8001184:	2000      	movs	r0, #0
	Ib = ((short)Iab[1] - 1923);
 8001186:	802a      	strh	r2, [r5, #0]
	Idq.d = Idq.d/1241; // 3.3/4096 = 1/1241
 8001188:	ed86 6a00 	vstr	s12, [r6]
	Idq.q = Idq.q/1241;
 800118c:	ed86 7a01 	vstr	s14, [r6, #4]
	Edq.d = Edq.d/1241; // 3.3/4096 = 1/1241
 8001190:	edc7 7a00 	vstr	s15, [r7]
	Edq.q = Edq.q/1241;
 8001194:	edc7 6a01 	vstr	s13, [r7, #4]
 8001198:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8001390 <modelPredictiveControl+0x52c>
 800119c:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8001394 <modelPredictiveControl+0x530>
 80011a0:	4d6f      	ldr	r5, [pc, #444]	; (8001360 <modelPredictiveControl+0x4fc>)
 80011a2:	4e70      	ldr	r6, [pc, #448]	; (8001364 <modelPredictiveControl+0x500>)
		costTemp[i] = ((float)square(mod((short)(IdPred*1000))) + (float)square(mod(500 - (short)(IqPred*1000))))/1000000;
 80011a4:	4f70      	ldr	r7, [pc, #448]	; (8001368 <modelPredictiveControl+0x504>)
	cos240 = cos2(theta+240);
 80011a6:	800b      	strh	r3, [r1, #0]
	cost = 100000;
 80011a8:	f8c4 e000 	str.w	lr, [r4]
	for(i=0;i<7;i++){
 80011ac:	f8c8 0000 	str.w	r0, [r8]
		predictCurrent(i);
 80011b0:	f7ff fdd8 	bl	8000d64 <predictCurrent>
		costTemp[i] = ((float)square(mod((short)(IdPred*1000))) + (float)square(mod(500 - (short)(IqPred*1000))))/1000000;
 80011b4:	edda 7a00 	vldr	s15, [sl]
 80011b8:	ed99 7a00 	vldr	s14, [r9]

		if(costTemp[i] < cost){
 80011bc:	edd4 6a00 	vldr	s13, [r4]
		costTemp[i] = ((float)square(mod((short)(IdPred*1000))) + (float)square(mod(500 - (short)(IqPred*1000))))/1000000;
 80011c0:	f8d8 1000 	ldr.w	r1, [r8]
 80011c4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80011c8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80011cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80011d4:	ee17 3a90 	vmov	r3, s15
 80011d8:	ee17 2a10 	vmov	r2, s14
 80011dc:	b21b      	sxth	r3, r3
 80011de:	fa0f fc82 	sxth.w	ip, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f5cc 72fa 	rsb	r2, ip, #500	; 0x1f4
 80011e8:	bfb8      	it	lt
 80011ea:	425b      	neglt	r3, r3
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	bfd8      	it	le
 80011f0:	eba7 020c 	suble.w	r2, r7, ip
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	fb03 f303 	mul.w	r3, r3, r3
 80011fa:	fb02 f202 	mul.w	r2, r2, r2
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	ee07 2a10 	vmov	s14, r2
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800120e:	eb05 0e81 	add.w	lr, r5, r1, lsl #2
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
	for(i=0;i<7;i++){
 8001216:	1c48      	adds	r0, r1, #1
		costTemp[i] = ((float)square(mod((short)(IdPred*1000))) + (float)square(mod(500 - (short)(IqPred*1000))))/1000000;
 8001218:	ee67 7a83 	vmul.f32	s15, s15, s6
		if(costTemp[i] < cost){
 800121c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		costTemp[i] = ((float)square(mod((short)(IdPred*1000))) + (float)square(mod(500 - (short)(IqPred*1000))))/1000000;
 8001224:	edce 7a00 	vstr	s15, [lr]
		if(costTemp[i] < cost){
 8001228:	d50e      	bpl.n	8001248 <modelPredictiveControl+0x3e4>
	for(i=0;i<7;i++){
 800122a:	2806      	cmp	r0, #6
			optimalVector = i;
 800122c:	6031      	str	r1, [r6, #0]
			cost = costTemp[i];
 800122e:	edc4 7a00 	vstr	s15, [r4]
	for(i=0;i<7;i++){
 8001232:	f8c8 0000 	str.w	r0, [r8]
 8001236:	ddbb      	ble.n	80011b0 <modelPredictiveControl+0x34c>
		}
	}

	wt = optimalVector*60;
 8001238:	6833      	ldr	r3, [r6, #0]
 800123a:	4a4c      	ldr	r2, [pc, #304]	; (800136c <modelPredictiveControl+0x508>)
 800123c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	8013      	strh	r3, [r2, #0]
}
 8001244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(i=0;i<7;i++){
 8001248:	1c48      	adds	r0, r1, #1
 800124a:	2806      	cmp	r0, #6
 800124c:	f8c8 0000 	str.w	r0, [r8]
 8001250:	ddae      	ble.n	80011b0 <modelPredictiveControl+0x34c>
 8001252:	e7f1      	b.n	8001238 <modelPredictiveControl+0x3d4>
		return ((360+theta) - 360*(1+(theta/360)));
 8001254:	4d46      	ldr	r5, [pc, #280]	; (8001370 <modelPredictiveControl+0x50c>)
 8001256:	fb85 7502 	smull	r7, r5, r5, r2
 800125a:	18af      	adds	r7, r5, r2
 800125c:	17d5      	asrs	r5, r2, #31
 800125e:	ebc5 2527 	rsb	r5, r5, r7, asr #8
 8001262:	b22d      	sxth	r5, r5
 8001264:	3501      	adds	r5, #1
 8001266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800126a:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
 800126e:	f503 7516 	add.w	r5, r3, #600	; 0x258
 8001272:	eba5 05c2 	sub.w	r5, r5, r2, lsl #3
 8001276:	b2aa      	uxth	r2, r5
 8001278:	b22d      	sxth	r5, r5
 800127a:	e695      	b.n	8000fa8 <modelPredictiveControl+0x144>
 800127c:	4d3c      	ldr	r5, [pc, #240]	; (8001370 <modelPredictiveControl+0x50c>)
 800127e:	fb85 6502 	smull	r6, r5, r5, r2
 8001282:	4415      	add	r5, r2
 8001284:	17d2      	asrs	r2, r2, #31
 8001286:	ebc2 2225 	rsb	r2, r2, r5, asr #8
 800128a:	b212      	sxth	r2, r2
 800128c:	3201      	adds	r2, #1
 800128e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001292:	f503 75f0 	add.w	r5, r3, #480	; 0x1e0
 8001296:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800129a:	eba5 02c2 	sub.w	r2, r5, r2, lsl #3
 800129e:	b295      	uxth	r5, r2
 80012a0:	b212      	sxth	r2, r2
 80012a2:	e654      	b.n	8000f4e <modelPredictiveControl+0xea>
 80012a4:	4932      	ldr	r1, [pc, #200]	; (8001370 <modelPredictiveControl+0x50c>)
 80012a6:	fb81 5102 	smull	r5, r1, r1, r2
 80012aa:	4411      	add	r1, r2
 80012ac:	17d2      	asrs	r2, r2, #31
 80012ae:	ebc2 2221 	rsb	r2, r2, r1, asr #8
 80012b2:	b212      	sxth	r2, r2
 80012b4:	3201      	adds	r2, #1
 80012b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012ba:	f503 71e1 	add.w	r1, r3, #450	; 0x1c2
 80012be:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80012c2:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80012c6:	b291      	uxth	r1, r2
 80012c8:	b212      	sxth	r2, r2
 80012ca:	e613      	b.n	8000ef4 <modelPredictiveControl+0x90>
 80012cc:	b212      	sxth	r2, r2
 80012ce:	3201      	adds	r2, #1
 80012d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80012da:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80012de:	eba2 02c1 	sub.w	r2, r2, r1, lsl #3
 80012e2:	b291      	uxth	r1, r2
 80012e4:	b212      	sxth	r2, r2
 80012e6:	e5d6      	b.n	8000e96 <modelPredictiveControl+0x32>
 80012e8:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001370 <modelPredictiveControl+0x50c>
 80012ec:	fb8c ec02 	smull	lr, ip, ip, r2
 80012f0:	4494      	add	ip, r2
 80012f2:	17d2      	asrs	r2, r2, #31
 80012f4:	ebc2 222c 	rsb	r2, r2, ip, asr #8
 80012f8:	b212      	sxth	r2, r2
 80012fa:	3201      	adds	r2, #1
 80012fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001300:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8001304:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001308:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
 800130c:	fa1f fc83 	uxth.w	ip, r3
 8001310:	b21b      	sxth	r3, r3
 8001312:	e6ac      	b.n	800106e <modelPredictiveControl+0x20a>
 8001314:	4f16      	ldr	r7, [pc, #88]	; (8001370 <modelPredictiveControl+0x50c>)
 8001316:	fb87 c702 	smull	ip, r7, r7, r2
 800131a:	4417      	add	r7, r2
 800131c:	17d2      	asrs	r2, r2, #31
 800131e:	ebc2 2227 	rsb	r2, r2, r7, asr #8
 8001322:	b212      	sxth	r2, r2
 8001324:	3201      	adds	r2, #1
 8001326:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800132a:	ebc2 1702 	rsb	r7, r2, r2, lsl #4
 800132e:	f203 223a 	addw	r2, r3, #570	; 0x23a
 8001332:	eba2 02c7 	sub.w	r2, r2, r7, lsl #3
 8001336:	b297      	uxth	r7, r2
 8001338:	b212      	sxth	r2, r2
 800133a:	e665      	b.n	8001008 <modelPredictiveControl+0x1a4>
 800133c:	20000198 	.word	0x20000198
 8001340:	358cd2f6 	.word	0x358cd2f6
 8001344:	447a0000 	.word	0x447a0000
 8001348:	358637bd 	.word	0x358637bd
 800134c:	200001e4 	.word	0x200001e4
 8001350:	200001b8 	.word	0x200001b8
 8001354:	200001a0 	.word	0x200001a0
 8001358:	20000140 	.word	0x20000140
 800135c:	20000178 	.word	0x20000178
 8001360:	2000014c 	.word	0x2000014c
 8001364:	20000130 	.word	0x20000130
 8001368:	fffffe0c 	.word	0xfffffe0c
 800136c:	20000138 	.word	0x20000138
 8001370:	b60b60b7 	.word	0xb60b60b7
 8001374:	200001e0 	.word	0x200001e0
 8001378:	200001b4 	.word	0x200001b4
 800137c:	20000180 	.word	0x20000180
 8001380:	200001c2 	.word	0x200001c2
 8001384:	20000148 	.word	0x20000148
 8001388:	20000194 	.word	0x20000194
 800138c:	47c35000 	.word	0x47c35000
 8001390:	2000017c 	.word	0x2000017c
 8001394:	200001dc 	.word	0x200001dc

08001398 <startStop>:
/**
 * This function controls start/stop of motor with Blue button
 *
 */
void startStop(){
	if(!run){
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <startStop+0x10>)
 800139a:	7813      	ldrb	r3, [r2, #0]
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	095b      	lsrs	r3, r3, #5
 80013a2:	7013      	strb	r3, [r2, #0]
		run = 1;
	} else {
		run = 0;
	}
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000014 	.word	0x20000014

080013ac <executeAll>:
/**
 * This function controls the execution and ADC measurement
 *
 */
char executionCount = 0;
void executeAll(){
 80013ac:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA(&hadc2, Eab, 2);
 80013ae:	4913      	ldr	r1, [pc, #76]	; (80013fc <executeAll+0x50>)
 80013b0:	4813      	ldr	r0, [pc, #76]	; (8001400 <executeAll+0x54>)
 80013b2:	2202      	movs	r2, #2
 80013b4:	f000 fec2 	bl	800213c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, Iab, 2);
 80013b8:	4912      	ldr	r1, [pc, #72]	; (8001404 <executeAll+0x58>)
 80013ba:	4813      	ldr	r0, [pc, #76]	; (8001408 <executeAll+0x5c>)
 80013bc:	2202      	movs	r2, #2
 80013be:	f000 febd 	bl	800213c <HAL_ADC_Start_DMA>
	computePosition();
 80013c2:	f7ff fbb9 	bl	8000b38 <computePosition>
	if(run == 1){
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <executeAll+0x60>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d013      	beq.n	80013f6 <executeAll+0x4a>
		TIM1->CCR1 = 0;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <executeAll+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c
	measureADC();
	SVPWM();
//	if(executionCount == 2){
	//	if(isOpenLoopComplete){
	//		sixStepControl();
			modelPredictiveControl();
 80013d8:	f7ff fd44 	bl	8000e64 <modelPredictiveControl>
	wt+=1;
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <executeAll+0x68>)
 80013de:	8813      	ldrh	r3, [r2, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b29b      	uxth	r3, r3
	if(wt >= 360){
 80013e4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
		wt = 0;
 80013e8:	bf28      	it	cs
 80013ea:	2300      	movcs	r3, #0
 80013ec:	8013      	strh	r3, [r2, #0]
		openLoopControl();


		executionCount = 0;
//	}
	executionCount++;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <executeAll+0x6c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	bd08      	pop	{r3, pc}
 80013f6:	f7ff fa45 	bl	8000884 <SVPWM.part.0>
 80013fa:	e7ed      	b.n	80013d8 <executeAll+0x2c>
 80013fc:	200001cc 	.word	0x200001cc
 8001400:	2000024c 	.word	0x2000024c
 8001404:	20000198 	.word	0x20000198
 8001408:	2000029c 	.word	0x2000029c
 800140c:	20000014 	.word	0x20000014
 8001410:	40012c00 	.word	0x40012c00
 8001414:	20000138 	.word	0x20000138
 8001418:	2000012c 	.word	0x2000012c

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b530      	push	{r4, r5, lr}
 800141e:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001420:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001422:	2258      	movs	r2, #88	; 0x58
 8001424:	a810      	add	r0, sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001426:	e9cd 1100 	strd	r1, r1, [sp]
 800142a:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	910a      	str	r1, [sp, #40]	; 0x28
 8001430:	9108      	str	r1, [sp, #32]
 8001432:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001436:	f003 faab 	bl	8004990 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2202      	movs	r2, #2
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144e:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001450:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001454:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001458:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	9109      	str	r1, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145e:	f001 fbbf 	bl	8002be0 <HAL_RCC_OscConfig>
 8001462:	b108      	cbz	r0, 8001468 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001466:	e7fe      	b.n	8001466 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001468:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146a:	240f      	movs	r4, #15
 800146c:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001476:	4668      	mov	r0, sp
 8001478:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	e9cd 4500 	strd	r4, r5, [sp]
 800147e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001482:	f001 fe9b 	bl	80031bc <HAL_RCC_ClockConfig>
 8001486:	b108      	cbz	r0, 800148c <SystemClock_Config+0x70>
 8001488:	b672      	cpsid	i
  while (1)
 800148a:	e7fe      	b.n	800148a <SystemClock_Config+0x6e>
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800148c:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8001490:	f241 0182 	movw	r1, #4226	; 0x1082
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 800149a:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800149c:	9213      	str	r2, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800149e:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80014a0:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a2:	f001 ffd7 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	b108      	cbz	r0, 80014ac <SystemClock_Config+0x90>
 80014a8:	b672      	cpsid	i
  while (1)
 80014aa:	e7fe      	b.n	80014aa <SystemClock_Config+0x8e>
}
 80014ac:	b027      	add	sp, #156	; 0x9c
 80014ae:	bd30      	pop	{r4, r5, pc}

080014b0 <main>:
{
 80014b0:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	2400      	movs	r4, #0
{
 80014b4:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 80014b6:	f000 fc25 	bl	8001d04 <HAL_Init>
  SystemClock_Config();
 80014ba:	f7ff ffaf 	bl	800141c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80014c2:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8001788 <main+0x2d8>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d0:	4da9      	ldr	r5, [pc, #676]	; (8001778 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014d6:	f8c8 3014 	str.w	r3, [r8, #20]
 80014da:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80014de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80014ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ee:	f8c8 3014 	str.w	r3, [r8, #20]
 80014f2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	9304      	str	r3, [sp, #16]
 80014fc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001506:	f8c8 3014 	str.w	r3, [r8, #20]
 800150a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001514:	4622      	mov	r2, r4
 8001516:	2120      	movs	r1, #32
 8001518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800151e:	f001 fb4b 	bl	8002bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001522:	4896      	ldr	r0, [pc, #600]	; (800177c <main+0x2cc>)
 8001524:	4622      	mov	r2, r4
 8001526:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800152a:	f001 fb45 	bl	8002bb8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001536:	4891      	ldr	r0, [pc, #580]	; (800177c <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800153a:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800153c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001540:	2600      	movs	r6, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001542:	f001 fa3d 	bl	80029c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001546:	2700      	movs	r7, #0
 8001548:	2220      	movs	r2, #32
 800154a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	a916      	add	r1, sp, #88	; 0x58
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001552:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001556:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f001 fa31 	bl	80029c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800155e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001562:	2301      	movs	r3, #1
 8001564:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	4884      	ldr	r0, [pc, #528]	; (800177c <main+0x2cc>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800156a:	2303      	movs	r3, #3
 800156c:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8001570:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f001 fa24 	bl	80029c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001578:	4622      	mov	r2, r4
 800157a:	2103      	movs	r1, #3
 800157c:	2028      	movs	r0, #40	; 0x28
 800157e:	f001 f939 	bl	80027f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001582:	2028      	movs	r0, #40	; 0x28
 8001584:	f001 f96e 	bl	8002864 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001588:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158c:	f885 4020 	strb.w	r4, [r5, #32]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	f8c8 3014 	str.w	r3, [r8, #20]
 8001598:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800159c:	62ec      	str	r4, [r5, #44]	; 0x2c
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015a6:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015aa:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	f8c8 3014 	str.w	r3, [r8, #20]
 80015b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015ba:	606c      	str	r4, [r5, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	9302      	str	r3, [sp, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015c2:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.NbrOfConversion = 2;
 80015c6:	2302      	movs	r3, #2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015c8:	9802      	ldr	r0, [sp, #8]
  hadc1.Init.NbrOfConversion = 2;
 80015ca:	61eb      	str	r3, [r5, #28]
  hadc1.Instance = ADC1;
 80015cc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d0:	2301      	movs	r3, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d2:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d6:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015d8:	832a      	strh	r2, [r5, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015da:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80015de:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80015e2:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 80015e6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ee:	e9c5 3804 	strd	r3, r8, [r5, #16]
  ADC_MultiModeTypeDef multimode = {0};
 80015f2:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015f4:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Instance = ADC1;
 80015f6:	6029      	str	r1, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f8:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015fa:	f000 fc49 	bl	8001e90 <HAL_ADC_Init>
 80015fe:	b108      	cbz	r0, 8001604 <main+0x154>
 8001600:	b672      	cpsid	i
  while (1)
 8001602:	e7fe      	b.n	8001602 <main+0x152>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001604:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001606:	a90e      	add	r1, sp, #56	; 0x38
 8001608:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800160a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800160c:	f001 f84e 	bl	80026ac <HAL_ADCEx_MultiModeConfigChannel>
 8001610:	b108      	cbz	r0, 8001616 <main+0x166>
 8001612:	b672      	cpsid	i
  while (1)
 8001614:	e7fe      	b.n	8001614 <main+0x164>
  sConfig.Channel = ADC_CHANNEL_1;
 8001616:	2201      	movs	r2, #1
 8001618:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161a:	a916      	add	r1, sp, #88	; 0x58
 800161c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 800161e:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8001622:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8001626:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162a:	f000 fe7f 	bl	800232c <HAL_ADC_ConfigChannel>
 800162e:	b108      	cbz	r0, 8001634 <main+0x184>
 8001630:	b672      	cpsid	i
  while (1)
 8001632:	e7fe      	b.n	8001632 <main+0x182>
  sConfig.Channel = ADC_CHANNEL_7;
 8001634:	2207      	movs	r2, #7
 8001636:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	4628      	mov	r0, r5
 800163a:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_7;
 800163c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	f000 fe74 	bl	800232c <HAL_ADC_ConfigChannel>
 8001644:	4604      	mov	r4, r0
 8001646:	b108      	cbz	r0, 800164c <main+0x19c>
 8001648:	b672      	cpsid	i
  while (1)
 800164a:	e7fe      	b.n	800164a <main+0x19a>
  htim1.Instance = TIM1;
 800164c:	4d4c      	ldr	r5, [pc, #304]	; (8001780 <main+0x2d0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001650:	4601      	mov	r1, r0
 8001652:	222c      	movs	r2, #44	; 0x2c
 8001654:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001656:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800165a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 800165e:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800166a:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166c:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001670:	f003 f98e 	bl	8004990 <memset>
  htim1.Instance = TIM1;
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <main+0x2d4>)
 8001676:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 13;
 8001678:	200d      	movs	r0, #13
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800167a:	2120      	movs	r1, #32
  htim1.Init.Period = 517;
 800167c:	f240 2205 	movw	r2, #517	; 0x205
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001680:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 13;
 8001682:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001684:	4628      	mov	r0, r5
  htim1.Init.Period = 517;
 8001686:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800168c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001690:	f002 f8c4 	bl	800381c <HAL_TIM_Base_Init>
 8001694:	b108      	cbz	r0, 800169a <main+0x1ea>
 8001696:	b672      	cpsid	i
  while (1)
 8001698:	e7fe      	b.n	8001698 <main+0x1e8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800169e:	a90a      	add	r1, sp, #40	; 0x28
 80016a0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a4:	f002 fb50 	bl	8003d48 <HAL_TIM_ConfigClockSource>
 80016a8:	b108      	cbz	r0, 80016ae <main+0x1fe>
 80016aa:	b672      	cpsid	i
  while (1)
 80016ac:	e7fe      	b.n	80016ac <main+0x1fc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ae:	4628      	mov	r0, r5
 80016b0:	f002 f94a 	bl	8003948 <HAL_TIM_PWM_Init>
 80016b4:	b108      	cbz	r0, 80016ba <main+0x20a>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0x208>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80016ba:	2270      	movs	r2, #112	; 0x70
 80016bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c2:	a906      	add	r1, sp, #24
 80016c4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80016c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ca:	f002 fe33 	bl	8004334 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	b108      	cbz	r0, 80016d4 <main+0x224>
 80016d0:	b672      	cpsid	i
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <main+0x222>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d4:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80016d8:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016dc:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016de:	2660      	movs	r6, #96	; 0x60
 80016e0:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e2:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	a90e      	add	r1, sp, #56	; 0x38
 80016e6:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e8:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	f002 fcf0 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	b108      	cbz	r0, 80016f6 <main+0x246>
 80016f2:	b672      	cpsid	i
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <main+0x244>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f6:	4642      	mov	r2, r8
 80016f8:	4628      	mov	r0, r5
 80016fa:	a90e      	add	r1, sp, #56	; 0x38
 80016fc:	f002 fce8 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001700:	b108      	cbz	r0, 8001706 <main+0x256>
 8001702:	b672      	cpsid	i
  while (1)
 8001704:	e7fe      	b.n	8001704 <main+0x254>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001706:	481e      	ldr	r0, [pc, #120]	; (8001780 <main+0x2d0>)
 8001708:	2208      	movs	r2, #8
 800170a:	a90e      	add	r1, sp, #56	; 0x38
 800170c:	f002 fce0 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001710:	b108      	cbz	r0, 8001716 <main+0x266>
 8001712:	b672      	cpsid	i
  while (1)
 8001714:	e7fe      	b.n	8001714 <main+0x264>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001716:	481a      	ldr	r0, [pc, #104]	; (8001780 <main+0x2d0>)
 8001718:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800171a:	2470      	movs	r4, #112	; 0x70
 800171c:	f44f 7500 	mov.w	r5, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001720:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001722:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001726:	f002 fcd3 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	b108      	cbz	r0, 8001732 <main+0x282>
 800172e:	b672      	cpsid	i
  while (1)
 8001730:	e7fe      	b.n	8001730 <main+0x280>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001732:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001738:	2300      	movs	r3, #0
 800173a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8001748:	2200      	movs	r2, #0
 800174a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8001752:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001756:	2200      	movs	r2, #0
 8001758:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <main+0x2d0>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800175c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001760:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001762:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8001766:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800176a:	f002 fe3d 	bl	80043e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800176e:	4604      	mov	r4, r0
 8001770:	b160      	cbz	r0, 800178c <main+0x2dc>
 8001772:	b672      	cpsid	i
  while (1)
 8001774:	e7fe      	b.n	8001774 <main+0x2c4>
 8001776:	bf00      	nop
 8001778:	2000029c 	.word	0x2000029c
 800177c:	48000800 	.word	0x48000800
 8001780:	20000374 	.word	0x20000374
 8001784:	40012c00 	.word	0x40012c00
 8001788:	40021000 	.word	0x40021000
  HAL_TIM_MspPostInit(&htim1);
 800178c:	4849      	ldr	r0, [pc, #292]	; (80018b4 <main+0x404>)
 800178e:	f000 f9a7 	bl	8001ae0 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <main+0x408>)
 8001794:	4a49      	ldr	r2, [pc, #292]	; (80018bc <main+0x40c>)
  huart2.Init.BaudRate = 2250000;
 8001796:	484a      	ldr	r0, [pc, #296]	; (80018c0 <main+0x410>)
  huart2.Instance = USART2;
 8001798:	601a      	str	r2, [r3, #0]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800179a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800179e:	2120      	movs	r1, #32
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80017a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.BaudRate = 2250000;
 80017a4:	6058      	str	r0, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a6:	260c      	movs	r6, #12
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80017a8:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ac:	4618      	mov	r0, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ae:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	609c      	str	r4, [r3, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b4:	619c      	str	r4, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80017b6:	61dd      	str	r5, [r3, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80017b8:	6259      	str	r1, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017bc:	615e      	str	r6, [r3, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80017be:	621f      	str	r7, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c0:	f003 f85a 	bl	8004878 <HAL_UART_Init>
 80017c4:	b108      	cbz	r0, 80017ca <main+0x31a>
 80017c6:	b672      	cpsid	i
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <main+0x318>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017ca:	4c3e      	ldr	r4, [pc, #248]	; (80018c4 <main+0x414>)
  hadc2.Instance = ADC2;
 80017cc:	4a3e      	ldr	r2, [pc, #248]	; (80018c8 <main+0x418>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ce:	9016      	str	r0, [sp, #88]	; 0x58
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80017d0:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d4:	f04f 0801 	mov.w	r8, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 80017d8:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 80017dc:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017e0:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hadc2.Init.NbrOfConversion = 2;
 80017e4:	2102      	movs	r1, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 80017e6:	901b      	str	r0, [sp, #108]	; 0x6c
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017e8:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ec:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017ee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f2:	60e0      	str	r0, [r4, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017f4:	6360      	str	r0, [r4, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f6:	f04f 0904 	mov.w	r9, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017fa:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80017fc:	8323      	strh	r3, [r4, #24]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fe:	e9c4 8904 	strd	r8, r9, [r4, #16]
  hadc2.Init.NbrOfConversion = 2;
 8001802:	61e1      	str	r1, [r4, #28]
  hadc2.Instance = ADC2;
 8001804:	6022      	str	r2, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001806:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800180a:	f000 fb41 	bl	8001e90 <HAL_ADC_Init>
 800180e:	b108      	cbz	r0, 8001814 <main+0x364>
 8001810:	b672      	cpsid	i
  while (1)
 8001812:	e7fe      	b.n	8001812 <main+0x362>
  sConfig.Channel = ADC_CHANNEL_4;
 8001814:	2204      	movs	r2, #4
 8001816:	2301      	movs	r3, #1
 8001818:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800181c:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_4;
 800181e:	2200      	movs	r2, #0
 8001820:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001822:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001824:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8001828:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800182c:	f000 fd7e 	bl	800232c <HAL_ADC_ConfigChannel>
 8001830:	b108      	cbz	r0, 8001836 <main+0x386>
 8001832:	b672      	cpsid	i
  while (1)
 8001834:	e7fe      	b.n	8001834 <main+0x384>
  sConfig.Channel = ADC_CHANNEL_9;
 8001836:	2209      	movs	r2, #9
 8001838:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800183a:	a916      	add	r1, sp, #88	; 0x58
 800183c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800183e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001842:	f000 fd73 	bl	800232c <HAL_ADC_ConfigChannel>
 8001846:	4605      	mov	r5, r0
 8001848:	b108      	cbz	r0, 800184e <main+0x39e>
 800184a:	b672      	cpsid	i
  while (1)
 800184c:	e7fe      	b.n	800184c <main+0x39c>
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800184e:	4602      	mov	r2, r0
 8001850:	4601      	mov	r1, r0
 8001852:	201b      	movs	r0, #27
 8001854:	f000 ffce 	bl	80027f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001858:	201b      	movs	r0, #27
 800185a:	f001 f803 	bl	8002864 <HAL_NVIC_EnableIRQ>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800185e:	4629      	mov	r1, r5
 8001860:	481a      	ldr	r0, [pc, #104]	; (80018cc <main+0x41c>)
 8001862:	f000 fd17 	bl	8002294 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001866:	4629      	mov	r1, r5
 8001868:	4620      	mov	r0, r4
 800186a:	f000 fd13 	bl	8002294 <HAL_ADCEx_Calibration_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <main+0x420>)
 8001870:	4642      	mov	r2, r8
 8001872:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001876:	f001 f99f 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <main+0x420>)
 800187c:	4642      	mov	r2, r8
 800187e:	4639      	mov	r1, r7
 8001880:	f001 f99a 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001884:	4642      	mov	r2, r8
 8001886:	4812      	ldr	r0, [pc, #72]	; (80018d0 <main+0x420>)
 8001888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188c:	f001 f994 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8001890:	4631      	mov	r1, r6
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <main+0x404>)
 8001894:	f002 f986 	bl	8003ba4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001898:	4629      	mov	r1, r5
 800189a:	4806      	ldr	r0, [pc, #24]	; (80018b4 <main+0x404>)
 800189c:	f002 f8e8 	bl	8003a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018a0:	4649      	mov	r1, r9
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <main+0x404>)
 80018a4:	f002 f8e4 	bl	8003a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <main+0x404>)
 80018aa:	2108      	movs	r1, #8
 80018ac:	f002 f8e0 	bl	8003a70 <HAL_TIM_PWM_Start>
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <main+0x400>
 80018b2:	bf00      	nop
 80018b4:	20000374 	.word	0x20000374
 80018b8:	200003c0 	.word	0x200003c0
 80018bc:	40004400 	.word	0x40004400
 80018c0:	00225510 	.word	0x00225510
 80018c4:	2000024c 	.word	0x2000024c
 80018c8:	50000100 	.word	0x50000100
 80018cc:	2000029c 	.word	0x2000029c
 80018d0:	48000800 	.word	0x48000800

080018d4 <Error_Handler>:
 80018d4:	b672      	cpsid	i
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <Error_Handler+0x2>

080018d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_MspInit+0x30>)
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	619a      	str	r2, [r3, #24]
 80018e2:	699a      	ldr	r2, [r3, #24]
{
 80018e4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	f002 0201 	and.w	r2, r2, #1
 80018ea:	9200      	str	r2, [sp, #0]
 80018ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018f4:	61da      	str	r2, [r3, #28]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001900:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001904:	f000 bf62 	b.w	80027cc <HAL_NVIC_SetPriorityGrouping>
 8001908:	40021000 	.word	0x40021000

0800190c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800190c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800190e:	6802      	ldr	r2, [r0, #0]
{
 8001910:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8001914:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800191c:	e9cd 3308 	strd	r3, r3, [sp, #32]
{
 8001920:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8001924:	d04a      	beq.n	80019bc <HAL_ADC_MspInit+0xb0>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_ADC_MspInit+0x144>)
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800192c:	b00c      	add	sp, #48	; 0x30
 800192e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001930:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <HAL_ADC_MspInit+0x148>)
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001936:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800193a:	d07a      	beq.n	8001a32 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_ADC_MspInit+0x14c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	4847      	ldr	r0, [pc, #284]	; (8001a5c <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001940:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA2_Channel1;
 8001942:	4d47      	ldr	r5, [pc, #284]	; (8001a60 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001944:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001948:	615a      	str	r2, [r3, #20]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001950:	9204      	str	r2, [sp, #16]
 8001952:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001964:	2208      	movs	r2, #8
 8001966:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800196e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f001 f824 	bl	80029c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001978:	2303      	movs	r3, #3
 800197a:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	a906      	add	r1, sp, #24
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001982:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f001 f81a 	bl	80029c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <HAL_ADC_MspInit+0x158>)
 800198e:	602b      	str	r3, [r5, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001992:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001996:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800199a:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800199c:	60e8      	str	r0, [r5, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800199e:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a2:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80019a6:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80019a8:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80019aa:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80019ac:	f000 ff82 	bl	80028b4 <HAL_DMA_Init>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d149      	bne.n	8001a48 <HAL_ADC_MspInit+0x13c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80019b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80019b6:	626c      	str	r4, [r5, #36]	; 0x24
}
 80019b8:	b00c      	add	sp, #48	; 0x30
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019bc:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HAL_ADC_MspInit+0x148>)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019c2:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019c6:	d029      	beq.n	8001a1c <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_ADC_MspInit+0x14c>)
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80019ca:	4824      	ldr	r0, [pc, #144]	; (8001a5c <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	695a      	ldr	r2, [r3, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80019ce:	4d26      	ldr	r5, [pc, #152]	; (8001a68 <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80019f0:	2202      	movs	r2, #2
 80019f2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2600      	movs	r6, #0
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80019f8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80019fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f000 ffde 	bl	80029c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8001a04:	2303      	movs	r3, #3
 8001a06:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8001a08:	a906      	add	r1, sp, #24
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8001a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f000 ffd4 	bl	80029c0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_ADC_MspInit+0x160>)
 8001a1a:	e7b8      	b.n	800198e <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_ADC_MspInit+0x14c>)
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	9b00      	ldr	r3, [sp, #0]
 8001a30:	e7ca      	b.n	80019c8 <HAL_ADC_MspInit+0xbc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_ADC_MspInit+0x14c>)
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	9303      	str	r3, [sp, #12]
 8001a44:	9b03      	ldr	r3, [sp, #12]
 8001a46:	e779      	b.n	800193c <HAL_ADC_MspInit+0x30>
      Error_Handler();
 8001a48:	f7ff ff44 	bl	80018d4 <Error_Handler>
 8001a4c:	e7b2      	b.n	80019b4 <HAL_ADC_MspInit+0xa8>
 8001a4e:	bf00      	nop
 8001a50:	50000100 	.word	0x50000100
 8001a54:	2000013c 	.word	0x2000013c
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	20000444 	.word	0x20000444
 8001a64:	40020408 	.word	0x40020408
 8001a68:	20000330 	.word	0x20000330
 8001a6c:	40020008 	.word	0x40020008

08001a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a70:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8001a72:	6801      	ldr	r1, [r0, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_TIM_Base_MspInit+0x6c>)
{
 8001a76:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8001a7a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a80:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001a84:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8001a86:	d001      	beq.n	8001a8c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a88:	b008      	add	sp, #32
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a90:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8001a94:	200c      	movs	r0, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001aa4:	9200      	str	r2, [sp, #0]
 8001aa6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8001ab2:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001aba:	2201      	movs	r2, #1
 8001abc:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001abe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001ac0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001ac4:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001aca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001ace:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f000 ff74 	bl	80029c0 <HAL_GPIO_Init>
}
 8001ad8:	b008      	add	sp, #32
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
 8001adc:	40012c00 	.word	0x40012c00

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001ae2:	6801      	ldr	r1, [r0, #0]
 8001ae4:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <HAL_TIM_MspPostInit+0x5c>)
{
 8001ae6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8001aea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001af0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001af4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8001af6:	d001      	beq.n	8001afc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001af8:	b008      	add	sp, #32
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b00:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b04:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b10:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001b18:	2202      	movs	r2, #2
 8001b1a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001b1e:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 8001b22:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001b28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f000 ff45 	bl	80029c0 <HAL_GPIO_Init>
}
 8001b36:	b008      	add	sp, #32
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40012c00 	.word	0x40012c00

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8001b42:	6802      	ldr	r2, [r0, #0]
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <HAL_UART_MspInit+0xc0>)
{
 8001b46:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8001b4a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001b50:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001b54:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b58:	b008      	add	sp, #32
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001b60:	4e28      	ldr	r6, [pc, #160]	; (8001c04 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b68:	61da      	str	r2, [r3, #28]
 8001b6a:	69da      	ldr	r2, [r3, #28]
 8001b6c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b70:	9200      	str	r2, [sp, #0]
 8001b72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001b84:	220c      	movs	r2, #12
 8001b86:	2302      	movs	r3, #2
 8001b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b96:	2307      	movs	r3, #7
 8001b98:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f000 ff0d 	bl	80029c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ba6:	4918      	ldr	r1, [pc, #96]	; (8001c08 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba8:	6074      	str	r4, [r6, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001baa:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001bac:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bae:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb4:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb6:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001bb8:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bba:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001bbc:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bbe:	f000 fe79 	bl	80028b4 <HAL_DMA_Init>
 8001bc2:	b9b0      	cbnz	r0, 8001bf2 <HAL_UART_MspInit+0xb2>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001bc4:	4c11      	ldr	r4, [pc, #68]	; (8001c0c <HAL_UART_MspInit+0xcc>)
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_UART_MspInit+0xd0>)
 8001bc8:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bca:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bcc:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bce:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001bd0:	672e      	str	r6, [r5, #112]	; 0x70
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bd2:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd4:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd8:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001be0:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be2:	6061      	str	r1, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001be4:	f000 fe66 	bl	80028b4 <HAL_DMA_Init>
 8001be8:	b930      	cbnz	r0, 8001bf8 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bea:	66ec      	str	r4, [r5, #108]	; 0x6c
 8001bec:	6265      	str	r5, [r4, #36]	; 0x24
}
 8001bee:	b008      	add	sp, #32
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001bf2:	f7ff fe6f 	bl	80018d4 <Error_Handler>
 8001bf6:	e7e5      	b.n	8001bc4 <HAL_UART_MspInit+0x84>
      Error_Handler();
 8001bf8:	f7ff fe6c 	bl	80018d4 <Error_Handler>
 8001bfc:	e7f5      	b.n	8001bea <HAL_UART_MspInit+0xaa>
 8001bfe:	bf00      	nop
 8001c00:	40004400 	.word	0x40004400
 8001c04:	20000208 	.word	0x20000208
 8001c08:	4002006c 	.word	0x4002006c
 8001c0c:	200002ec 	.word	0x200002ec
 8001c10:	40020080 	.word	0x40020080

08001c14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001c16:	2201      	movs	r2, #1
 8001c18:	2120      	movs	r1, #32
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f000 ffcb 	bl	8002bb8 <HAL_GPIO_WritePin>
    executeAll();
 8001c22:	f7ff fbc3 	bl	80013ac <executeAll>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2120      	movs	r1, #32
 8001c2e:	f000 ffc3 	bl	8002bb8 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8001c36:	4801      	ldr	r0, [pc, #4]	; (8001c3c <TIM1_CC_IRQHandler+0x28>)
 8001c38:	f002 b940 	b.w	8003ebc <HAL_TIM_IRQHandler>
 8001c3c:	20000374 	.word	0x20000374

08001c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  startStop();
 8001c42:	f7ff fba9 	bl	8001398 <startStop>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c4e:	f000 bfbb 	b.w	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
 8001c52:	bf00      	nop

08001c54 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <SystemInit+0x10>)
 8001c56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6e:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c84:	4c0b      	ldr	r4, [pc, #44]	; (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c92:	f7ff ffdf 	bl	8001c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f002 fe57 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7ff fc09 	bl	80014b0 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ca0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001cac:	080049fc 	.word	0x080049fc
  ldr r2, =_sbss
 8001cb0:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8001cb4:	2000048c 	.word	0x2000048c

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>
	...

08001cbc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_InitTick+0x3c>)
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_InitTick+0x40>)
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
{
 8001cc6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ccc:	fbb0 f0f2 	udiv	r0, r0, r2
 8001cd0:	fbb3 f0f0 	udiv	r0, r3, r0
 8001cd4:	f000 fdd4 	bl	8002880 <HAL_SYSTICK_Config>
 8001cd8:	b908      	cbnz	r0, 8001cde <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	2d0f      	cmp	r5, #15
 8001cdc:	d901      	bls.n	8001ce2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001cde:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8001ce0:	bd38      	pop	{r3, r4, r5, pc}
 8001ce2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 fd82 	bl	80027f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_InitTick+0x44>)
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	601d      	str	r5, [r3, #0]
}
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
 8001cf8:	200000ec 	.word	0x200000ec
 8001cfc:	200000e8 	.word	0x200000e8
 8001d00:	200000f0 	.word	0x200000f0

08001d04 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_Init+0x20>)
{
 8001d06:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f043 0310 	orr.w	r3, r3, #16
 8001d0e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 fd5b 	bl	80027cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	2004      	movs	r0, #4
 8001d18:	f7ff ffd0 	bl	8001cbc <HAL_InitTick>
  HAL_MspInit();
 8001d1c:	f7ff fddc 	bl	80018d8 <HAL_MspInit>
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	bd08      	pop	{r3, pc}
 8001d24:	40022000 	.word	0x40022000

08001d28 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001d28:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <HAL_GetTick+0x8>)
 8001d2a:	6818      	ldr	r0, [r3, #0]
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000488 	.word	0x20000488

08001d34 <HAL_ADC_ConvCpltCallback>:
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <HAL_ADC_ConvHalfCpltCallback>:
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop

08001d3c <HAL_ADC_ErrorCallback>:
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d40:	6802      	ldr	r2, [r0, #0]
{
 8001d42:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d44:	6893      	ldr	r3, [r2, #8]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d4e:	2000      	movs	r0, #0
}
 8001d50:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d52:	6811      	ldr	r1, [r2, #0]
 8001d54:	07cc      	lsls	r4, r1, #31
 8001d56:	d5fa      	bpl.n	8001d4e <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d58:	6891      	ldr	r1, [r2, #8]
 8001d5a:	f001 010d 	and.w	r1, r1, #13
 8001d5e:	2901      	cmp	r1, #1
 8001d60:	4604      	mov	r4, r0
 8001d62:	d009      	beq.n	8001d78 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001d66:	f042 0210 	orr.w	r2, r2, #16
 8001d6a:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 8001d72:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	6462      	str	r2, [r4, #68]	; 0x44
}
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8001d78:	6893      	ldr	r3, [r2, #8]
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6093      	str	r3, [r2, #8]
 8001d82:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8001d84:	f7ff ffd0 	bl	8001d28 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8001d8e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d90:	d403      	bmi.n	8001d9a <ADC_Disable+0x5a>
 8001d92:	e7dc      	b.n	8001d4e <ADC_Disable+0xe>
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	07db      	lsls	r3, r3, #31
 8001d98:	d5d9      	bpl.n	8001d4e <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d9a:	f7ff ffc5 	bl	8001d28 <HAL_GetTick>
 8001d9e:	1b40      	subs	r0, r0, r5
 8001da0:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001da2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001da4:	d9f6      	bls.n	8001d94 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	07d2      	lsls	r2, r2, #31
 8001daa:	d5f3      	bpl.n	8001d94 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
}
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}

08001dc0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc0:	6802      	ldr	r2, [r0, #0]
{
 8001dc2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc4:	6893      	ldr	r3, [r2, #8]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b01      	cmp	r3, #1
{
 8001dcc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dce:	d026      	beq.n	8001e1e <ADC_Enable+0x5e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dd0:	6891      	ldr	r1, [r2, #8]
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <ADC_Enable+0x68>)
 8001dd4:	4219      	tst	r1, r3
 8001dd6:	d009      	beq.n	8001dec <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001de8:	2001      	movs	r0, #1
}
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001dec:	6893      	ldr	r3, [r2, #8]
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001df4:	f7ff ff98 	bl	8001d28 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();  
 8001dfe:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e00:	d40b      	bmi.n	8001e1a <ADC_Enable+0x5a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e02:	f7ff ff91 	bl	8001d28 <HAL_GetTick>
 8001e06:	1b43      	subs	r3, r0, r5
 8001e08:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e0a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e0c:	d902      	bls.n	8001e14 <ADC_Enable+0x54>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	07d2      	lsls	r2, r2, #31
 8001e12:	d5e1      	bpl.n	8001dd8 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	07db      	lsls	r3, r3, #31
 8001e18:	d5f3      	bpl.n	8001e02 <ADC_Enable+0x42>
  return HAL_OK;
 8001e1a:	2000      	movs	r0, #0
}
 8001e1c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	07d8      	lsls	r0, r3, #31
 8001e22:	d5d5      	bpl.n	8001dd0 <ADC_Enable+0x10>
  return HAL_OK;
 8001e24:	2000      	movs	r0, #0
 8001e26:	e7f9      	b.n	8001e1c <ADC_Enable+0x5c>
 8001e28:	8000003f 	.word	0x8000003f

08001e2c <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e34:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001e3e:	f7ff bf7d 	b.w	8001d3c <HAL_ADC_ErrorCallback>
 8001e42:	bf00      	nop

08001e44 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e44:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001e46:	f7ff bf77 	b.w	8001d38 <HAL_ADC_ConvHalfCpltCallback>
 8001e4a:	bf00      	nop

08001e4c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e50:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001e54:	d118      	bne.n	8001e88 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e58:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e60:	68ca      	ldr	r2, [r1, #12]
 8001e62:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001e66:	d10c      	bne.n	8001e82 <ADC_DMAConvCplt+0x36>
 8001e68:	7e5a      	ldrb	r2, [r3, #25]
 8001e6a:	b952      	cbnz	r2, 8001e82 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e76:	04d2      	lsls	r2, r2, #19
 8001e78:	d403      	bmi.n	8001e82 <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff bf56 	b.w	8001d34 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4718      	bx	r3
 8001e8e:	bf00      	nop

08001e90 <HAL_ADC_Init>:
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	f000 809d 	beq.w	8001fd8 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ea0:	f013 0310 	ands.w	r3, r3, #16
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	d118      	bne.n	8001eda <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	f000 8097 	beq.w	8001fde <HAL_ADC_Init+0x14e>
 8001eb0:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001eb2:	6891      	ldr	r1, [r2, #8]
 8001eb4:	00cd      	lsls	r5, r1, #3
 8001eb6:	f140 8083 	bpl.w	8001fc0 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001eba:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ebc:	0088      	lsls	r0, r1, #2
 8001ebe:	d47f      	bmi.n	8001fc0 <HAL_ADC_Init+0x130>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ec0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ec2:	06c9      	lsls	r1, r1, #27
 8001ec4:	d400      	bmi.n	8001ec8 <HAL_ADC_Init+0x38>
 8001ec6:	b163      	cbz	r3, 8001ee2 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eca:	f023 0312 	bic.w	r3, r3, #18
 8001ece:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8001ed2:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eda:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001edc:	06da      	lsls	r2, r3, #27
 8001ede:	d4f3      	bmi.n	8001ec8 <HAL_ADC_Init+0x38>
 8001ee0:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ee2:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001ee4:	f010 0004 	ands.w	r0, r0, #4
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8001eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001eec:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8001ef0:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001efa:	f000 80e3 	beq.w	80020c4 <HAL_ADC_Init+0x234>
 8001efe:	4b87      	ldr	r3, [pc, #540]	; (800211c <HAL_ADC_Init+0x28c>)
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f000 80e7 	beq.w	80020d4 <HAL_ADC_Init+0x244>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f06:	4986      	ldr	r1, [pc, #536]	; (8002120 <HAL_ADC_Init+0x290>)
 8001f08:	428a      	cmp	r2, r1
 8001f0a:	d075      	beq.n	8001ff8 <HAL_ADC_Init+0x168>
 8001f0c:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_ADC_Init+0x294>)
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d073      	beq.n	8001ffa <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f12:	6893      	ldr	r3, [r2, #8]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f000 80ed 	beq.w	80020f8 <HAL_ADC_Init+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1e:	4d82      	ldr	r5, [pc, #520]	; (8002128 <HAL_ADC_Init+0x298>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f20:	68ab      	ldr	r3, [r5, #8]
 8001f22:	6861      	ldr	r1, [r4, #4]
 8001f24:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f2c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8001f30:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001f32:	7e65      	ldrb	r5, [r4, #25]
 8001f34:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f36:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f3a:	2e01      	cmp	r6, #1
 8001f3c:	bf18      	it	ne
 8001f3e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001f42:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f46:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f48:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f4c:	f000 8095 	beq.w	800207a <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f52:	2901      	cmp	r1, #1
 8001f54:	d00d      	beq.n	8001f72 <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001f56:	4872      	ldr	r0, [pc, #456]	; (8002120 <HAL_ADC_Init+0x290>)
 8001f58:	4282      	cmp	r2, r0
 8001f5a:	f000 809e 	beq.w	800209a <HAL_ADC_Init+0x20a>
 8001f5e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001f62:	4282      	cmp	r2, r0
 8001f64:	f000 8099 	beq.w	800209a <HAL_ADC_Init+0x20a>
 8001f68:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001f6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f72:	6891      	ldr	r1, [r2, #8]
 8001f74:	f011 0f0c 	tst.w	r1, #12
 8001f78:	d10c      	bne.n	8001f94 <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f7a:	68d1      	ldr	r1, [r2, #12]
 8001f7c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001f80:	f021 0102 	bic.w	r1, r1, #2
 8001f84:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f86:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001f8a:	7e20      	ldrb	r0, [r4, #24]
 8001f8c:	0049      	lsls	r1, r1, #1
 8001f8e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8001f92:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001f94:	68d5      	ldr	r5, [r2, #12]
 8001f96:	4965      	ldr	r1, [pc, #404]	; (800212c <HAL_ADC_Init+0x29c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f98:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001f9a:	4029      	ands	r1, r5
 8001f9c:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f9e:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8001fa0:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fa2:	d072      	beq.n	800208a <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fa4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fa6:	f023 030f 	bic.w	r3, r3, #15
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	2000      	movs	r0, #0
 8001fae:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc2:	f023 0312 	bic.w	r3, r3, #18
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fd6:	e777      	b.n	8001ec8 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
}
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8001fde:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe2:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8001fe4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001fe8:	f7ff fc90 	bl	800190c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001fec:	6822      	ldr	r2, [r4, #0]
 8001fee:	6893      	ldr	r3, [r2, #8]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	d511      	bpl.n	8002018 <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	e75c      	b.n	8001eb2 <HAL_ADC_Init+0x22>
 8001ff8:	494a      	ldr	r1, [pc, #296]	; (8002124 <HAL_ADC_Init+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffa:	4d4b      	ldr	r5, [pc, #300]	; (8002128 <HAL_ADC_Init+0x298>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ffc:	6893      	ldr	r3, [r2, #8]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d061      	beq.n	80020ca <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002006:	688b      	ldr	r3, [r1, #8]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d187      	bne.n	8001f20 <HAL_ADC_Init+0x90>
 8002010:	680b      	ldr	r3, [r1, #0]
 8002012:	07db      	lsls	r3, r3, #31
 8002014:	d48a      	bmi.n	8001f2c <HAL_ADC_Init+0x9c>
 8002016:	e783      	b.n	8001f20 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fe91 	bl	8001d40 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800201e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002020:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8002022:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002024:	f53f af44 	bmi.w	8001eb0 <HAL_ADC_Init+0x20>
 8002028:	2800      	cmp	r0, #0
 800202a:	f47f af41 	bne.w	8001eb0 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 800202e:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002030:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002032:	493f      	ldr	r1, [pc, #252]	; (8002130 <HAL_ADC_Init+0x2a0>)
 8002034:	4d3f      	ldr	r5, [pc, #252]	; (8002134 <HAL_ADC_Init+0x2a4>)
 8002036:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002038:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 800203c:	f020 0002 	bic.w	r0, r0, #2
 8002040:	f040 0002 	orr.w	r0, r0, #2
 8002044:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002046:	6890      	ldr	r0, [r2, #8]
 8002048:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800204c:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800204e:	fba5 0101 	umull	r0, r1, r5, r1
 8002052:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002054:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002056:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800205a:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800205c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002060:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002062:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002064:	9901      	ldr	r1, [sp, #4]
 8002066:	2900      	cmp	r1, #0
 8002068:	f43f af23 	beq.w	8001eb2 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800206c:	9901      	ldr	r1, [sp, #4]
 800206e:	3901      	subs	r1, #1
 8002070:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002072:	9901      	ldr	r1, [sp, #4]
 8002074:	2900      	cmp	r1, #0
 8002076:	d1f9      	bne.n	800206c <HAL_ADC_Init+0x1dc>
 8002078:	e71b      	b.n	8001eb2 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800207a:	bb7d      	cbnz	r5, 80020dc <HAL_ADC_Init+0x24c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800207c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800207e:	3901      	subs	r1, #1
 8002080:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	e762      	b.n	8001f50 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800208a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800208c:	69e3      	ldr	r3, [r4, #28]
 800208e:	f021 010f 	bic.w	r1, r1, #15
 8002092:	3b01      	subs	r3, #1
 8002094:	430b      	orrs	r3, r1
 8002096:	6313      	str	r3, [r2, #48]	; 0x30
 8002098:	e788      	b.n	8001fac <HAL_ADC_Init+0x11c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800209a:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800209e:	d028      	beq.n	80020f2 <HAL_ADC_Init+0x262>
 80020a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020a4:	d02d      	beq.n	8002102 <HAL_ADC_Init+0x272>
 80020a6:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 80020aa:	d02d      	beq.n	8002108 <HAL_ADC_Init+0x278>
 80020ac:	f5b1 5f8a 	cmp.w	r1, #4416	; 0x1140
 80020b0:	d02d      	beq.n	800210e <HAL_ADC_Init+0x27e>
 80020b2:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 80020b6:	d02d      	beq.n	8002114 <HAL_ADC_Init+0x284>
 80020b8:	f5b1 5f86 	cmp.w	r1, #4288	; 0x10c0
 80020bc:	bf08      	it	eq
 80020be:	f44f 71c0 	moveq.w	r1, #384	; 0x180
 80020c2:	e753      	b.n	8001f6c <HAL_ADC_Init+0xdc>
 80020c4:	4915      	ldr	r1, [pc, #84]	; (800211c <HAL_ADC_Init+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c6:	4d1c      	ldr	r5, [pc, #112]	; (8002138 <HAL_ADC_Init+0x2a8>)
 80020c8:	e798      	b.n	8001ffc <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	07de      	lsls	r6, r3, #31
 80020ce:	f53f af2d 	bmi.w	8001f2c <HAL_ADC_Init+0x9c>
 80020d2:	e798      	b.n	8002006 <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d4:	4d18      	ldr	r5, [pc, #96]	; (8002138 <HAL_ADC_Init+0x2a8>)
 80020d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80020da:	e78f      	b.n	8001ffc <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 80020dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80020de:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80020e2:	f041 0120 	orr.w	r1, r1, #32
 80020e6:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80020ea:	f041 0101 	orr.w	r1, r1, #1
 80020ee:	6461      	str	r1, [r4, #68]	; 0x44
 80020f0:	e72e      	b.n	8001f50 <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80020f2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80020f6:	e739      	b.n	8001f6c <HAL_ADC_Init+0xdc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	07db      	lsls	r3, r3, #31
 80020fc:	f53f af16 	bmi.w	8001f2c <HAL_ADC_Init+0x9c>
 8002100:	e70d      	b.n	8001f1e <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002102:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8002106:	e731      	b.n	8001f6c <HAL_ADC_Init+0xdc>
 8002108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800210c:	e72e      	b.n	8001f6c <HAL_ADC_Init+0xdc>
 800210e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002112:	e72b      	b.n	8001f6c <HAL_ADC_Init+0xdc>
 8002114:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002118:	e728      	b.n	8001f6c <HAL_ADC_Init+0xdc>
 800211a:	bf00      	nop
 800211c:	50000100 	.word	0x50000100
 8002120:	50000400 	.word	0x50000400
 8002124:	50000500 	.word	0x50000500
 8002128:	50000700 	.word	0x50000700
 800212c:	fff0c007 	.word	0xfff0c007
 8002130:	200000e8 	.word	0x200000e8
 8002134:	431bde83 	.word	0x431bde83
 8002138:	50000300 	.word	0x50000300

0800213c <HAL_ADC_Start_DMA>:
{
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002140:	6800      	ldr	r0, [r0, #0]
 8002142:	6885      	ldr	r5, [r0, #8]
 8002144:	076d      	lsls	r5, r5, #29
 8002146:	d478      	bmi.n	800223a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002148:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d074      	beq.n	800223a <HAL_ADC_Start_DMA+0xfe>
 8002150:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002152:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002156:	460f      	mov	r7, r1
 8002158:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 800215a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800215e:	d00f      	beq.n	8002180 <HAL_ADC_Start_DMA+0x44>
 8002160:	4b45      	ldr	r3, [pc, #276]	; (8002278 <HAL_ADC_Start_DMA+0x13c>)
 8002162:	4298      	cmp	r0, r3
 8002164:	d00c      	beq.n	8002180 <HAL_ADC_Start_DMA+0x44>
 8002166:	4b45      	ldr	r3, [pc, #276]	; (800227c <HAL_ADC_Start_DMA+0x140>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f013 0f1f 	tst.w	r3, #31
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b96b      	cbnz	r3, 8002192 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8002176:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800217a:	2501      	movs	r5, #1
}
 800217c:	4628      	mov	r0, r5
 800217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_ADC_Start_DMA+0x144>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f013 0f1f 	tst.w	r3, #31
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f1      	beq.n	8002176 <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 8002192:	4620      	mov	r0, r4
 8002194:	f7ff fe14 	bl	8001dc0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002198:	4605      	mov	r5, r0
 800219a:	2800      	cmp	r0, #0
 800219c:	d150      	bne.n	8002240 <HAL_ADC_Start_DMA+0x104>
        ADC_STATE_CLR_SET(hadc->State,
 800219e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021a0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80021a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021ae:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 80021b2:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021b4:	d056      	beq.n	8002264 <HAL_ADC_Start_DMA+0x128>
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_ADC_Start_DMA+0x13c>)
 80021b8:	4299      	cmp	r1, r3
 80021ba:	d045      	beq.n	8002248 <HAL_ADC_Start_DMA+0x10c>
 80021bc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	06d8      	lsls	r0, r3, #27
 80021c4:	d050      	beq.n	8002268 <HAL_ADC_Start_DMA+0x12c>
 80021c6:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_ADC_Start_DMA+0x148>)
 80021c8:	4291      	cmp	r1, r2
 80021ca:	d04d      	beq.n	8002268 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d2:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021d4:	68d3      	ldr	r3, [r2, #12]
 80021d6:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80021da:	b12b      	cbz	r3, 80021e8 <HAL_ADC_Start_DMA+0xac>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e6:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <HAL_ADC_Start_DMA+0x14c>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ee:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021f2:	bf1c      	itt	ne
 80021f4:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 80021f6:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80021fa:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80021fc:	f04f 0c00 	mov.w	ip, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 8002202:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002206:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002208:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_ADC_Start_DMA+0x154>)
 800220c:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800220e:	231c      	movs	r3, #28
 8002210:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002212:	684b      	ldr	r3, [r1, #4]
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800221a:	68cb      	ldr	r3, [r1, #12]
 800221c:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002220:	463a      	mov	r2, r7
 8002222:	4633      	mov	r3, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002224:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002228:	3140      	adds	r1, #64	; 0x40
 800222a:	f000 fb87 	bl	800293c <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	6893      	ldr	r3, [r2, #8]
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	6093      	str	r3, [r2, #8]
 8002238:	e7a0      	b.n	800217c <HAL_ADC_Start_DMA+0x40>
    tmp_hal_status = HAL_BUSY;
 800223a:	2502      	movs	r5, #2
}
 800223c:	4628      	mov	r0, r5
 800223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8002240:	2300      	movs	r3, #0
 8002242:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002246:	e799      	b.n	800217c <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_ADC_Start_DMA+0x144>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	06db      	lsls	r3, r3, #27
 800224e:	d00b      	beq.n	8002268 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002250:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002252:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225a:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800225c:	68d3      	ldr	r3, [r2, #12]
 800225e:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8002262:	e7ba      	b.n	80021da <HAL_ADC_Start_DMA+0x9e>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_ADC_Start_DMA+0x144>)
 8002266:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800226a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800226e:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002270:	68cb      	ldr	r3, [r1, #12]
 8002272:	019a      	lsls	r2, r3, #6
 8002274:	d5b8      	bpl.n	80021e8 <HAL_ADC_Start_DMA+0xac>
 8002276:	e7b1      	b.n	80021dc <HAL_ADC_Start_DMA+0xa0>
 8002278:	50000100 	.word	0x50000100
 800227c:	50000700 	.word	0x50000700
 8002280:	50000300 	.word	0x50000300
 8002284:	50000400 	.word	0x50000400
 8002288:	08001e4d 	.word	0x08001e4d
 800228c:	08001e45 	.word	0x08001e45
 8002290:	08001e2d 	.word	0x08001e2d

08002294 <HAL_ADCEx_Calibration_Start>:
{
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002296:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800229a:	2b01      	cmp	r3, #1
 800229c:	d036      	beq.n	800230c <HAL_ADCEx_Calibration_Start+0x78>
 800229e:	2701      	movs	r7, #1
 80022a0:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 80022a4:	4604      	mov	r4, r0
 80022a6:	460d      	mov	r5, r1
 80022a8:	f7ff fd4a 	bl	8001d40 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80022ac:	4606      	mov	r6, r0
 80022ae:	bb40      	cbnz	r0, 8002302 <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80022b0:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80022b2:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80022b4:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022b6:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80022b8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80022bc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022be:	d103      	bne.n	80022c8 <HAL_ADCEx_Calibration_Start+0x34>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022ce:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80022d0:	f7ff fd2a 	bl	8001d28 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
    tickstart = HAL_GetTick();  
 80022da:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80022dc:	da0b      	bge.n	80022f6 <HAL_ADCEx_Calibration_Start+0x62>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022de:	f7ff fd23 	bl	8001d28 <HAL_GetTick>
 80022e2:	1b43      	subs	r3, r0, r5
 80022e4:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80022e6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022e8:	d902      	bls.n	80022f0 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	db10      	blt.n	8002312 <HAL_ADCEx_Calibration_Start+0x7e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	dbf3      	blt.n	80022de <HAL_ADCEx_Calibration_Start+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 80022f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002302:	2300      	movs	r3, #0
 8002304:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002308:	4630      	mov	r0, r6
 800230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 800230c:	2602      	movs	r6, #2
}
 800230e:	4630      	mov	r0, r6
 8002310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          ADC_STATE_CLR_SET(hadc->State,
 8002312:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8002314:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 8002316:	f023 0312 	bic.w	r3, r3, #18
 800231a:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 800231e:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 8002320:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 8002324:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002326:	4630      	mov	r0, r6
 8002328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800232a:	bf00      	nop

0800232c <HAL_ADC_ConfigChannel>:
{
 800232c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800232e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002332:	68cc      	ldr	r4, [r1, #12]
{
 8002334:	b082      	sub	sp, #8
 8002336:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002338:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002340:	f000 80fe 	beq.w	8002540 <HAL_ADC_ConfigChannel+0x214>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002344:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002346:	2001      	movs	r0, #1
 8002348:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800234c:	6895      	ldr	r5, [r2, #8]
 800234e:	076d      	lsls	r5, r5, #29
 8002350:	d436      	bmi.n	80023c0 <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 8002352:	6848      	ldr	r0, [r1, #4]
 8002354:	2804      	cmp	r0, #4
 8002356:	f200 8088 	bhi.w	800246a <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->SQR1,
 800235a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800235e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002360:	680d      	ldr	r5, [r1, #0]
 8002362:	0040      	lsls	r0, r0, #1
 8002364:	271f      	movs	r7, #31
 8002366:	4087      	lsls	r7, r0
 8002368:	ea26 0607 	bic.w	r6, r6, r7
 800236c:	fa05 f000 	lsl.w	r0, r5, r0
 8002370:	4330      	orrs	r0, r6
 8002372:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002374:	6890      	ldr	r0, [r2, #8]
 8002376:	f010 0f0c 	tst.w	r0, #12
 800237a:	d134      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800237c:	2d09      	cmp	r5, #9
 800237e:	f200 8089 	bhi.w	8002494 <HAL_ADC_ConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002382:	6950      	ldr	r0, [r2, #20]
 8002384:	688e      	ldr	r6, [r1, #8]
 8002386:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800238a:	2707      	movs	r7, #7
 800238c:	fa07 f70c 	lsl.w	r7, r7, ip
 8002390:	ea20 0007 	bic.w	r0, r0, r7
 8002394:	fa06 f60c 	lsl.w	r6, r6, ip
 8002398:	4330      	orrs	r0, r6
 800239a:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800239c:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 80023a0:	68d0      	ldr	r0, [r2, #12]
 80023a2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80023a6:	0040      	lsls	r0, r0, #1
 80023a8:	3e01      	subs	r6, #1
 80023aa:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80023ae:	2e03      	cmp	r6, #3
 80023b0:	f200 8142 	bhi.w	8002638 <HAL_ADC_ConfigChannel+0x30c>
 80023b4:	e8df f016 	tbh	[pc, r6, lsl #1]
 80023b8:	0105000e 	.word	0x0105000e
 80023bc:	00f100fb 	.word	0x00f100fb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80023ce:	b002      	add	sp, #8
 80023d0:	bcf0      	pop	{r4, r5, r6, r7}
 80023d2:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023d4:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80023d6:	4eae      	ldr	r6, [pc, #696]	; (8002690 <HAL_ADC_ConfigChannel+0x364>)
 80023d8:	403e      	ands	r6, r7
 80023da:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80023de:	4330      	orrs	r0, r6
 80023e0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80023e4:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e6:	6890      	ldr	r0, [r2, #8]
 80023e8:	f000 0003 	and.w	r0, r0, #3
 80023ec:	2801      	cmp	r0, #1
 80023ee:	f000 80a2 	beq.w	8002536 <HAL_ADC_ConfigChannel+0x20a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023f2:	2c01      	cmp	r4, #1
 80023f4:	f000 80a8 	beq.w	8002548 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023f8:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80023fc:	2001      	movs	r0, #1
 80023fe:	40a8      	lsls	r0, r5
 8002400:	ea21 0100 	bic.w	r1, r1, r0
 8002404:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002408:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800240c:	d073      	beq.n	80024f6 <HAL_ADC_ConfigChannel+0x1ca>
 800240e:	49a1      	ldr	r1, [pc, #644]	; (8002694 <HAL_ADC_ConfigChannel+0x368>)
 8002410:	428a      	cmp	r2, r1
 8002412:	d070      	beq.n	80024f6 <HAL_ADC_ConfigChannel+0x1ca>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002414:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002416:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800241a:	d06f      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800241c:	2d11      	cmp	r5, #17
 800241e:	f040 80aa 	bne.w	8002576 <HAL_ADC_ConfigChannel+0x24a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002422:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002424:	01c4      	lsls	r4, r0, #7
 8002426:	d46c      	bmi.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002428:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800242c:	f000 80d3 	beq.w	80025d6 <HAL_ADC_ConfigChannel+0x2aa>
 8002430:	4898      	ldr	r0, [pc, #608]	; (8002694 <HAL_ADC_ConfigChannel+0x368>)
 8002432:	4282      	cmp	r2, r0
 8002434:	d067      	beq.n	8002506 <HAL_ADC_ConfigChannel+0x1da>
 8002436:	4c98      	ldr	r4, [pc, #608]	; (8002698 <HAL_ADC_ConfigChannel+0x36c>)
 8002438:	42a2      	cmp	r2, r4
 800243a:	f000 80f7 	beq.w	800262c <HAL_ADC_ConfigChannel+0x300>
 800243e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002442:	4282      	cmp	r2, r0
 8002444:	d061      	beq.n	800250a <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002446:	6890      	ldr	r0, [r2, #8]
 8002448:	f000 0003 	and.w	r0, r0, #3
 800244c:	2801      	cmp	r0, #1
 800244e:	f000 80ef 	beq.w	8002630 <HAL_ADC_ConfigChannel+0x304>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002452:	2d10      	cmp	r5, #16
 8002454:	d055      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002456:	2d11      	cmp	r5, #17
 8002458:	d053      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800245a:	2d12      	cmp	r5, #18
 800245c:	d151      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800245e:	688a      	ldr	r2, [r1, #8]
 8002460:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002464:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002466:	2000      	movs	r0, #0
 8002468:	e7ae      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 800246a:	2809      	cmp	r0, #9
 800246c:	d921      	bls.n	80024b2 <HAL_ADC_ConfigChannel+0x186>
    else if (sConfig->Rank < 15U)
 800246e:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002474:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8002478:	f200 8083 	bhi.w	8002582 <HAL_ADC_ConfigChannel+0x256>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800247c:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800247e:	680d      	ldr	r5, [r1, #0]
 8002480:	383c      	subs	r0, #60	; 0x3c
 8002482:	271f      	movs	r7, #31
 8002484:	4087      	lsls	r7, r0
 8002486:	ea26 0607 	bic.w	r6, r6, r7
 800248a:	fa05 f000 	lsl.w	r0, r5, r0
 800248e:	4330      	orrs	r0, r6
 8002490:	6390      	str	r0, [r2, #56]	; 0x38
 8002492:	e76f      	b.n	8002374 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002494:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002498:	6990      	ldr	r0, [r2, #24]
 800249a:	688e      	ldr	r6, [r1, #8]
 800249c:	3f1e      	subs	r7, #30
 800249e:	f04f 0c07 	mov.w	ip, #7
 80024a2:	fa0c fc07 	lsl.w	ip, ip, r7
 80024a6:	ea20 000c 	bic.w	r0, r0, ip
 80024aa:	40be      	lsls	r6, r7
 80024ac:	4330      	orrs	r0, r6
 80024ae:	6190      	str	r0, [r2, #24]
 80024b0:	e774      	b.n	800239c <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 80024b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80024b6:	0040      	lsls	r0, r0, #1
 80024b8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80024ba:	680d      	ldr	r5, [r1, #0]
 80024bc:	381e      	subs	r0, #30
 80024be:	271f      	movs	r7, #31
 80024c0:	4087      	lsls	r7, r0
 80024c2:	ea26 0607 	bic.w	r6, r6, r7
 80024c6:	fa05 f000 	lsl.w	r0, r5, r0
 80024ca:	4330      	orrs	r0, r6
 80024cc:	6350      	str	r0, [r2, #52]	; 0x34
 80024ce:	e751      	b.n	8002374 <HAL_ADC_ConfigChannel+0x48>
        MODIFY_REG(hadc->Instance->SMPR1,
 80024d0:	1c68      	adds	r0, r5, #1
 80024d2:	688e      	ldr	r6, [r1, #8]
 80024d4:	6954      	ldr	r4, [r2, #20]
 80024d6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80024da:	2707      	movs	r7, #7
 80024dc:	408f      	lsls	r7, r1
 80024de:	fa06 f001 	lsl.w	r0, r6, r1
 80024e2:	ea24 0107 	bic.w	r1, r4, r7
 80024e6:	4301      	orrs	r1, r0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80024ec:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ee:	d008      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
 80024f0:	4968      	ldr	r1, [pc, #416]	; (8002694 <HAL_ADC_ConfigChannel+0x368>)
 80024f2:	428a      	cmp	r2, r1
 80024f4:	d105      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024f6:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f8:	4968      	ldr	r1, [pc, #416]	; (800269c <HAL_ADC_ConfigChannel+0x370>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024fa:	d18f      	bne.n	800241c <HAL_ADC_ConfigChannel+0xf0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024fc:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024fe:	0206      	lsls	r6, r0, #8
 8002500:	d592      	bpl.n	8002428 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002502:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002504:	e760      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x9c>
 8002506:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800250a:	6890      	ldr	r0, [r2, #8]
 800250c:	f000 0003 	and.w	r0, r0, #3
 8002510:	2801      	cmp	r0, #1
 8002512:	d062      	beq.n	80025da <HAL_ADC_ConfigChannel+0x2ae>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002514:	68a0      	ldr	r0, [r4, #8]
 8002516:	f000 0003 	and.w	r0, r0, #3
 800251a:	2801      	cmp	r0, #1
 800251c:	d066      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x2c0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800251e:	2d10      	cmp	r5, #16
 8002520:	d068      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002522:	2d11      	cmp	r5, #17
 8002524:	d199      	bne.n	800245a <HAL_ADC_ConfigChannel+0x12e>
 8002526:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800252a:	d1ea      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800252c:	688a      	ldr	r2, [r1, #8]
 800252e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002532:	608a      	str	r2, [r1, #8]
 8002534:	e7e5      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002536:	6810      	ldr	r0, [r2, #0]
 8002538:	07c7      	lsls	r7, r0, #31
 800253a:	f57f af5a 	bpl.w	80023f2 <HAL_ADC_ConfigChannel+0xc6>
 800253e:	e7e0      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
  __HAL_LOCK(hadc);
 8002540:	2002      	movs	r0, #2
}
 8002542:	b002      	add	sp, #8
 8002544:	bcf0      	pop	{r4, r5, r6, r7}
 8002546:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002548:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 800254c:	40ac      	lsls	r4, r5
 800254e:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002550:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002552:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002556:	d9bb      	bls.n	80024d0 <HAL_ADC_ConfigChannel+0x1a4>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002558:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800255c:	688e      	ldr	r6, [r1, #8]
 800255e:	6994      	ldr	r4, [r2, #24]
 8002560:	f1a0 011b 	sub.w	r1, r0, #27
 8002564:	2707      	movs	r7, #7
 8002566:	408f      	lsls	r7, r1
 8002568:	fa06 f001 	lsl.w	r0, r6, r1
 800256c:	ea24 0107 	bic.w	r1, r4, r7
 8002570:	4301      	orrs	r1, r0
 8002572:	6191      	str	r1, [r2, #24]
 8002574:	e748      	b.n	8002408 <HAL_ADC_ConfigChannel+0xdc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002576:	2d12      	cmp	r5, #18
 8002578:	d1c3      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800257a:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800257c:	0240      	lsls	r0, r0, #9
 800257e:	d4c0      	bmi.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
 8002580:	e752      	b.n	8002428 <HAL_ADC_ConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002582:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002584:	680d      	ldr	r5, [r1, #0]
 8002586:	385a      	subs	r0, #90	; 0x5a
 8002588:	271f      	movs	r7, #31
 800258a:	4087      	lsls	r7, r0
 800258c:	ea26 0607 	bic.w	r6, r6, r7
 8002590:	fa05 f000 	lsl.w	r0, r5, r0
 8002594:	4330      	orrs	r0, r6
 8002596:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002598:	e6ec      	b.n	8002374 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800259a:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 800259c:	4e3c      	ldr	r6, [pc, #240]	; (8002690 <HAL_ADC_ConfigChannel+0x364>)
 800259e:	403e      	ands	r6, r7
 80025a0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80025a4:	4330      	orrs	r0, r6
 80025a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80025aa:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80025ac:	e71b      	b.n	80023e6 <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80025ae:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80025b0:	4e37      	ldr	r6, [pc, #220]	; (8002690 <HAL_ADC_ConfigChannel+0x364>)
 80025b2:	403e      	ands	r6, r7
 80025b4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80025b8:	4330      	orrs	r0, r6
 80025ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80025be:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80025c0:	e711      	b.n	80023e6 <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80025c2:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80025c4:	4e32      	ldr	r6, [pc, #200]	; (8002690 <HAL_ADC_ConfigChannel+0x364>)
 80025c6:	403e      	ands	r6, r7
 80025c8:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80025cc:	4330      	orrs	r0, r6
 80025ce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80025d2:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80025d4:	e707      	b.n	80023e6 <HAL_ADC_ConfigChannel+0xba>
 80025d6:	4c2f      	ldr	r4, [pc, #188]	; (8002694 <HAL_ADC_ConfigChannel+0x368>)
 80025d8:	e797      	b.n	800250a <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025da:	6810      	ldr	r0, [r2, #0]
 80025dc:	07c6      	lsls	r6, r0, #31
 80025de:	d599      	bpl.n	8002514 <HAL_ADC_ConfigChannel+0x1e8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
 80025ea:	e6ed      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x9c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025ec:	6820      	ldr	r0, [r4, #0]
 80025ee:	07c0      	lsls	r0, r0, #31
 80025f0:	d4f6      	bmi.n	80025e0 <HAL_ADC_ConfigChannel+0x2b4>
 80025f2:	e794      	b.n	800251e <HAL_ADC_ConfigChannel+0x1f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80025f8:	d183      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025fa:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_ADC_ConfigChannel+0x374>)
 80025fc:	4c29      	ldr	r4, [pc, #164]	; (80026a4 <HAL_ADC_ConfigChannel+0x378>)
 80025fe:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002600:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002602:	fba4 4202 	umull	r4, r2, r4, r2
 8002606:	0c92      	lsrs	r2, r2, #18
 8002608:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800260c:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800260e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002612:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002614:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002616:	9a01      	ldr	r2, [sp, #4]
 8002618:	2a00      	cmp	r2, #0
 800261a:	f43f af72 	beq.w	8002502 <HAL_ADC_ConfigChannel+0x1d6>
            wait_loop_index--;
 800261e:	9a01      	ldr	r2, [sp, #4]
 8002620:	3a01      	subs	r2, #1
 8002622:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002624:	9a01      	ldr	r2, [sp, #4]
 8002626:	2a00      	cmp	r2, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_ConfigChannel+0x2f2>
 800262a:	e76a      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1d6>
 800262c:	4c1e      	ldr	r4, [pc, #120]	; (80026a8 <HAL_ADC_ConfigChannel+0x37c>)
 800262e:	e76c      	b.n	800250a <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	07d7      	lsls	r7, r2, #31
 8002634:	d4d4      	bmi.n	80025e0 <HAL_ADC_ConfigChannel+0x2b4>
 8002636:	e70c      	b.n	8002452 <HAL_ADC_ConfigChannel+0x126>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002638:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800263a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800263e:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8002642:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8002646:	d014      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x346>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002648:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800264a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800264e:	4286      	cmp	r6, r0
 8002650:	d014      	beq.n	800267c <HAL_ADC_ConfigChannel+0x350>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002652:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002654:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002658:	4286      	cmp	r6, r0
 800265a:	d014      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x35a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800265c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800265e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002662:	4286      	cmp	r6, r0
 8002664:	f47f aebf 	bne.w	80023e6 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002668:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800266a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800266e:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002670:	e6b9      	b.n	80023e6 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002672:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002674:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002678:	6610      	str	r0, [r2, #96]	; 0x60
 800267a:	e7e5      	b.n	8002648 <HAL_ADC_ConfigChannel+0x31c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800267c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800267e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002682:	6650      	str	r0, [r2, #100]	; 0x64
 8002684:	e7e5      	b.n	8002652 <HAL_ADC_ConfigChannel+0x326>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002686:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002688:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800268c:	6690      	str	r0, [r2, #104]	; 0x68
 800268e:	e7e5      	b.n	800265c <HAL_ADC_ConfigChannel+0x330>
 8002690:	83fff000 	.word	0x83fff000
 8002694:	50000100 	.word	0x50000100
 8002698:	50000400 	.word	0x50000400
 800269c:	50000300 	.word	0x50000300
 80026a0:	200000e8 	.word	0x200000e8
 80026a4:	431bde83 	.word	0x431bde83
 80026a8:	50000500 	.word	0x50000500

080026ac <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	4a43      	ldr	r2, [pc, #268]	; (80027bc <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80026b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80026b4:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026b6:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026b8:	d00e      	beq.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00a      	beq.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 80026be:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d049      	beq.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80026c6:	4c3e      	ldr	r4, [pc, #248]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80026c8:	42a3      	cmp	r3, r4
 80026ca:	d005      	beq.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
} 
 80026ce:	4618      	mov	r0, r3
 80026d0:	bcf0      	pop	{r4, r5, r6, r7}
 80026d2:	4770      	bx	lr
 80026d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 80026d8:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80026dc:	2c01      	cmp	r4, #1
 80026de:	d041      	beq.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 80026e0:	2401      	movs	r4, #1
 80026e2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026e6:	689c      	ldr	r4, [r3, #8]
 80026e8:	0766      	lsls	r6, r4, #29
 80026ea:	d50a      	bpl.n	8002702 <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026ee:	f043 0320 	orr.w	r3, r3, #32
 80026f2:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 80026f6:	2200      	movs	r2, #0
 80026f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 80026fc:	bcf0      	pop	{r4, r5, r6, r7}
 80026fe:	4618      	mov	r0, r3
 8002700:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002702:	6894      	ldr	r4, [r2, #8]
 8002704:	0764      	lsls	r4, r4, #29
 8002706:	d4f1      	bmi.n	80026ec <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270c:	d044      	beq.n	8002798 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 800270e:	4f2b      	ldr	r7, [pc, #172]	; (80027bc <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002710:	4c2c      	ldr	r4, [pc, #176]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002712:	4e2d      	ldr	r6, [pc, #180]	; (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002714:	42bb      	cmp	r3, r7
 8002716:	bf18      	it	ne
 8002718:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800271a:	b33d      	cbz	r5, 800276c <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800271c:	68a7      	ldr	r7, [r4, #8]
 800271e:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 8002722:	684e      	ldr	r6, [r1, #4]
 8002724:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 8002728:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 800272c:	433e      	orrs	r6, r7
 800272e:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002730:	689e      	ldr	r6, [r3, #8]
 8002732:	f006 0603 	and.w	r6, r6, #3
 8002736:	2e01      	cmp	r6, #1
 8002738:	d03c      	beq.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800273a:	6893      	ldr	r3, [r2, #8]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d02f      	beq.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002744:	68a2      	ldr	r2, [r4, #8]
 8002746:	688b      	ldr	r3, [r1, #8]
 8002748:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800274c:	431d      	orrs	r5, r3
 800274e:	f022 020f 	bic.w	r2, r2, #15
 8002752:	4315      	orrs	r5, r2
 8002754:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e7cd      	b.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800275a:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800275e:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002760:	2c01      	cmp	r4, #1
 8002762:	d1bd      	bne.n	80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 8002764:	2302      	movs	r3, #2
} 
 8002766:	4618      	mov	r0, r3
 8002768:	bcf0      	pop	{r4, r5, r6, r7}
 800276a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800276c:	68a1      	ldr	r1, [r4, #8]
 800276e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8002772:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	f001 0103 	and.w	r1, r1, #3
 800277a:	2901      	cmp	r1, #1
 800277c:	d016      	beq.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800277e:	6893      	ldr	r3, [r2, #8]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d009      	beq.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002788:	68a3      	ldr	r3, [r4, #8]
 800278a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800278e:	f023 030f 	bic.w	r3, r3, #15
 8002792:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e7ae      	b.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002798:	4c0a      	ldr	r4, [pc, #40]	; (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800279a:	e7be      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	07db      	lsls	r3, r3, #31
 80027a0:	d4d9      	bmi.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80027a2:	e7f1      	b.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027a4:	6813      	ldr	r3, [r2, #0]
 80027a6:	07de      	lsls	r6, r3, #31
 80027a8:	d4d5      	bmi.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80027aa:	e7cb      	b.n	8002744 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	07d9      	lsls	r1, r3, #31
 80027b0:	d4d1      	bmi.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80027b2:	e7e4      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	07df      	lsls	r7, r3, #31
 80027b8:	d5bf      	bpl.n	800273a <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80027ba:	e7cc      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80027bc:	50000100 	.word	0x50000100
 80027c0:	50000500 	.word	0x50000500
 80027c4:	50000300 	.word	0x50000300
 80027c8:	50000700 	.word	0x50000700

080027cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4908      	ldr	r1, [pc, #32]	; (80027f0 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80027ce:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d2:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80027d8:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027da:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80027ec:	60cb      	str	r3, [r1, #12]
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_NVIC_SetPriority+0x68>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fe:	f1c3 0507 	rsb	r5, r3, #7
 8002802:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002804:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	bf28      	it	cs
 800280a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280c:	2c06      	cmp	r4, #6
 800280e:	d919      	bls.n	8002844 <HAL_NVIC_SetPriority+0x50>
 8002810:	3b03      	subs	r3, #3
 8002812:	f04f 34ff 	mov.w	r4, #4294967295
 8002816:	409c      	lsls	r4, r3
 8002818:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 34ff 	mov.w	r4, #4294967295
 8002820:	40ac      	lsls	r4, r5
 8002822:	ea21 0104 	bic.w	r1, r1, r4
 8002826:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002828:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800282e:	db0c      	blt.n	800284a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002834:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002838:	0109      	lsls	r1, r1, #4
 800283a:	b2c9      	uxtb	r1, r1
 800283c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002840:	bc30      	pop	{r4, r5}
 8002842:	4770      	bx	lr
 8002844:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	4613      	mov	r3, r2
 8002848:	e7e8      	b.n	800281c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_NVIC_SetPriority+0x6c>)
 800284c:	f000 000f 	and.w	r0, r0, #15
 8002850:	0109      	lsls	r1, r1, #4
 8002852:	4403      	add	r3, r0
 8002854:	b2c9      	uxtb	r1, r1
 8002856:	7619      	strb	r1, [r3, #24]
 8002858:	bc30      	pop	{r4, r5}
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	e000ecfc 	.word	0xe000ecfc

08002864 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002864:	2800      	cmp	r0, #0
 8002866:	db07      	blt.n	8002878 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002868:	f000 011f 	and.w	r1, r0, #31
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_NVIC_EnableIRQ+0x18>)
 800286e:	0940      	lsrs	r0, r0, #5
 8002870:	2301      	movs	r3, #1
 8002872:	408b      	lsls	r3, r1
 8002874:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e100 	.word	0xe000e100

08002880 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	3801      	subs	r0, #1
 8002882:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002886:	d20e      	bcs.n	80028a6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	4c08      	ldr	r4, [pc, #32]	; (80028b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	20f0      	movs	r0, #240	; 0xf0
 8002892:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002896:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002898:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800289e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	6019      	str	r1, [r3, #0]
 80028a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2001      	movs	r0, #1
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d034      	beq.n	8002922 <HAL_DMA_Init+0x6e>
{ 
 80028b8:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028ba:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028be:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 80028c2:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 80028c4:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c8:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 80028cc:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d0:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 80028d2:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d4:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d8:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028da:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028de:	4c12      	ldr	r4, [pc, #72]	; (8002928 <HAL_DMA_Init+0x74>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028e0:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80028e4:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028e6:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 80028e8:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028ea:	d910      	bls.n	800290e <HAL_DMA_Init+0x5a>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028ec:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_DMA_Init+0x78>)
 80028ee:	4910      	ldr	r1, [pc, #64]	; (8002930 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 80028f0:	4c10      	ldr	r4, [pc, #64]	; (8002934 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028f2:	4402      	add	r2, r0
 80028f4:	fba1 1202 	umull	r1, r2, r1, r2
 80028f8:	0912      	lsrs	r2, r2, #4
 80028fa:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 80028fc:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002900:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8002902:	8419      	strh	r1, [r3, #32]
 8002904:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
}  
 8002908:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290a:	6398      	str	r0, [r3, #56]	; 0x38
}  
 800290c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_DMA_Init+0x84>)
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <HAL_DMA_Init+0x7c>)
 8002912:	4402      	add	r2, r0
 8002914:	fba1 1202 	umull	r1, r2, r1, r2
 8002918:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 800291a:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800291e:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8002920:	e7ec      	b.n	80028fc <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
}  
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40020407 	.word	0x40020407
 800292c:	bffdfbf8 	.word	0xbffdfbf8
 8002930:	cccccccd 	.word	0xcccccccd
 8002934:	40020400 	.word	0x40020400
 8002938:	bffdfff8 	.word	0xbffdfff8

0800293c <HAL_DMA_Start_IT>:
{
 800293c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800293e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002942:	2c01      	cmp	r4, #1
 8002944:	d039      	beq.n	80029ba <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002946:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800294a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800294c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800294e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002952:	d005      	beq.n	8002960 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8002954:	2300      	movs	r3, #0
 8002956:	f880 3020 	strb.w	r3, [r0, #32]
} 
 800295a:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800295c:	2002      	movs	r0, #2
} 
 800295e:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002960:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002962:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002964:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002966:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296a:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800296c:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800296e:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002970:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002974:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002976:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800297a:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297c:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800297e:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002980:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8002982:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002984:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 8002986:	bf0b      	itete	eq
 8002988:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800298a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800298c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800298e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002990:	b153      	cbz	r3, 80029a8 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f043 030e 	orr.w	r3, r3, #14
 8002998:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2000      	movs	r0, #0
} 
 80029a4:	bcf0      	pop	{r4, r5, r6, r7}
 80029a6:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f043 030a 	orr.w	r3, r3, #10
 80029ae:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f023 0304 	bic.w	r3, r3, #4
 80029b6:	6023      	str	r3, [r4, #0]
 80029b8:	e7ef      	b.n	800299a <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80029ba:	2002      	movs	r0, #2
} 
 80029bc:	bcf0      	pop	{r4, r5, r6, r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c4:	680c      	ldr	r4, [r1, #0]
{
 80029c6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	f000 8084 	beq.w	8002ad6 <HAL_GPIO_Init+0x116>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ce:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8002bb4 <HAL_GPIO_Init+0x1f4>
  uint32_t position = 0x00u;
 80029d2:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029d4:	f04f 0a01 	mov.w	sl, #1
 80029d8:	4688      	mov	r8, r1
 80029da:	fa0a fc03 	lsl.w	ip, sl, r3
    if (iocurrent != 0x00u)
 80029de:	ea1c 0904 	ands.w	r9, ip, r4
 80029e2:	d074      	beq.n	8002ace <HAL_GPIO_Init+0x10e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80029e8:	f005 0203 	and.w	r2, r5, #3
 80029ec:	1e51      	subs	r1, r2, #1
 80029ee:	2901      	cmp	r1, #1
 80029f0:	ea4f 0743 	mov.w	r7, r3, lsl #1
 80029f4:	d972      	bls.n	8002adc <HAL_GPIO_Init+0x11c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f6:	2a03      	cmp	r2, #3
 80029f8:	f040 80b0 	bne.w	8002b5c <HAL_GPIO_Init+0x19c>
 80029fc:	40ba      	lsls	r2, r7
 80029fe:	43d1      	mvns	r1, r2
 8002a00:	9100      	str	r1, [sp, #0]
      temp = GPIOx->MODER;
 8002a02:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a04:	9900      	ldr	r1, [sp, #0]
 8002a06:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a08:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a0a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002a0e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a10:	d05d      	beq.n	8002ace <HAL_GPIO_Init+0x10e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	4961      	ldr	r1, [pc, #388]	; (8002b98 <HAL_GPIO_Init+0x1d8>)
 8002a14:	698a      	ldr	r2, [r1, #24]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	618a      	str	r2, [r1, #24]
 8002a1c:	698a      	ldr	r2, [r1, #24]
 8002a1e:	f023 0603 	bic.w	r6, r3, #3
 8002a22:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002a26:	f002 0201 	and.w	r2, r2, #1
 8002a2a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002a2e:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a30:	f003 0103 	and.w	r1, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a34:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a36:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a38:	0089      	lsls	r1, r1, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	408a      	lsls	r2, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a3e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a42:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a46:	d01b      	beq.n	8002a80 <HAL_GPIO_Init+0xc0>
 8002a48:	4f54      	ldr	r7, [pc, #336]	; (8002b9c <HAL_GPIO_Init+0x1dc>)
 8002a4a:	42b8      	cmp	r0, r7
 8002a4c:	f000 8090 	beq.w	8002b70 <HAL_GPIO_Init+0x1b0>
 8002a50:	4f53      	ldr	r7, [pc, #332]	; (8002ba0 <HAL_GPIO_Init+0x1e0>)
 8002a52:	42b8      	cmp	r0, r7
 8002a54:	f000 8090 	beq.w	8002b78 <HAL_GPIO_Init+0x1b8>
 8002a58:	4f52      	ldr	r7, [pc, #328]	; (8002ba4 <HAL_GPIO_Init+0x1e4>)
 8002a5a:	42b8      	cmp	r0, r7
 8002a5c:	f000 8083 	beq.w	8002b66 <HAL_GPIO_Init+0x1a6>
 8002a60:	4f51      	ldr	r7, [pc, #324]	; (8002ba8 <HAL_GPIO_Init+0x1e8>)
 8002a62:	42b8      	cmp	r0, r7
 8002a64:	f000 808d 	beq.w	8002b82 <HAL_GPIO_Init+0x1c2>
 8002a68:	4f50      	ldr	r7, [pc, #320]	; (8002bac <HAL_GPIO_Init+0x1ec>)
 8002a6a:	42b8      	cmp	r0, r7
 8002a6c:	f000 808e 	beq.w	8002b8c <HAL_GPIO_Init+0x1cc>
 8002a70:	4f4f      	ldr	r7, [pc, #316]	; (8002bb0 <HAL_GPIO_Init+0x1f0>)
 8002a72:	42b8      	cmp	r0, r7
 8002a74:	bf0c      	ite	eq
 8002a76:	2706      	moveq	r7, #6
 8002a78:	2707      	movne	r7, #7
 8002a7a:	fa07 f101 	lsl.w	r1, r7, r1
 8002a7e:	430a      	orrs	r2, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a80:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 8002a82:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
 8002a86:	ea6f 0609 	mvn.w	r6, r9
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a8a:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8002a8c:	bf54      	ite	pl
 8002a8e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002a90:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 8002a94:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR;
 8002a98:	f8db 1004 	ldr.w	r1, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a9c:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8002a9e:	bf54      	ite	pl
 8002aa0:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8002aa2:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR = temp;
 8002aa6:	f8cb 1004 	str.w	r1, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aaa:	f8db 1008 	ldr.w	r1, [fp, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aae:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8002ab0:	bf54      	ite	pl
 8002ab2:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8002ab4:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->RTSR = temp;
 8002ab8:	f8cb 1008 	str.w	r1, [fp, #8]

        temp = EXTI->FTSR;
 8002abc:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac0:	02a9      	lsls	r1, r5, #10
        temp &= ~(iocurrent);
 8002ac2:	bf54      	ite	pl
 8002ac4:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002ac6:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR = temp;
 8002aca:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 8002ace:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad0:	fa34 f203 	lsrs.w	r2, r4, r3
 8002ad4:	d181      	bne.n	80029da <HAL_GPIO_Init+0x1a>
  }
}
 8002ad6:	b005      	add	sp, #20
 8002ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002adc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ade:	2103      	movs	r1, #3
 8002ae0:	40b9      	lsls	r1, r7
 8002ae2:	ea26 0e01 	bic.w	lr, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae6:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8002aea:	40be      	lsls	r6, r7
 8002aec:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002af0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002af2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afa:	ea2e 0c0c 	bic.w	ip, lr, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afe:	409e      	lsls	r6, r3
 8002b00:	ea46 060c 	orr.w	r6, r6, ip
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b04:	43c9      	mvns	r1, r1
 8002b06:	9100      	str	r1, [sp, #0]
        GPIOx->OTYPER = temp;
 8002b08:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002b0a:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b0c:	ea06 0c01 	and.w	ip, r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b10:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8002b14:	40be      	lsls	r6, r7
 8002b16:	ea46 060c 	orr.w	r6, r6, ip
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002b1c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	d001      	beq.n	8002b24 <HAL_GPIO_Init+0x164>
 8002b20:	40ba      	lsls	r2, r7
 8002b22:	e76e      	b.n	8002a02 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 8002b24:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002b28:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b2c:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002b30:	f8de 1020 	ldr.w	r1, [lr, #32]
 8002b34:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b36:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	fa01 f60c 	lsl.w	r6, r1, ip
 8002b40:	9901      	ldr	r1, [sp, #4]
 8002b42:	ea21 0606 	bic.w	r6, r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b46:	f8d8 1010 	ldr.w	r1, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b4a:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b4c:	fa01 f60c 	lsl.w	r6, r1, ip
 8002b50:	9901      	ldr	r1, [sp, #4]
 8002b52:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002b54:	40ba      	lsls	r2, r7
 8002b56:	f8ce 6020 	str.w	r6, [lr, #32]
 8002b5a:	e752      	b.n	8002a02 <HAL_GPIO_Init+0x42>
 8002b5c:	2103      	movs	r1, #3
 8002b5e:	40b9      	lsls	r1, r7
 8002b60:	43c9      	mvns	r1, r1
 8002b62:	9100      	str	r1, [sp, #0]
 8002b64:	e7d1      	b.n	8002b0a <HAL_GPIO_Init+0x14a>
 8002b66:	2703      	movs	r7, #3
 8002b68:	fa07 f101 	lsl.w	r1, r7, r1
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	e787      	b.n	8002a80 <HAL_GPIO_Init+0xc0>
 8002b70:	fa0a f101 	lsl.w	r1, sl, r1
 8002b74:	430a      	orrs	r2, r1
 8002b76:	e783      	b.n	8002a80 <HAL_GPIO_Init+0xc0>
 8002b78:	2702      	movs	r7, #2
 8002b7a:	fa07 f101 	lsl.w	r1, r7, r1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	e77e      	b.n	8002a80 <HAL_GPIO_Init+0xc0>
 8002b82:	2704      	movs	r7, #4
 8002b84:	fa07 f101 	lsl.w	r1, r7, r1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	e779      	b.n	8002a80 <HAL_GPIO_Init+0xc0>
 8002b8c:	2705      	movs	r7, #5
 8002b8e:	fa07 f101 	lsl.w	r1, r7, r1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	e774      	b.n	8002a80 <HAL_GPIO_Init+0xc0>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	48000400 	.word	0x48000400
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000c00 	.word	0x48000c00
 8002ba8:	48001000 	.word	0x48001000
 8002bac:	48001400 	.word	0x48001400
 8002bb0:	48001800 	.word	0x48001800
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb8:	b10a      	cbz	r2, 8002bbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bba:	6181      	str	r1, [r0, #24]
 8002bbc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bbe:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002bca:	6951      	ldr	r1, [r2, #20]
 8002bcc:	4201      	tst	r1, r0
 8002bce:	d100      	bne.n	8002bd2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002bd0:	4770      	bx	lr
{
 8002bd2:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bd4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd6:	f7ff fff5 	bl	8002bc4 <HAL_GPIO_EXTI_Callback>
}
 8002bda:	bd08      	pop	{r3, pc}
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f000 827f 	beq.w	80030e4 <HAL_RCC_OscConfig+0x504>
{
 8002be6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bea:	6803      	ldr	r3, [r0, #0]
 8002bec:	07df      	lsls	r7, r3, #31
{
 8002bee:	b083      	sub	sp, #12
 8002bf0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	d53d      	bpl.n	8002c70 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bf4:	49c1      	ldr	r1, [pc, #772]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002bf6:	684a      	ldr	r2, [r1, #4]
 8002bf8:	f002 020c 	and.w	r2, r2, #12
 8002bfc:	2a04      	cmp	r2, #4
 8002bfe:	f000 815f 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c02:	684a      	ldr	r2, [r1, #4]
 8002c04:	f002 020c 	and.w	r2, r2, #12
 8002c08:	2a08      	cmp	r2, #8
 8002c0a:	f000 8152 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0e:	6863      	ldr	r3, [r4, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	f000 816b 	beq.w	8002eee <HAL_RCC_OscConfig+0x30e>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 819a 	beq.w	8002f52 <HAL_RCC_OscConfig+0x372>
 8002c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c22:	f000 82bc 	beq.w	800319e <HAL_RCC_OscConfig+0x5be>
 8002c26:	4bb5      	ldr	r3, [pc, #724]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c36:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff f876 	bl	8001d28 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3c:	4faf      	ldr	r7, [pc, #700]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8002c3e:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c44:	2601      	movs	r6, #1
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff f86e 	bl	8001d28 <HAL_GetTick>
 8002c4c:	1b40      	subs	r0, r0, r5
 8002c4e:	2864      	cmp	r0, #100	; 0x64
 8002c50:	f200 817b 	bhi.w	8002f4a <HAL_RCC_OscConfig+0x36a>
 8002c54:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	fa98 f3a8 	rbit	r3, r8
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	fa06 f303 	lsl.w	r3, r6, r3
 8002c6a:	4213      	tst	r3, r2
 8002c6c:	d0ec      	beq.n	8002c48 <HAL_RCC_OscConfig+0x68>
 8002c6e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c70:	079e      	lsls	r6, r3, #30
 8002c72:	d542      	bpl.n	8002cfa <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c74:	4aa1      	ldr	r2, [pc, #644]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002c76:	6851      	ldr	r1, [r2, #4]
 8002c78:	f011 0f0c 	tst.w	r1, #12
 8002c7c:	f000 80cf 	beq.w	8002e1e <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c80:	6851      	ldr	r1, [r2, #4]
 8002c82:	f001 010c 	and.w	r1, r1, #12
 8002c86:	2908      	cmp	r1, #8
 8002c88:	f000 80c2 	beq.w	8002e10 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8c:	68e2      	ldr	r2, [r4, #12]
 8002c8e:	2a00      	cmp	r2, #0
 8002c90:	f000 81b8 	beq.w	8003004 <HAL_RCC_OscConfig+0x424>
 8002c94:	2201      	movs	r2, #1
 8002c96:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ca6:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 8002caa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cac:	f7ff f83c 	bl	8001d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	4e92      	ldr	r6, [pc, #584]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e005      	b.n	8002cc6 <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cba:	f7ff f835 	bl	8001d28 <HAL_GetTick>
 8002cbe:	1b40      	subs	r0, r0, r5
 8002cc0:	2802      	cmp	r0, #2
 8002cc2:	f200 8142 	bhi.w	8002f4a <HAL_RCC_OscConfig+0x36a>
 8002cc6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	6832      	ldr	r2, [r6, #0]
 8002ccc:	fa98 f3a8 	rbit	r3, r8
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	fa07 f303 	lsl.w	r3, r7, r3
 8002cdc:	4213      	tst	r3, r2
 8002cde:	d0ec      	beq.n	8002cba <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	6831      	ldr	r1, [r6, #0]
 8002ce2:	22f8      	movs	r2, #248	; 0xf8
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	6923      	ldr	r3, [r4, #16]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002cf2:	4093      	lsls	r3, r2
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6033      	str	r3, [r6, #0]
 8002cf8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	071d      	lsls	r5, r3, #28
 8002cfc:	d421      	bmi.n	8002d42 <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfe:	0758      	lsls	r0, r3, #29
 8002d00:	d54e      	bpl.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b7e      	ldr	r3, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	00d1      	lsls	r1, r2, #3
 8002d08:	f140 80c7 	bpl.w	8002e9a <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8002d0c:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	4d7b      	ldr	r5, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x320>)
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	05da      	lsls	r2, r3, #23
 8002d16:	f140 8108 	bpl.w	8002f2a <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1a:	68a3      	ldr	r3, [r4, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f000 8197 	beq.w	8003050 <HAL_RCC_OscConfig+0x470>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8138 	beq.w	8002f98 <HAL_RCC_OscConfig+0x3b8>
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	4b74      	ldr	r3, [pc, #464]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	f000 81d1 	beq.w	80030d4 <HAL_RCC_OscConfig+0x4f4>
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	621a      	str	r2, [r3, #32]
 8002d38:	6a1a      	ldr	r2, [r3, #32]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	621a      	str	r2, [r3, #32]
 8002d40:	e18b      	b.n	800305a <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d42:	6962      	ldr	r2, [r4, #20]
 8002d44:	2a00      	cmp	r2, #0
 8002d46:	f000 8081 	beq.w	8002e4c <HAL_RCC_OscConfig+0x26c>
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002d50:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	4f6a      	ldr	r7, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 8002d54:	fab1 f181 	clz	r1, r1
 8002d58:	440b      	add	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5c:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d60:	f7fe ffe2 	bl	8001d28 <HAL_GetTick>
 8002d64:	f04f 0802 	mov.w	r8, #2
 8002d68:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e005      	b.n	8002d78 <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe ffdc 	bl	8001d28 <HAL_GetTick>
 8002d70:	1b40      	subs	r0, r0, r5
 8002d72:	2802      	cmp	r0, #2
 8002d74:	f200 80e9 	bhi.w	8002f4a <HAL_RCC_OscConfig+0x36a>
 8002d78:	fa98 f3a8 	rbit	r3, r8
 8002d7c:	fa98 f3a8 	rbit	r3, r8
 8002d80:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d86:	fa98 f3a8 	rbit	r3, r8
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	fa06 f303 	lsl.w	r3, r6, r3
 8002d96:	4213      	tst	r3, r2
 8002d98:	d0e8      	beq.n	8002d6c <HAL_RCC_OscConfig+0x18c>
 8002d9a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	0758      	lsls	r0, r3, #29
 8002d9e:	d4b0      	bmi.n	8002d02 <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	69a0      	ldr	r0, [r4, #24]
 8002da2:	b388      	cbz	r0, 8002e08 <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da4:	4d55      	ldr	r5, [pc, #340]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002da6:	686b      	ldr	r3, [r5, #4]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	f000 8179 	beq.w	80030a4 <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	2802      	cmp	r0, #2
 8002db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db8:	f000 8196 	beq.w	80030e8 <HAL_RCC_OscConfig+0x508>
 8002dbc:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe ffa9 	bl	8001d28 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	462c      	mov	r4, r5
 8002dd8:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8002ddc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dde:	2601      	movs	r6, #1
 8002de0:	e005      	b.n	8002dee <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe ffa1 	bl	8001d28 <HAL_GetTick>
 8002de6:	1b40      	subs	r0, r0, r5
 8002de8:	2802      	cmp	r0, #2
 8002dea:	f200 80ae 	bhi.w	8002f4a <HAL_RCC_OscConfig+0x36a>
 8002dee:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	fa97 f3a7 	rbit	r3, r7
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa06 f303 	lsl.w	r3, r6, r3
 8002e04:	4213      	tst	r3, r2
 8002e06:	d1ec      	bne.n	8002de2 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 8002e08:	2000      	movs	r0, #0
}
 8002e0a:	b003      	add	sp, #12
 8002e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e10:	6852      	ldr	r2, [r2, #4]
 8002e12:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002e16:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e1a:	f47f af37 	bne.w	8002c8c <HAL_RCC_OscConfig+0xac>
 8002e1e:	2202      	movs	r2, #2
 8002e20:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e24:	4935      	ldr	r1, [pc, #212]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002e26:	6808      	ldr	r0, [r1, #0]
 8002e28:	fa92 f2a2 	rbit	r2, r2
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	f002 021f 	and.w	r2, r2, #31
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	4202      	tst	r2, r0
 8002e3c:	d064      	beq.n	8002f08 <HAL_RCC_OscConfig+0x328>
 8002e3e:	68e2      	ldr	r2, [r4, #12]
 8002e40:	428a      	cmp	r2, r1
 8002e42:	d061      	beq.n	8002f08 <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
}
 8002e46:	b003      	add	sp, #12
 8002e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e4c:	2501      	movs	r5, #1
 8002e4e:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4f29      	ldr	r7, [pc, #164]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8002e56:	fab1 f181 	clz	r1, r1
 8002e5a:	440b      	add	r3, r1
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	f04f 0802 	mov.w	r8, #2
 8002e62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002e64:	f7fe ff60 	bl	8001d28 <HAL_GetTick>
 8002e68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6a:	e004      	b.n	8002e76 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe ff5c 	bl	8001d28 <HAL_GetTick>
 8002e70:	1b80      	subs	r0, r0, r6
 8002e72:	2802      	cmp	r0, #2
 8002e74:	d869      	bhi.n	8002f4a <HAL_RCC_OscConfig+0x36a>
 8002e76:	fa98 f3a8 	rbit	r3, r8
 8002e7a:	fa98 f3a8 	rbit	r3, r8
 8002e7e:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	fa98 f3a8 	rbit	r3, r8
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa05 f303 	lsl.w	r3, r5, r3
 8002e94:	4213      	tst	r3, r2
 8002e96:	d1e9      	bne.n	8002e6c <HAL_RCC_OscConfig+0x28c>
 8002e98:	e77f      	b.n	8002d9a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ea0:	61da      	str	r2, [r3, #28]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002eac:	f04f 0801 	mov.w	r8, #1
 8002eb0:	e72e      	b.n	8002d10 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb2:	684a      	ldr	r2, [r1, #4]
 8002eb4:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002eb8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002ebc:	f47f aea7 	bne.w	8002c0e <HAL_RCC_OscConfig+0x2e>
 8002ec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec4:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002eca:	6808      	ldr	r0, [r1, #0]
 8002ecc:	fa92 f2a2 	rbit	r2, r2
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	f002 021f 	and.w	r2, r2, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	4202      	tst	r2, r0
 8002ee0:	f43f aec6 	beq.w	8002c70 <HAL_RCC_OscConfig+0x90>
 8002ee4:	6862      	ldr	r2, [r4, #4]
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	f47f aec2 	bne.w	8002c70 <HAL_RCC_OscConfig+0x90>
 8002eec:	e7aa      	b.n	8002e44 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eee:	4a03      	ldr	r2, [pc, #12]	; (8002efc <HAL_RCC_OscConfig+0x31c>)
 8002ef0:	6813      	ldr	r3, [r2, #0]
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef8:	e69e      	b.n	8002c38 <HAL_RCC_OscConfig+0x58>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4dab      	ldr	r5, [pc, #684]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
 8002f0a:	21f8      	movs	r1, #248	; 0xf8
 8002f0c:	6828      	ldr	r0, [r5, #0]
 8002f0e:	fa91 f1a1 	rbit	r1, r1
 8002f12:	6922      	ldr	r2, [r4, #16]
 8002f14:	fab1 f181 	clz	r1, r1
 8002f18:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8002f1c:	408a      	lsls	r2, r1
 8002f1e:	4302      	orrs	r2, r0
 8002f20:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	071d      	lsls	r5, r3, #28
 8002f24:	f57f aeeb 	bpl.w	8002cfe <HAL_RCC_OscConfig+0x11e>
 8002f28:	e70b      	b.n	8002d42 <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f30:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002f32:	f7fe fef9 	bl	8001d28 <HAL_GetTick>
 8002f36:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	05db      	lsls	r3, r3, #23
 8002f3c:	f53f aeed 	bmi.w	8002d1a <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f40:	f7fe fef2 	bl	8001d28 <HAL_GetTick>
 8002f44:	1b80      	subs	r0, r0, r6
 8002f46:	2864      	cmp	r0, #100	; 0x64
 8002f48:	d9f6      	bls.n	8002f38 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8002f4a:	2003      	movs	r0, #3
}
 8002f4c:	b003      	add	sp, #12
 8002f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f52:	4d99      	ldr	r5, [pc, #612]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	602b      	str	r3, [r5, #0]
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f64:	f7fe fee0 	bl	8001d28 <HAL_GetTick>
 8002f68:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002f6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	2701      	movs	r7, #1
 8002f70:	e004      	b.n	8002f7c <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f72:	f7fe fed9 	bl	8001d28 <HAL_GetTick>
 8002f76:	1b80      	subs	r0, r0, r6
 8002f78:	2864      	cmp	r0, #100	; 0x64
 8002f7a:	d8e6      	bhi.n	8002f4a <HAL_RCC_OscConfig+0x36a>
 8002f7c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f80:	682a      	ldr	r2, [r5, #0]
 8002f82:	fa98 f3a8 	rbit	r3, r8
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	fa07 f303 	lsl.w	r3, r7, r3
 8002f92:	4213      	tst	r3, r2
 8002f94:	d1ed      	bne.n	8002f72 <HAL_RCC_OscConfig+0x392>
 8002f96:	e66a      	b.n	8002c6e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	4d87      	ldr	r5, [pc, #540]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
 8002f9a:	6a2b      	ldr	r3, [r5, #32]
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	622b      	str	r3, [r5, #32]
 8002fa2:	6a2b      	ldr	r3, [r5, #32]
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002faa:	f7fe febd 	bl	8001d28 <HAL_GetTick>
 8002fae:	f04f 0902 	mov.w	r9, #2
 8002fb2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	2701      	movs	r7, #1
 8002fb6:	e013      	b.n	8002fe0 <HAL_RCC_OscConfig+0x400>
 8002fb8:	fa99 f3a9 	rbit	r3, r9
 8002fbc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002fbe:	fa99 f3a9 	rbit	r3, r9
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	fa07 f303 	lsl.w	r3, r7, r3
 8002fce:	4213      	tst	r3, r2
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe fea9 	bl	8001d28 <HAL_GetTick>
 8002fd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fda:	1b80      	subs	r0, r0, r6
 8002fdc:	4298      	cmp	r0, r3
 8002fde:	d8b4      	bhi.n	8002f4a <HAL_RCC_OscConfig+0x36a>
 8002fe0:	fa99 f3a9 	rbit	r3, r9
 8002fe4:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0e5      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x3d8>
 8002fec:	6a2a      	ldr	r2, [r5, #32]
 8002fee:	e7e6      	b.n	8002fbe <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 8002ff0:	f1b8 0f00 	cmp.w	r8, #0
 8002ff4:	f43f aed4 	beq.w	8002da0 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4a6f      	ldr	r2, [pc, #444]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
 8002ffa:	69d3      	ldr	r3, [r2, #28]
 8002ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003000:	61d3      	str	r3, [r2, #28]
 8003002:	e6cd      	b.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
 8003004:	2501      	movs	r5, #1
 8003006:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003012:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003016:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003018:	4f67      	ldr	r7, [pc, #412]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 800301a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800301c:	f7fe fe84 	bl	8001d28 <HAL_GetTick>
 8003020:	f04f 0802 	mov.w	r8, #2
 8003024:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	e004      	b.n	8003032 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003028:	f7fe fe7e 	bl	8001d28 <HAL_GetTick>
 800302c:	1b80      	subs	r0, r0, r6
 800302e:	2802      	cmp	r0, #2
 8003030:	d88b      	bhi.n	8002f4a <HAL_RCC_OscConfig+0x36a>
 8003032:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	fa98 f3a8 	rbit	r3, r8
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	fa05 f303 	lsl.w	r3, r5, r3
 8003048:	4213      	tst	r3, r2
 800304a:	d1ed      	bne.n	8003028 <HAL_RCC_OscConfig+0x448>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	e654      	b.n	8002cfa <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003050:	4a59      	ldr	r2, [pc, #356]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
 8003052:	6a13      	ldr	r3, [r2, #32]
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800305a:	f7fe fe65 	bl	8001d28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	4f56      	ldr	r7, [pc, #344]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8003060:	4605      	mov	r5, r0
 8003062:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	2601      	movs	r6, #1
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x4b4>
 800306a:	fa99 f3a9 	rbit	r3, r9
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	fa99 f3a9 	rbit	r3, r9
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa06 f303 	lsl.w	r3, r6, r3
 8003080:	4213      	tst	r3, r2
 8003082:	d1b5      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe fe50 	bl	8001d28 <HAL_GetTick>
 8003088:	f241 3388 	movw	r3, #5000	; 0x1388
 800308c:	1b40      	subs	r0, r0, r5
 800308e:	4298      	cmp	r0, r3
 8003090:	f63f af5b 	bhi.w	8002f4a <HAL_RCC_OscConfig+0x36a>
 8003094:	fa99 f3a9 	rbit	r3, r9
 8003098:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0e4      	beq.n	800306a <HAL_RCC_OscConfig+0x48a>
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	e7e5      	b.n	8003070 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	2801      	cmp	r0, #1
 80030a6:	f43f aeb0 	beq.w	8002e0a <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 80030aa:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030ac:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 80030ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030b0:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 80030b4:	4288      	cmp	r0, r1
 80030b6:	f47f aec5 	bne.w	8002e44 <HAL_RCC_OscConfig+0x264>
 80030ba:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030bc:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030c0:	428a      	cmp	r2, r1
 80030c2:	f47f aebf 	bne.w	8002e44 <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80030c8:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 80030cc:	1a18      	subs	r0, r3, r0
 80030ce:	bf18      	it	ne
 80030d0:	2001      	movne	r0, #1
 80030d2:	e69a      	b.n	8002e0a <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d4:	f042 0204 	orr.w	r2, r2, #4
 80030d8:	621a      	str	r2, [r3, #32]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	621a      	str	r2, [r3, #32]
 80030e2:	e7ba      	b.n	800305a <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 80030e4:	2001      	movs	r0, #1
}
 80030e6:	4770      	bx	lr
 80030e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030fe:	f7fe fe13 	bl	8001d28 <HAL_GetTick>
 8003102:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003106:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	2701      	movs	r7, #1
 800310a:	e005      	b.n	8003118 <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fe0c 	bl	8001d28 <HAL_GetTick>
 8003110:	1b80      	subs	r0, r0, r6
 8003112:	2802      	cmp	r0, #2
 8003114:	f63f af19 	bhi.w	8002f4a <HAL_RCC_OscConfig+0x36a>
 8003118:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	682a      	ldr	r2, [r5, #0]
 800311e:	fa98 f3a8 	rbit	r3, r8
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	fa07 f303 	lsl.w	r3, r7, r3
 800312e:	4213      	tst	r3, r2
 8003130:	d1ec      	bne.n	800310c <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003132:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003134:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003136:	f023 030f 	bic.w	r3, r3, #15
 800313a:	4313      	orrs	r3, r2
 800313c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800313e:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8003142:	686a      	ldr	r2, [r5, #4]
 8003144:	430b      	orrs	r3, r1
 8003146:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800314a:	4313      	orrs	r3, r2
 800314c:	606b      	str	r3, [r5, #4]
 800314e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003152:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800315e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003162:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003164:	4e14      	ldr	r6, [pc, #80]	; (80031b8 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 8003166:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8003168:	f7fe fdde 	bl	8001d28 <HAL_GetTick>
 800316c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003170:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003172:	2501      	movs	r5, #1
 8003174:	e005      	b.n	8003182 <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe fdd7 	bl	8001d28 <HAL_GetTick>
 800317a:	1b00      	subs	r0, r0, r4
 800317c:	2802      	cmp	r0, #2
 800317e:	f63f aee4 	bhi.w	8002f4a <HAL_RCC_OscConfig+0x36a>
 8003182:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003186:	6832      	ldr	r2, [r6, #0]
 8003188:	fa98 f3a8 	rbit	r3, r8
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa05 f303 	lsl.w	r3, r5, r3
 8003198:	4213      	tst	r3, r2
 800319a:	d0ec      	beq.n	8003176 <HAL_RCC_OscConfig+0x596>
 800319c:	e634      	b.n	8002e08 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031a2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e53f      	b.n	8002c38 <HAL_RCC_OscConfig+0x58>
 80031b8:	40021000 	.word	0x40021000

080031bc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031bc:	2800      	cmp	r0, #0
 80031be:	f000 80c4 	beq.w	800334a <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c2:	4a6d      	ldr	r2, [pc, #436]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	428b      	cmp	r3, r1
{
 80031cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d0:	460d      	mov	r5, r1
 80031d2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	d20c      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	f023 0307 	bic.w	r3, r3, #7
 80031dc:	430b      	orrs	r3, r1
 80031de:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	428b      	cmp	r3, r1
 80031e8:	d002      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80031ea:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	0798      	lsls	r0, r3, #30
 80031f4:	d506      	bpl.n	8003204 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f6:	4961      	ldr	r1, [pc, #388]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	68a0      	ldr	r0, [r4, #8]
 80031fa:	684a      	ldr	r2, [r1, #4]
 80031fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003200:	4302      	orrs	r2, r0
 8003202:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003204:	07d9      	lsls	r1, r3, #31
 8003206:	d52f      	bpl.n	8003268 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003208:	6861      	ldr	r1, [r4, #4]
 800320a:	2901      	cmp	r1, #1
 800320c:	f000 809f 	beq.w	800334e <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003210:	2902      	cmp	r1, #2
 8003212:	f000 8087 	beq.w	8003324 <HAL_RCC_ClockConfig+0x168>
 8003216:	2202      	movs	r2, #2
 8003218:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	fa92 f2a2 	rbit	r2, r2
 8003224:	fab2 f282 	clz	r2, r2
 8003228:	f002 021f 	and.w	r2, r2, #31
 800322c:	2301      	movs	r3, #1
 800322e:	fa03 f202 	lsl.w	r2, r3, r2
 8003232:	4202      	tst	r2, r0
 8003234:	d0d9      	beq.n	80031ea <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4e51      	ldr	r6, [pc, #324]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	6873      	ldr	r3, [r6, #4]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	430b      	orrs	r3, r1
 8003240:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003242:	f7fe fd71 	bl	8001d28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003246:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800324a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324c:	e005      	b.n	800325a <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324e:	f7fe fd6b 	bl	8001d28 <HAL_GetTick>
 8003252:	1bc0      	subs	r0, r0, r7
 8003254:	4540      	cmp	r0, r8
 8003256:	f200 808c 	bhi.w	8003372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	6873      	ldr	r3, [r6, #4]
 800325c:	6862      	ldr	r2, [r4, #4]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003266:	d1f2      	bne.n	800324e <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003268:	4a43      	ldr	r2, [pc, #268]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	42ab      	cmp	r3, r5
 8003272:	d909      	bls.n	8003288 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	f023 0307 	bic.w	r3, r3, #7
 800327a:	432b      	orrs	r3, r5
 800327c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	42ab      	cmp	r3, r5
 8003286:	d1b0      	bne.n	80031ea <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	075a      	lsls	r2, r3, #29
 800328c:	d506      	bpl.n	800329c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328e:	493b      	ldr	r1, [pc, #236]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	68e0      	ldr	r0, [r4, #12]
 8003292:	684a      	ldr	r2, [r1, #4]
 8003294:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003298:	4302      	orrs	r2, r0
 800329a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329c:	071b      	lsls	r3, r3, #28
 800329e:	d507      	bpl.n	80032b0 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a0:	4a36      	ldr	r2, [pc, #216]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032a2:	6921      	ldr	r1, [r4, #16]
 80032a4:	6853      	ldr	r3, [r2, #4]
 80032a6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80032aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80032ae:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80032b0:	4a32      	ldr	r2, [pc, #200]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032b2:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b4:	f003 010c 	and.w	r1, r3, #12
 80032b8:	2908      	cmp	r1, #8
 80032ba:	d017      	beq.n	80032ec <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4930      	ldr	r1, [pc, #192]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032be:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	22f0      	movs	r2, #240	; 0xf0
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	fa92 f2a2 	rbit	r2, r2
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d0:	40d3      	lsrs	r3, r2
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 80032d4:	482c      	ldr	r0, [pc, #176]	; (8003388 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	4a2c      	ldr	r2, [pc, #176]	; (800338c <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 80032da:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
 80032e0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80032e2:	f7fe fceb 	bl	8001cbc <HAL_InitTick>
  return HAL_OK;
 80032e6:	2000      	movs	r0, #0
}
 80032e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032ec:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80032f0:	fa91 f1a1 	rbit	r1, r1
 80032f4:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032f8:	fab1 f181 	clz	r1, r1
 80032fc:	fa90 f0a0 	rbit	r0, r0
 8003300:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003304:	40cb      	lsrs	r3, r1
 8003306:	4922      	ldr	r1, [pc, #136]	; (8003390 <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003308:	4c22      	ldr	r4, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800330a:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800330c:	491c      	ldr	r1, [pc, #112]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800330e:	fab0 f080 	clz	r0, r0
 8003312:	f002 020f 	and.w	r2, r2, #15
 8003316:	40c2      	lsrs	r2, r0
 8003318:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800331a:	fbb1 f1f2 	udiv	r1, r1, r2
 800331e:	fb03 f101 	mul.w	r1, r3, r1
 8003322:	e7cc      	b.n	80032be <HAL_RCC_ClockConfig+0x102>
 8003324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003328:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 800332e:	6810      	ldr	r0, [r2, #0]
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2201      	movs	r2, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	4203      	tst	r3, r0
 8003344:	f47f af77 	bne.w	8003236 <HAL_RCC_ClockConfig+0x7a>
 8003348:	e74f      	b.n	80031ea <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800334a:	2001      	movs	r0, #1
}
 800334c:	4770      	bx	lr
 800334e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003352:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	fa92 f2a2 	rbit	r2, r2
 800335e:	fab2 f282 	clz	r2, r2
 8003362:	f002 021f 	and.w	r2, r2, #31
 8003366:	fa01 f202 	lsl.w	r2, r1, r2
 800336a:	421a      	tst	r2, r3
 800336c:	f47f af63 	bne.w	8003236 <HAL_RCC_ClockConfig+0x7a>
 8003370:	e73b      	b.n	80031ea <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003372:	2003      	movs	r0, #3
 8003374:	e73a      	b.n	80031ec <HAL_RCC_ClockConfig+0x30>
 8003376:	bf00      	nop
 8003378:	40022000 	.word	0x40022000
 800337c:	40021000 	.word	0x40021000
 8003380:	007a1200 	.word	0x007a1200
 8003384:	080049b8 	.word	0x080049b8
 8003388:	200000f0 	.word	0x200000f0
 800338c:	200000e8 	.word	0x200000e8
 8003390:	080049d0 	.word	0x080049d0
 8003394:	080049e0 	.word	0x080049e0

08003398 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003398:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x4c>)
 800339a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800339c:	f003 010c 	and.w	r1, r3, #12
 80033a0:	2908      	cmp	r1, #8
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80033a4:	4810      	ldr	r0, [pc, #64]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033a6:	4770      	bx	lr
{
 80033a8:	b430      	push	{r4, r5}
 80033aa:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 80033ae:	fa90 f0a0 	rbit	r0, r0
 80033b2:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033b6:	fab0 f080 	clz	r0, r0
 80033ba:	fa91 f1a1 	rbit	r1, r1
 80033be:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033c2:	40c3      	lsrs	r3, r0
 80033c4:	4809      	ldr	r0, [pc, #36]	; (80033ec <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033c6:	4d0a      	ldr	r5, [pc, #40]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033c8:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033ca:	4c07      	ldr	r4, [pc, #28]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033cc:	fab1 f181 	clz	r1, r1
 80033d0:	f002 030f 	and.w	r3, r2, #15
 80033d4:	40cb      	lsrs	r3, r1
 80033d6:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80033dc:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033de:	fb00 f003 	mul.w	r0, r0, r3
}
 80033e2:	4770      	bx	lr
 80033e4:	40021000 	.word	0x40021000
 80033e8:	007a1200 	.word	0x007a1200
 80033ec:	080049d0 	.word	0x080049d0
 80033f0:	080049e0 	.word	0x080049e0

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	fa92 f2a2 	rbit	r2, r2
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003408:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_RCC_GetPCLK1Freq+0x28>)
 800340a:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	6810      	ldr	r0, [r2, #0]
}    
 8003412:	40d8      	lsrs	r0, r3
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	080049c8 	.word	0x080049c8
 8003420:	200000e8 	.word	0x200000e8

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003426:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	fa92 f2a2 	rbit	r2, r2
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003438:	4904      	ldr	r1, [pc, #16]	; (800344c <HAL_RCC_GetPCLK2Freq+0x28>)
 800343a:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 800343c:	4a04      	ldr	r2, [pc, #16]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	6810      	ldr	r0, [r2, #0]
} 
 8003442:	40d8      	lsrs	r0, r3
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	080049c8 	.word	0x080049c8
 8003450:	200000e8 	.word	0x200000e8

08003454 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003458:	6803      	ldr	r3, [r0, #0]
 800345a:	03d9      	lsls	r1, r3, #15
{
 800345c:	b083      	sub	sp, #12
 800345e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003460:	d53d      	bpl.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4ba1      	ldr	r3, [pc, #644]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	00d2      	lsls	r2, r2, #3
 8003468:	f140 80f6 	bpl.w	8003658 <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4d9f      	ldr	r5, [pc, #636]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8003472:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	f140 80ff 	bpl.w	8003678 <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800347a:	4d9b      	ldr	r5, [pc, #620]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800347c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800347e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003482:	d01f      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003484:	6861      	ldr	r1, [r4, #4]
 8003486:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800348a:	429a      	cmp	r2, r3
 800348c:	d01b      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800348e:	6a29      	ldr	r1, [r5, #32]
 8003490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003494:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8003498:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800349c:	f8df c250 	ldr.w	ip, [pc, #592]	; 80036f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80034a0:	fab2 f282 	clz	r2, r2
 80034a4:	4462      	add	r2, ip
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	2701      	movs	r7, #1
 80034aa:	6017      	str	r7, [r2, #0]
 80034ac:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	4463      	add	r3, ip
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034ba:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034bc:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80034be:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034c0:	f100 80ee 	bmi.w	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80034c4:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034c6:	4a88      	ldr	r2, [pc, #544]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80034c8:	6a13      	ldr	r3, [r2, #32]
 80034ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034d2:	b11e      	cbz	r6, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	69d3      	ldr	r3, [r2, #28]
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	61d3      	str	r3, [r2, #28]
 80034dc:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034de:	07da      	lsls	r2, r3, #31
 80034e0:	d506      	bpl.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e2:	4981      	ldr	r1, [pc, #516]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80034e4:	68a0      	ldr	r0, [r4, #8]
 80034e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80034e8:	f022 0203 	bic.w	r2, r2, #3
 80034ec:	4302      	orrs	r2, r0
 80034ee:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f0:	079f      	lsls	r7, r3, #30
 80034f2:	d506      	bpl.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f4:	497c      	ldr	r1, [pc, #496]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80034f6:	68e0      	ldr	r0, [r4, #12]
 80034f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80034fa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80034fe:	4302      	orrs	r2, r0
 8003500:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003502:	075e      	lsls	r6, r3, #29
 8003504:	d506      	bpl.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003506:	4978      	ldr	r1, [pc, #480]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003508:	6920      	ldr	r0, [r4, #16]
 800350a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800350c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003510:	4302      	orrs	r2, r0
 8003512:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003514:	069d      	lsls	r5, r3, #26
 8003516:	d506      	bpl.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003518:	4973      	ldr	r1, [pc, #460]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800351a:	69e0      	ldr	r0, [r4, #28]
 800351c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800351e:	f022 0210 	bic.w	r2, r2, #16
 8003522:	4302      	orrs	r2, r0
 8003524:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003526:	0398      	lsls	r0, r3, #14
 8003528:	d506      	bpl.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800352a:	496f      	ldr	r1, [pc, #444]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800352c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800352e:	684a      	ldr	r2, [r1, #4]
 8003530:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003534:	4302      	orrs	r2, r0
 8003536:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003538:	0659      	lsls	r1, r3, #25
 800353a:	d506      	bpl.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800353c:	496a      	ldr	r1, [pc, #424]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800353e:	6a20      	ldr	r0, [r4, #32]
 8003540:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003542:	f022 0220 	bic.w	r2, r2, #32
 8003546:	4302      	orrs	r2, r0
 8003548:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800354a:	035a      	lsls	r2, r3, #13
 800354c:	d506      	bpl.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800354e:	4966      	ldr	r1, [pc, #408]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003550:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003552:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003558:	4302      	orrs	r2, r0
 800355a:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800355c:	071f      	lsls	r7, r3, #28
 800355e:	d506      	bpl.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003560:	4961      	ldr	r1, [pc, #388]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003562:	6960      	ldr	r0, [r4, #20]
 8003564:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003566:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800356a:	4302      	orrs	r2, r0
 800356c:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800356e:	06de      	lsls	r6, r3, #27
 8003570:	d506      	bpl.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003572:	495d      	ldr	r1, [pc, #372]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003574:	69a0      	ldr	r0, [r4, #24]
 8003576:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003578:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800357c:	4302      	orrs	r2, r0
 800357e:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003580:	059d      	lsls	r5, r3, #22
 8003582:	d506      	bpl.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003584:	4958      	ldr	r1, [pc, #352]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003586:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003588:	684a      	ldr	r2, [r1, #4]
 800358a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800358e:	4302      	orrs	r2, r0
 8003590:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003592:	0618      	lsls	r0, r3, #24
 8003594:	d506      	bpl.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003596:	4954      	ldr	r1, [pc, #336]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003598:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800359a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800359c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80035a0:	4302      	orrs	r2, r0
 80035a2:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80035a4:	05d9      	lsls	r1, r3, #23
 80035a6:	d506      	bpl.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80035a8:	494f      	ldr	r1, [pc, #316]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80035ac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80035ae:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80035b2:	4302      	orrs	r2, r0
 80035b4:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035b6:	04da      	lsls	r2, r3, #19
 80035b8:	d506      	bpl.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035ba:	494b      	ldr	r1, [pc, #300]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80035be:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80035c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c4:	4302      	orrs	r2, r0
 80035c6:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80035c8:	049f      	lsls	r7, r3, #18
 80035ca:	d506      	bpl.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80035cc:	4946      	ldr	r1, [pc, #280]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80035d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80035d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035d6:	4302      	orrs	r2, r0
 80035d8:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80035da:	02de      	lsls	r6, r3, #11
 80035dc:	d506      	bpl.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80035de:	4942      	ldr	r1, [pc, #264]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80035e2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80035e4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80035e8:	4302      	orrs	r2, r0
 80035ea:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80035ec:	029d      	lsls	r5, r3, #10
 80035ee:	d506      	bpl.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80035f0:	493d      	ldr	r1, [pc, #244]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80035f4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80035f6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80035fa:	4302      	orrs	r2, r0
 80035fc:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80035fe:	0258      	lsls	r0, r3, #9
 8003600:	d506      	bpl.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003602:	4939      	ldr	r1, [pc, #228]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003604:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003606:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360c:	4302      	orrs	r2, r0
 800360e:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003610:	0219      	lsls	r1, r3, #8
 8003612:	d506      	bpl.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003614:	4934      	ldr	r1, [pc, #208]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003616:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003618:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800361a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361e:	4302      	orrs	r2, r0
 8003620:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003622:	01da      	lsls	r2, r3, #7
 8003624:	d506      	bpl.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003626:	4930      	ldr	r1, [pc, #192]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003628:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800362a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800362c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003630:	4302      	orrs	r2, r0
 8003632:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003634:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003638:	d103      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800363a:	4618      	mov	r0, r3
}
 800363c:	b003      	add	sp, #12
 800363e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003642:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003644:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003646:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800364c:	430b      	orrs	r3, r1
  return HAL_OK;
 800364e:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003652:	b003      	add	sp, #12
 8003654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4d24      	ldr	r5, [pc, #144]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003660:	61da      	str	r2, [r3, #28]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 8003670:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	f53f af01 	bmi.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003680:	f7fe fb52 	bl	8001d28 <HAL_GetTick>
 8003684:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	05d8      	lsls	r0, r3, #23
 800368a:	f53f aef6 	bmi.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fb4b 	bl	8001d28 <HAL_GetTick>
 8003692:	1bc0      	subs	r0, r0, r7
 8003694:	2864      	cmp	r0, #100	; 0x64
 8003696:	d9f6      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 8003698:	2003      	movs	r0, #3
}
 800369a:	b003      	add	sp, #12
 800369c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80036a0:	f7fe fb42 	bl	8001d28 <HAL_GetTick>
 80036a4:	f04f 0902 	mov.w	r9, #2
 80036a8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	e015      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80036ac:	fa99 f3a9 	rbit	r3, r9
 80036b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80036b2:	fa99 f3a9 	rbit	r3, r9
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	fa07 f303 	lsl.w	r3, r7, r3
 80036c2:	4213      	tst	r3, r2
 80036c4:	f47f aefe 	bne.w	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fb2e 	bl	8001d28 <HAL_GetTick>
 80036cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80036d0:	eba0 0008 	sub.w	r0, r0, r8
 80036d4:	4298      	cmp	r0, r3
 80036d6:	d8df      	bhi.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80036d8:	fa99 f3a9 	rbit	r3, r9
 80036dc:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0e3      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x258>
 80036e4:	6a2a      	ldr	r2, [r5, #32]
 80036e6:	e7e4      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	10908100 	.word	0x10908100

080036f4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f4:	6a03      	ldr	r3, [r0, #32]
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	6203      	str	r3, [r0, #32]
{
 80036fc:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003702:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003704:	4f1a      	ldr	r7, [pc, #104]	; (8003770 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 8003706:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003708:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800370a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800370e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003712:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003716:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8003718:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 800371c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003720:	d012      	beq.n	8003748 <TIM_OC1_SetConfig+0x54>
 8003722:	4c14      	ldr	r4, [pc, #80]	; (8003774 <TIM_OC1_SetConfig+0x80>)
 8003724:	42a0      	cmp	r0, r4
 8003726:	d00f      	beq.n	8003748 <TIM_OC1_SetConfig+0x54>
 8003728:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800372c:	42a0      	cmp	r0, r4
 800372e:	d00b      	beq.n	8003748 <TIM_OC1_SetConfig+0x54>
 8003730:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003734:	42a0      	cmp	r0, r4
 8003736:	d007      	beq.n	8003748 <TIM_OC1_SetConfig+0x54>
 8003738:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800373c:	42a0      	cmp	r0, r4
 800373e:	d003      	beq.n	8003748 <TIM_OC1_SetConfig+0x54>
 8003740:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003744:	42a0      	cmp	r0, r4
 8003746:	d10b      	bne.n	8003760 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003748:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800374a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800374e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003750:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003754:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003758:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800375a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800375e:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003760:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003762:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003764:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003766:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8003768:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800376a:	6203      	str	r3, [r0, #32]
}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40013400 	.word	0x40013400

08003778 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003778:	6a03      	ldr	r3, [r0, #32]
 800377a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800377e:	6203      	str	r3, [r0, #32]
{
 8003780:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003786:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003788:	4f21      	ldr	r7, [pc, #132]	; (8003810 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800378a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800378c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800378e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8003792:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003796:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800379a:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80037a0:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a4:	d016      	beq.n	80037d4 <TIM_OC3_SetConfig+0x5c>
 80037a6:	4c1b      	ldr	r4, [pc, #108]	; (8003814 <TIM_OC3_SetConfig+0x9c>)
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d013      	beq.n	80037d4 <TIM_OC3_SetConfig+0x5c>
 80037ac:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d024      	beq.n	80037fe <TIM_OC3_SetConfig+0x86>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	4c18      	ldr	r4, [pc, #96]	; (8003818 <TIM_OC3_SetConfig+0xa0>)
 80037b6:	42a0      	cmp	r0, r4
 80037b8:	d013      	beq.n	80037e2 <TIM_OC3_SetConfig+0x6a>
 80037ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037be:	42a0      	cmp	r0, r4
 80037c0:	d00f      	beq.n	80037e2 <TIM_OC3_SetConfig+0x6a>
 80037c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037c6:	42a0      	cmp	r0, r4
 80037c8:	d00b      	beq.n	80037e2 <TIM_OC3_SetConfig+0x6a>
 80037ca:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80037ce:	42a0      	cmp	r0, r4
 80037d0:	d10e      	bne.n	80037f0 <TIM_OC3_SetConfig+0x78>
 80037d2:	e006      	b.n	80037e2 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037d4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80037d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037da:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80037de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e2:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037e6:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ea:	432c      	orrs	r4, r5
 80037ec:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80037f2:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80037f4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80037f6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80037f8:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80037fa:	6203      	str	r3, [r0, #32]
}
 80037fc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fe:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003804:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380c:	e7d2      	b.n	80037b4 <TIM_OC3_SetConfig+0x3c>
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40013400 	.word	0x40013400
 8003818:	40014000 	.word	0x40014000

0800381c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800381c:	2800      	cmp	r0, #0
 800381e:	f000 8085 	beq.w	800392c <HAL_TIM_Base_Init+0x110>
{
 8003822:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003824:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003828:	4604      	mov	r4, r0
 800382a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800382e:	2b00      	cmp	r3, #0
 8003830:	d074      	beq.n	800391c <HAL_TIM_Base_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003832:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003834:	4941      	ldr	r1, [pc, #260]	; (800393c <HAL_TIM_Base_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003836:	2302      	movs	r3, #2
 8003838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800383e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003840:	d058      	beq.n	80038f4 <HAL_TIM_Base_Init+0xd8>
 8003842:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003846:	d028      	beq.n	800389a <HAL_TIM_Base_Init+0x7e>
 8003848:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800384c:	428a      	cmp	r2, r1
 800384e:	d024      	beq.n	800389a <HAL_TIM_Base_Init+0x7e>
 8003850:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003854:	428a      	cmp	r2, r1
 8003856:	d020      	beq.n	800389a <HAL_TIM_Base_Init+0x7e>
 8003858:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 800385c:	428a      	cmp	r2, r1
 800385e:	d049      	beq.n	80038f4 <HAL_TIM_Base_Init+0xd8>
 8003860:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8003864:	428a      	cmp	r2, r1
 8003866:	d063      	beq.n	8003930 <HAL_TIM_Base_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003868:	4935      	ldr	r1, [pc, #212]	; (8003940 <HAL_TIM_Base_Init+0x124>)
 800386a:	428a      	cmp	r2, r1
 800386c:	d05b      	beq.n	8003926 <HAL_TIM_Base_Init+0x10a>
 800386e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003872:	428a      	cmp	r2, r1
 8003874:	d057      	beq.n	8003926 <HAL_TIM_Base_Init+0x10a>
 8003876:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800387a:	428a      	cmp	r2, r1
 800387c:	d053      	beq.n	8003926 <HAL_TIM_Base_Init+0x10a>
 800387e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003882:	428a      	cmp	r2, r1
 8003884:	d04f      	beq.n	8003926 <HAL_TIM_Base_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003886:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003888:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800388a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800388c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003890:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003892:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003894:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003896:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003898:	e010      	b.n	80038bc <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 800389a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800389e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038a4:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038aa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ac:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80038b4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80038b6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038ba:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	2301      	movs	r3, #1
 80038be:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80038c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80038cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80038d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80038d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80038e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80038e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80038f0:	2000      	movs	r0, #0
}
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80038f4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038fe:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003904:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800390c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800390e:	68e3      	ldr	r3, [r4, #12]
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003916:	6963      	ldr	r3, [r4, #20]
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	e7cf      	b.n	80038bc <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 800391c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003920:	f7fe f8a6 	bl	8001a70 <HAL_TIM_Base_MspInit>
 8003924:	e785      	b.n	8003832 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003926:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003928:	69a1      	ldr	r1, [r4, #24]
 800392a:	e7e9      	b.n	8003900 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 800392c:	2001      	movs	r0, #1
}
 800392e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003930:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003936:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003938:	e796      	b.n	8003868 <HAL_TIM_Base_Init+0x4c>
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40014000 	.word	0x40014000

08003944 <HAL_TIM_PWM_MspInit>:
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop

08003948 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003948:	2800      	cmp	r0, #0
 800394a:	f000 8085 	beq.w	8003a58 <HAL_TIM_PWM_Init+0x110>
{
 800394e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003950:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003954:	4604      	mov	r4, r0
 8003956:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800395a:	2b00      	cmp	r3, #0
 800395c:	d074      	beq.n	8003a48 <HAL_TIM_PWM_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	4941      	ldr	r1, [pc, #260]	; (8003a68 <HAL_TIM_PWM_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800396a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	d058      	beq.n	8003a20 <HAL_TIM_PWM_Init+0xd8>
 800396e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003972:	d028      	beq.n	80039c6 <HAL_TIM_PWM_Init+0x7e>
 8003974:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003978:	428a      	cmp	r2, r1
 800397a:	d024      	beq.n	80039c6 <HAL_TIM_PWM_Init+0x7e>
 800397c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003980:	428a      	cmp	r2, r1
 8003982:	d020      	beq.n	80039c6 <HAL_TIM_PWM_Init+0x7e>
 8003984:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8003988:	428a      	cmp	r2, r1
 800398a:	d049      	beq.n	8003a20 <HAL_TIM_PWM_Init+0xd8>
 800398c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8003990:	428a      	cmp	r2, r1
 8003992:	d063      	beq.n	8003a5c <HAL_TIM_PWM_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003994:	4935      	ldr	r1, [pc, #212]	; (8003a6c <HAL_TIM_PWM_Init+0x124>)
 8003996:	428a      	cmp	r2, r1
 8003998:	d05b      	beq.n	8003a52 <HAL_TIM_PWM_Init+0x10a>
 800399a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800399e:	428a      	cmp	r2, r1
 80039a0:	d057      	beq.n	8003a52 <HAL_TIM_PWM_Init+0x10a>
 80039a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80039a6:	428a      	cmp	r2, r1
 80039a8:	d053      	beq.n	8003a52 <HAL_TIM_PWM_Init+0x10a>
 80039aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ae:	428a      	cmp	r2, r1
 80039b0:	d04f      	beq.n	8003a52 <HAL_TIM_PWM_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b2:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80039b6:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039bc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80039be:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039c2:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	e010      	b.n	80039e8 <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 80039c6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c8:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ca:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039d0:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039de:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80039e0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80039e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039e6:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	2301      	movs	r3, #1
 80039ea:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80039f4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a10:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003a14:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a1c:	2000      	movs	r0, #0
}
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003a20:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a2a:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a30:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a36:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003a38:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3a:	68e3      	ldr	r3, [r4, #12]
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a42:	6963      	ldr	r3, [r4, #20]
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	e7cf      	b.n	80039e8 <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8003a48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a4c:	f7ff ff7a 	bl	8003944 <HAL_TIM_PWM_MspInit>
 8003a50:	e785      	b.n	800395e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a52:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a54:	69a1      	ldr	r1, [r4, #24]
 8003a56:	e7e9      	b.n	8003a2c <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 8003a58:	2001      	movs	r0, #1
}
 8003a5a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003a5c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a62:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a64:	e796      	b.n	8003994 <HAL_TIM_PWM_Init+0x4c>
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40014000 	.word	0x40014000

08003a70 <HAL_TIM_PWM_Start>:
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d154      	bne.n	8003b1e <HAL_TIM_PWM_Start+0xae>
 8003a74:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d15a      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xc2>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003a82:	6803      	ldr	r3, [r0, #0]
 8003a84:	2201      	movs	r2, #1
 8003a86:	6a18      	ldr	r0, [r3, #32]
 8003a88:	f001 011f 	and.w	r1, r1, #31
 8003a8c:	fa02 f101 	lsl.w	r1, r2, r1
 8003a90:	ea20 0001 	bic.w	r0, r0, r1
 8003a94:	b410      	push	{r4}
 8003a96:	6218      	str	r0, [r3, #32]
 8003a98:	6a1a      	ldr	r2, [r3, #32]
 8003a9a:	4c3e      	ldr	r4, [pc, #248]	; (8003b94 <HAL_TIM_PWM_Start+0x124>)
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	6219      	str	r1, [r3, #32]
 8003aa2:	d056      	beq.n	8003b52 <HAL_TIM_PWM_Start+0xe2>
 8003aa4:	4a3c      	ldr	r2, [pc, #240]	; (8003b98 <HAL_TIM_PWM_Start+0x128>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00f      	beq.n	8003aca <HAL_TIM_PWM_Start+0x5a>
 8003aaa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <HAL_TIM_PWM_Start+0x5a>
 8003ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <HAL_TIM_PWM_Start+0x5a>
 8003aba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_PWM_Start+0x5a>
 8003ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d103      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x62>
 8003aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad6:	d012      	beq.n	8003afe <HAL_TIM_PWM_Start+0x8e>
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <HAL_TIM_PWM_Start+0x12c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <HAL_TIM_PWM_Start+0x8e>
 8003ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <HAL_TIM_PWM_Start+0x8e>
 8003ae6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <HAL_TIM_PWM_Start+0x8e>
 8003aee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_PWM_Start+0x8e>
 8003af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d107      	bne.n	8003b0e <HAL_TIM_PWM_Start+0x9e>
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <HAL_TIM_PWM_Start+0x130>)
 8003b02:	400a      	ands	r2, r1
 8003b04:	2a06      	cmp	r2, #6
 8003b06:	d016      	beq.n	8003b36 <HAL_TIM_PWM_Start+0xc6>
 8003b08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003b0c:	d013      	beq.n	8003b36 <HAL_TIM_PWM_Start+0xc6>
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	2000      	movs	r0, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	4770      	bx	lr
 8003b1e:	2904      	cmp	r1, #4
 8003b20:	d01c      	beq.n	8003b5c <HAL_TIM_PWM_Start+0xec>
 8003b22:	2908      	cmp	r1, #8
 8003b24:	d022      	beq.n	8003b6c <HAL_TIM_PWM_Start+0xfc>
 8003b26:	290c      	cmp	r1, #12
 8003b28:	d109      	bne.n	8003b3e <HAL_TIM_PWM_Start+0xce>
 8003b2a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d024      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x10c>
 8003b32:	2001      	movs	r0, #1
 8003b34:	4770      	bx	lr
 8003b36:	2000      	movs	r0, #0
 8003b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	2910      	cmp	r1, #16
 8003b40:	d020      	beq.n	8003b84 <HAL_TIM_PWM_Start+0x114>
 8003b42:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d1f3      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xc2>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8003b50:	e797      	b.n	8003a82 <HAL_TIM_PWM_Start+0x12>
 8003b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
 8003b5a:	e7d0      	b.n	8003afe <HAL_TIM_PWM_Start+0x8e>
 8003b5c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d1e6      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xc2>
 8003b64:	2302      	movs	r3, #2
 8003b66:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003b6a:	e78a      	b.n	8003a82 <HAL_TIM_PWM_Start+0x12>
 8003b6c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d1de      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xc2>
 8003b74:	2302      	movs	r3, #2
 8003b76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003b7a:	e782      	b.n	8003a82 <HAL_TIM_PWM_Start+0x12>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003b82:	e77e      	b.n	8003a82 <HAL_TIM_PWM_Start+0x12>
 8003b84:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d1d2      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xc2>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003b92:	e776      	b.n	8003a82 <HAL_TIM_PWM_Start+0x12>
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40013400 	.word	0x40013400
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	00010007 	.word	0x00010007

08003ba4 <HAL_TIM_PWM_Start_IT>:
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	d15a      	bne.n	8003c5e <HAL_TIM_PWM_Start_IT+0xba>
 8003ba8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d160      	bne.n	8003c72 <HAL_TIM_PWM_Start_IT+0xce>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003bb6:	6803      	ldr	r3, [r0, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	f042 0202 	orr.w	r2, r2, #2
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	6a18      	ldr	r0, [r3, #32]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f001 011f 	and.w	r1, r1, #31
 8003bc8:	fa02 f101 	lsl.w	r1, r2, r1
 8003bcc:	ea20 0001 	bic.w	r0, r0, r1
 8003bd0:	b410      	push	{r4}
 8003bd2:	6218      	str	r0, [r3, #32]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
 8003bd6:	4c58      	ldr	r4, [pc, #352]	; (8003d38 <HAL_TIM_PWM_Start_IT+0x194>)
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	6219      	str	r1, [r3, #32]
 8003bde:	f000 809c 	beq.w	8003d1a <HAL_TIM_PWM_Start_IT+0x176>
 8003be2:	4a56      	ldr	r2, [pc, #344]	; (8003d3c <HAL_TIM_PWM_Start_IT+0x198>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00f      	beq.n	8003c08 <HAL_TIM_PWM_Start_IT+0x64>
 8003be8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <HAL_TIM_PWM_Start_IT+0x64>
 8003bf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <HAL_TIM_PWM_Start_IT+0x64>
 8003bf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <HAL_TIM_PWM_Start_IT+0x64>
 8003c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d103      	bne.n	8003c10 <HAL_TIM_PWM_Start_IT+0x6c>
 8003c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d012      	beq.n	8003c3c <HAL_TIM_PWM_Start_IT+0x98>
 8003c16:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_TIM_PWM_Start_IT+0x19c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00f      	beq.n	8003c3c <HAL_TIM_PWM_Start_IT+0x98>
 8003c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <HAL_TIM_PWM_Start_IT+0x98>
 8003c24:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <HAL_TIM_PWM_Start_IT+0x98>
 8003c2c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <HAL_TIM_PWM_Start_IT+0x98>
 8003c34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d107      	bne.n	8003c4c <HAL_TIM_PWM_Start_IT+0xa8>
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	4a41      	ldr	r2, [pc, #260]	; (8003d44 <HAL_TIM_PWM_Start_IT+0x1a0>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	2a06      	cmp	r2, #6
 8003c44:	d018      	beq.n	8003c78 <HAL_TIM_PWM_Start_IT+0xd4>
 8003c46:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003c4a:	d015      	beq.n	8003c78 <HAL_TIM_PWM_Start_IT+0xd4>
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	4770      	bx	lr
 8003c5e:	2904      	cmp	r1, #4
 8003c60:	d04e      	beq.n	8003d00 <HAL_TIM_PWM_Start_IT+0x15c>
 8003c62:	2908      	cmp	r1, #8
 8003c64:	d03f      	beq.n	8003ce6 <HAL_TIM_PWM_Start_IT+0x142>
 8003c66:	290c      	cmp	r1, #12
 8003c68:	d10b      	bne.n	8003c82 <HAL_TIM_PWM_Start_IT+0xde>
 8003c6a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d030      	beq.n	8003cd4 <HAL_TIM_PWM_Start_IT+0x130>
 8003c72:	2301      	movs	r3, #1
 8003c74:	4618      	mov	r0, r3
 8003c76:	4770      	bx	lr
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	2910      	cmp	r1, #16
 8003c84:	d04e      	beq.n	8003d24 <HAL_TIM_PWM_Start_IT+0x180>
 8003c86:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8003c8a:	2a01      	cmp	r2, #1
 8003c8c:	b2d3      	uxtb	r3, r2
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_TIM_PWM_Start_IT+0xce>
 8003c90:	2202      	movs	r2, #2
 8003c92:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
 8003c96:	290c      	cmp	r1, #12
 8003c98:	d8ec      	bhi.n	8003c74 <HAL_TIM_PWM_Start_IT+0xd0>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <HAL_TIM_PWM_Start_IT+0xfc>)
 8003c9c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8003ca0:	08003bb7 	.word	0x08003bb7
 8003ca4:	08003c75 	.word	0x08003c75
 8003ca8:	08003c75 	.word	0x08003c75
 8003cac:	08003c75 	.word	0x08003c75
 8003cb0:	08003d0f 	.word	0x08003d0f
 8003cb4:	08003c75 	.word	0x08003c75
 8003cb8:	08003c75 	.word	0x08003c75
 8003cbc:	08003c75 	.word	0x08003c75
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003c75 	.word	0x08003c75
 8003cc8:	08003c75 	.word	0x08003c75
 8003ccc:	08003c75 	.word	0x08003c75
 8003cd0:	08003cdb 	.word	0x08003cdb
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003cda:	6803      	ldr	r3, [r0, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	f042 0210 	orr.w	r2, r2, #16
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e76c      	b.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1c>
 8003ce6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d1c1      	bne.n	8003c72 <HAL_TIM_PWM_Start_IT+0xce>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003cf4:	6803      	ldr	r3, [r0, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	f042 0208 	orr.w	r2, r2, #8
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e75f      	b.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1c>
 8003d00:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d1b4      	bne.n	8003c72 <HAL_TIM_PWM_Start_IT+0xce>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003d0e:	6803      	ldr	r3, [r0, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	f042 0204 	orr.w	r2, r2, #4
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	e752      	b.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1c>
 8003d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
 8003d22:	e78b      	b.n	8003c3c <HAL_TIM_PWM_Start_IT+0x98>
 8003d24:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8003d28:	2a01      	cmp	r2, #1
 8003d2a:	b2d3      	uxtb	r3, r2
 8003d2c:	d1a1      	bne.n	8003c72 <HAL_TIM_PWM_Start_IT+0xce>
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
 8003d34:	e79e      	b.n	8003c74 <HAL_TIM_PWM_Start_IT+0xd0>
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40000400 	.word	0x40000400
 8003d44:	00010007 	.word	0x00010007

08003d48 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003d48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d074      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0xf2>
 8003d50:	4602      	mov	r2, r0
{
 8003d52:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003d56:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003d62:	68a6      	ldr	r6, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d64:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d66:	4d4f      	ldr	r5, [pc, #316]	; (8003ea4 <HAL_TIM_ConfigClockSource+0x15c>)
  switch (sClockSourceConfig->ClockSource)
 8003d68:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6a:	ea05 0506 	and.w	r5, r5, r6
  htim->Instance->SMCR = tmpsmcr;
 8003d6e:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d70:	d065      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xf6>
 8003d72:	d824      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x76>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d07c      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x12a>
 8003d78:	d94b      	bls.n	8003e12 <HAL_TIM_ConfigClockSource+0xca>
 8003d7a:	2b50      	cmp	r3, #80	; 0x50
 8003d7c:	d117      	bne.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d7e:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d80:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	6848      	ldr	r0, [r1, #4]
 8003d84:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d86:	f026 0601 	bic.w	r6, r6, #1
 8003d8a:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8c:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d8e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003d96:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d98:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d9c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003d9e:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da0:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003daa:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003dae:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003db0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003db6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003dba:	bcf0      	pop	{r4, r5, r6, r7}
 8003dbc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	d038      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0xee>
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc8:	d110      	bne.n	8003dec <HAL_TIM_ConfigClockSource+0xa4>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dca:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003dce:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003dd0:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd2:	432b      	orrs	r3, r5
 8003dd4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ddc:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de6:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2000      	movs	r0, #0
      break;
 8003dea:	e7e0      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003dec:	2b70      	cmp	r3, #112	; 0x70
 8003dee:	d1de      	bne.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003df4:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003df6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df8:	432b      	orrs	r3, r5
 8003dfa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfe:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e02:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003e04:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003e0c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2000      	movs	r0, #0
      break;
 8003e10:	e7cd      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d002      	beq.n	8003e1c <HAL_TIM_ConfigClockSource+0xd4>
 8003e16:	d90a      	bls.n	8003e2e <HAL_TIM_ConfigClockSource+0xe6>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d1c8      	bne.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8003e1c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e1e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e22:	430b      	orrs	r3, r1
 8003e24:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003e28:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2000      	movs	r0, #0
}
 8003e2c:	e7bf      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003e2e:	f033 0110 	bics.w	r1, r3, #16
 8003e32:	d1bc      	bne.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
 8003e34:	e7f2      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2000      	movs	r0, #0
 8003e38:	e7b9      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8003e3a:	2002      	movs	r0, #2
}
 8003e3c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3e:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e40:	684d      	ldr	r5, [r1, #4]
 8003e42:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e44:	f020 0010 	bic.w	r0, r0, #16
 8003e48:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003e4c:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e5a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003e5e:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003e60:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003e62:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e68:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003e6c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2000      	movs	r0, #0
}
 8003e70:	e79d      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
  tmpccer = TIMx->CCER;
 8003e72:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e74:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e76:	6848      	ldr	r0, [r1, #4]
 8003e78:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	f026 0601 	bic.w	r6, r6, #1
 8003e7e:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e80:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e82:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003e8a:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e8c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003e90:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003e92:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003e94:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e9a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003e9e:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2000      	movs	r0, #0
}
 8003ea2:	e784      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x66>
 8003ea4:	fffe0088 	.word	0xfffe0088

08003ea8 <HAL_TIM_PeriodElapsedCallback>:
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop

08003eac <HAL_TIM_OC_DelayElapsedCallback>:
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop

08003eb0 <HAL_TIM_IC_CaptureCallback>:
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop

08003eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop

08003eb8 <HAL_TIM_TriggerCallback>:
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop

08003ebc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ebc:	6803      	ldr	r3, [r0, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	0791      	lsls	r1, r2, #30
{
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec6:	d502      	bpl.n	8003ece <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	0792      	lsls	r2, r2, #30
 8003ecc:	d468      	bmi.n	8003fa0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	0752      	lsls	r2, r2, #29
 8003ed2:	d502      	bpl.n	8003eda <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	0750      	lsls	r0, r2, #29
 8003ed8:	d44f      	bmi.n	8003f7a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	0711      	lsls	r1, r2, #28
 8003ede:	d502      	bpl.n	8003ee6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	0712      	lsls	r2, r2, #28
 8003ee4:	d437      	bmi.n	8003f56 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	06d0      	lsls	r0, r2, #27
 8003eea:	d502      	bpl.n	8003ef2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	06d1      	lsls	r1, r2, #27
 8003ef0:	d41e      	bmi.n	8003f30 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	07d2      	lsls	r2, r2, #31
 8003ef6:	d502      	bpl.n	8003efe <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	07d0      	lsls	r0, r2, #31
 8003efc:	d469      	bmi.n	8003fd2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	0611      	lsls	r1, r2, #24
 8003f02:	d502      	bpl.n	8003f0a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	0612      	lsls	r2, r2, #24
 8003f08:	d46b      	bmi.n	8003fe2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	05d0      	lsls	r0, r2, #23
 8003f0e:	d502      	bpl.n	8003f16 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	0611      	lsls	r1, r2, #24
 8003f14:	d46d      	bmi.n	8003ff2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	0652      	lsls	r2, r2, #25
 8003f1a:	d502      	bpl.n	8003f22 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	0650      	lsls	r0, r2, #25
 8003f20:	d46f      	bmi.n	8004002 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	0691      	lsls	r1, r2, #26
 8003f26:	d502      	bpl.n	8003f2e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	0692      	lsls	r2, r2, #26
 8003f2c:	d449      	bmi.n	8003fc2 <HAL_TIM_IRQHandler+0x106>
}
 8003f2e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f30:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f34:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f36:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003f40:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f42:	d16f      	bne.n	8004024 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f44:	f7ff ffb2 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7ff ffb3 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	2200      	movs	r2, #0
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	7722      	strb	r2, [r4, #28]
 8003f54:	e7cd      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f56:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f5c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003f64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f66:	d15a      	bne.n	800401e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f68:	f7ff ffa0 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ffa1 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	2200      	movs	r2, #0
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	7722      	strb	r2, [r4, #28]
 8003f78:	e7b5      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f7a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f80:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f82:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f8c:	d144      	bne.n	8004018 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	f7ff ff8d 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f92:	4620      	mov	r0, r4
 8003f94:	f7ff ff8e 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f98:	2200      	movs	r2, #0
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	7722      	strb	r2, [r4, #28]
 8003f9e:	e79c      	b.n	8003eda <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	0799      	lsls	r1, r3, #30
 8003fae:	d130      	bne.n	8004012 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb0:	f7ff ff7c 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f7ff ff7d 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	2200      	movs	r2, #0
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	7722      	strb	r2, [r4, #28]
 8003fc0:	e785      	b.n	8003ece <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003fc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc8:	611a      	str	r2, [r3, #16]
}
 8003fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003fce:	f000 ba53 	b.w	8004478 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd2:	f06f 0201 	mvn.w	r2, #1
 8003fd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7ff ff65 	bl	8003ea8 <HAL_TIM_PeriodElapsedCallback>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	e78d      	b.n	8003efe <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 fa47 	bl	800447c <HAL_TIMEx_BreakCallback>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	e78b      	b.n	8003f0a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ff2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ff6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f000 fa41 	bl	8004480 <HAL_TIMEx_Break2Callback>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	e789      	b.n	8003f16 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004006:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004008:	4620      	mov	r0, r4
 800400a:	f7ff ff55 	bl	8003eb8 <HAL_TIM_TriggerCallback>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	e787      	b.n	8003f22 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004012:	f7ff ff4d 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8004016:	e7d0      	b.n	8003fba <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004018:	f7ff ff4a 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 800401c:	e7bc      	b.n	8003f98 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	f7ff ff47 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8004022:	e7a6      	b.n	8003f72 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004024:	f7ff ff44 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8004028:	e791      	b.n	8003f4e <HAL_TIM_IRQHandler+0x92>
 800402a:	bf00      	nop

0800402c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402c:	6a03      	ldr	r3, [r0, #32]
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	6203      	str	r3, [r0, #32]
{
 8004034:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8004036:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004038:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800403a:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800403c:	4f21      	ldr	r7, [pc, #132]	; (80040c4 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800403e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004042:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8004046:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800404a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800404e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004050:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004054:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004058:	d016      	beq.n	8004088 <TIM_OC2_SetConfig+0x5c>
 800405a:	4c1b      	ldr	r4, [pc, #108]	; (80040c8 <TIM_OC2_SetConfig+0x9c>)
 800405c:	42a0      	cmp	r0, r4
 800405e:	d013      	beq.n	8004088 <TIM_OC2_SetConfig+0x5c>
 8004060:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8004064:	42a0      	cmp	r0, r4
 8004066:	d024      	beq.n	80040b2 <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	4c18      	ldr	r4, [pc, #96]	; (80040cc <TIM_OC2_SetConfig+0xa0>)
 800406a:	42a0      	cmp	r0, r4
 800406c:	d013      	beq.n	8004096 <TIM_OC2_SetConfig+0x6a>
 800406e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004072:	42a0      	cmp	r0, r4
 8004074:	d00f      	beq.n	8004096 <TIM_OC2_SetConfig+0x6a>
 8004076:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800407a:	42a0      	cmp	r0, r4
 800407c:	d00b      	beq.n	8004096 <TIM_OC2_SetConfig+0x6a>
 800407e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004082:	42a0      	cmp	r0, r4
 8004084:	d10e      	bne.n	80040a4 <TIM_OC2_SetConfig+0x78>
 8004086:	e006      	b.n	8004096 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004088:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800408a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800408e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004096:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800409a:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800409e:	432c      	orrs	r4, r5
 80040a0:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80040a4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80040a6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80040a8:	6182      	str	r2, [r0, #24]
}
 80040aa:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80040ac:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80040ae:	6203      	str	r3, [r0, #32]
}
 80040b0:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	e7d2      	b.n	8004068 <TIM_OC2_SetConfig+0x3c>
 80040c2:	bf00      	nop
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40013400 	.word	0x40013400
 80040cc:	40014000 	.word	0x40014000

080040d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80040d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f000 8128 	beq.w	800432c <HAL_TIM_PWM_ConfigChannel+0x25c>
 80040dc:	2301      	movs	r3, #1
 80040de:	4604      	mov	r4, r0
 80040e0:	460d      	mov	r5, r1
 80040e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80040e6:	2a14      	cmp	r2, #20
 80040e8:	d816      	bhi.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x48>
 80040ea:	e8df f012 	tbh	[pc, r2, lsl #1]
 80040ee:	005f      	.short	0x005f
 80040f0:	00150015 	.word	0x00150015
 80040f4:	00710015 	.word	0x00710015
 80040f8:	00150015 	.word	0x00150015
 80040fc:	00840015 	.word	0x00840015
 8004100:	00150015 	.word	0x00150015
 8004104:	00960015 	.word	0x00960015
 8004108:	00150015 	.word	0x00150015
 800410c:	00db0015 	.word	0x00db0015
 8004110:	00150015 	.word	0x00150015
 8004114:	001a0015 	.word	0x001a0015
  __HAL_LOCK(htim);
 8004118:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800411a:	2300      	movs	r3, #0
 800411c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004122:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004124:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004128:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412c:	4e80      	ldr	r6, [pc, #512]	; (8004330 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800412e:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8004132:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004134:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004136:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800413a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800413e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004142:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004148:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004150:	d013      	beq.n	800417a <HAL_TIM_PWM_ConfigChannel+0xaa>
 8004152:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004156:	42b3      	cmp	r3, r6
 8004158:	d00f      	beq.n	800417a <HAL_TIM_PWM_ConfigChannel+0xaa>
 800415a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800415e:	42b3      	cmp	r3, r6
 8004160:	d00b      	beq.n	800417a <HAL_TIM_PWM_ConfigChannel+0xaa>
 8004162:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004166:	42b3      	cmp	r3, r6
 8004168:	d007      	beq.n	800417a <HAL_TIM_PWM_ConfigChannel+0xaa>
 800416a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800416e:	42b3      	cmp	r3, r6
 8004170:	d003      	beq.n	800417a <HAL_TIM_PWM_ConfigChannel+0xaa>
 8004172:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004176:	42b3      	cmp	r3, r6
 8004178:	d104      	bne.n	8004184 <HAL_TIM_PWM_ConfigChannel+0xb4>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800417a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800417c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004180:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8004184:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004186:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800418a:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 800418c:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800418e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004190:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004192:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004196:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800419a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800419e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2000      	movs	r0, #0
      break;
 80041aa:	e7b6      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f7ff faa1 	bl	80036f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b6:	6999      	ldr	r1, [r3, #24]
 80041b8:	f041 0108 	orr.w	r1, r1, #8
 80041bc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041be:	6999      	ldr	r1, [r3, #24]
 80041c0:	f021 0104 	bic.w	r1, r1, #4
 80041c4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	4302      	orrs	r2, r0
 80041ca:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2000      	movs	r0, #0
      break;
 80041ce:	e7a4      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d0:	6800      	ldr	r0, [r0, #0]
 80041d2:	f7ff ff2b 	bl	800402c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041da:	6999      	ldr	r1, [r3, #24]
 80041dc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80041e0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e2:	6999      	ldr	r1, [r3, #24]
 80041e4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80041e8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80041f0:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2000      	movs	r0, #0
      break;
 80041f4:	e791      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041f6:	6800      	ldr	r0, [r0, #0]
 80041f8:	f7ff fabe 	bl	8003778 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041fe:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004200:	69d9      	ldr	r1, [r3, #28]
 8004202:	f041 0108 	orr.w	r1, r1, #8
 8004206:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004208:	69d9      	ldr	r1, [r3, #28]
 800420a:	f021 0104 	bic.w	r1, r1, #4
 800420e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	4302      	orrs	r2, r0
 8004214:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2000      	movs	r0, #0
      break;
 8004218:	e77f      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800421c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004220:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004222:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	4e42      	ldr	r6, [pc, #264]	; (8004330 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004226:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800422a:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800422c:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800422e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004230:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004232:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8004236:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800423a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004240:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004248:	d013      	beq.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800424a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800424e:	42b3      	cmp	r3, r6
 8004250:	d00f      	beq.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8004252:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004256:	42b3      	cmp	r3, r6
 8004258:	d00b      	beq.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800425a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800425e:	42b3      	cmp	r3, r6
 8004260:	d007      	beq.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8004262:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004266:	42b3      	cmp	r3, r6
 8004268:	d003      	beq.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800426a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800426e:	42b3      	cmp	r3, r6
 8004270:	d104      	bne.n	800427c <HAL_TIM_PWM_ConfigChannel+0x1ac>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004272:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004274:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004278:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800427c:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800427e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004280:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004282:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004284:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004286:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004288:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800428a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800428e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004290:	69d9      	ldr	r1, [r3, #28]
 8004292:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004296:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800429e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2000      	movs	r0, #0
      break;
 80042a2:	e73a      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042a4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042a6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042aa:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ae:	4e20      	ldr	r6, [pc, #128]	; (8004330 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042b0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80042b4:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80042b6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80042b8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80042ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80042c0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80042ce:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d2:	d013      	beq.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x22c>
 80042d4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80042d8:	42b3      	cmp	r3, r6
 80042da:	d00f      	beq.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x22c>
 80042dc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80042e0:	42b3      	cmp	r3, r6
 80042e2:	d00b      	beq.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x22c>
 80042e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042e8:	42b3      	cmp	r3, r6
 80042ea:	d007      	beq.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x22c>
 80042ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042f0:	42b3      	cmp	r3, r6
 80042f2:	d003      	beq.n	80042fc <HAL_TIM_PWM_ConfigChannel+0x22c>
 80042f4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80042f8:	42b3      	cmp	r3, r6
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x236>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042fc:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042fe:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004302:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8004306:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004308:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800430c:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800430e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004310:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004312:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004314:	f041 0108 	orr.w	r1, r1, #8
 8004318:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800431a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800431c:	f021 0104 	bic.w	r1, r1, #4
 8004320:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004324:	4302      	orrs	r2, r0
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2000      	movs	r0, #0
      break;
 800432a:	e6f6      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x4a>
  __HAL_LOCK(htim);
 800432c:	2002      	movs	r0, #2
}
 800432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004330:	40012c00 	.word	0x40012c00

08004334 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004334:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d04e      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 800433c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433e:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004340:	4c27      	ldr	r4, [pc, #156]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	2202      	movs	r2, #2
 8004344:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004348:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 800434a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800434c:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800434e:	d03a      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004350:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004354:	42a3      	cmp	r3, r4
 8004356:	d02c      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004358:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800435c:	42a3      	cmp	r3, r4
 800435e:	d028      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004360:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004362:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004366:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d012      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004370:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800437e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004386:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800438e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004392:	4293      	cmp	r3, r2
 8004394:	d104      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004396:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004398:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80043a0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	2201      	movs	r2, #1
 80043a4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80043ac:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80043ae:	4618      	mov	r0, r3
}
 80043b0:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b2:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043ba:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80043bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c0:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 80043c2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c4:	e7d1      	b.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c6:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043ce:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d4:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 80043d6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	e7dd      	b.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 80043da:	2002      	movs	r0, #2
}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40000400 	.word	0x40000400

080043e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d03f      	beq.n	8004470 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 80043f0:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043f2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80043f6:	4602      	mov	r2, r0
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043fc:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004400:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004406:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800440c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004410:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004416:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800441c:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800441e:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004420:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004426:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004428:	4c12      	ldr	r4, [pc, #72]	; (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800442a:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800442c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004430:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004432:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004436:	d007      	beq.n	8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8004438:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800443c:	42a0      	cmp	r0, r4
 800443e:	d003      	beq.n	8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8004440:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8004444:	42a0      	cmp	r0, r4
 8004446:	d10c      	bne.n	8004462 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004448:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800444a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800444e:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004452:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800445c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004460:	430b      	orrs	r3, r1
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004462:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004464:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004466:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800446a:	4608      	mov	r0, r1
}
 800446c:	bc30      	pop	{r4, r5}
 800446e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004470:	2002      	movs	r0, #2
}
 8004472:	4770      	bx	lr
 8004474:	40012c00 	.word	0x40012c00

08004478 <HAL_TIMEx_CommutCallback>:
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop

0800447c <HAL_TIMEx_BreakCallback>:
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop

08004480 <HAL_TIMEx_Break2Callback>:
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop

08004484 <UART_SetConfig>:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004484:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004486:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004488:	498b      	ldr	r1, [pc, #556]	; (80046b8 <UART_SetConfig+0x234>)
{
 800448a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448c:	6905      	ldr	r5, [r0, #16]
 800448e:	6946      	ldr	r6, [r0, #20]
{
 8004490:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004492:	432b      	orrs	r3, r5
 8004494:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004496:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004498:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800449c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449e:	430b      	orrs	r3, r1
 80044a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a2:	6851      	ldr	r1, [r2, #4]
 80044a4:	68e5      	ldr	r5, [r4, #12]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044a6:	69a3      	ldr	r3, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80044a8:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044aa:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80044ae:	4329      	orrs	r1, r5
 80044b0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b2:	6891      	ldr	r1, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b4:	4d81      	ldr	r5, [pc, #516]	; (80046bc <UART_SetConfig+0x238>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80044ba:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044bc:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044be:	42aa      	cmp	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c0:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c2:	d036      	beq.n	8004532 <UART_SetConfig+0xae>
 80044c4:	4b7e      	ldr	r3, [pc, #504]	; (80046c0 <UART_SetConfig+0x23c>)
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d010      	beq.n	80044ec <UART_SetConfig+0x68>
 80044ca:	4b7e      	ldr	r3, [pc, #504]	; (80046c4 <UART_SetConfig+0x240>)
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f000 80c9 	beq.w	8004664 <UART_SetConfig+0x1e0>
 80044d2:	4b7d      	ldr	r3, [pc, #500]	; (80046c8 <UART_SetConfig+0x244>)
 80044d4:	429a      	cmp	r2, r3
 80044d6:	f000 80da 	beq.w	800468e <UART_SetConfig+0x20a>
 80044da:	4b7c      	ldr	r3, [pc, #496]	; (80046cc <UART_SetConfig+0x248>)
 80044dc:	429a      	cmp	r2, r3
 80044de:	f000 8084 	beq.w	80045ea <UART_SetConfig+0x166>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80044e4:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e8:	2001      	movs	r0, #1

  return ret;
}
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ec:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044fa:	d05b      	beq.n	80045b4 <UART_SetConfig+0x130>
 80044fc:	d811      	bhi.n	8004522 <UART_SetConfig+0x9e>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d07c      	beq.n	80045fc <UART_SetConfig+0x178>
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d1ec      	bne.n	80044e2 <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004508:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800450c:	f000 8086 	beq.w	800461c <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8004510:	f7fe ff42 	bl	8003398 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004514:	2800      	cmp	r0, #0
 8004516:	d152      	bne.n	80045be <UART_SetConfig+0x13a>
  huart->RxISR = NULL;
 8004518:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800451a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 800451e:	2000      	movs	r0, #0
}
 8004520:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004526:	d1dc      	bne.n	80044e2 <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004528:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800452c:	d06c      	beq.n	8004608 <UART_SetConfig+0x184>
 800452e:	4868      	ldr	r0, [pc, #416]	; (80046d0 <UART_SetConfig+0x24c>)
 8004530:	e045      	b.n	80045be <UART_SetConfig+0x13a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004532:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <UART_SetConfig+0x250>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3b01      	subs	r3, #1
 800453c:	2b02      	cmp	r3, #2
 800453e:	d91c      	bls.n	800457a <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004540:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004544:	d14e      	bne.n	80045e4 <UART_SetConfig+0x160>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004546:	f7fe ff6d 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800454a:	2800      	cmp	r0, #0
 800454c:	d0e4      	beq.n	8004518 <UART_SetConfig+0x94>
 800454e:	0040      	lsls	r0, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004556:	fbb0 f0f3 	udiv	r0, r0, r3
 800455a:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800455c:	f1a3 0110 	sub.w	r1, r3, #16
 8004560:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004564:	4291      	cmp	r1, r2
 8004566:	d8bc      	bhi.n	80044e2 <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004568:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 800456c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800456e:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004570:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004574:	4318      	orrs	r0, r3
 8004576:	60d0      	str	r0, [r2, #12]
 8004578:	e7ce      	b.n	8004518 <UART_SetConfig+0x94>
 800457a:	4a57      	ldr	r2, [pc, #348]	; (80046d8 <UART_SetConfig+0x254>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004580:	5cd3      	ldrb	r3, [r2, r3]
 8004582:	d056      	beq.n	8004632 <UART_SetConfig+0x1ae>
    switch (clocksource)
 8004584:	2b08      	cmp	r3, #8
 8004586:	d8ac      	bhi.n	80044e2 <UART_SetConfig+0x5e>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x10c>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	08004603 	.word	0x08004603
 8004594:	080045e5 	.word	0x080045e5
 8004598:	0800452f 	.word	0x0800452f
 800459c:	080044e3 	.word	0x080044e3
 80045a0:	08004511 	.word	0x08004511
 80045a4:	080044e3 	.word	0x080044e3
 80045a8:	080044e3 	.word	0x080044e3
 80045ac:	080044e3 	.word	0x080044e3
 80045b0:	080045bb 	.word	0x080045bb
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045b8:	d02d      	beq.n	8004616 <UART_SetConfig+0x192>
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80045c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c8:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ca:	f1a3 0110 	sub.w	r1, r3, #16
 80045ce:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80045d2:	4291      	cmp	r1, r2
 80045d4:	d885      	bhi.n	80044e2 <UART_SetConfig+0x5e>
        huart->Instance->BRR = usartdiv;
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80045da:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80045dc:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80045e0:	2000      	movs	r0, #0
}
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7fe ff1e 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
        break;
 80045e8:	e794      	b.n	8004514 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ea:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <UART_SetConfig+0x250>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80045f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f6:	d0dd      	beq.n	80045b4 <UART_SetConfig+0x130>
 80045f8:	d816      	bhi.n	8004628 <UART_SetConfig+0x1a4>
 80045fa:	b93b      	cbnz	r3, 800460c <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004600:	d00f      	beq.n	8004622 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004602:	f7fe fef7 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
        break;
 8004606:	e785      	b.n	8004514 <UART_SetConfig+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004608:	4834      	ldr	r0, [pc, #208]	; (80046dc <UART_SetConfig+0x258>)
 800460a:	e7a1      	b.n	8004550 <UART_SetConfig+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004610:	f43f af7a 	beq.w	8004508 <UART_SetConfig+0x84>
 8004614:	e765      	b.n	80044e2 <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004616:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800461a:	e799      	b.n	8004550 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetSysClockFreq();
 800461c:	f7fe febc 	bl	8003398 <HAL_RCC_GetSysClockFreq>
        break;
 8004620:	e793      	b.n	800454a <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004622:	f7fe fee7 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
        break;
 8004626:	e790      	b.n	800454a <UART_SetConfig+0xc6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004628:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800462c:	f43f af7c 	beq.w	8004528 <UART_SetConfig+0xa4>
 8004630:	e757      	b.n	80044e2 <UART_SetConfig+0x5e>
    switch (clocksource)
 8004632:	2b08      	cmp	r3, #8
 8004634:	f63f af55 	bhi.w	80044e2 <UART_SetConfig+0x5e>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <UART_SetConfig+0x1bc>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004623 	.word	0x08004623
 8004644:	08004547 	.word	0x08004547
 8004648:	08004609 	.word	0x08004609
 800464c:	080044e3 	.word	0x080044e3
 8004650:	0800461d 	.word	0x0800461d
 8004654:	080044e3 	.word	0x080044e3
 8004658:	080044e3 	.word	0x080044e3
 800465c:	080044e3 	.word	0x080044e3
 8004660:	08004617 	.word	0x08004617
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004664:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800466e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004672:	d09f      	beq.n	80045b4 <UART_SetConfig+0x130>
 8004674:	d806      	bhi.n	8004684 <UART_SetConfig+0x200>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0c0      	beq.n	80045fc <UART_SetConfig+0x178>
 800467a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800467e:	f43f af43 	beq.w	8004508 <UART_SetConfig+0x84>
 8004682:	e72e      	b.n	80044e2 <UART_SetConfig+0x5e>
 8004684:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004688:	f43f af4e 	beq.w	8004528 <UART_SetConfig+0xa4>
 800468c:	e729      	b.n	80044e2 <UART_SetConfig+0x5e>
 800468e:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800469c:	d08a      	beq.n	80045b4 <UART_SetConfig+0x130>
 800469e:	d806      	bhi.n	80046ae <UART_SetConfig+0x22a>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ab      	beq.n	80045fc <UART_SetConfig+0x178>
 80046a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a8:	f43f af2e 	beq.w	8004508 <UART_SetConfig+0x84>
 80046ac:	e719      	b.n	80044e2 <UART_SetConfig+0x5e>
 80046ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b2:	f43f af39 	beq.w	8004528 <UART_SetConfig+0xa4>
 80046b6:	e714      	b.n	80044e2 <UART_SetConfig+0x5e>
 80046b8:	efff69f3 	.word	0xefff69f3
 80046bc:	40013800 	.word	0x40013800
 80046c0:	40004400 	.word	0x40004400
 80046c4:	40004800 	.word	0x40004800
 80046c8:	40004c00 	.word	0x40004c00
 80046cc:	40005000 	.word	0x40005000
 80046d0:	007a1200 	.word	0x007a1200
 80046d4:	40021000 	.word	0x40021000
 80046d8:	080049f0 	.word	0x080049f0
 80046dc:	00f42400 	.word	0x00f42400

080046e0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046e2:	07da      	lsls	r2, r3, #31
{
 80046e4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e6:	d506      	bpl.n	80046f6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e8:	6801      	ldr	r1, [r0, #0]
 80046ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80046ec:	684a      	ldr	r2, [r1, #4]
 80046ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046f2:	4322      	orrs	r2, r4
 80046f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046f6:	079c      	lsls	r4, r3, #30
 80046f8:	d506      	bpl.n	8004708 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fa:	6801      	ldr	r1, [r0, #0]
 80046fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80046fe:	684a      	ldr	r2, [r1, #4]
 8004700:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004704:	4322      	orrs	r2, r4
 8004706:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004708:	0759      	lsls	r1, r3, #29
 800470a:	d506      	bpl.n	800471a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470c:	6801      	ldr	r1, [r0, #0]
 800470e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004710:	684a      	ldr	r2, [r1, #4]
 8004712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004716:	4322      	orrs	r2, r4
 8004718:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800471a:	071a      	lsls	r2, r3, #28
 800471c:	d506      	bpl.n	800472c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471e:	6801      	ldr	r1, [r0, #0]
 8004720:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004722:	684a      	ldr	r2, [r1, #4]
 8004724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004728:	4322      	orrs	r2, r4
 800472a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800472c:	06dc      	lsls	r4, r3, #27
 800472e:	d506      	bpl.n	800473e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	6801      	ldr	r1, [r0, #0]
 8004732:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004734:	688a      	ldr	r2, [r1, #8]
 8004736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473a:	4322      	orrs	r2, r4
 800473c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800473e:	0699      	lsls	r1, r3, #26
 8004740:	d506      	bpl.n	8004750 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004742:	6801      	ldr	r1, [r0, #0]
 8004744:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004746:	688a      	ldr	r2, [r1, #8]
 8004748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474c:	4322      	orrs	r2, r4
 800474e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004750:	065a      	lsls	r2, r3, #25
 8004752:	d509      	bpl.n	8004768 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004754:	6801      	ldr	r1, [r0, #0]
 8004756:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004758:	684a      	ldr	r2, [r1, #4]
 800475a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800475e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004760:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004764:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004766:	d00b      	beq.n	8004780 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	d506      	bpl.n	800477a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476c:	6802      	ldr	r2, [r0, #0]
 800476e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004770:	6853      	ldr	r3, [r2, #4]
 8004772:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004776:	430b      	orrs	r3, r1
 8004778:	6053      	str	r3, [r2, #4]
  }
}
 800477a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800477e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004780:	684a      	ldr	r2, [r1, #4]
 8004782:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004784:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004788:	4322      	orrs	r2, r4
 800478a:	604a      	str	r2, [r1, #4]
 800478c:	e7ec      	b.n	8004768 <UART_AdvFeatureConfig+0x88>
 800478e:	bf00      	nop

08004790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004798:	6804      	ldr	r4, [r0, #0]
 800479a:	4607      	mov	r7, r0
 800479c:	460e      	mov	r6, r1
 800479e:	4615      	mov	r5, r2
 80047a0:	4699      	mov	r9, r3
 80047a2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80047a6:	d10a      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x2e>
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a8:	69e3      	ldr	r3, [r4, #28]
 80047aa:	ea36 0303 	bics.w	r3, r6, r3
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	429d      	cmp	r5, r3
 80047b6:	d0f7      	beq.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80047b8:	2000      	movs	r0, #0
}
 80047ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	69e3      	ldr	r3, [r4, #28]
 80047c0:	ea36 0303 	bics.w	r3, r6, r3
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	42ab      	cmp	r3, r5
 80047cc:	d1f4      	bne.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fd faab 	bl	8001d28 <HAL_GetTick>
 80047d2:	eba0 0009 	sub.w	r0, r0, r9
 80047d6:	4540      	cmp	r0, r8
 80047d8:	d831      	bhi.n	800483e <UART_WaitOnFlagUntilTimeout+0xae>
 80047da:	f1b8 0f00 	cmp.w	r8, #0
 80047de:	d02e      	beq.n	800483e <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e0:	683c      	ldr	r4, [r7, #0]
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	0759      	lsls	r1, r3, #29
 80047e6:	4622      	mov	r2, r4
 80047e8:	d5db      	bpl.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ea:	69e3      	ldr	r3, [r4, #28]
 80047ec:	051b      	lsls	r3, r3, #20
 80047ee:	d5d8      	bpl.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047f4:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	e844 3100 	strex	r1, r3, [r4]
 8004802:	b139      	cbz	r1, 8004814 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	e852 3f00 	ldrex	r3, [r2]
 8004808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	e842 3100 	strex	r1, r3, [r2]
 8004810:	2900      	cmp	r1, #0
 8004812:	d1f7      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	f102 0308 	add.w	r3, r2, #8
 8004818:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	f102 0008 	add.w	r0, r2, #8
 8004824:	e840 3100 	strex	r1, r3, [r0]
 8004828:	2900      	cmp	r1, #0
 800482a:	d1f3      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800482c:	2320      	movs	r3, #32
 800482e:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8004830:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004834:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004836:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004838:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 800483c:	e7bd      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0x2a>
 800483e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	e842 3100 	strex	r1, r3, [r2]
 800484c:	2900      	cmp	r1, #0
 800484e:	d1f7      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	f102 0308 	add.w	r3, r2, #8
 8004854:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004858:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	f102 0008 	add.w	r0, r2, #8
 8004860:	e840 3100 	strex	r1, r3, [r0]
 8004864:	2900      	cmp	r1, #0
 8004866:	d1f3      	bne.n	8004850 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 8004868:	2320      	movs	r3, #32
 800486a:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800486c:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        return HAL_TIMEOUT;
 8004870:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8004872:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 8004874:	e7a1      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0x2a>
 8004876:	bf00      	nop

08004878 <HAL_UART_Init>:
  if (huart == NULL)
 8004878:	2800      	cmp	r0, #0
 800487a:	d062      	beq.n	8004942 <HAL_UART_Init+0xca>
{
 800487c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800487e:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004880:	b082      	sub	sp, #8
 8004882:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004884:	2b00      	cmp	r3, #0
 8004886:	d049      	beq.n	800491c <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 8004888:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800488a:	2324      	movs	r3, #36	; 0x24
 800488c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004896:	4620      	mov	r0, r4
 8004898:	f7ff fdf4 	bl	8004484 <UART_SetConfig>
 800489c:	2801      	cmp	r0, #1
 800489e:	d03a      	beq.n	8004916 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d133      	bne.n	800490e <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80048b8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	2600      	movs	r6, #0
  __HAL_UART_ENABLE(huart);
 80048bc:	f041 0101 	orr.w	r1, r1, #1
 80048c0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 80048c6:	f7fd fa2f 	bl	8001d28 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80048d0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d2:	d40c      	bmi.n	80048ee <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	075b      	lsls	r3, r3, #29
 80048d8:	d425      	bmi.n	8004926 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	2220      	movs	r2, #32
 80048de:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80048e0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 80048e6:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e8:	6623      	str	r3, [r4, #96]	; 0x60
}
 80048ea:	b002      	add	sp, #8
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4632      	mov	r2, r6
 80048f6:	4603      	mov	r3, r0
 80048f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048fc:	4620      	mov	r0, r4
 80048fe:	f7ff ff47 	bl	8004790 <UART_WaitOnFlagUntilTimeout>
 8004902:	b9e0      	cbnz	r0, 800493e <HAL_UART_Init+0xc6>
 8004904:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	075b      	lsls	r3, r3, #29
 800490a:	d40c      	bmi.n	8004926 <HAL_UART_Init+0xae>
 800490c:	e7e5      	b.n	80048da <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 800490e:	4620      	mov	r0, r4
 8004910:	f7ff fee6 	bl	80046e0 <UART_AdvFeatureConfig>
 8004914:	e7c7      	b.n	80048a6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8004916:	2001      	movs	r0, #1
}
 8004918:	b002      	add	sp, #8
 800491a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800491c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004920:	f7fd f90e 	bl	8001b40 <HAL_UART_MspInit>
 8004924:	e7b0      	b.n	8004888 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004926:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800492a:	9200      	str	r2, [sp, #0]
 800492c:	462b      	mov	r3, r5
 800492e:	2200      	movs	r2, #0
 8004930:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004934:	4620      	mov	r0, r4
 8004936:	f7ff ff2b 	bl	8004790 <UART_WaitOnFlagUntilTimeout>
 800493a:	2800      	cmp	r0, #0
 800493c:	d0cd      	beq.n	80048da <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 800493e:	2003      	movs	r0, #3
 8004940:	e7d3      	b.n	80048ea <HAL_UART_Init+0x72>
    return HAL_ERROR;
 8004942:	2001      	movs	r0, #1
}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	; (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	; (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	; (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	; (800498c <__libc_init_array+0x44>)
 800495c:	f000 f820 	bl	80049a0 <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	080049f4 	.word	0x080049f4
 8004984:	080049f4 	.word	0x080049f4
 8004988:	080049f4 	.word	0x080049f4
 800498c:	080049f8 	.word	0x080049f8

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <_init>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr

080049ac <_fini>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr

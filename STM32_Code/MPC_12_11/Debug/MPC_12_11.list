
MPC_12_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004004  08004004  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004004  08004004  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800400c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000000c  08004018  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08004018  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187b9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f6  00000000  00000000  000387f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0003b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002170  00000000  00000000  0003c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217c4  00000000  00000000  0003e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afa2  00000000  00000000  0005ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d11f4  00000000  00000000  0007af86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c17a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e64  00000000  00000000  0014c1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000119a9  00000000  00000000  0014f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003fb0 	.word	0x08003fb0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003fb0 	.word	0x08003fb0

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d8:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001da:	2258      	movs	r2, #88	; 0x58
 80001dc:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e2:	e9cd 1100 	strd	r1, r1, [sp]
 80001e6:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ee:	f003 fed7 	bl	8003fa0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f4:	2310      	movs	r3, #16
 80001f6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2202      	movs	r2, #2
 80001fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000200:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800020a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f001 fe3a 	bl	8001e8c <HAL_RCC_OscConfig>
 8000218:	b108      	cbz	r0, 800021e <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800021a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800021c:	e7fe      	b.n	800021c <SystemClock_Config+0x48>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021e:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000220:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	240f      	movs	r4, #15
 800022e:	2502      	movs	r5, #2
 8000230:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000234:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f002 f916 	bl	8002468 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	b108      	cbz	r0, 8000244 <SystemClock_Config+0x70>
 8000240:	b672      	cpsid	i
  while (1)
 8000242:	e7fe      	b.n	8000242 <SystemClock_Config+0x6e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000244:	4c0a      	ldr	r4, [pc, #40]	; (8000270 <SystemClock_Config+0x9c>)
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000246:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000248:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800024c:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8000250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000254:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000256:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000258:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800025a:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800025c:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 800025e:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	f002 fa4e 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 8000264:	b108      	cbz	r0, 800026a <SystemClock_Config+0x96>
 8000266:	b672      	cpsid	i
  while (1)
 8000268:	e7fe      	b.n	8000268 <SystemClock_Config+0x94>
}
 800026a:	b027      	add	sp, #156	; 0x9c
 800026c:	bd30      	pop	{r4, r5, pc}
 800026e:	bf00      	nop
 8000270:	00301082 	.word	0x00301082

08000274 <main>:
{
 8000274:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	2400      	movs	r4, #0
{
 8000278:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 800027a:	f000 fe21 	bl	8000ec0 <HAL_Init>
  SystemClock_Config();
 800027e:	f7ff ffa9 	bl	80001d4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000286:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028a:	4eaa      	ldr	r6, [pc, #680]	; (8000534 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000290:	4da9      	ldr	r5, [pc, #676]	; (8000538 <main+0x2c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000296:	6173      	str	r3, [r6, #20]
 8000298:	6973      	ldr	r3, [r6, #20]
 800029a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800029e:	9302      	str	r3, [sp, #8]
 80002a0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002a2:	6973      	ldr	r3, [r6, #20]
 80002a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002a8:	6173      	str	r3, [r6, #20]
 80002aa:	6973      	ldr	r3, [r6, #20]
 80002ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002b0:	9303      	str	r3, [sp, #12]
 80002b2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b4:	6973      	ldr	r3, [r6, #20]
 80002b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ba:	6173      	str	r3, [r6, #20]
 80002bc:	6973      	ldr	r3, [r6, #20]
 80002be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c2:	9304      	str	r3, [sp, #16]
 80002c4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c6:	6973      	ldr	r3, [r6, #20]
 80002c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002cc:	6173      	str	r3, [r6, #20]
 80002ce:	6973      	ldr	r3, [r6, #20]
 80002d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002d4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d6:	4622      	mov	r2, r4
 80002d8:	2120      	movs	r1, #32
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e0:	f001 fdc0 	bl	8001e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80002e4:	4895      	ldr	r0, [pc, #596]	; (800053c <main+0x2c8>)
 80002e6:	4622      	mov	r2, r4
 80002e8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80002ec:	f001 fdba 	bl	8001e64 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80002f0:	4b93      	ldr	r3, [pc, #588]	; (8000540 <main+0x2cc>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80002f2:	4892      	ldr	r0, [pc, #584]	; (800053c <main+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80002f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80002fa:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80002fc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = LD2_Pin;
 8000300:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000304:	f001 fcac 	bl	8001c60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000308:	f04f 0900 	mov.w	r9, #0
 800030c:	2220      	movs	r2, #32
 800030e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000310:	a916      	add	r1, sp, #88	; 0x58
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 8000316:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800031a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800031e:	f001 fc9f 	bl	8001c60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000322:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000326:	2301      	movs	r3, #1
 8000328:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032c:	4883      	ldr	r0, [pc, #524]	; (800053c <main+0x2c8>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800032e:	2202      	movs	r2, #2
 8000330:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000332:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000334:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000338:	f001 fc92 	bl	8001c60 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033c:	6973      	ldr	r3, [r6, #20]
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6173      	str	r3, [r6, #20]
 8000344:	6973      	ldr	r3, [r6, #20]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800034e:	6973      	ldr	r3, [r6, #20]
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	6173      	str	r3, [r6, #20]
 8000356:	6973      	ldr	r3, [r6, #20]
 8000358:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800035c:	4622      	mov	r2, r4
 800035e:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000360:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000362:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000364:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000366:	f001 fb0f 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800036a:	200b      	movs	r0, #11
 800036c:	f001 fb44 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  hadc1.Init.NbrOfConversion = 3;
 8000370:	2003      	movs	r0, #3
  hadc1.Instance = ADC1;
 8000372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000376:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037a:	2104      	movs	r1, #4
  hadc1.Init.NbrOfConversion = 3;
 800037c:	61e8      	str	r0, [r5, #28]
  hadc1.Instance = ADC1;
 800037e:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000380:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000382:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000384:	832a      	strh	r2, [r5, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000386:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 800038a:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800038e:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8000392:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000396:	e9c5 4401 	strd	r4, r4, [r5, #4]
  ADC_MultiModeTypeDef multimode = {0};
 800039a:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800039c:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a0:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a2:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003a8:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003aa:	6169      	str	r1, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ac:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ae:	612b      	str	r3, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b0:	f000 fe3e 	bl	8001030 <HAL_ADC_Init>
 80003b4:	b108      	cbz	r0, 80003ba <main+0x146>
 80003b6:	b672      	cpsid	i
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <main+0x144>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003ba:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003bc:	a90e      	add	r1, sp, #56	; 0x38
 80003be:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003c2:	f001 fa3d 	bl	8001840 <HAL_ADCEx_MultiModeConfigChannel>
 80003c6:	b108      	cbz	r0, 80003cc <main+0x158>
 80003c8:	b672      	cpsid	i
  while (1)
 80003ca:	e7fe      	b.n	80003ca <main+0x156>
  sConfig.Channel = ADC_CHANNEL_1;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d0:	a916      	add	r1, sp, #88	; 0x58
 80003d2:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80003d4:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 80003d8:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 80003dc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e0:	f001 f86e 	bl	80014c0 <HAL_ADC_ConfigChannel>
 80003e4:	b108      	cbz	r0, 80003ea <main+0x176>
 80003e6:	b672      	cpsid	i
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <main+0x174>
  sConfig.Channel = ADC_CHANNEL_7;
 80003ea:	2207      	movs	r2, #7
 80003ec:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ee:	a916      	add	r1, sp, #88	; 0x58
 80003f0:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_7;
 80003f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f6:	f001 f863 	bl	80014c0 <HAL_ADC_ConfigChannel>
 80003fa:	b108      	cbz	r0, 8000400 <main+0x18c>
 80003fc:	b672      	cpsid	i
  while (1)
 80003fe:	e7fe      	b.n	80003fe <main+0x18a>
  sConfig.Channel = ADC_CHANNEL_14;
 8000400:	2303      	movs	r3, #3
 8000402:	220e      	movs	r2, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000404:	4628      	mov	r0, r5
 8000406:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_14;
 8000408:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040c:	f001 f858 	bl	80014c0 <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	b108      	cbz	r0, 8000418 <main+0x1a4>
 8000414:	b672      	cpsid	i
  while (1)
 8000416:	e7fe      	b.n	8000416 <main+0x1a2>
  hdac1.Instance = DAC1;
 8000418:	4c4a      	ldr	r4, [pc, #296]	; (8000544 <main+0x2d0>)
 800041a:	4a4b      	ldr	r2, [pc, #300]	; (8000548 <main+0x2d4>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800041c:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800041e:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8000420:	6022      	str	r2, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8000422:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000426:	f001 fb0f 	bl	8001a48 <HAL_DAC_Init>
 800042a:	4602      	mov	r2, r0
 800042c:	b108      	cbz	r0, 8000432 <main+0x1be>
 800042e:	b672      	cpsid	i
  while (1)
 8000430:	e7fe      	b.n	8000430 <main+0x1bc>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000432:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000434:	2502      	movs	r5, #2
 8000436:	243c      	movs	r4, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000438:	a916      	add	r1, sp, #88	; 0x58
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800043a:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800043e:	f001 fb19 	bl	8001a74 <HAL_DAC_ConfigChannel>
 8000442:	4604      	mov	r4, r0
 8000444:	b108      	cbz	r0, 800044a <main+0x1d6>
 8000446:	b672      	cpsid	i
  while (1)
 8000448:	e7fe      	b.n	8000448 <main+0x1d4>
  htim1.Instance = TIM1;
 800044a:	4d40      	ldr	r5, [pc, #256]	; (800054c <main+0x2d8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044c:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800044e:	4601      	mov	r1, r0
 8000450:	222c      	movs	r2, #44	; 0x2c
 8000452:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000454:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000458:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 800045c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000460:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000464:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000468:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800046a:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800046e:	f003 fd97 	bl	8003fa0 <memset>
  htim1.Instance = TIM1;
 8000472:	4b37      	ldr	r3, [pc, #220]	; (8000550 <main+0x2dc>)
 8000474:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 6;
 8000476:	2006      	movs	r0, #6
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000478:	2120      	movs	r1, #32
  htim1.Init.Period = 517;
 800047a:	f240 2205 	movw	r2, #517	; 0x205
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800047e:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 6;
 8000480:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000482:	4628      	mov	r0, r5
  htim1.Init.Period = 517;
 8000484:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000488:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800048a:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800048c:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800048e:	f002 fb1b 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000492:	b108      	cbz	r0, 8000498 <main+0x224>
 8000494:	b672      	cpsid	i
  while (1)
 8000496:	e7fe      	b.n	8000496 <main+0x222>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800049c:	a90a      	add	r1, sp, #40	; 0x28
 800049e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a2:	f002 fde3 	bl	800306c <HAL_TIM_ConfigClockSource>
 80004a6:	b108      	cbz	r0, 80004ac <main+0x238>
 80004a8:	b672      	cpsid	i
  while (1)
 80004aa:	e7fe      	b.n	80004aa <main+0x236>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004ac:	4628      	mov	r0, r5
 80004ae:	f002 fbdf 	bl	8002c70 <HAL_TIM_PWM_Init>
 80004b2:	b108      	cbz	r0, 80004b8 <main+0x244>
 80004b4:	b672      	cpsid	i
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <main+0x242>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80004b8:	2470      	movs	r4, #112	; 0x70
 80004ba:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004be:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c0:	4822      	ldr	r0, [pc, #136]	; (800054c <main+0x2d8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c2:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c4:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80004c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ca:	f003 f8c7 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	b108      	cbz	r0, 80004d4 <main+0x260>
 80004d0:	b672      	cpsid	i
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <main+0x25e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d4:	2460      	movs	r4, #96	; 0x60
 80004d6:	2500      	movs	r5, #0
 80004d8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004dc:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004de:	2400      	movs	r4, #0
 80004e0:	2500      	movs	r5, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004e2:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004e4:	a90e      	add	r1, sp, #56	; 0x38
 80004e6:	4819      	ldr	r0, [pc, #100]	; (800054c <main+0x2d8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80004ec:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f0:	f002 ff76 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 80004f4:	b108      	cbz	r0, 80004fa <main+0x286>
 80004f6:	b672      	cpsid	i
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x284>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004fa:	4814      	ldr	r0, [pc, #80]	; (800054c <main+0x2d8>)
 80004fc:	2204      	movs	r2, #4
 80004fe:	a90e      	add	r1, sp, #56	; 0x38
 8000500:	f002 ff6e 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000504:	b108      	cbz	r0, 800050a <main+0x296>
 8000506:	b672      	cpsid	i
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x294>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <main+0x2d8>)
 800050c:	2208      	movs	r2, #8
 800050e:	a90e      	add	r1, sp, #56	; 0x38
 8000510:	f002 ff66 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8000514:	b108      	cbz	r0, 800051a <main+0x2a6>
 8000516:	b672      	cpsid	i
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x2a4>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800051a:	2470      	movs	r4, #112	; 0x70
 800051c:	f240 15fd 	movw	r5, #509	; 0x1fd
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x2d8>)
 8000522:	220c      	movs	r2, #12
 8000524:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000526:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800052a:	f002 ff59 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 800052e:	b188      	cbz	r0, 8000554 <main+0x2e0>
 8000530:	b672      	cpsid	i
  while (1)
 8000532:	e7fe      	b.n	8000532 <main+0x2be>
 8000534:	40021000 	.word	0x40021000
 8000538:	20000170 	.word	0x20000170
 800053c:	48000800 	.word	0x48000800
 8000540:	10210000 	.word	0x10210000
 8000544:	200000b8 	.word	0x200000b8
 8000548:	40007400 	.word	0x40007400
 800054c:	20000248 	.word	0x20000248
 8000550:	40012c00 	.word	0x40012c00
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000564:	2300      	movs	r3, #0
 8000566:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000570:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000574:	2200      	movs	r2, #0
 8000576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800057a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800057e:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000580:	2200      	movs	r2, #0
 8000582:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000584:	48b1      	ldr	r0, [pc, #708]	; (800084c <main+0x5d8>)
 8000586:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000588:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800058c:	f003 f8c0 	bl	8003710 <HAL_TIMEx_ConfigBreakDeadTime>
 8000590:	4604      	mov	r4, r0
 8000592:	b108      	cbz	r0, 8000598 <main+0x324>
 8000594:	b672      	cpsid	i
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x322>
  htim2.Instance = TIM2;
 8000598:	4dad      	ldr	r5, [pc, #692]	; (8000850 <main+0x5dc>)
  HAL_TIM_MspPostInit(&htim1);
 800059a:	48ac      	ldr	r0, [pc, #688]	; (800084c <main+0x5d8>)
 800059c:	f000 fb0c 	bl	8000bb8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80005a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 29;
 80005a4:	221d      	movs	r2, #29
  htim2.Init.Period = 565;
 80005a6:	f240 2335 	movw	r3, #565	; 0x235
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005aa:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ac:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80005b0:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80005b8:	9410      	str	r4, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005be:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 80005c0:	6029      	str	r1, [r5, #0]
  htim2.Init.Prescaler = 29;
 80005c2:	606a      	str	r2, [r5, #4]
  htim2.Init.Period = 565;
 80005c4:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c6:	f002 fa7f 	bl	8002ac8 <HAL_TIM_Base_Init>
 80005ca:	b108      	cbz	r0, 80005d0 <main+0x35c>
 80005cc:	b672      	cpsid	i
  while (1)
 80005ce:	e7fe      	b.n	80005ce <main+0x35a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005d4:	a916      	add	r1, sp, #88	; 0x58
 80005d6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d8:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005da:	f002 fd47 	bl	800306c <HAL_TIM_ConfigClockSource>
 80005de:	4603      	mov	r3, r0
 80005e0:	b108      	cbz	r0, 80005e6 <main+0x372>
 80005e2:	b672      	cpsid	i
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x370>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e6:	4628      	mov	r0, r5
 80005e8:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ea:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ec:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ee:	f003 f835 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	b108      	cbz	r0, 80005f8 <main+0x384>
 80005f4:	b672      	cpsid	i
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x382>
  huart2.Instance = USART2;
 80005f8:	4b96      	ldr	r3, [pc, #600]	; (8000854 <main+0x5e0>)
 80005fa:	4c97      	ldr	r4, [pc, #604]	; (8000858 <main+0x5e4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fc:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 1843200;
 80005fe:	f44f 11e1 	mov.w	r1, #1843200	; 0x1c2000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000602:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8000604:	e9c3 0003 	strd	r0, r0, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800060c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  huart2.Init.BaudRate = 1843200;
 8000610:	6059      	str	r1, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000612:	615a      	str	r2, [r3, #20]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000614:	2120      	movs	r1, #32
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800061a:	6218      	str	r0, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061c:	4618      	mov	r0, r3
  huart2.Instance = USART2;
 800061e:	601c      	str	r4, [r3, #0]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000620:	6259      	str	r1, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000622:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000624:	f003 fa4c 	bl	8003ac0 <HAL_UART_Init>
 8000628:	b108      	cbz	r0, 800062e <main+0x3ba>
 800062a:	b672      	cpsid	i
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x3b8>
  htim3.Instance = TIM3;
 800062e:	4c8b      	ldr	r4, [pc, #556]	; (800085c <main+0x5e8>)
 8000630:	4b8b      	ldr	r3, [pc, #556]	; (8000860 <main+0x5ec>)
 8000632:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 6;
 8000634:	2306      	movs	r3, #6
  htim3.Init.Period = 517;
 8000636:	f240 2205 	movw	r2, #517	; 0x205
  htim3.Init.Prescaler = 6;
 800063a:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800063c:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	2300      	movs	r3, #0
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000644:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8000648:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8000650:	9310      	str	r3, [sp, #64]	; 0x40
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000656:	f002 fa37 	bl	8002ac8 <HAL_TIM_Base_Init>
 800065a:	b108      	cbz	r0, 8000660 <main+0x3ec>
 800065c:	b672      	cpsid	i
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x3ea>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000664:	a916      	add	r1, sp, #88	; 0x58
 8000666:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000668:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800066a:	f002 fcff 	bl	800306c <HAL_TIM_ConfigClockSource>
 800066e:	b108      	cbz	r0, 8000674 <main+0x400>
 8000670:	b672      	cpsid	i
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x3fe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000674:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000676:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000678:	a90e      	add	r1, sp, #56	; 0x38
 800067a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800067c:	920e      	str	r2, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800067e:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000680:	f002 ffec 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 8000684:	b108      	cbz	r0, 800068a <main+0x416>
 8000686:	b672      	cpsid	i
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0x414>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4c76      	ldr	r4, [pc, #472]	; (8000864 <main+0x5f0>)
  hadc2.Instance = ADC2;
 800068c:	4a76      	ldr	r2, [pc, #472]	; (8000868 <main+0x5f4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	9016      	str	r0, [sp, #88]	; 0x58
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000694:	f04f 0801 	mov.w	r8, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8000698:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 800069c:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a0:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hadc2.Init.NbrOfConversion = 2;
 80006a4:	2102      	movs	r1, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	901b      	str	r0, [sp, #108]	; 0x6c
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ac:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006ae:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b2:	60e0      	str	r0, [r4, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006b4:	6360      	str	r0, [r4, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	f04f 0904 	mov.w	r9, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ba:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006bc:	8323      	strh	r3, [r4, #24]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	e9c4 8904 	strd	r8, r9, [r4, #16]
  hadc2.Init.NbrOfConversion = 2;
 80006c2:	61e1      	str	r1, [r4, #28]
  hadc2.Instance = ADC2;
 80006c4:	6022      	str	r2, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ca:	f000 fcb1 	bl	8001030 <HAL_ADC_Init>
 80006ce:	b108      	cbz	r0, 80006d4 <main+0x460>
 80006d0:	b672      	cpsid	i
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <main+0x45e>
  sConfig.Channel = ADC_CHANNEL_11;
 80006d4:	2600      	movs	r6, #0
 80006d6:	2700      	movs	r7, #0
 80006d8:	220b      	movs	r2, #11
 80006da:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006dc:	a916      	add	r1, sp, #88	; 0x58
 80006de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_11;
 80006e0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80006e4:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 80006e8:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ec:	f000 fee8 	bl	80014c0 <HAL_ADC_ConfigChannel>
 80006f0:	b108      	cbz	r0, 80006f6 <main+0x482>
 80006f2:	b672      	cpsid	i
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0x480>
  sConfig.Channel = ADC_CHANNEL_5;
 80006f6:	2205      	movs	r2, #5
 80006f8:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006fa:	a916      	add	r1, sp, #88	; 0x58
 80006fc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80006fe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000702:	f000 fedd 	bl	80014c0 <HAL_ADC_ConfigChannel>
 8000706:	b108      	cbz	r0, 800070c <main+0x498>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x496>
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800070c:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800087c <main+0x608>
  hadc4.Instance = ADC4;
 8000710:	4a56      	ldr	r2, [pc, #344]	; (800086c <main+0x5f8>)
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000712:	f88a 0020 	strb.w	r0, [sl, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 800071a:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 800071e:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000722:	e9ca 800a 	strd	r8, r0, [sl, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	e9ca 0002 	strd	r0, r0, [sl, #8]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072a:	e9ca 0904 	strd	r0, r9, [sl, #16]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800072e:	f88a 0030 	strb.w	r0, [sl, #48]	; 0x30
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000732:	f8aa 0018 	strh.w	r0, [sl, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000736:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800073e:	4650      	mov	r0, sl
  hadc4.Init.NbrOfConversion = 1;
 8000740:	f8ca 801c 	str.w	r8, [sl, #28]
  hadc4.Instance = ADC4;
 8000744:	f8ca 2000 	str.w	r2, [sl]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000748:	f8ca 3004 	str.w	r3, [sl, #4]
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800074c:	f000 fc70 	bl	8001030 <HAL_ADC_Init>
 8000750:	b108      	cbz	r0, 8000756 <main+0x4e2>
 8000752:	b672      	cpsid	i
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x4e0>
  sConfig.Channel = ADC_CHANNEL_3;
 8000756:	2203      	movs	r2, #3
 8000758:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800075a:	a916      	add	r1, sp, #88	; 0x58
 800075c:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_3;
 800075e:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8000762:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8000766:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800076a:	f000 fea9 	bl	80014c0 <HAL_ADC_ConfigChannel>
 800076e:	4606      	mov	r6, r0
 8000770:	b108      	cbz	r0, 8000776 <main+0x502>
 8000772:	b672      	cpsid	i
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x500>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000776:	4642      	mov	r2, r8
 8000778:	4649      	mov	r1, r9
 800077a:	2018      	movs	r0, #24
 800077c:	f001 f904 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000780:	2018      	movs	r0, #24
 8000782:	f001 f939 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000786:	4632      	mov	r2, r6
 8000788:	4631      	mov	r1, r6
 800078a:	2019      	movs	r0, #25
 800078c:	f001 f8fc 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000790:	2019      	movs	r0, #25
 8000792:	f001 f931 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000796:	4632      	mov	r2, r6
 8000798:	2103      	movs	r1, #3
 800079a:	201c      	movs	r0, #28
 800079c:	f001 f8f4 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007a0:	201c      	movs	r0, #28
 80007a2:	f001 f929 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80007a6:	4642      	mov	r2, r8
 80007a8:	2103      	movs	r1, #3
 80007aa:	2026      	movs	r0, #38	; 0x26
 80007ac:	f001 f8ec 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007b0:	2026      	movs	r0, #38	; 0x26
 80007b2:	f001 f921 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80007b6:	4632      	mov	r2, r6
 80007b8:	2103      	movs	r1, #3
 80007ba:	2028      	movs	r0, #40	; 0x28
 80007bc:	f001 f8e4 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007c0:	2028      	movs	r0, #40	; 0x28
 80007c2:	f001 f919 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007c6:	4632      	mov	r2, r6
 80007c8:	4631      	mov	r1, r6
 80007ca:	2010      	movs	r0, #16
 80007cc:	f001 f8dc 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007d0:	2010      	movs	r0, #16
 80007d2:	f001 f911 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007d6:	4632      	mov	r2, r6
 80007d8:	4631      	mov	r1, r6
 80007da:	201d      	movs	r0, #29
 80007dc:	f001 f8d4 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007e0:	201d      	movs	r0, #29
 80007e2:	f001 f909 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80007e6:	4631      	mov	r1, r6
 80007e8:	4821      	ldr	r0, [pc, #132]	; (8000870 <main+0x5fc>)
 80007ea:	f000 fe23 	bl	8001434 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80007ee:	4631      	mov	r1, r6
 80007f0:	4620      	mov	r0, r4
 80007f2:	f000 fe1f 	bl	8001434 <HAL_ADCEx_Calibration_Start>
  	HAL_TIM_Base_Start_IT(&htim2);
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <main+0x5dc>)
 80007f8:	f002 f9fa 	bl	8002bf0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007fc:	4631      	mov	r1, r6
 80007fe:	4813      	ldr	r0, [pc, #76]	; (800084c <main+0x5d8>)
 8000800:	f002 faca 	bl	8002d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000804:	4649      	mov	r1, r9
 8000806:	4811      	ldr	r0, [pc, #68]	; (800084c <main+0x5d8>)
 8000808:	f002 fac6 	bl	8002d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800080c:	2108      	movs	r1, #8
 800080e:	480f      	ldr	r0, [pc, #60]	; (800084c <main+0x5d8>)
 8000810:	f002 fac2 	bl	8002d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000814:	210c      	movs	r1, #12
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <main+0x5d8>)
 8000818:	f002 fb58 	bl	8002ecc <HAL_TIM_PWM_Start_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 800081c:	4815      	ldr	r0, [pc, #84]	; (8000874 <main+0x600>)
 800081e:	4642      	mov	r2, r8
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	f001 fb1e 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <main+0x600>)
 800082a:	4642      	mov	r2, r8
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	f001 fb18 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <main+0x600>)
 8000836:	4642      	mov	r2, r8
 8000838:	4629      	mov	r1, r5
 800083a:	f001 fb13 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&huart2, RX_data, 1);
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <main+0x604>)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <main+0x5e0>)
 8000842:	4642      	mov	r2, r8
 8000844:	f002 ffb2 	bl	80037ac <HAL_UART_Receive_DMA>
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0x5d4>
 800084a:	bf00      	nop
 800084c:	20000248 	.word	0x20000248
 8000850:	20000294 	.word	0x20000294
 8000854:	200002e0 	.word	0x200002e0
 8000858:	40004400 	.word	0x40004400
 800085c:	20000124 	.word	0x20000124
 8000860:	40000400 	.word	0x40000400
 8000864:	200000cc 	.word	0x200000cc
 8000868:	50000100 	.word	0x50000100
 800086c:	50000500 	.word	0x50000500
 8000870:	20000170 	.word	0x20000170
 8000874:	48000800 	.word	0x48000800
 8000878:	20000120 	.word	0x20000120
 800087c:	20000364 	.word	0x20000364

08000880 <Error_Handler>:
 8000880:	b672      	cpsid	i
  while (1)
 8000882:	e7fe      	b.n	8000882 <Error_Handler+0x2>

08000884 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_MspInit+0x30>)
 8000886:	699a      	ldr	r2, [r3, #24]
 8000888:	f042 0201 	orr.w	r2, r2, #1
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	699a      	ldr	r2, [r3, #24]
{
 8000890:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	f002 0201 	and.w	r2, r2, #1
 8000896:	9200      	str	r2, [sp, #0]
 8000898:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008a0:	61da      	str	r2, [r3, #28]
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008ac:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008b0:	f001 b856 	b.w	8001960 <HAL_NVIC_SetPriorityGrouping>
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80008ba:	6803      	ldr	r3, [r0, #0]
{
 80008bc:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80008c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80008c8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
{
 80008cc:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	940c      	str	r4, [sp, #48]	; 0x30
  if(hadc->Instance==ADC1)
 80008d0:	d03b      	beq.n	800094a <HAL_ADC_MspInit+0x92>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80008d2:	4a67      	ldr	r2, [pc, #412]	; (8000a70 <HAL_ADC_MspInit+0x1b8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d005      	beq.n	80008e4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 80008d8:	4a66      	ldr	r2, [pc, #408]	; (8000a74 <HAL_ADC_MspInit+0x1bc>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	f000 8091 	beq.w	8000a02 <HAL_ADC_MspInit+0x14a>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80008e0:	b00e      	add	sp, #56	; 0x38
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e4:	4a64      	ldr	r2, [pc, #400]	; (8000a78 <HAL_ADC_MspInit+0x1c0>)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ee:	d07a      	beq.n	80009e6 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <HAL_ADC_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	4863      	ldr	r0, [pc, #396]	; (8000a80 <HAL_ADC_MspInit+0x1c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA2_Channel1;
 80008f6:	4c63      	ldr	r4, [pc, #396]	; (8000a84 <HAL_ADC_MspInit+0x1cc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000904:	9305      	str	r3, [sp, #20]
 8000906:	9e05      	ldr	r6, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000908:	2303      	movs	r3, #3
 800090a:	2230      	movs	r2, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000910:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f001 f9a3 	bl	8001c60 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800091a:	4b5b      	ldr	r3, [pc, #364]	; (8000a88 <HAL_ADC_MspInit+0x1d0>)
 800091c:	6023      	str	r3, [r4, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000920:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000924:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000928:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800092a:	60e0      	str	r0, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800092c:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000930:	6066      	str	r6, [r4, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	60a6      	str	r6, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000934:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000936:	4620      	mov	r0, r4
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000938:	61a3      	str	r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800093a:	f001 f8c1 	bl	8001ac0 <HAL_DMA_Init>
 800093e:	2800      	cmp	r0, #0
 8000940:	d15c      	bne.n	80009fc <HAL_ADC_MspInit+0x144>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000942:	63ac      	str	r4, [r5, #56]	; 0x38
 8000944:	6265      	str	r5, [r4, #36]	; 0x24
}
 8000946:	b00e      	add	sp, #56	; 0x38
 8000948:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800094a:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <HAL_ADC_MspInit+0x1c0>)
 800094c:	6813      	ldr	r3, [r2, #0]
 800094e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000950:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000952:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000954:	d03c      	beq.n	80009d0 <HAL_ADC_MspInit+0x118>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <HAL_ADC_MspInit+0x1c4>)
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8000958:	4849      	ldr	r0, [pc, #292]	; (8000a80 <HAL_ADC_MspInit+0x1c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	695a      	ldr	r2, [r3, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 800095c:	4c4b      	ldr	r4, [pc, #300]	; (8000a8c <HAL_ADC_MspInit+0x1d4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800096a:	9201      	str	r2, [sp, #4]
 800096c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	695a      	ldr	r2, [r3, #20]
 8000978:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800097c:	9202      	str	r2, [sp, #8]
 800097e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800098e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8000990:	2202      	movs	r2, #2
 8000992:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800099a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800099c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f001 f95e 	bl	8001c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80009a4:	2201      	movs	r2, #1
 80009a6:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80009a8:	a908      	add	r1, sp, #32
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80009ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f001 f954 	bl	8001c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009b8:	2303      	movs	r3, #3
 80009ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	4834      	ldr	r0, [pc, #208]	; (8000a90 <HAL_ADC_MspInit+0x1d8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f001 f94a 	bl	8001c60 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80009cc:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <HAL_ADC_MspInit+0x1dc>)
 80009ce:	e7a5      	b.n	800091c <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <HAL_ADC_MspInit+0x1c4>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	9b00      	ldr	r3, [sp, #0]
 80009e4:	e7b7      	b.n	8000956 <HAL_ADC_MspInit+0x9e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <HAL_ADC_MspInit+0x1c4>)
 80009e8:	695a      	ldr	r2, [r3, #20]
 80009ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	9304      	str	r3, [sp, #16]
 80009f8:	9b04      	ldr	r3, [sp, #16]
 80009fa:	e779      	b.n	80008f0 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 80009fc:	f7ff ff40 	bl	8000880 <Error_Handler>
 8000a00:	e79f      	b.n	8000942 <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_ADC_MspInit+0x1c4>)
    hdma_adc4.Instance = DMA2_Channel2;
 8000a04:	4e24      	ldr	r6, [pc, #144]	; (8000a98 <HAL_ADC_MspInit+0x1e0>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000a06:	695a      	ldr	r2, [r3, #20]
 8000a08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000a14:	9206      	str	r2, [sp, #24]
 8000a16:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a28:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a2e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	9807      	ldr	r0, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <HAL_ADC_MspInit+0x1d8>)
 8000a34:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a36:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f001 f911 	bl	8001c60 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_ADC_MspInit+0x1e4>)
 8000a40:	6033      	str	r3, [r6, #0]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	2080      	movs	r0, #128	; 0x80
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000a4c:	2320      	movs	r3, #32
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000a4e:	60f0      	str	r0, [r6, #12]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000a50:	4630      	mov	r0, r6
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a52:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a56:	6074      	str	r4, [r6, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a58:	60b4      	str	r4, [r6, #8]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	61f4      	str	r4, [r6, #28]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000a5c:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000a5e:	f001 f82f 	bl	8001ac0 <HAL_DMA_Init>
 8000a62:	b910      	cbnz	r0, 8000a6a <HAL_ADC_MspInit+0x1b2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8000a64:	63ae      	str	r6, [r5, #56]	; 0x38
 8000a66:	6275      	str	r5, [r6, #36]	; 0x24
}
 8000a68:	e73a      	b.n	80008e0 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 8000a6a:	f7ff ff09 	bl	8000880 <Error_Handler>
 8000a6e:	e7f9      	b.n	8000a64 <HAL_ADC_MspInit+0x1ac>
 8000a70:	50000100 	.word	0x50000100
 8000a74:	50000500 	.word	0x50000500
 8000a78:	20000028 	.word	0x20000028
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000800 	.word	0x48000800
 8000a84:	200003b4 	.word	0x200003b4
 8000a88:	40020408 	.word	0x40020408
 8000a8c:	20000204 	.word	0x20000204
 8000a90:	48000400 	.word	0x48000400
 8000a94:	40020008 	.word	0x40020008
 8000a98:	20000074 	.word	0x20000074
 8000a9c:	4002041c 	.word	0x4002041c

08000aa0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000aa0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8000aa2:	6801      	ldr	r1, [r0, #0]
 8000aa4:	4a15      	ldr	r2, [pc, #84]	; (8000afc <HAL_DAC_MspInit+0x5c>)
{
 8000aa6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8000aaa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000ab0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000ab4:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 8000ab6:	d001      	beq.n	8000abc <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000ab8:	b008      	add	sp, #32
 8000aba:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000abc:	f502 32ce 	add.w	r2, r2, #105472	; 0x19c00
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ac4:	69d1      	ldr	r1, [r2, #28]
 8000ac6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8000aca:	61d1      	str	r1, [r2, #28]
 8000acc:	69d1      	ldr	r1, [r2, #28]
 8000ace:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8000ad2:	9100      	str	r1, [sp, #0]
 8000ad4:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	6951      	ldr	r1, [r2, #20]
 8000ad8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000adc:	6151      	str	r1, [r2, #20]
 8000ade:	6952      	ldr	r2, [r2, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ae6:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	2210      	movs	r2, #16
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8000aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f001 f8b4 	bl	8001c60 <HAL_GPIO_Init>
}
 8000af8:	b008      	add	sp, #32
 8000afa:	bd10      	pop	{r4, pc}
 8000afc:	40007400 	.word	0x40007400

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8000b02:	6802      	ldr	r2, [r0, #0]
 8000b04:	4929      	ldr	r1, [pc, #164]	; (8000bac <HAL_TIM_Base_MspInit+0xac>)
{
 8000b06:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8000b0a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000b10:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000b14:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8000b16:	d020      	beq.n	8000b5a <HAL_TIM_Base_MspInit+0x5a>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000b18:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000b1c:	d004      	beq.n	8000b28 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <HAL_TIM_Base_MspInit+0xb0>)
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d00d      	beq.n	8000b40 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b24:	b00a      	add	sp, #40	; 0x28
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb4>)
 8000b2a:	69da      	ldr	r2, [r3, #28]
 8000b2c:	f042 0201 	orr.w	r2, r2, #1
 8000b30:	61da      	str	r2, [r3, #28]
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	9b02      	ldr	r3, [sp, #8]
}
 8000b3c:	b00a      	add	sp, #40	; 0x28
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b40:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000b44:	69da      	ldr	r2, [r3, #28]
 8000b46:	f042 0202 	orr.w	r2, r2, #2
 8000b4a:	61da      	str	r2, [r3, #28]
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	9303      	str	r3, [sp, #12]
 8000b54:	9b03      	ldr	r3, [sp, #12]
}
 8000b56:	b00a      	add	sp, #40	; 0x28
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b5e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8000b62:	200c      	movs	r0, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b64:	699a      	ldr	r2, [r3, #24]
 8000b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b6a:	619a      	str	r2, [r3, #24]
 8000b6c:	699a      	ldr	r2, [r3, #24]
 8000b6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000b72:	9200      	str	r2, [sp, #0]
 8000b74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8000b80:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8000b8e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000b92:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8000b98:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000b9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f001 f85d 	bl	8001c60 <HAL_GPIO_Init>
}
 8000ba6:	b00a      	add	sp, #40	; 0x28
 8000ba8:	bd70      	pop	{r4, r5, r6, pc}
 8000baa:	bf00      	nop
 8000bac:	40012c00 	.word	0x40012c00
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8000bba:	6801      	ldr	r1, [r0, #0]
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <HAL_TIM_MspPostInit+0x5c>)
{
 8000bbe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8000bc2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000bc8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000bcc:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8000bce:	d001      	beq.n	8000bd4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bd0:	b008      	add	sp, #32
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bd8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bdc:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000be8:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8000bf6:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 8000bfa:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8000c00:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000c04:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f001 f829 	bl	8001c60 <HAL_GPIO_Init>
}
 8000c0e:	b008      	add	sp, #32
 8000c10:	bd70      	pop	{r4, r5, r6, pc}
 8000c12:	bf00      	nop
 8000c14:	40012c00 	.word	0x40012c00

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8000c1a:	6802      	ldr	r2, [r0, #0]
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <HAL_UART_MspInit+0xc0>)
{
 8000c1e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8000c22:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c28:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000c2c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c30:	b008      	add	sp, #32
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c38:	4e28      	ldr	r6, [pc, #160]	; (8000cdc <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c40:	61da      	str	r2, [r3, #28]
 8000c42:	69da      	ldr	r2, [r3, #28]
 8000c44:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c48:	9200      	str	r2, [sp, #0]
 8000c4a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c64:	2200      	movs	r2, #0
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c74:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f000 fff1 	bl	8001c60 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c7e:	4918      	ldr	r1, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c80:	6074      	str	r4, [r6, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c84:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c86:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c90:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c94:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c96:	f000 ff13 	bl	8001ac0 <HAL_DMA_Init>
 8000c9a:	b9b0      	cbnz	r0, 8000cca <HAL_UART_MspInit+0xb2>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000c9c:	4c11      	ldr	r4, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0xcc>)
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_UART_MspInit+0xd0>)
 8000ca0:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca2:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca4:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ca8:	672e      	str	r6, [r5, #112]	; 0x70
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000caa:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cac:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb0:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb4:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cb8:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cba:	6061      	str	r1, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cbc:	f000 ff00 	bl	8001ac0 <HAL_DMA_Init>
 8000cc0:	b930      	cbnz	r0, 8000cd0 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000cc2:	66ec      	str	r4, [r5, #108]	; 0x6c
 8000cc4:	6265      	str	r5, [r4, #36]	; 0x24
}
 8000cc6:	b008      	add	sp, #32
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000cca:	f7ff fdd9 	bl	8000880 <Error_Handler>
 8000cce:	e7e5      	b.n	8000c9c <HAL_UART_MspInit+0x84>
      Error_Handler();
 8000cd0:	f7ff fdd6 	bl	8000880 <Error_Handler>
 8000cd4:	e7f5      	b.n	8000cc2 <HAL_UART_MspInit+0xaa>
 8000cd6:	bf00      	nop
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	20000030 	.word	0x20000030
 8000ce0:	4002006c 	.word	0x4002006c
 8000ce4:	200001c0 	.word	0x200001c0
 8000ce8:	40020080 	.word	0x40020080

08000cec <DMA1_Channel1_IRQHandler>:
  */
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cec:	4801      	ldr	r0, [pc, #4]	; (8000cf4 <DMA1_Channel1_IRQHandler+0x8>)
 8000cee:	f000 bf6d 	b.w	8001bcc <HAL_DMA_IRQHandler>
 8000cf2:	bf00      	nop
 8000cf4:	20000204 	.word	0x20000204

08000cf8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  startSending();
 8000cfa:	f000 f85b 	bl	8000db4 <startSending>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d02:	4801      	ldr	r0, [pc, #4]	; (8000d08 <DMA1_Channel6_IRQHandler+0x10>)
 8000d04:	f000 bf62 	b.w	8001bcc <HAL_DMA_IRQHandler>
 8000d08:	20000030 	.word	0x20000030

08000d0c <TIM1_UP_TIM16_IRQHandler>:
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d0c:	4801      	ldr	r0, [pc, #4]	; (8000d14 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8000d0e:	f002 ba5d 	b.w	80031cc <HAL_TIM_IRQHandler>
 8000d12:	bf00      	nop
 8000d14:	20000248 	.word	0x20000248

08000d18 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //SVPWM_PC();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d18:	4801      	ldr	r0, [pc, #4]	; (8000d20 <TIM2_IRQHandler+0x8>)
 8000d1a:	f002 ba57 	b.w	80031cc <HAL_TIM_IRQHandler>
 8000d1e:	bf00      	nop
 8000d20:	20000294 	.word	0x20000294

08000d24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
  measure();
 8000d26:	f000 f811 	bl	8000d4c <measure>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim3);
 8000d2e:	4801      	ldr	r0, [pc, #4]	; (8000d34 <TIM3_IRQHandler+0x10>)
 8000d30:	f002 ba4c 	b.w	80031cc <HAL_TIM_IRQHandler>
 8000d34:	20000124 	.word	0x20000124

08000d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  startStop();
 8000d3a:	f000 f85f 	bl	8000dfc <startStop>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d42:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d46:	f001 b895 	b.w	8001e74 <HAL_GPIO_EXTI_IRQHandler>
 8000d4a:	bf00      	nop

08000d4c <measure>:
//}


int v1,v2;

void measure(){
 8000d4c:	b570      	push	{r4, r5, r6, lr}
//	if(RX_data[0] == 202){
//		RX_data[0] = 0;
		HAL_UART_Transmit(&huart2, pData, 9, 10);
 8000d4e:	4c13      	ldr	r4, [pc, #76]	; (8000d9c <measure+0x50>)
//	}

	HAL_ADC_Start_DMA(&hadc2, value2, 2);
 8000d50:	4d13      	ldr	r5, [pc, #76]	; (8000da0 <measure+0x54>)
	HAL_ADC_Start_DMA(&hadc1, value, 3);
 8000d52:	4e14      	ldr	r6, [pc, #80]	; (8000da4 <measure+0x58>)
		HAL_UART_Transmit(&huart2, pData, 9, 10);
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <measure+0x5c>)
 8000d56:	230a      	movs	r3, #10
 8000d58:	4621      	mov	r1, r4
 8000d5a:	2209      	movs	r2, #9
 8000d5c:	f003 f85e 	bl	8003e1c <HAL_UART_Transmit>
	HAL_ADC_Start_DMA(&hadc2, value2, 2);
 8000d60:	4629      	mov	r1, r5
 8000d62:	2202      	movs	r2, #2
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <measure+0x60>)
 8000d66:	f000 fab9 	bl	80012dc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, value, 3);
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4810      	ldr	r0, [pc, #64]	; (8000db0 <measure+0x64>)
 8000d70:	f000 fab4 	bl	80012dc <HAL_ADC_Start_DMA>

	pData[0] = 123;
	pData[1] = value[0] & 0xff;
	pData[2] = (value[0] >> 8) & 0xff;
	pData[3] = value[1] & 0xff;
 8000d74:	e9d6 3000 	ldrd	r3, r0, [r6]
	pData[4] = (value[1] >> 8) & 0xff;
	pData[5] = value2[0] & 0xff;
	pData[6] = (value2[0] >> 8) & 0xff;
	pData[7] = value2[1] & 0xff;
 8000d78:	e9d5 1200 	ldrd	r1, r2, [r5]
	pData[1] = value[0] & 0xff;
 8000d7c:	7063      	strb	r3, [r4, #1]
	pData[0] = 123;
 8000d7e:	257b      	movs	r5, #123	; 0x7b
	pData[2] = (value[0] >> 8) & 0xff;
 8000d80:	0a1b      	lsrs	r3, r3, #8
	pData[4] = (value[1] >> 8) & 0xff;
 8000d82:	0a06      	lsrs	r6, r0, #8
	pData[0] = 123;
 8000d84:	7025      	strb	r5, [r4, #0]
	pData[2] = (value[0] >> 8) & 0xff;
 8000d86:	70a3      	strb	r3, [r4, #2]
	pData[6] = (value2[0] >> 8) & 0xff;
 8000d88:	0a0d      	lsrs	r5, r1, #8
	pData[8] = (value2[1] >> 8) & 0xff;
 8000d8a:	0a13      	lsrs	r3, r2, #8
	pData[3] = value[1] & 0xff;
 8000d8c:	70e0      	strb	r0, [r4, #3]
	pData[4] = (value[1] >> 8) & 0xff;
 8000d8e:	7126      	strb	r6, [r4, #4]
	pData[5] = value2[0] & 0xff;
 8000d90:	7161      	strb	r1, [r4, #5]
	pData[6] = (value2[0] >> 8) & 0xff;
 8000d92:	71a5      	strb	r5, [r4, #6]
	pData[7] = value2[1] & 0xff;
 8000d94:	71e2      	strb	r2, [r4, #7]
	pData[8] = (value2[1] >> 8) & 0xff;
 8000d96:	7223      	strb	r3, [r4, #8]

}
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200003fc 	.word	0x200003fc
 8000da0:	20000418 	.word	0x20000418
 8000da4:	20000424 	.word	0x20000424
 8000da8:	200002e0 	.word	0x200002e0
 8000dac:	200000cc 	.word	0x200000cc
 8000db0:	20000170 	.word	0x20000170

08000db4 <startSending>:

uint8_t startFlag = 0;

void startSending(){
	if(RX_data[0] == 201 && startFlag == 0){
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <startSending+0x34>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2bc9      	cmp	r3, #201	; 0xc9
 8000dba:	d000      	beq.n	8000dbe <startSending+0xa>
 8000dbc:	4770      	bx	lr
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <startSending+0x38>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d1fa      	bne.n	8000dbc <startSending+0x8>
void startSending(){
 8000dc6:	b510      	push	{r4, lr}
		startFlag = 1;
		HAL_TIM_Base_Start_IT(&htim3);
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <startSending+0x3c>)
		startFlag = 1;
 8000dca:	2401      	movs	r4, #1
 8000dcc:	701c      	strb	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8000dce:	f001 ff0f 	bl	8002bf0 <HAL_TIM_Base_Start_IT>

		TX_data[0] = 101;
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <startSending+0x40>)
		HAL_UART_Transmit(&huart2, TX_data, 1, 10);
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <startSending+0x44>)
 8000dd6:	4622      	mov	r2, r4
		TX_data[0] = 101;
 8000dd8:	2465      	movs	r4, #101	; 0x65
 8000dda:	700c      	strb	r4, [r1, #0]
	}
}
 8000ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart2, TX_data, 1, 10);
 8000de0:	230a      	movs	r3, #10
 8000de2:	f003 b81b 	b.w	8003e1c <HAL_UART_Transmit>
 8000de6:	bf00      	nop
 8000de8:	20000120 	.word	0x20000120
 8000dec:	2000002d 	.word	0x2000002d
 8000df0:	20000124 	.word	0x20000124
 8000df4:	2000011c 	.word	0x2000011c
 8000df8:	200002e0 	.word	0x200002e0

08000dfc <startStop>:
//	}
//	send();
//}

void startStop(){
	if(run == 0){
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <startStop+0x10>)
 8000dfe:	7813      	ldrb	r3, [r2, #0]
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	095b      	lsrs	r3, r3, #5
 8000e06:	7013      	strb	r3, [r2, #0]
		run = 1;
	} else {
		run = 0;
	}
}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000002c 	.word	0x2000002c

08000e10 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <SystemInit+0x10>)
 8000e12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4e:	f7ff ffdf 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f003 f881 	bl	8003f58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e56:	f7ff fa0d 	bl	8000274 <main>

08000e5a <LoopForever>:

LoopForever:
    b LoopForever
 8000e5a:	e7fe      	b.n	8000e5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e68:	0800400c 	.word	0x0800400c
  ldr r2, =_sbss
 8000e6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e70:	20000434 	.word	0x20000434

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>
	...

08000e78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_InitTick+0x3c>)
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_InitTick+0x40>)
 8000e7e:	7812      	ldrb	r2, [r2, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
{
 8000e82:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e88:	fbb0 f0f2 	udiv	r0, r0, r2
 8000e8c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000e90:	f000 fdc0 	bl	8001a14 <HAL_SYSTICK_Config>
 8000e94:	b908      	cbnz	r0, 8000e9a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	2d0f      	cmp	r5, #15
 8000e98:	d901      	bls.n	8000e9e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000e9a:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	4629      	mov	r1, r5
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 fd6e 	bl	8001988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_InitTick+0x44>)
 8000eae:	4620      	mov	r0, r4
 8000eb0:	601d      	str	r5, [r3, #0]
}
 8000eb2:	bd38      	pop	{r3, r4, r5, pc}
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x20>)
{
 8000ec2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	6813      	ldr	r3, [r2, #0]
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fd47 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2004      	movs	r0, #4
 8000ed4:	f7ff ffd0 	bl	8000e78 <HAL_InitTick>
  HAL_MspInit();
 8000ed8:	f7ff fcd4 	bl	8000884 <HAL_MspInit>
}
 8000edc:	2000      	movs	r0, #0
 8000ede:	bd08      	pop	{r3, pc}
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ee4:	4b01      	ldr	r3, [pc, #4]	; (8000eec <HAL_GetTick+0x8>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000430 	.word	0x20000430

08000ef0 <HAL_ADC_ConvCpltCallback>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <HAL_ADC_ConvHalfCpltCallback>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <HAL_ADC_ErrorCallback>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000efc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000efe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f04:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f06:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f0e:	f7ff bff3 	b.w	8000ef8 <HAL_ADC_ErrorCallback>
 8000f12:	bf00      	nop

08000f14 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f14:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f16:	f7ff bfed 	b.w	8000ef4 <HAL_ADC_ConvHalfCpltCallback>
 8000f1a:	bf00      	nop

08000f1c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f20:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000f24:	d118      	bne.n	8000f58 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f28:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f30:	68ca      	ldr	r2, [r1, #12]
 8000f32:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000f36:	d10c      	bne.n	8000f52 <ADC_DMAConvCplt+0x36>
 8000f38:	7e5a      	ldrb	r2, [r3, #25]
 8000f3a:	b952      	cbnz	r2, 8000f52 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f46:	04d2      	lsls	r2, r2, #19
 8000f48:	d403      	bmi.n	8000f52 <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4c:	f042 0201 	orr.w	r2, r2, #1
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff bfcc 	b.w	8000ef0 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4718      	bx	r3
 8000f5e:	bf00      	nop

08000f60 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f60:	6802      	ldr	r2, [r0, #0]
{
 8000f62:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f64:	6893      	ldr	r3, [r2, #8]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d001      	beq.n	8000f72 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f6e:	2000      	movs	r0, #0
}
 8000f70:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f72:	6811      	ldr	r1, [r2, #0]
 8000f74:	07c9      	lsls	r1, r1, #31
 8000f76:	d5fa      	bpl.n	8000f6e <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f78:	6891      	ldr	r1, [r2, #8]
 8000f7a:	f001 010d 	and.w	r1, r1, #13
 8000f7e:	2901      	cmp	r1, #1
 8000f80:	4604      	mov	r4, r0
 8000f82:	d009      	beq.n	8000f98 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f84:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f86:	f042 0210 	orr.w	r2, r2, #16
 8000f8a:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 8000f92:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f94:	6462      	str	r2, [r4, #68]	; 0x44
}
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000f98:	6893      	ldr	r3, [r2, #8]
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6093      	str	r3, [r2, #8]
 8000fa2:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8000fa4:	f7ff ff9e 	bl	8000ee4 <HAL_GetTick>
 8000fa8:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	07db      	lsls	r3, r3, #31
 8000fb0:	d5dd      	bpl.n	8000f6e <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb2:	f7ff ff97 	bl	8000ee4 <HAL_GetTick>
 8000fb6:	1b40      	subs	r0, r0, r5
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9f6      	bls.n	8000faa <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6463      	str	r3, [r4, #68]	; 0x44
 8000fcc:	2001      	movs	r0, #1
}
 8000fce:	bd38      	pop	{r3, r4, r5, pc}

08000fd0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd0:	6802      	ldr	r2, [r0, #0]
{
 8000fd2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd4:	6893      	ldr	r3, [r2, #8]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
{
 8000fdc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fde:	d020      	beq.n	8001022 <ADC_Enable+0x52>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fe0:	6891      	ldr	r1, [r2, #8]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <ADC_Enable+0x5c>)
 8000fe4:	4219      	tst	r1, r3
 8000fe6:	d009      	beq.n	8000ffc <ADC_Enable+0x2c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6463      	str	r3, [r4, #68]	; 0x44
 8000ff8:	2001      	movs	r0, #1
}
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000ffc:	6893      	ldr	r3, [r2, #8]
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001004:	f7ff ff6e 	bl	8000ee4 <HAL_GetTick>
 8001008:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800100a:	e004      	b.n	8001016 <ADC_Enable+0x46>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800100c:	f7ff ff6a 	bl	8000ee4 <HAL_GetTick>
 8001010:	1b43      	subs	r3, r0, r5
 8001012:	2b02      	cmp	r3, #2
 8001014:	d8e8      	bhi.n	8000fe8 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	07db      	lsls	r3, r3, #31
 800101c:	d5f6      	bpl.n	800100c <ADC_Enable+0x3c>
  return HAL_OK;
 800101e:	2000      	movs	r0, #0
}
 8001020:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	07d9      	lsls	r1, r3, #31
 8001026:	d5db      	bpl.n	8000fe0 <ADC_Enable+0x10>
  return HAL_OK;
 8001028:	2000      	movs	r0, #0
 800102a:	e7f9      	b.n	8001020 <ADC_Enable+0x50>
 800102c:	8000003f 	.word	0x8000003f

08001030 <HAL_ADC_Init>:
{
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001038:	2800      	cmp	r0, #0
 800103a:	f000 809d 	beq.w	8001178 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800103e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001040:	f013 0310 	ands.w	r3, r3, #16
 8001044:	4604      	mov	r4, r0
 8001046:	d118      	bne.n	800107a <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001048:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800104a:	2d00      	cmp	r5, #0
 800104c:	f000 8097 	beq.w	800117e <HAL_ADC_Init+0x14e>
 8001050:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001052:	6891      	ldr	r1, [r2, #8]
 8001054:	00cd      	lsls	r5, r1, #3
 8001056:	f140 8083 	bpl.w	8001160 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800105a:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800105c:	0088      	lsls	r0, r1, #2
 800105e:	d47f      	bmi.n	8001160 <HAL_ADC_Init+0x130>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001060:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001062:	06c9      	lsls	r1, r1, #27
 8001064:	d400      	bmi.n	8001068 <HAL_ADC_Init+0x38>
 8001066:	b163      	cbz	r3, 8001082 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800106a:	f023 0312 	bic.w	r3, r3, #18
 800106e:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8001072:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8001074:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001076:	b002      	add	sp, #8
 8001078:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800107a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800107c:	06da      	lsls	r2, r3, #27
 800107e:	d4f3      	bmi.n	8001068 <HAL_ADC_Init+0x38>
 8001080:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001082:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001084:	f010 0004 	ands.w	r0, r0, #4
 8001088:	d1ee      	bne.n	8001068 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 800108a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800108c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8001090:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001094:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800109a:	f000 80e3 	beq.w	8001264 <HAL_ADC_Init+0x234>
 800109e:	4b87      	ldr	r3, [pc, #540]	; (80012bc <HAL_ADC_Init+0x28c>)
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f000 80e7 	beq.w	8001274 <HAL_ADC_Init+0x244>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010a6:	4986      	ldr	r1, [pc, #536]	; (80012c0 <HAL_ADC_Init+0x290>)
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d075      	beq.n	8001198 <HAL_ADC_Init+0x168>
 80010ac:	4b85      	ldr	r3, [pc, #532]	; (80012c4 <HAL_ADC_Init+0x294>)
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d073      	beq.n	800119a <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010b2:	6893      	ldr	r3, [r2, #8]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f000 80ed 	beq.w	8001298 <HAL_ADC_Init+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010be:	4d82      	ldr	r5, [pc, #520]	; (80012c8 <HAL_ADC_Init+0x298>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010c0:	68ab      	ldr	r3, [r5, #8]
 80010c2:	6861      	ldr	r1, [r4, #4]
 80010c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80010c8:	430b      	orrs	r3, r1
 80010ca:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010cc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 80010d0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80010d2:	7e65      	ldrb	r5, [r4, #25]
 80010d4:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010d6:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010da:	2e01      	cmp	r6, #1
 80010dc:	bf18      	it	ne
 80010de:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80010e2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e6:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010e8:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ec:	f000 8095 	beq.w	800121a <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010f2:	2901      	cmp	r1, #1
 80010f4:	d00d      	beq.n	8001112 <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010f6:	4872      	ldr	r0, [pc, #456]	; (80012c0 <HAL_ADC_Init+0x290>)
 80010f8:	4282      	cmp	r2, r0
 80010fa:	f000 809e 	beq.w	800123a <HAL_ADC_Init+0x20a>
 80010fe:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001102:	4282      	cmp	r2, r0
 8001104:	f000 8099 	beq.w	800123a <HAL_ADC_Init+0x20a>
 8001108:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800110c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800110e:	4303      	orrs	r3, r0
 8001110:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001112:	6891      	ldr	r1, [r2, #8]
 8001114:	f011 0f0c 	tst.w	r1, #12
 8001118:	d10c      	bne.n	8001134 <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800111a:	68d1      	ldr	r1, [r2, #12]
 800111c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001120:	f021 0102 	bic.w	r1, r1, #2
 8001124:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001126:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800112a:	7e20      	ldrb	r0, [r4, #24]
 800112c:	0049      	lsls	r1, r1, #1
 800112e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8001132:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001134:	68d5      	ldr	r5, [r2, #12]
 8001136:	4965      	ldr	r1, [pc, #404]	; (80012cc <HAL_ADC_Init+0x29c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001138:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800113a:	4029      	ands	r1, r5
 800113c:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800113e:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8001140:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001142:	d072      	beq.n	800122a <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001144:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800114c:	2000      	movs	r0, #0
 800114e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001150:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001152:	f023 0303 	bic.w	r3, r3, #3
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800115c:	b002      	add	sp, #8
 800115e:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8001160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001162:	f023 0312 	bic.w	r3, r3, #18
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001176:	e777      	b.n	8001068 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
}
 800117a:	b002      	add	sp, #8
 800117c:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 800117e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8001182:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8001184:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001188:	f7ff fb96 	bl	80008b8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800118c:	6822      	ldr	r2, [r4, #0]
 800118e:	6893      	ldr	r3, [r2, #8]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	d511      	bpl.n	80011b8 <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001194:	462b      	mov	r3, r5
 8001196:	e75c      	b.n	8001052 <HAL_ADC_Init+0x22>
 8001198:	494a      	ldr	r1, [pc, #296]	; (80012c4 <HAL_ADC_Init+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800119a:	4d4b      	ldr	r5, [pc, #300]	; (80012c8 <HAL_ADC_Init+0x298>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800119c:	6893      	ldr	r3, [r2, #8]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d061      	beq.n	800126a <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011a6:	688b      	ldr	r3, [r1, #8]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d187      	bne.n	80010c0 <HAL_ADC_Init+0x90>
 80011b0:	680b      	ldr	r3, [r1, #0]
 80011b2:	07db      	lsls	r3, r3, #31
 80011b4:	d48a      	bmi.n	80010cc <HAL_ADC_Init+0x9c>
 80011b6:	e783      	b.n	80010c0 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 80011b8:	4620      	mov	r0, r4
 80011ba:	f7ff fed1 	bl	8000f60 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011c0:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 80011c2:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c4:	f53f af44 	bmi.w	8001050 <HAL_ADC_Init+0x20>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	f47f af41 	bne.w	8001050 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 80011ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011d0:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011d2:	493f      	ldr	r1, [pc, #252]	; (80012d0 <HAL_ADC_Init+0x2a0>)
 80011d4:	4d3f      	ldr	r5, [pc, #252]	; (80012d4 <HAL_ADC_Init+0x2a4>)
 80011d6:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80011d8:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 80011dc:	f020 0002 	bic.w	r0, r0, #2
 80011e0:	f040 0002 	orr.w	r0, r0, #2
 80011e4:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011e6:	6890      	ldr	r0, [r2, #8]
 80011e8:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80011ec:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011ee:	fba5 0101 	umull	r0, r1, r5, r1
 80011f2:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011f4:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80011fa:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011fc:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001200:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001202:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001204:	9901      	ldr	r1, [sp, #4]
 8001206:	2900      	cmp	r1, #0
 8001208:	f43f af23 	beq.w	8001052 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800120c:	9901      	ldr	r1, [sp, #4]
 800120e:	3901      	subs	r1, #1
 8001210:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001212:	9901      	ldr	r1, [sp, #4]
 8001214:	2900      	cmp	r1, #0
 8001216:	d1f9      	bne.n	800120c <HAL_ADC_Init+0x1dc>
 8001218:	e71b      	b.n	8001052 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800121a:	bb7d      	cbnz	r5, 800127c <HAL_ADC_Init+0x24c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800121c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800121e:	3901      	subs	r1, #1
 8001220:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	e762      	b.n	80010f0 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800122a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800122c:	69e3      	ldr	r3, [r4, #28]
 800122e:	f021 010f 	bic.w	r1, r1, #15
 8001232:	3b01      	subs	r3, #1
 8001234:	430b      	orrs	r3, r1
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
 8001238:	e788      	b.n	800114c <HAL_ADC_Init+0x11c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800123a:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800123e:	d028      	beq.n	8001292 <HAL_ADC_Init+0x262>
 8001240:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001244:	d02d      	beq.n	80012a2 <HAL_ADC_Init+0x272>
 8001246:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 800124a:	d02d      	beq.n	80012a8 <HAL_ADC_Init+0x278>
 800124c:	f5b1 5f8a 	cmp.w	r1, #4416	; 0x1140
 8001250:	d02d      	beq.n	80012ae <HAL_ADC_Init+0x27e>
 8001252:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 8001256:	d02d      	beq.n	80012b4 <HAL_ADC_Init+0x284>
 8001258:	f5b1 5f86 	cmp.w	r1, #4288	; 0x10c0
 800125c:	bf08      	it	eq
 800125e:	f44f 71c0 	moveq.w	r1, #384	; 0x180
 8001262:	e753      	b.n	800110c <HAL_ADC_Init+0xdc>
 8001264:	4915      	ldr	r1, [pc, #84]	; (80012bc <HAL_ADC_Init+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001266:	4d1c      	ldr	r5, [pc, #112]	; (80012d8 <HAL_ADC_Init+0x2a8>)
 8001268:	e798      	b.n	800119c <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	07de      	lsls	r6, r3, #31
 800126e:	f53f af2d 	bmi.w	80010cc <HAL_ADC_Init+0x9c>
 8001272:	e798      	b.n	80011a6 <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001274:	4d18      	ldr	r5, [pc, #96]	; (80012d8 <HAL_ADC_Init+0x2a8>)
 8001276:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800127a:	e78f      	b.n	800119c <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 800127c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800127e:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8001282:	f041 0120 	orr.w	r1, r1, #32
 8001286:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800128a:	f041 0101 	orr.w	r1, r1, #1
 800128e:	6461      	str	r1, [r4, #68]	; 0x44
 8001290:	e72e      	b.n	80010f0 <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001292:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001296:	e739      	b.n	800110c <HAL_ADC_Init+0xdc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	07db      	lsls	r3, r3, #31
 800129c:	f53f af16 	bmi.w	80010cc <HAL_ADC_Init+0x9c>
 80012a0:	e70d      	b.n	80010be <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012a2:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80012a6:	e731      	b.n	800110c <HAL_ADC_Init+0xdc>
 80012a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ac:	e72e      	b.n	800110c <HAL_ADC_Init+0xdc>
 80012ae:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80012b2:	e72b      	b.n	800110c <HAL_ADC_Init+0xdc>
 80012b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80012b8:	e728      	b.n	800110c <HAL_ADC_Init+0xdc>
 80012ba:	bf00      	nop
 80012bc:	50000100 	.word	0x50000100
 80012c0:	50000400 	.word	0x50000400
 80012c4:	50000500 	.word	0x50000500
 80012c8:	50000700 	.word	0x50000700
 80012cc:	fff0c007 	.word	0xfff0c007
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	50000300 	.word	0x50000300

080012dc <HAL_ADC_Start_DMA>:
{
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012e0:	6800      	ldr	r0, [r0, #0]
 80012e2:	6885      	ldr	r5, [r0, #8]
 80012e4:	076d      	lsls	r5, r5, #29
 80012e6:	d478      	bmi.n	80013da <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80012e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d074      	beq.n	80013da <HAL_ADC_Start_DMA+0xfe>
 80012f0:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012f2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80012f6:	460f      	mov	r7, r1
 80012f8:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 80012fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80012fe:	d00f      	beq.n	8001320 <HAL_ADC_Start_DMA+0x44>
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <HAL_ADC_Start_DMA+0x13c>)
 8001302:	4298      	cmp	r0, r3
 8001304:	d00c      	beq.n	8001320 <HAL_ADC_Start_DMA+0x44>
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_ADC_Start_DMA+0x140>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f013 0f1f 	tst.w	r3, #31
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b96b      	cbnz	r3, 8001332 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8001316:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800131a:	2501      	movs	r5, #1
}
 800131c:	4628      	mov	r0, r5
 800131e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001320:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <HAL_ADC_Start_DMA+0x144>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f013 0f1f 	tst.w	r3, #31
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f1      	beq.n	8001316 <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff fe4c 	bl	8000fd0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001338:	4605      	mov	r5, r0
 800133a:	2800      	cmp	r0, #0
 800133c:	d150      	bne.n	80013e0 <HAL_ADC_Start_DMA+0x104>
        ADC_STATE_CLR_SET(hadc->State,
 800133e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001340:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001342:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800134e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8001352:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001354:	d056      	beq.n	8001404 <HAL_ADC_Start_DMA+0x128>
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_ADC_Start_DMA+0x13c>)
 8001358:	4299      	cmp	r1, r3
 800135a:	d045      	beq.n	80013e8 <HAL_ADC_Start_DMA+0x10c>
 800135c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	06d8      	lsls	r0, r3, #27
 8001364:	d050      	beq.n	8001408 <HAL_ADC_Start_DMA+0x12c>
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_ADC_Start_DMA+0x148>)
 8001368:	4291      	cmp	r1, r2
 800136a:	d04d      	beq.n	8001408 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800136c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800136e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001372:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001374:	68d3      	ldr	r3, [r2, #12]
 8001376:	f3c3 6340 	ubfx	r3, r3, #25, #1
 800137a:	b12b      	cbz	r3, 8001388 <HAL_ADC_Start_DMA+0xac>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800137c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800137e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001386:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001388:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800138a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <HAL_ADC_Start_DMA+0x14c>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001392:	bf1c      	itt	ne
 8001394:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001396:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800139a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800139c:	f04f 0c00 	mov.w	ip, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 80013a2:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013a6:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013a8:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_ADC_Start_DMA+0x154>)
 80013ac:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013ae:	231c      	movs	r3, #28
 80013b0:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013b2:	684b      	ldr	r3, [r1, #4]
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013ba:	68cb      	ldr	r3, [r1, #12]
 80013bc:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013c0:	463a      	mov	r2, r7
 80013c2:	4633      	mov	r3, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013c4:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013c8:	3140      	adds	r1, #64	; 0x40
 80013ca:	f000 fbbd 	bl	8001b48 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	6893      	ldr	r3, [r2, #8]
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6093      	str	r3, [r2, #8]
 80013d8:	e7a0      	b.n	800131c <HAL_ADC_Start_DMA+0x40>
    tmp_hal_status = HAL_BUSY;
 80013da:	2502      	movs	r5, #2
}
 80013dc:	4628      	mov	r0, r5
 80013de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 80013e0:	2300      	movs	r3, #0
 80013e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80013e6:	e799      	b.n	800131c <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_ADC_Start_DMA+0x144>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	06db      	lsls	r3, r3, #27
 80013ee:	d00b      	beq.n	8001408 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013fa:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013fc:	68d3      	ldr	r3, [r2, #12]
 80013fe:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001402:	e7ba      	b.n	800137a <HAL_ADC_Start_DMA+0x9e>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_ADC_Start_DMA+0x144>)
 8001406:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800140a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800140e:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001410:	68cb      	ldr	r3, [r1, #12]
 8001412:	019a      	lsls	r2, r3, #6
 8001414:	d5b8      	bpl.n	8001388 <HAL_ADC_Start_DMA+0xac>
 8001416:	e7b1      	b.n	800137c <HAL_ADC_Start_DMA+0xa0>
 8001418:	50000100 	.word	0x50000100
 800141c:	50000700 	.word	0x50000700
 8001420:	50000300 	.word	0x50000300
 8001424:	50000400 	.word	0x50000400
 8001428:	08000f1d 	.word	0x08000f1d
 800142c:	08000f15 	.word	0x08000f15
 8001430:	08000efd 	.word	0x08000efd

08001434 <HAL_ADCEx_Calibration_Start>:
{
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001436:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800143a:	2b01      	cmp	r3, #1
 800143c:	d030      	beq.n	80014a0 <HAL_ADCEx_Calibration_Start+0x6c>
 800143e:	2701      	movs	r7, #1
 8001440:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8001444:	4604      	mov	r4, r0
 8001446:	460d      	mov	r5, r1
 8001448:	f7ff fd8a 	bl	8000f60 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 800144c:	4606      	mov	r6, r0
 800144e:	bb10      	cbnz	r0, 8001496 <HAL_ADCEx_Calibration_Start+0x62>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001450:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8001452:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001454:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001456:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001458:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800145c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800145e:	d103      	bne.n	8001468 <HAL_ADCEx_Calibration_Start+0x34>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001466:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800146e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001470:	f7ff fd38 	bl	8000ee4 <HAL_GetTick>
 8001474:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001476:	e004      	b.n	8001482 <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001478:	f7ff fd34 	bl	8000ee4 <HAL_GetTick>
 800147c:	1b43      	subs	r3, r0, r5
 800147e:	2b0a      	cmp	r3, #10
 8001480:	d811      	bhi.n	80014a6 <HAL_ADCEx_Calibration_Start+0x72>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	dbf6      	blt.n	8001478 <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800148c:	f023 0303 	bic.w	r3, r3, #3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001496:	2300      	movs	r3, #0
 8001498:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800149c:	4630      	mov	r0, r6
 800149e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80014a0:	2602      	movs	r6, #2
}
 80014a2:	4630      	mov	r0, r6
 80014a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 80014a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80014a8:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80014aa:	f023 0312 	bic.w	r3, r3, #18
 80014ae:	f043 0310 	orr.w	r3, r3, #16
        return HAL_ERROR;
 80014b2:	2601      	movs	r6, #1
        __HAL_UNLOCK(hadc);
 80014b4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        ADC_STATE_CLR_SET(hadc->State,
 80014b8:	6423      	str	r3, [r4, #64]	; 0x40
}
 80014ba:	4630      	mov	r0, r6
 80014bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014be:	bf00      	nop

080014c0 <HAL_ADC_ConfigChannel>:
{
 80014c0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80014c2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014c6:	68cc      	ldr	r4, [r1, #12]
{
 80014c8:	b082      	sub	sp, #8
 80014ca:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80014cc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80014ce:	f04f 0000 	mov.w	r0, #0
 80014d2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80014d4:	f000 80fe 	beq.w	80016d4 <HAL_ADC_ConfigChannel+0x214>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014d8:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80014da:	2001      	movs	r0, #1
 80014dc:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e0:	6895      	ldr	r5, [r2, #8]
 80014e2:	076d      	lsls	r5, r5, #29
 80014e4:	d436      	bmi.n	8001554 <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 80014e6:	6848      	ldr	r0, [r1, #4]
 80014e8:	2804      	cmp	r0, #4
 80014ea:	f200 8088 	bhi.w	80015fe <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->SQR1,
 80014ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80014f2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80014f4:	680d      	ldr	r5, [r1, #0]
 80014f6:	0040      	lsls	r0, r0, #1
 80014f8:	271f      	movs	r7, #31
 80014fa:	4087      	lsls	r7, r0
 80014fc:	ea26 0607 	bic.w	r6, r6, r7
 8001500:	fa05 f000 	lsl.w	r0, r5, r0
 8001504:	4330      	orrs	r0, r6
 8001506:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001508:	6890      	ldr	r0, [r2, #8]
 800150a:	f010 0f0c 	tst.w	r0, #12
 800150e:	d134      	bne.n	800157a <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001510:	2d09      	cmp	r5, #9
 8001512:	f200 8089 	bhi.w	8001628 <HAL_ADC_ConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001516:	6950      	ldr	r0, [r2, #20]
 8001518:	688e      	ldr	r6, [r1, #8]
 800151a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800151e:	2707      	movs	r7, #7
 8001520:	fa07 f70c 	lsl.w	r7, r7, ip
 8001524:	ea20 0007 	bic.w	r0, r0, r7
 8001528:	fa06 f60c 	lsl.w	r6, r6, ip
 800152c:	4330      	orrs	r0, r6
 800152e:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001530:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8001534:	68d0      	ldr	r0, [r2, #12]
 8001536:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800153a:	0040      	lsls	r0, r0, #1
 800153c:	3e01      	subs	r6, #1
 800153e:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8001542:	2e03      	cmp	r6, #3
 8001544:	f200 8142 	bhi.w	80017cc <HAL_ADC_ConfigChannel+0x30c>
 8001548:	e8df f016 	tbh	[pc, r6, lsl #1]
 800154c:	0105000e 	.word	0x0105000e
 8001550:	00f100fb 	.word	0x00f100fb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001556:	f042 0220 	orr.w	r2, r2, #32
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001562:	b002      	add	sp, #8
 8001564:	bcf0      	pop	{r4, r5, r6, r7}
 8001566:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001568:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800156a:	4eae      	ldr	r6, [pc, #696]	; (8001824 <HAL_ADC_ConfigChannel+0x364>)
 800156c:	403e      	ands	r6, r7
 800156e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001572:	4330      	orrs	r0, r6
 8001574:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001578:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800157a:	6890      	ldr	r0, [r2, #8]
 800157c:	f000 0003 	and.w	r0, r0, #3
 8001580:	2801      	cmp	r0, #1
 8001582:	f000 80a2 	beq.w	80016ca <HAL_ADC_ConfigChannel+0x20a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001586:	2c01      	cmp	r4, #1
 8001588:	f000 80a8 	beq.w	80016dc <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800158c:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001590:	2001      	movs	r0, #1
 8001592:	40a8      	lsls	r0, r5
 8001594:	ea21 0100 	bic.w	r1, r1, r0
 8001598:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80015a0:	d073      	beq.n	800168a <HAL_ADC_ConfigChannel+0x1ca>
 80015a2:	49a1      	ldr	r1, [pc, #644]	; (8001828 <HAL_ADC_ConfigChannel+0x368>)
 80015a4:	428a      	cmp	r2, r1
 80015a6:	d070      	beq.n	800168a <HAL_ADC_ConfigChannel+0x1ca>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015a8:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015aa:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015ae:	d06f      	beq.n	8001690 <HAL_ADC_ConfigChannel+0x1d0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015b0:	2d11      	cmp	r5, #17
 80015b2:	f040 80aa 	bne.w	800170a <HAL_ADC_ConfigChannel+0x24a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015b6:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015b8:	01c4      	lsls	r4, r0, #7
 80015ba:	d46c      	bmi.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015bc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80015c0:	f000 80d3 	beq.w	800176a <HAL_ADC_ConfigChannel+0x2aa>
 80015c4:	4898      	ldr	r0, [pc, #608]	; (8001828 <HAL_ADC_ConfigChannel+0x368>)
 80015c6:	4282      	cmp	r2, r0
 80015c8:	d067      	beq.n	800169a <HAL_ADC_ConfigChannel+0x1da>
 80015ca:	4c98      	ldr	r4, [pc, #608]	; (800182c <HAL_ADC_ConfigChannel+0x36c>)
 80015cc:	42a2      	cmp	r2, r4
 80015ce:	f000 80f7 	beq.w	80017c0 <HAL_ADC_ConfigChannel+0x300>
 80015d2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80015d6:	4282      	cmp	r2, r0
 80015d8:	d061      	beq.n	800169e <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015da:	6890      	ldr	r0, [r2, #8]
 80015dc:	f000 0003 	and.w	r0, r0, #3
 80015e0:	2801      	cmp	r0, #1
 80015e2:	f000 80ef 	beq.w	80017c4 <HAL_ADC_ConfigChannel+0x304>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015e6:	2d10      	cmp	r5, #16
 80015e8:	d055      	beq.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015ea:	2d11      	cmp	r5, #17
 80015ec:	d053      	beq.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015ee:	2d12      	cmp	r5, #18
 80015f0:	d151      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015f2:	688a      	ldr	r2, [r1, #8]
 80015f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80015f8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fa:	2000      	movs	r0, #0
 80015fc:	e7ae      	b.n	800155c <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 80015fe:	2809      	cmp	r0, #9
 8001600:	d921      	bls.n	8001646 <HAL_ADC_ConfigChannel+0x186>
    else if (sConfig->Rank < 15U)
 8001602:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001604:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001608:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 800160c:	f200 8083 	bhi.w	8001716 <HAL_ADC_ConfigChannel+0x256>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001610:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8001612:	680d      	ldr	r5, [r1, #0]
 8001614:	383c      	subs	r0, #60	; 0x3c
 8001616:	271f      	movs	r7, #31
 8001618:	4087      	lsls	r7, r0
 800161a:	ea26 0607 	bic.w	r6, r6, r7
 800161e:	fa05 f000 	lsl.w	r0, r5, r0
 8001622:	4330      	orrs	r0, r6
 8001624:	6390      	str	r0, [r2, #56]	; 0x38
 8001626:	e76f      	b.n	8001508 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001628:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800162c:	6990      	ldr	r0, [r2, #24]
 800162e:	688e      	ldr	r6, [r1, #8]
 8001630:	3f1e      	subs	r7, #30
 8001632:	f04f 0c07 	mov.w	ip, #7
 8001636:	fa0c fc07 	lsl.w	ip, ip, r7
 800163a:	ea20 000c 	bic.w	r0, r0, ip
 800163e:	40be      	lsls	r6, r7
 8001640:	4330      	orrs	r0, r6
 8001642:	6190      	str	r0, [r2, #24]
 8001644:	e774      	b.n	8001530 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 8001646:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800164a:	0040      	lsls	r0, r0, #1
 800164c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800164e:	680d      	ldr	r5, [r1, #0]
 8001650:	381e      	subs	r0, #30
 8001652:	271f      	movs	r7, #31
 8001654:	4087      	lsls	r7, r0
 8001656:	ea26 0607 	bic.w	r6, r6, r7
 800165a:	fa05 f000 	lsl.w	r0, r5, r0
 800165e:	4330      	orrs	r0, r6
 8001660:	6350      	str	r0, [r2, #52]	; 0x34
 8001662:	e751      	b.n	8001508 <HAL_ADC_ConfigChannel+0x48>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001664:	1c68      	adds	r0, r5, #1
 8001666:	688e      	ldr	r6, [r1, #8]
 8001668:	6954      	ldr	r4, [r2, #20]
 800166a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800166e:	2707      	movs	r7, #7
 8001670:	408f      	lsls	r7, r1
 8001672:	fa06 f001 	lsl.w	r0, r6, r1
 8001676:	ea24 0107 	bic.w	r1, r4, r7
 800167a:	4301      	orrs	r1, r0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800167c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8001680:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001682:	d008      	beq.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
 8001684:	4968      	ldr	r1, [pc, #416]	; (8001828 <HAL_ADC_ConfigChannel+0x368>)
 8001686:	428a      	cmp	r2, r1
 8001688:	d105      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800168a:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168c:	4968      	ldr	r1, [pc, #416]	; (8001830 <HAL_ADC_ConfigChannel+0x370>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800168e:	d18f      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0xf0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001690:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001692:	0206      	lsls	r6, r0, #8
 8001694:	d592      	bpl.n	80015bc <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001696:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001698:	e760      	b.n	800155c <HAL_ADC_ConfigChannel+0x9c>
 800169a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800169e:	6890      	ldr	r0, [r2, #8]
 80016a0:	f000 0003 	and.w	r0, r0, #3
 80016a4:	2801      	cmp	r0, #1
 80016a6:	d062      	beq.n	800176e <HAL_ADC_ConfigChannel+0x2ae>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016a8:	68a0      	ldr	r0, [r4, #8]
 80016aa:	f000 0003 	and.w	r0, r0, #3
 80016ae:	2801      	cmp	r0, #1
 80016b0:	d066      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x2c0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016b2:	2d10      	cmp	r5, #16
 80016b4:	d068      	beq.n	8001788 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80016b6:	2d11      	cmp	r5, #17
 80016b8:	d199      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x12e>
 80016ba:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80016be:	d1ea      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016c0:	688a      	ldr	r2, [r1, #8]
 80016c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80016c6:	608a      	str	r2, [r1, #8]
 80016c8:	e7e5      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ca:	6810      	ldr	r0, [r2, #0]
 80016cc:	07c7      	lsls	r7, r0, #31
 80016ce:	f57f af5a 	bpl.w	8001586 <HAL_ADC_ConfigChannel+0xc6>
 80016d2:	e7e0      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
  __HAL_LOCK(hadc);
 80016d4:	2002      	movs	r0, #2
}
 80016d6:	b002      	add	sp, #8
 80016d8:	bcf0      	pop	{r4, r5, r6, r7}
 80016da:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016dc:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 80016e0:	40ac      	lsls	r4, r5
 80016e2:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016e4:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016e6:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016ea:	d9bb      	bls.n	8001664 <HAL_ADC_ConfigChannel+0x1a4>
        MODIFY_REG(hadc->Instance->SMPR2,
 80016ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80016f0:	688e      	ldr	r6, [r1, #8]
 80016f2:	6994      	ldr	r4, [r2, #24]
 80016f4:	f1a0 011b 	sub.w	r1, r0, #27
 80016f8:	2707      	movs	r7, #7
 80016fa:	408f      	lsls	r7, r1
 80016fc:	fa06 f001 	lsl.w	r0, r6, r1
 8001700:	ea24 0107 	bic.w	r1, r4, r7
 8001704:	4301      	orrs	r1, r0
 8001706:	6191      	str	r1, [r2, #24]
 8001708:	e748      	b.n	800159c <HAL_ADC_ConfigChannel+0xdc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800170a:	2d12      	cmp	r5, #18
 800170c:	d1c3      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800170e:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001710:	0240      	lsls	r0, r0, #9
 8001712:	d4c0      	bmi.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
 8001714:	e752      	b.n	80015bc <HAL_ADC_ConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001716:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8001718:	680d      	ldr	r5, [r1, #0]
 800171a:	385a      	subs	r0, #90	; 0x5a
 800171c:	271f      	movs	r7, #31
 800171e:	4087      	lsls	r7, r0
 8001720:	ea26 0607 	bic.w	r6, r6, r7
 8001724:	fa05 f000 	lsl.w	r0, r5, r0
 8001728:	4330      	orrs	r0, r6
 800172a:	63d0      	str	r0, [r2, #60]	; 0x3c
 800172c:	e6ec      	b.n	8001508 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800172e:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8001730:	4e3c      	ldr	r6, [pc, #240]	; (8001824 <HAL_ADC_ConfigChannel+0x364>)
 8001732:	403e      	ands	r6, r7
 8001734:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001738:	4330      	orrs	r0, r6
 800173a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800173e:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8001740:	e71b      	b.n	800157a <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001742:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8001744:	4e37      	ldr	r6, [pc, #220]	; (8001824 <HAL_ADC_ConfigChannel+0x364>)
 8001746:	403e      	ands	r6, r7
 8001748:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800174c:	4330      	orrs	r0, r6
 800174e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001752:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8001754:	e711      	b.n	800157a <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001756:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8001758:	4e32      	ldr	r6, [pc, #200]	; (8001824 <HAL_ADC_ConfigChannel+0x364>)
 800175a:	403e      	ands	r6, r7
 800175c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001760:	4330      	orrs	r0, r6
 8001762:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001766:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8001768:	e707      	b.n	800157a <HAL_ADC_ConfigChannel+0xba>
 800176a:	4c2f      	ldr	r4, [pc, #188]	; (8001828 <HAL_ADC_ConfigChannel+0x368>)
 800176c:	e797      	b.n	800169e <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800176e:	6810      	ldr	r0, [r2, #0]
 8001770:	07c6      	lsls	r6, r0, #31
 8001772:	d599      	bpl.n	80016a8 <HAL_ADC_ConfigChannel+0x1e8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	e6ed      	b.n	800155c <HAL_ADC_ConfigChannel+0x9c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	07c0      	lsls	r0, r0, #31
 8001784:	d4f6      	bmi.n	8001774 <HAL_ADC_ConfigChannel+0x2b4>
 8001786:	e794      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x1f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001788:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800178c:	d183      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <HAL_ADC_ConfigChannel+0x374>)
 8001790:	4c29      	ldr	r4, [pc, #164]	; (8001838 <HAL_ADC_ConfigChannel+0x378>)
 8001792:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001794:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001796:	fba4 4202 	umull	r4, r2, r4, r2
 800179a:	0c92      	lsrs	r2, r2, #18
 800179c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017a0:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80017a6:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80017aa:	9a01      	ldr	r2, [sp, #4]
 80017ac:	2a00      	cmp	r2, #0
 80017ae:	f43f af72 	beq.w	8001696 <HAL_ADC_ConfigChannel+0x1d6>
            wait_loop_index--;
 80017b2:	9a01      	ldr	r2, [sp, #4]
 80017b4:	3a01      	subs	r2, #1
 80017b6:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80017b8:	9a01      	ldr	r2, [sp, #4]
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x2f2>
 80017be:	e76a      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1d6>
 80017c0:	4c1e      	ldr	r4, [pc, #120]	; (800183c <HAL_ADC_ConfigChannel+0x37c>)
 80017c2:	e76c      	b.n	800169e <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	07d7      	lsls	r7, r2, #31
 80017c8:	d4d4      	bmi.n	8001774 <HAL_ADC_ConfigChannel+0x2b4>
 80017ca:	e70c      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x126>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017cc:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80017ce:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80017d2:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80017d6:	ea4f 6685 	mov.w	r6, r5, lsl #26
 80017da:	d014      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x346>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017dc:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80017de:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80017e2:	4286      	cmp	r6, r0
 80017e4:	d014      	beq.n	8001810 <HAL_ADC_ConfigChannel+0x350>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017e6:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80017e8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80017ec:	4286      	cmp	r6, r0
 80017ee:	d014      	beq.n	800181a <HAL_ADC_ConfigChannel+0x35a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017f0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80017f2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80017f6:	4286      	cmp	r6, r0
 80017f8:	f47f aebf 	bne.w	800157a <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80017fc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80017fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001802:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001804:	e6b9      	b.n	800157a <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001806:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001808:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800180c:	6610      	str	r0, [r2, #96]	; 0x60
 800180e:	e7e5      	b.n	80017dc <HAL_ADC_ConfigChannel+0x31c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001810:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001812:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001816:	6650      	str	r0, [r2, #100]	; 0x64
 8001818:	e7e5      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x326>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800181a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800181c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001820:	6690      	str	r0, [r2, #104]	; 0x68
 8001822:	e7e5      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x330>
 8001824:	83fff000 	.word	0x83fff000
 8001828:	50000100 	.word	0x50000100
 800182c:	50000400 	.word	0x50000400
 8001830:	50000300 	.word	0x50000300
 8001834:	20000000 	.word	0x20000000
 8001838:	431bde83 	.word	0x431bde83
 800183c:	50000500 	.word	0x50000500

08001840 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001840:	6803      	ldr	r3, [r0, #0]
 8001842:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8001848:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800184a:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800184c:	d00e      	beq.n	800186c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 800184e:	4293      	cmp	r3, r2
 8001850:	d00a      	beq.n	8001868 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8001852:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8001856:	4293      	cmp	r3, r2
 8001858:	d049      	beq.n	80018ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800185a:	4c3e      	ldr	r4, [pc, #248]	; (8001954 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 800185c:	42a3      	cmp	r3, r4
 800185e:	d005      	beq.n	800186c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
} 
 8001862:	4618      	mov	r0, r3
 8001864:	bcf0      	pop	{r4, r5, r6, r7}
 8001866:	4770      	bx	lr
 8001868:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 800186c:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8001870:	2c01      	cmp	r4, #1
 8001872:	d041      	beq.n	80018f8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8001874:	2401      	movs	r4, #1
 8001876:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800187a:	689c      	ldr	r4, [r3, #8]
 800187c:	0766      	lsls	r6, r4, #29
 800187e:	d50a      	bpl.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001880:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001882:	f043 0320 	orr.w	r3, r3, #32
 8001886:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 800188a:	2200      	movs	r2, #0
 800188c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 8001890:	bcf0      	pop	{r4, r5, r6, r7}
 8001892:	4618      	mov	r0, r3
 8001894:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001896:	6894      	ldr	r4, [r2, #8]
 8001898:	0764      	lsls	r4, r4, #29
 800189a:	d4f1      	bmi.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a0:	d044      	beq.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80018a2:	4f2b      	ldr	r7, [pc, #172]	; (8001950 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80018a4:	4c2c      	ldr	r4, [pc, #176]	; (8001958 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80018a6:	4e2d      	ldr	r6, [pc, #180]	; (800195c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80018a8:	42bb      	cmp	r3, r7
 80018aa:	bf18      	it	ne
 80018ac:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018ae:	b33d      	cbz	r5, 8001900 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018b0:	68a7      	ldr	r7, [r4, #8]
 80018b2:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 80018b6:	684e      	ldr	r6, [r1, #4]
 80018b8:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 80018bc:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 80018c0:	433e      	orrs	r6, r7
 80018c2:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018c4:	689e      	ldr	r6, [r3, #8]
 80018c6:	f006 0603 	and.w	r6, r6, #3
 80018ca:	2e01      	cmp	r6, #1
 80018cc:	d03c      	beq.n	8001948 <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018ce:	6893      	ldr	r3, [r2, #8]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d02f      	beq.n	8001938 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018d8:	68a2      	ldr	r2, [r4, #8]
 80018da:	688b      	ldr	r3, [r1, #8]
 80018dc:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80018e0:	431d      	orrs	r5, r3
 80018e2:	f022 020f 	bic.w	r2, r2, #15
 80018e6:	4315      	orrs	r5, r2
 80018e8:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e7cd      	b.n	800188a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80018ee:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80018f2:	4a18      	ldr	r2, [pc, #96]	; (8001954 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80018f4:	2c01      	cmp	r4, #1
 80018f6:	d1bd      	bne.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 80018f8:	2302      	movs	r3, #2
} 
 80018fa:	4618      	mov	r0, r3
 80018fc:	bcf0      	pop	{r4, r5, r6, r7}
 80018fe:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001900:	68a1      	ldr	r1, [r4, #8]
 8001902:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001906:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	f001 0103 	and.w	r1, r1, #3
 800190e:	2901      	cmp	r1, #1
 8001910:	d016      	beq.n	8001940 <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001912:	6893      	ldr	r3, [r2, #8]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d009      	beq.n	8001930 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800191c:	68a3      	ldr	r3, [r4, #8]
 800191e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001922:	f023 030f 	bic.w	r3, r3, #15
 8001926:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e7ae      	b.n	800188a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800192e:	e7be      	b.n	80018ae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	07db      	lsls	r3, r3, #31
 8001934:	d4d9      	bmi.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001936:	e7f1      	b.n	800191c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	07de      	lsls	r6, r3, #31
 800193c:	d4d5      	bmi.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800193e:	e7cb      	b.n	80018d8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	07d9      	lsls	r1, r3, #31
 8001944:	d4d1      	bmi.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001946:	e7e4      	b.n	8001912 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	07df      	lsls	r7, r3, #31
 800194c:	d5bf      	bpl.n	80018ce <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 800194e:	e7cc      	b.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001950:	50000100 	.word	0x50000100
 8001954:	50000500 	.word	0x50000500
 8001958:	50000300 	.word	0x50000300
 800195c:	50000700 	.word	0x50000700

08001960 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4908      	ldr	r1, [pc, #32]	; (8001984 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8001962:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001966:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001968:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800196c:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196e:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800197c:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8001980:	60cb      	str	r3, [r1, #12]
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_NVIC_SetPriority+0x68>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001992:	f1c3 0507 	rsb	r5, r3, #7
 8001996:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001998:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	bf28      	it	cs
 800199e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a0:	2c06      	cmp	r4, #6
 80019a2:	d919      	bls.n	80019d8 <HAL_NVIC_SetPriority+0x50>
 80019a4:	3b03      	subs	r3, #3
 80019a6:	f04f 34ff 	mov.w	r4, #4294967295
 80019aa:	409c      	lsls	r4, r3
 80019ac:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 34ff 	mov.w	r4, #4294967295
 80019b4:	40ac      	lsls	r4, r5
 80019b6:	ea21 0104 	bic.w	r1, r1, r4
 80019ba:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80019bc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019be:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80019c2:	db0c      	blt.n	80019de <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019cc:	0109      	lsls	r1, r1, #4
 80019ce:	b2c9      	uxtb	r1, r1
 80019d0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019d4:	bc30      	pop	{r4, r5}
 80019d6:	4770      	bx	lr
 80019d8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	4613      	mov	r3, r2
 80019dc:	e7e8      	b.n	80019b0 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_NVIC_SetPriority+0x6c>)
 80019e0:	f000 000f 	and.w	r0, r0, #15
 80019e4:	0109      	lsls	r1, r1, #4
 80019e6:	4403      	add	r3, r0
 80019e8:	b2c9      	uxtb	r1, r1
 80019ea:	7619      	strb	r1, [r3, #24]
 80019ec:	bc30      	pop	{r4, r5}
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	e000ecfc 	.word	0xe000ecfc

080019f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019f8:	2800      	cmp	r0, #0
 80019fa:	db07      	blt.n	8001a0c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fc:	f000 011f 	and.w	r1, r0, #31
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_NVIC_EnableIRQ+0x18>)
 8001a02:	0940      	lsrs	r0, r0, #5
 8001a04:	2301      	movs	r3, #1
 8001a06:	408b      	lsls	r3, r1
 8001a08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	3801      	subs	r0, #1
 8001a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a1a:	d20e      	bcs.n	8001a3a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	4c08      	ldr	r4, [pc, #32]	; (8001a44 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	20f0      	movs	r0, #240	; 0xf0
 8001a26:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001a32:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	6019      	str	r1, [r3, #0]
 8001a38:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8001a48:	b188      	cbz	r0, 8001a6e <HAL_DAC_Init+0x26>
{ 
 8001a4a:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a4c:	7903      	ldrb	r3, [r0, #4]
 8001a4e:	4604      	mov	r4, r0
 8001a50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a54:	b13b      	cbz	r3, 8001a66 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a56:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a58:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a5a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a5c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a5e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001a60:	7122      	strb	r2, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001a62:	4618      	mov	r0, r3
}
 8001a64:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001a66:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001a68:	f7ff f81a 	bl	8000aa0 <HAL_DAC_MspInit>
 8001a6c:	e7f3      	b.n	8001a56 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001a74:	4603      	mov	r3, r0
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001a76:	7940      	ldrb	r0, [r0, #5]
 8001a78:	2801      	cmp	r0, #1
 8001a7a:	d01e      	beq.n	8001aba <HAL_DAC_ConfigChannel+0x46>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a7c:	2002      	movs	r0, #2
{
 8001a7e:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a80:	7118      	strb	r0, [r3, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a82:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8001a86:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001a88:	f640 76fe 	movw	r6, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8001a8c:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a8e:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001a90:	fa06 f002 	lsl.w	r0, r6, r2
 8001a94:	ea25 0000 	bic.w	r0, r5, r0
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001a98:	4091      	lsls	r1, r2
 8001a9a:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a9c:	6021      	str	r1, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001a9e:	6821      	ldr	r1, [r4, #0]
 8001aa0:	20c0      	movs	r0, #192	; 0xc0
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	ea21 0202 	bic.w	r2, r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001aaa:	2501      	movs	r5, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001aac:	2100      	movs	r1, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001aae:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001ab0:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8001ab2:	7159      	strb	r1, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001ab4:	4608      	mov	r0, r1
}
 8001ab6:	bc70      	pop	{r4, r5, r6}
 8001ab8:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8001aba:	2002      	movs	r0, #2
}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d034      	beq.n	8001b2e <HAL_DMA_Init+0x6e>
{ 
 8001ac4:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ac6:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aca:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 8001ace:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001ad0:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 8001ad8:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001adc:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 8001ade:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae0:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae2:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae4:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ae6:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001aea:	4c12      	ldr	r4, [pc, #72]	; (8001b34 <HAL_DMA_Init+0x74>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aec:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001af0:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001af2:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 8001af4:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001af6:	d910      	bls.n	8001b1a <HAL_DMA_Init+0x5a>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_DMA_Init+0x78>)
 8001afa:	4910      	ldr	r1, [pc, #64]	; (8001b3c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8001afc:	4c10      	ldr	r4, [pc, #64]	; (8001b40 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001afe:	4402      	add	r2, r0
 8001b00:	fba1 1202 	umull	r1, r2, r1, r2
 8001b04:	0912      	lsrs	r2, r2, #4
 8001b06:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 8001b08:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8001b0e:	8419      	strh	r1, [r3, #32]
 8001b10:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
}  
 8001b14:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b16:	6398      	str	r0, [r3, #56]	; 0x38
}  
 8001b18:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_DMA_Init+0x84>)
 8001b1c:	4907      	ldr	r1, [pc, #28]	; (8001b3c <HAL_DMA_Init+0x7c>)
 8001b1e:	4402      	add	r2, r0
 8001b20:	fba1 1202 	umull	r1, r2, r1, r2
 8001b24:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8001b26:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b2a:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8001b2c:	e7ec      	b.n	8001b08 <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
}  
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40020407 	.word	0x40020407
 8001b38:	bffdfbf8 	.word	0xbffdfbf8
 8001b3c:	cccccccd 	.word	0xcccccccd
 8001b40:	40020400 	.word	0x40020400
 8001b44:	bffdfff8 	.word	0xbffdfff8

08001b48 <HAL_DMA_Start_IT>:
{
 8001b48:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8001b4a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001b4e:	2c01      	cmp	r4, #1
 8001b50:	d039      	beq.n	8001bc6 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b52:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001b56:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b58:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001b5a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b5e:	d005      	beq.n	8001b6c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001b60:	2300      	movs	r3, #0
 8001b62:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8001b66:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8001b68:	2002      	movs	r0, #2
} 
 8001b6a:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b6c:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b6e:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b70:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b72:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b76:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b78:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b7a:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b7c:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b80:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b82:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b86:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b88:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b8a:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001b8c:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001b8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b90:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 8001b92:	bf0b      	itete	eq
 8001b94:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001b96:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001b98:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001b9a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001b9c:	b153      	cbz	r3, 8001bb4 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	f043 030e 	orr.w	r3, r3, #14
 8001ba4:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2000      	movs	r0, #0
} 
 8001bb0:	bcf0      	pop	{r4, r5, r6, r7}
 8001bb2:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	f043 030a 	orr.w	r3, r3, #10
 8001bba:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6023      	str	r3, [r4, #0]
 8001bc4:	e7ef      	b.n	8001ba6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001bc6:	2002      	movs	r0, #2
} 
 8001bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_DMA_IRQHandler>:
{
 8001bcc:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001bce:	e9d0 620f 	ldrd	r6, r2, [r0, #60]	; 0x3c
 8001bd2:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bd6:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8001bdc:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001bde:	d00e      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x32>
 8001be0:	f015 0f04 	tst.w	r5, #4
 8001be4:	d00b      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	0692      	lsls	r2, r2, #26
 8001bea:	d403      	bmi.n	8001bf4 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bec:	6822      	ldr	r2, [r4, #0]
 8001bee:	f022 0204 	bic.w	r2, r2, #4
 8001bf2:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bf4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bf6:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bf8:	b1ca      	cbz	r2, 8001c2e <HAL_DMA_IRQHandler+0x62>
}  
 8001bfa:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8001bfc:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bfe:	2302      	movs	r3, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	420b      	tst	r3, r1
 8001c04:	d015      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x66>
 8001c06:	f015 0f02 	tst.w	r5, #2
 8001c0a:	d012      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	0692      	lsls	r2, r2, #26
 8001c10:	d406      	bmi.n	8001c20 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c12:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001c14:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c16:	f022 020a 	bic.w	r2, r2, #10
 8001c1a:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001c20:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c22:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8001c24:	2300      	movs	r3, #0
 8001c26:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d1e5      	bne.n	8001bfa <HAL_DMA_IRQHandler+0x2e>
}  
 8001c2e:	bc70      	pop	{r4, r5, r6}
 8001c30:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c32:	2308      	movs	r3, #8
 8001c34:	4093      	lsls	r3, r2
 8001c36:	420b      	tst	r3, r1
 8001c38:	d0f9      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x62>
 8001c3a:	072b      	lsls	r3, r5, #28
 8001c3c:	d5f7      	bpl.n	8001c2e <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c3e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001c40:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c42:	f023 030e 	bic.w	r3, r3, #14
 8001c46:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8001c4e:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c52:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c54:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 8001c56:	8404      	strh	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d0e8      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x62>
}  
 8001c5c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8001c5e:	4708      	bx	r1

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c64:	680e      	ldr	r6, [r1, #0]
{
 8001c66:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	2e00      	cmp	r6, #0
 8001c6a:	f000 8091 	beq.w	8001d90 <HAL_GPIO_Init+0x130>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6e:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001e60 <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c74:	2201      	movs	r2, #1
 8001c76:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8001c7a:	ea14 0c06 	ands.w	ip, r4, r6
 8001c7e:	f000 8082 	beq.w	8001d86 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c82:	684d      	ldr	r5, [r1, #4]
 8001c84:	f025 0a10 	bic.w	sl, r5, #16
 8001c88:	f10a 32ff 	add.w	r2, sl, #4294967295
 8001c8c:	2a01      	cmp	r2, #1
 8001c8e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c92:	f04f 0203 	mov.w	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c96:	d97e      	bls.n	8001d96 <HAL_GPIO_Init+0x136>
      temp = GPIOx->PUPDR;
 8001c98:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c9a:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c9c:	fa02 f208 	lsl.w	r2, r2, r8
 8001ca0:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ca4:	fa04 f408 	lsl.w	r4, r4, r8
 8001ca8:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001caa:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cac:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8001cae:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb0:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb4:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb6:	fa02 f208 	lsl.w	r2, r2, r8
 8001cba:	433a      	orrs	r2, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbc:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8001cbe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc0:	d561      	bpl.n	8001d86 <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4c60      	ldr	r4, [pc, #384]	; (8001e44 <HAL_GPIO_Init+0x1e4>)
 8001cc4:	69a2      	ldr	r2, [r4, #24]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	61a2      	str	r2, [r4, #24]
 8001ccc:	69a2      	ldr	r2, [r4, #24]
 8001cce:	f023 0703 	bic.w	r7, r3, #3
 8001cd2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001cd6:	f002 0201 	and.w	r2, r2, #1
 8001cda:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001cde:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce0:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce4:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce6:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cea:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8001cee:	240f      	movs	r4, #15
 8001cf0:	fa04 f409 	lsl.w	r4, r4, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf8:	ea28 0404 	bic.w	r4, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cfc:	d01c      	beq.n	8001d38 <HAL_GPIO_Init+0xd8>
 8001cfe:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_GPIO_Init+0x1e8>)
 8001d00:	4290      	cmp	r0, r2
 8001d02:	f000 8088 	beq.w	8001e16 <HAL_GPIO_Init+0x1b6>
 8001d06:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_GPIO_Init+0x1ec>)
 8001d08:	4290      	cmp	r0, r2
 8001d0a:	f000 8089 	beq.w	8001e20 <HAL_GPIO_Init+0x1c0>
 8001d0e:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_GPIO_Init+0x1f0>)
 8001d10:	4290      	cmp	r0, r2
 8001d12:	d07a      	beq.n	8001e0a <HAL_GPIO_Init+0x1aa>
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_GPIO_Init+0x1f4>)
 8001d16:	4290      	cmp	r0, r2
 8001d18:	f000 8088 	beq.w	8001e2c <HAL_GPIO_Init+0x1cc>
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	; (8001e58 <HAL_GPIO_Init+0x1f8>)
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	f000 808a 	beq.w	8001e38 <HAL_GPIO_Init+0x1d8>
 8001d24:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <HAL_GPIO_Init+0x1fc>)
 8001d26:	4290      	cmp	r0, r2
 8001d28:	bf0c      	ite	eq
 8001d2a:	f04f 0806 	moveq.w	r8, #6
 8001d2e:	f04f 0807 	movne.w	r8, #7
 8001d32:	fa08 f209 	lsl.w	r2, r8, r9
 8001d36:	4314      	orrs	r4, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d38:	60bc      	str	r4, [r7, #8]
        temp = EXTI->IMR;
 8001d3a:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8001d3e:	ea6f 070c 	mvn.w	r7, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d42:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8001d44:	bf54      	ite	pl
 8001d46:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001d48:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001d4c:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR;
 8001d50:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d54:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8001d56:	bf54      	ite	pl
 8001d58:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001d5a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001d5e:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d66:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8001d68:	bf54      	ite	pl
 8001d6a:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001d6c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001d70:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR;
 8001d74:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d78:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8001d7a:	bf54      	ite	pl
 8001d7c:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001d7e:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR = temp;
 8001d82:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8001d86:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d88:	fa36 f203 	lsrs.w	r2, r6, r3
 8001d8c:	f47f af72 	bne.w	8001c74 <HAL_GPIO_Init+0x14>
  }
}
 8001d90:	b003      	add	sp, #12
 8001d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001d96:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d98:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d9c:	fa02 f208 	lsl.w	r2, r2, r8
 8001da0:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	68cf      	ldr	r7, [r1, #12]
 8001da6:	fa07 f708 	lsl.w	r7, r7, r8
 8001daa:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8001dae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001db0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001db2:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dba:	465c      	mov	r4, fp
 8001dbc:	409c      	lsls	r4, r3
 8001dbe:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8001dc0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001dc2:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dc4:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dc8:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dcc:	ea49 0404 	orr.w	r4, r9, r4
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd0:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dd4:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8001dd8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dda:	f47f af68 	bne.w	8001cae <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3u];
 8001dde:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001de2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de6:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001dea:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	f04f 0b0f 	mov.w	fp, #15
 8001df4:	fa0b fb02 	lsl.w	fp, fp, r2
 8001df8:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfc:	690c      	ldr	r4, [r1, #16]
 8001dfe:	4094      	lsls	r4, r2
 8001e00:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3u] = temp;
 8001e04:	f8c9 4020 	str.w	r4, [r9, #32]
 8001e08:	e751      	b.n	8001cae <HAL_GPIO_Init+0x4e>
 8001e0a:	f04f 0803 	mov.w	r8, #3
 8001e0e:	fa08 f209 	lsl.w	r2, r8, r9
 8001e12:	4314      	orrs	r4, r2
 8001e14:	e790      	b.n	8001d38 <HAL_GPIO_Init+0xd8>
 8001e16:	2201      	movs	r2, #1
 8001e18:	fa02 f209 	lsl.w	r2, r2, r9
 8001e1c:	4314      	orrs	r4, r2
 8001e1e:	e78b      	b.n	8001d38 <HAL_GPIO_Init+0xd8>
 8001e20:	f04f 0802 	mov.w	r8, #2
 8001e24:	fa08 f209 	lsl.w	r2, r8, r9
 8001e28:	4314      	orrs	r4, r2
 8001e2a:	e785      	b.n	8001d38 <HAL_GPIO_Init+0xd8>
 8001e2c:	f04f 0804 	mov.w	r8, #4
 8001e30:	fa08 f209 	lsl.w	r2, r8, r9
 8001e34:	4314      	orrs	r4, r2
 8001e36:	e77f      	b.n	8001d38 <HAL_GPIO_Init+0xd8>
 8001e38:	f04f 0805 	mov.w	r8, #5
 8001e3c:	fa08 f209 	lsl.w	r2, r8, r9
 8001e40:	4314      	orrs	r4, r2
 8001e42:	e779      	b.n	8001d38 <HAL_GPIO_Init+0xd8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	48000c00 	.word	0x48000c00
 8001e54:	48001000 	.word	0x48001000
 8001e58:	48001400 	.word	0x48001400
 8001e5c:	48001800 	.word	0x48001800
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	b10a      	cbz	r2, 8001e6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e66:	6181      	str	r1, [r0, #24]
 8001e68:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop

08001e70 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001e76:	6951      	ldr	r1, [r2, #20]
 8001e78:	4201      	tst	r1, r0
 8001e7a:	d100      	bne.n	8001e7e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001e7c:	4770      	bx	lr
{
 8001e7e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e80:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e82:	f7ff fff5 	bl	8001e70 <HAL_GPIO_EXTI_Callback>
}
 8001e86:	bd08      	pop	{r3, pc}
 8001e88:	40010400 	.word	0x40010400

08001e8c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	f000 827f 	beq.w	8002390 <HAL_RCC_OscConfig+0x504>
{
 8001e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	6803      	ldr	r3, [r0, #0]
 8001e98:	07df      	lsls	r7, r3, #31
{
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	d53d      	bpl.n	8001f1c <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ea0:	49c1      	ldr	r1, [pc, #772]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 8001ea2:	684a      	ldr	r2, [r1, #4]
 8001ea4:	f002 020c 	and.w	r2, r2, #12
 8001ea8:	2a04      	cmp	r2, #4
 8001eaa:	f000 815f 	beq.w	800216c <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eae:	684a      	ldr	r2, [r1, #4]
 8001eb0:	f002 020c 	and.w	r2, r2, #12
 8001eb4:	2a08      	cmp	r2, #8
 8001eb6:	f000 8152 	beq.w	800215e <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	6863      	ldr	r3, [r4, #4]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	f000 816b 	beq.w	800219a <HAL_RCC_OscConfig+0x30e>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 819a 	beq.w	80021fe <HAL_RCC_OscConfig+0x372>
 8001eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ece:	f000 82bc 	beq.w	800244a <HAL_RCC_OscConfig+0x5be>
 8001ed2:	4bb5      	ldr	r3, [pc, #724]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ee2:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fffe 	bl	8000ee4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee8:	4faf      	ldr	r7, [pc, #700]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8001eea:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef0:	2601      	movs	r6, #1
 8001ef2:	e005      	b.n	8001f00 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fff6 	bl	8000ee4 <HAL_GetTick>
 8001ef8:	1b40      	subs	r0, r0, r5
 8001efa:	2864      	cmp	r0, #100	; 0x64
 8001efc:	f200 817b 	bhi.w	80021f6 <HAL_RCC_OscConfig+0x36a>
 8001f00:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	fa98 f3a8 	rbit	r3, r8
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	fa06 f303 	lsl.w	r3, r6, r3
 8001f16:	4213      	tst	r3, r2
 8001f18:	d0ec      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x68>
 8001f1a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1c:	079e      	lsls	r6, r3, #30
 8001f1e:	d542      	bpl.n	8001fa6 <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f20:	4aa1      	ldr	r2, [pc, #644]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 8001f22:	6851      	ldr	r1, [r2, #4]
 8001f24:	f011 0f0c 	tst.w	r1, #12
 8001f28:	f000 80cf 	beq.w	80020ca <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f2c:	6851      	ldr	r1, [r2, #4]
 8001f2e:	f001 010c 	and.w	r1, r1, #12
 8001f32:	2908      	cmp	r1, #8
 8001f34:	f000 80c2 	beq.w	80020bc <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f38:	68e2      	ldr	r2, [r4, #12]
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	f000 81b8 	beq.w	80022b0 <HAL_RCC_OscConfig+0x424>
 8001f40:	2201      	movs	r2, #1
 8001f42:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f52:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 8001f56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f58:	f7fe ffc4 	bl	8000ee4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4e92      	ldr	r6, [pc, #584]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8001f5e:	4605      	mov	r5, r0
 8001f60:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e005      	b.n	8001f72 <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7fe ffbd 	bl	8000ee4 <HAL_GetTick>
 8001f6a:	1b40      	subs	r0, r0, r5
 8001f6c:	2802      	cmp	r0, #2
 8001f6e:	f200 8142 	bhi.w	80021f6 <HAL_RCC_OscConfig+0x36a>
 8001f72:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	6832      	ldr	r2, [r6, #0]
 8001f78:	fa98 f3a8 	rbit	r3, r8
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	fa07 f303 	lsl.w	r3, r7, r3
 8001f88:	4213      	tst	r3, r2
 8001f8a:	d0ec      	beq.n	8001f66 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	6831      	ldr	r1, [r6, #0]
 8001f8e:	22f8      	movs	r2, #248	; 0xf8
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	6923      	ldr	r3, [r4, #16]
 8001f96:	fab2 f282 	clz	r2, r2
 8001f9a:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001f9e:	4093      	lsls	r3, r2
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6033      	str	r3, [r6, #0]
 8001fa4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	071d      	lsls	r5, r3, #28
 8001fa8:	d421      	bmi.n	8001fee <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001faa:	0758      	lsls	r0, r3, #29
 8001fac:	d54e      	bpl.n	800204c <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b7e      	ldr	r3, [pc, #504]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	00d1      	lsls	r1, r2, #3
 8001fb4:	f140 80c7 	bpl.w	8002146 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8001fb8:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4d7b      	ldr	r5, [pc, #492]	; (80021ac <HAL_RCC_OscConfig+0x320>)
 8001fbe:	682b      	ldr	r3, [r5, #0]
 8001fc0:	05da      	lsls	r2, r3, #23
 8001fc2:	f140 8108 	bpl.w	80021d6 <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f000 8197 	beq.w	80022fc <HAL_RCC_OscConfig+0x470>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8138 	beq.w	8002244 <HAL_RCC_OscConfig+0x3b8>
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	f000 81d1 	beq.w	8002380 <HAL_RCC_OscConfig+0x4f4>
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	621a      	str	r2, [r3, #32]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	621a      	str	r2, [r3, #32]
 8001fec:	e18b      	b.n	8002306 <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fee:	6962      	ldr	r2, [r4, #20]
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	f000 8081 	beq.w	80020f8 <HAL_RCC_OscConfig+0x26c>
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4f6a      	ldr	r7, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 8002000:	fab1 f181 	clz	r1, r1
 8002004:	440b      	add	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002008:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 800200a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800200c:	f7fe ff6a 	bl	8000ee4 <HAL_GetTick>
 8002010:	f04f 0802 	mov.w	r8, #2
 8002014:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	e005      	b.n	8002024 <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002018:	f7fe ff64 	bl	8000ee4 <HAL_GetTick>
 800201c:	1b40      	subs	r0, r0, r5
 800201e:	2802      	cmp	r0, #2
 8002020:	f200 80e9 	bhi.w	80021f6 <HAL_RCC_OscConfig+0x36a>
 8002024:	fa98 f3a8 	rbit	r3, r8
 8002028:	fa98 f3a8 	rbit	r3, r8
 800202c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002032:	fa98 f3a8 	rbit	r3, r8
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	fa06 f303 	lsl.w	r3, r6, r3
 8002042:	4213      	tst	r3, r2
 8002044:	d0e8      	beq.n	8002018 <HAL_RCC_OscConfig+0x18c>
 8002046:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	0758      	lsls	r0, r3, #29
 800204a:	d4b0      	bmi.n	8001fae <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204c:	69a0      	ldr	r0, [r4, #24]
 800204e:	b388      	cbz	r0, 80020b4 <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4d55      	ldr	r5, [pc, #340]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 8002052:	686b      	ldr	r3, [r5, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	f000 8179 	beq.w	8002350 <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205e:	2802      	cmp	r0, #2
 8002060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002064:	f000 8196 	beq.w	8002394 <HAL_RCC_OscConfig+0x508>
 8002068:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002074:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe ff31 	bl	8000ee4 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	462c      	mov	r4, r5
 8002084:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8002088:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	2601      	movs	r6, #1
 800208c:	e005      	b.n	800209a <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe ff29 	bl	8000ee4 <HAL_GetTick>
 8002092:	1b40      	subs	r0, r0, r5
 8002094:	2802      	cmp	r0, #2
 8002096:	f200 80ae 	bhi.w	80021f6 <HAL_RCC_OscConfig+0x36a>
 800209a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	fa97 f3a7 	rbit	r3, r7
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	fa06 f303 	lsl.w	r3, r6, r3
 80020b0:	4213      	tst	r3, r2
 80020b2:	d1ec      	bne.n	800208e <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 80020b4:	2000      	movs	r0, #0
}
 80020b6:	b003      	add	sp, #12
 80020b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020bc:	6852      	ldr	r2, [r2, #4]
 80020be:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 80020c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020c6:	f47f af37 	bne.w	8001f38 <HAL_RCC_OscConfig+0xac>
 80020ca:	2202      	movs	r2, #2
 80020cc:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 80020d2:	6808      	ldr	r0, [r1, #0]
 80020d4:	fa92 f2a2 	rbit	r2, r2
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	f002 021f 	and.w	r2, r2, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4202      	tst	r2, r0
 80020e8:	d064      	beq.n	80021b4 <HAL_RCC_OscConfig+0x328>
 80020ea:	68e2      	ldr	r2, [r4, #12]
 80020ec:	428a      	cmp	r2, r1
 80020ee:	d061      	beq.n	80021b4 <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
}
 80020f2:	b003      	add	sp, #12
 80020f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020f8:	2501      	movs	r5, #1
 80020fa:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 80020fe:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	4f29      	ldr	r7, [pc, #164]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8002102:	fab1 f181 	clz	r1, r1
 8002106:	440b      	add	r3, r1
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	f04f 0802 	mov.w	r8, #2
 800210e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002110:	f7fe fee8 	bl	8000ee4 <HAL_GetTick>
 8002114:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	e004      	b.n	8002122 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7fe fee4 	bl	8000ee4 <HAL_GetTick>
 800211c:	1b80      	subs	r0, r0, r6
 800211e:	2802      	cmp	r0, #2
 8002120:	d869      	bhi.n	80021f6 <HAL_RCC_OscConfig+0x36a>
 8002122:	fa98 f3a8 	rbit	r3, r8
 8002126:	fa98 f3a8 	rbit	r3, r8
 800212a:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	fa98 f3a8 	rbit	r3, r8
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa05 f303 	lsl.w	r3, r5, r3
 8002140:	4213      	tst	r3, r2
 8002142:	d1e9      	bne.n	8002118 <HAL_RCC_OscConfig+0x28c>
 8002144:	e77f      	b.n	8002046 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800214c:	61da      	str	r2, [r3, #28]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002158:	f04f 0801 	mov.w	r8, #1
 800215c:	e72e      	b.n	8001fbc <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215e:	684a      	ldr	r2, [r1, #4]
 8002160:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002164:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002168:	f47f aea7 	bne.w	8001eba <HAL_RCC_OscConfig+0x2e>
 800216c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002170:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 8002176:	6808      	ldr	r0, [r1, #0]
 8002178:	fa92 f2a2 	rbit	r2, r2
 800217c:	fab2 f282 	clz	r2, r2
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4202      	tst	r2, r0
 800218c:	f43f aec6 	beq.w	8001f1c <HAL_RCC_OscConfig+0x90>
 8002190:	6862      	ldr	r2, [r4, #4]
 8002192:	2a00      	cmp	r2, #0
 8002194:	f47f aec2 	bne.w	8001f1c <HAL_RCC_OscConfig+0x90>
 8002198:	e7aa      	b.n	80020f0 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219a:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_RCC_OscConfig+0x31c>)
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	e69e      	b.n	8001ee4 <HAL_RCC_OscConfig+0x58>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
 80021b0:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4dab      	ldr	r5, [pc, #684]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
 80021b6:	21f8      	movs	r1, #248	; 0xf8
 80021b8:	6828      	ldr	r0, [r5, #0]
 80021ba:	fa91 f1a1 	rbit	r1, r1
 80021be:	6922      	ldr	r2, [r4, #16]
 80021c0:	fab1 f181 	clz	r1, r1
 80021c4:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80021c8:	408a      	lsls	r2, r1
 80021ca:	4302      	orrs	r2, r0
 80021cc:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	071d      	lsls	r5, r3, #28
 80021d0:	f57f aeeb 	bpl.w	8001faa <HAL_RCC_OscConfig+0x11e>
 80021d4:	e70b      	b.n	8001fee <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d6:	682b      	ldr	r3, [r5, #0]
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80021de:	f7fe fe81 	bl	8000ee4 <HAL_GetTick>
 80021e2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	05db      	lsls	r3, r3, #23
 80021e8:	f53f aeed 	bmi.w	8001fc6 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe fe7a 	bl	8000ee4 <HAL_GetTick>
 80021f0:	1b80      	subs	r0, r0, r6
 80021f2:	2864      	cmp	r0, #100	; 0x64
 80021f4:	d9f6      	bls.n	80021e4 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 80021f6:	2003      	movs	r0, #3
}
 80021f8:	b003      	add	sp, #12
 80021fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fe:	4d99      	ldr	r5, [pc, #612]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	602b      	str	r3, [r5, #0]
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002210:	f7fe fe68 	bl	8000ee4 <HAL_GetTick>
 8002214:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002218:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	2701      	movs	r7, #1
 800221c:	e004      	b.n	8002228 <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221e:	f7fe fe61 	bl	8000ee4 <HAL_GetTick>
 8002222:	1b80      	subs	r0, r0, r6
 8002224:	2864      	cmp	r0, #100	; 0x64
 8002226:	d8e6      	bhi.n	80021f6 <HAL_RCC_OscConfig+0x36a>
 8002228:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222c:	682a      	ldr	r2, [r5, #0]
 800222e:	fa98 f3a8 	rbit	r3, r8
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	fa07 f303 	lsl.w	r3, r7, r3
 800223e:	4213      	tst	r3, r2
 8002240:	d1ed      	bne.n	800221e <HAL_RCC_OscConfig+0x392>
 8002242:	e66a      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	4d87      	ldr	r5, [pc, #540]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
 8002246:	6a2b      	ldr	r3, [r5, #32]
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	622b      	str	r3, [r5, #32]
 800224e:	6a2b      	ldr	r3, [r5, #32]
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002256:	f7fe fe45 	bl	8000ee4 <HAL_GetTick>
 800225a:	f04f 0902 	mov.w	r9, #2
 800225e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	2701      	movs	r7, #1
 8002262:	e013      	b.n	800228c <HAL_RCC_OscConfig+0x400>
 8002264:	fa99 f3a9 	rbit	r3, r9
 8002268:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800226a:	fa99 f3a9 	rbit	r3, r9
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	fa07 f303 	lsl.w	r3, r7, r3
 800227a:	4213      	tst	r3, r2
 800227c:	d00e      	beq.n	800229c <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fe31 	bl	8000ee4 <HAL_GetTick>
 8002282:	f241 3388 	movw	r3, #5000	; 0x1388
 8002286:	1b80      	subs	r0, r0, r6
 8002288:	4298      	cmp	r0, r3
 800228a:	d8b4      	bhi.n	80021f6 <HAL_RCC_OscConfig+0x36a>
 800228c:	fa99 f3a9 	rbit	r3, r9
 8002290:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0e5      	beq.n	8002264 <HAL_RCC_OscConfig+0x3d8>
 8002298:	6a2a      	ldr	r2, [r5, #32]
 800229a:	e7e6      	b.n	800226a <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 800229c:	f1b8 0f00 	cmp.w	r8, #0
 80022a0:	f43f aed4 	beq.w	800204c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4a6f      	ldr	r2, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
 80022a6:	69d3      	ldr	r3, [r2, #28]
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	61d3      	str	r3, [r2, #28]
 80022ae:	e6cd      	b.n	800204c <HAL_RCC_OscConfig+0x1c0>
 80022b0:	2501      	movs	r5, #1
 80022b2:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c2:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c4:	4f67      	ldr	r7, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 80022c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022c8:	f7fe fe0c 	bl	8000ee4 <HAL_GetTick>
 80022cc:	f04f 0802 	mov.w	r8, #2
 80022d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	e004      	b.n	80022de <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d4:	f7fe fe06 	bl	8000ee4 <HAL_GetTick>
 80022d8:	1b80      	subs	r0, r0, r6
 80022da:	2802      	cmp	r0, #2
 80022dc:	d88b      	bhi.n	80021f6 <HAL_RCC_OscConfig+0x36a>
 80022de:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	fa98 f3a8 	rbit	r3, r8
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa05 f303 	lsl.w	r3, r5, r3
 80022f4:	4213      	tst	r3, r2
 80022f6:	d1ed      	bne.n	80022d4 <HAL_RCC_OscConfig+0x448>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	e654      	b.n	8001fa6 <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	4a59      	ldr	r2, [pc, #356]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
 80022fe:	6a13      	ldr	r3, [r2, #32]
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002306:	f7fe fded 	bl	8000ee4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230a:	4f56      	ldr	r7, [pc, #344]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 800230c:	4605      	mov	r5, r0
 800230e:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	2601      	movs	r6, #1
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x4b4>
 8002316:	fa99 f3a9 	rbit	r3, r9
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	fa99 f3a9 	rbit	r3, r9
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa06 f303 	lsl.w	r3, r6, r3
 800232c:	4213      	tst	r3, r2
 800232e:	d1b5      	bne.n	800229c <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7fe fdd8 	bl	8000ee4 <HAL_GetTick>
 8002334:	f241 3388 	movw	r3, #5000	; 0x1388
 8002338:	1b40      	subs	r0, r0, r5
 800233a:	4298      	cmp	r0, r3
 800233c:	f63f af5b 	bhi.w	80021f6 <HAL_RCC_OscConfig+0x36a>
 8002340:	fa99 f3a9 	rbit	r3, r9
 8002344:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0e4      	beq.n	8002316 <HAL_RCC_OscConfig+0x48a>
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	e7e5      	b.n	800231c <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	2801      	cmp	r0, #1
 8002352:	f43f aeb0 	beq.w	80020b6 <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 8002356:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002358:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 800235a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800235c:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8002360:	4288      	cmp	r0, r1
 8002362:	f47f aec5 	bne.w	80020f0 <HAL_RCC_OscConfig+0x264>
 8002366:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002368:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800236c:	428a      	cmp	r2, r1
 800236e:	f47f aebf 	bne.w	80020f0 <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002372:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002374:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 8002378:	1a18      	subs	r0, r3, r0
 800237a:	bf18      	it	ne
 800237c:	2001      	movne	r0, #1
 800237e:	e69a      	b.n	80020b6 <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	f042 0204 	orr.w	r2, r2, #4
 8002384:	621a      	str	r2, [r3, #32]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	621a      	str	r2, [r3, #32]
 800238e:	e7ba      	b.n	8002306 <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 8002390:	2001      	movs	r0, #1
}
 8002392:	4770      	bx	lr
 8002394:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023aa:	f7fe fd9b 	bl	8000ee4 <HAL_GetTick>
 80023ae:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80023b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	2701      	movs	r7, #1
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fd94 	bl	8000ee4 <HAL_GetTick>
 80023bc:	1b80      	subs	r0, r0, r6
 80023be:	2802      	cmp	r0, #2
 80023c0:	f63f af19 	bhi.w	80021f6 <HAL_RCC_OscConfig+0x36a>
 80023c4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	682a      	ldr	r2, [r5, #0]
 80023ca:	fa98 f3a8 	rbit	r3, r8
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	fa07 f303 	lsl.w	r3, r7, r3
 80023da:	4213      	tst	r3, r2
 80023dc:	d1ec      	bne.n	80023b8 <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80023e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023e2:	f023 030f 	bic.w	r3, r3, #15
 80023e6:	4313      	orrs	r3, r2
 80023e8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80023ea:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 80023ee:	686a      	ldr	r2, [r5, #4]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80023f6:	4313      	orrs	r3, r2
 80023f8:	606b      	str	r3, [r5, #4]
 80023fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800240a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800240e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	4e14      	ldr	r6, [pc, #80]	; (8002464 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 8002412:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8002414:	f7fe fd66 	bl	8000ee4 <HAL_GetTick>
 8002418:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800241c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800241e:	2501      	movs	r5, #1
 8002420:	e005      	b.n	800242e <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe fd5f 	bl	8000ee4 <HAL_GetTick>
 8002426:	1b00      	subs	r0, r0, r4
 8002428:	2802      	cmp	r0, #2
 800242a:	f63f aee4 	bhi.w	80021f6 <HAL_RCC_OscConfig+0x36a>
 800242e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002432:	6832      	ldr	r2, [r6, #0]
 8002434:	fa98 f3a8 	rbit	r3, r8
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa05 f303 	lsl.w	r3, r5, r3
 8002444:	4213      	tst	r3, r2
 8002446:	d0ec      	beq.n	8002422 <HAL_RCC_OscConfig+0x596>
 8002448:	e634      	b.n	80020b4 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800244e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e53f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x58>
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002468:	2800      	cmp	r0, #0
 800246a:	f000 80c4 	beq.w	80025f6 <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246e:	4a6d      	ldr	r2, [pc, #436]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	6813      	ldr	r3, [r2, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	428b      	cmp	r3, r1
{
 8002478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800247c:	460d      	mov	r5, r1
 800247e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	d20c      	bcs.n	800249c <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	6813      	ldr	r3, [r2, #0]
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	430b      	orrs	r3, r1
 800248a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	6813      	ldr	r3, [r2, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	428b      	cmp	r3, r1
 8002494:	d002      	beq.n	800249c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002496:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8002498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	0798      	lsls	r0, r3, #30
 80024a0:	d506      	bpl.n	80024b0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a2:	4961      	ldr	r1, [pc, #388]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	68a0      	ldr	r0, [r4, #8]
 80024a6:	684a      	ldr	r2, [r1, #4]
 80024a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024ac:	4302      	orrs	r2, r0
 80024ae:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b0:	07d9      	lsls	r1, r3, #31
 80024b2:	d52f      	bpl.n	8002514 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b4:	6861      	ldr	r1, [r4, #4]
 80024b6:	2901      	cmp	r1, #1
 80024b8:	f000 809f 	beq.w	80025fa <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024bc:	2902      	cmp	r1, #2
 80024be:	f000 8087 	beq.w	80025d0 <HAL_RCC_ClockConfig+0x168>
 80024c2:	2202      	movs	r2, #2
 80024c4:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	fab2 f282 	clz	r2, r2
 80024d4:	f002 021f 	and.w	r2, r2, #31
 80024d8:	2301      	movs	r3, #1
 80024da:	fa03 f202 	lsl.w	r2, r3, r2
 80024de:	4202      	tst	r2, r0
 80024e0:	d0d9      	beq.n	8002496 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4e51      	ldr	r6, [pc, #324]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	6873      	ldr	r3, [r6, #4]
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	430b      	orrs	r3, r1
 80024ec:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80024ee:	f7fe fcf9 	bl	8000ee4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80024f6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f8:	e005      	b.n	8002506 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fa:	f7fe fcf3 	bl	8000ee4 <HAL_GetTick>
 80024fe:	1bc0      	subs	r0, r0, r7
 8002500:	4540      	cmp	r0, r8
 8002502:	f200 808c 	bhi.w	800261e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	6873      	ldr	r3, [r6, #4]
 8002508:	6862      	ldr	r2, [r4, #4]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002512:	d1f2      	bne.n	80024fa <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002514:	4a43      	ldr	r2, [pc, #268]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	42ab      	cmp	r3, r5
 800251e:	d909      	bls.n	8002534 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002520:	6813      	ldr	r3, [r2, #0]
 8002522:	f023 0307 	bic.w	r3, r3, #7
 8002526:	432b      	orrs	r3, r5
 8002528:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	42ab      	cmp	r3, r5
 8002532:	d1b0      	bne.n	8002496 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	075a      	lsls	r2, r3, #29
 8002538:	d506      	bpl.n	8002548 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253a:	493b      	ldr	r1, [pc, #236]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	68e0      	ldr	r0, [r4, #12]
 800253e:	684a      	ldr	r2, [r1, #4]
 8002540:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002544:	4302      	orrs	r2, r0
 8002546:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	d507      	bpl.n	800255c <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254c:	4a36      	ldr	r2, [pc, #216]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800254e:	6921      	ldr	r1, [r4, #16]
 8002550:	6853      	ldr	r3, [r2, #4]
 8002552:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002556:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800255a:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800255c:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800255e:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002560:	f003 010c 	and.w	r1, r3, #12
 8002564:	2908      	cmp	r1, #8
 8002566:	d017      	beq.n	8002598 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002568:	4930      	ldr	r1, [pc, #192]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	22f0      	movs	r2, #240	; 0xf0
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	fa92 f2a2 	rbit	r2, r2
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	40d3      	lsrs	r3, r2
 800257e:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 8002580:	482c      	ldr	r0, [pc, #176]	; (8002634 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8002586:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002588:	fa21 f303 	lsr.w	r3, r1, r3
 800258c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800258e:	f7fe fc73 	bl	8000e78 <HAL_InitTick>
  return HAL_OK;
 8002592:	2000      	movs	r0, #0
}
 8002594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002598:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 800259c:	fa91 f1a1 	rbit	r1, r1
 80025a0:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025a4:	fab1 f181 	clz	r1, r1
 80025a8:	fa90 f0a0 	rbit	r0, r0
 80025ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025b0:	40cb      	lsrs	r3, r1
 80025b2:	4922      	ldr	r1, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025b4:	4c22      	ldr	r4, [pc, #136]	; (8002640 <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025b8:	491c      	ldr	r1, [pc, #112]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ba:	fab0 f080 	clz	r0, r0
 80025be:	f002 020f 	and.w	r2, r2, #15
 80025c2:	40c2      	lsrs	r2, r0
 80025c4:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025c6:	fbb1 f1f2 	udiv	r1, r1, r2
 80025ca:	fb03 f101 	mul.w	r1, r3, r1
 80025ce:	e7cc      	b.n	800256a <HAL_RCC_ClockConfig+0x102>
 80025d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d4:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025da:	6810      	ldr	r0, [r2, #0]
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2201      	movs	r2, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	4203      	tst	r3, r0
 80025f0:	f47f af77 	bne.w	80024e2 <HAL_RCC_ClockConfig+0x7a>
 80025f4:	e74f      	b.n	8002496 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80025f6:	2001      	movs	r0, #1
}
 80025f8:	4770      	bx	lr
 80025fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025fe:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fa92 f2a2 	rbit	r2, r2
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	f002 021f 	and.w	r2, r2, #31
 8002612:	fa01 f202 	lsl.w	r2, r1, r2
 8002616:	421a      	tst	r2, r3
 8002618:	f47f af63 	bne.w	80024e2 <HAL_RCC_ClockConfig+0x7a>
 800261c:	e73b      	b.n	8002496 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
 8002620:	e73a      	b.n	8002498 <HAL_RCC_ClockConfig+0x30>
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000
 8002628:	40021000 	.word	0x40021000
 800262c:	007a1200 	.word	0x007a1200
 8002630:	08003fc8 	.word	0x08003fc8
 8002634:	20000008 	.word	0x20000008
 8002638:	20000000 	.word	0x20000000
 800263c:	08003fe0 	.word	0x08003fe0
 8002640:	08003ff0 	.word	0x08003ff0

08002644 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002646:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	f003 010c 	and.w	r1, r3, #12
 800264c:	2908      	cmp	r1, #8
 800264e:	d001      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002650:	4810      	ldr	r0, [pc, #64]	; (8002694 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002652:	4770      	bx	lr
{
 8002654:	b430      	push	{r4, r5}
 8002656:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 800265a:	fa90 f0a0 	rbit	r0, r0
 800265e:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002660:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002662:	fab0 f080 	clz	r0, r0
 8002666:	fa91 f1a1 	rbit	r1, r1
 800266a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800266e:	40c3      	lsrs	r3, r0
 8002670:	4809      	ldr	r0, [pc, #36]	; (8002698 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002672:	4d0a      	ldr	r5, [pc, #40]	; (800269c <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002674:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002676:	4c07      	ldr	r4, [pc, #28]	; (8002694 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002678:	fab1 f181 	clz	r1, r1
 800267c:	f002 030f 	and.w	r3, r2, #15
 8002680:	40cb      	lsrs	r3, r1
 8002682:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002684:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002688:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800268a:	fb00 f003 	mul.w	r0, r0, r3
}
 800268e:	4770      	bx	lr
 8002690:	40021000 	.word	0x40021000
 8002694:	007a1200 	.word	0x007a1200
 8002698:	08003fe0 	.word	0x08003fe0
 800269c:	08003ff0 	.word	0x08003ff0

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	fa92 f2a2 	rbit	r2, r2
 80026ac:	fab2 f282 	clz	r2, r2
 80026b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b6:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	6810      	ldr	r0, [r2, #0]
}    
 80026be:	40d8      	lsrs	r0, r3
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	08003fd8 	.word	0x08003fd8
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	fa92 f2a2 	rbit	r2, r2
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e6:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	6810      	ldr	r0, [r2, #0]
} 
 80026ee:	40d8      	lsrs	r0, r3
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08003fd8 	.word	0x08003fd8
 80026fc:	20000000 	.word	0x20000000

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002704:	6803      	ldr	r3, [r0, #0]
 8002706:	03d9      	lsls	r1, r3, #15
{
 8002708:	b083      	sub	sp, #12
 800270a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800270c:	d53d      	bpl.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x8a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4ba1      	ldr	r3, [pc, #644]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	00d2      	lsls	r2, r2, #3
 8002714:	f140 80f6 	bpl.w	8002904 <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4d9f      	ldr	r5, [pc, #636]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800271e:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	f140 80ff 	bpl.w	8002924 <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002726:	4d9b      	ldr	r5, [pc, #620]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002728:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800272a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800272e:	d01f      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002730:	6861      	ldr	r1, [r4, #4]
 8002732:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8002736:	429a      	cmp	r2, r3
 8002738:	d01b      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800273a:	6a29      	ldr	r1, [r5, #32]
 800273c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002740:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002744:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002748:	f8df c250 	ldr.w	ip, [pc, #592]	; 800299c <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800274c:	fab2 f282 	clz	r2, r2
 8002750:	4462      	add	r2, ip
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	2701      	movs	r7, #1
 8002756:	6017      	str	r7, [r2, #0]
 8002758:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	4463      	add	r3, ip
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002766:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002768:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800276a:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800276c:	f100 80ee 	bmi.w	800294c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002770:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002772:	4a88      	ldr	r2, [pc, #544]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002774:	6a13      	ldr	r3, [r2, #32]
 8002776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277a:	430b      	orrs	r3, r1
 800277c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800277e:	b11e      	cbz	r6, 8002788 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	69d3      	ldr	r3, [r2, #28]
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	61d3      	str	r3, [r2, #28]
 8002788:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800278a:	07da      	lsls	r2, r3, #31
 800278c:	d506      	bpl.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278e:	4981      	ldr	r1, [pc, #516]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002790:	68a0      	ldr	r0, [r4, #8]
 8002792:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002794:	f022 0203 	bic.w	r2, r2, #3
 8002798:	4302      	orrs	r2, r0
 800279a:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800279c:	079f      	lsls	r7, r3, #30
 800279e:	d506      	bpl.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a0:	497c      	ldr	r1, [pc, #496]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027a2:	68e0      	ldr	r0, [r4, #12]
 80027a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80027a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80027aa:	4302      	orrs	r2, r0
 80027ac:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ae:	075e      	lsls	r6, r3, #29
 80027b0:	d506      	bpl.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b2:	4978      	ldr	r1, [pc, #480]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027b4:	6920      	ldr	r0, [r4, #16]
 80027b6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80027b8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80027bc:	4302      	orrs	r2, r0
 80027be:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c0:	069d      	lsls	r5, r3, #26
 80027c2:	d506      	bpl.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c4:	4973      	ldr	r1, [pc, #460]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027c6:	69e0      	ldr	r0, [r4, #28]
 80027c8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80027ca:	f022 0210 	bic.w	r2, r2, #16
 80027ce:	4302      	orrs	r2, r0
 80027d0:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027d2:	0398      	lsls	r0, r3, #14
 80027d4:	d506      	bpl.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027d6:	496f      	ldr	r1, [pc, #444]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027da:	684a      	ldr	r2, [r1, #4]
 80027dc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80027e0:	4302      	orrs	r2, r0
 80027e2:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e4:	0659      	lsls	r1, r3, #25
 80027e6:	d506      	bpl.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e8:	496a      	ldr	r1, [pc, #424]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027ea:	6a20      	ldr	r0, [r4, #32]
 80027ec:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80027ee:	f022 0220 	bic.w	r2, r2, #32
 80027f2:	4302      	orrs	r2, r0
 80027f4:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027f6:	035a      	lsls	r2, r3, #13
 80027f8:	d506      	bpl.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fa:	4966      	ldr	r1, [pc, #408]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80027fe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002804:	4302      	orrs	r2, r0
 8002806:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002808:	071f      	lsls	r7, r3, #28
 800280a:	d506      	bpl.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800280c:	4961      	ldr	r1, [pc, #388]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800280e:	6960      	ldr	r0, [r4, #20]
 8002810:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002812:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002816:	4302      	orrs	r2, r0
 8002818:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800281a:	06de      	lsls	r6, r3, #27
 800281c:	d506      	bpl.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800281e:	495d      	ldr	r1, [pc, #372]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002820:	69a0      	ldr	r0, [r4, #24]
 8002822:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002824:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002828:	4302      	orrs	r2, r0
 800282a:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800282c:	059d      	lsls	r5, r3, #22
 800282e:	d506      	bpl.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002830:	4958      	ldr	r1, [pc, #352]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002832:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002834:	684a      	ldr	r2, [r1, #4]
 8002836:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800283a:	4302      	orrs	r2, r0
 800283c:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800283e:	0618      	lsls	r0, r3, #24
 8002840:	d506      	bpl.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002842:	4954      	ldr	r1, [pc, #336]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002844:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002846:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002848:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800284c:	4302      	orrs	r2, r0
 800284e:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002850:	05d9      	lsls	r1, r3, #23
 8002852:	d506      	bpl.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002854:	494f      	ldr	r1, [pc, #316]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002856:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002858:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800285a:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800285e:	4302      	orrs	r2, r0
 8002860:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002862:	04da      	lsls	r2, r3, #19
 8002864:	d506      	bpl.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002866:	494b      	ldr	r1, [pc, #300]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002868:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800286a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800286c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002870:	4302      	orrs	r2, r0
 8002872:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002874:	049f      	lsls	r7, r3, #18
 8002876:	d506      	bpl.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002878:	4946      	ldr	r1, [pc, #280]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800287a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800287c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800287e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002882:	4302      	orrs	r2, r0
 8002884:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002886:	02de      	lsls	r6, r3, #11
 8002888:	d506      	bpl.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800288a:	4942      	ldr	r1, [pc, #264]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800288c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800288e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002890:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002894:	4302      	orrs	r2, r0
 8002896:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002898:	029d      	lsls	r5, r3, #10
 800289a:	d506      	bpl.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800289c:	493d      	ldr	r1, [pc, #244]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800289e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80028a0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028a2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80028a6:	4302      	orrs	r2, r0
 80028a8:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80028aa:	0258      	lsls	r0, r3, #9
 80028ac:	d506      	bpl.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028ae:	4939      	ldr	r1, [pc, #228]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028b0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80028b2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	4302      	orrs	r2, r0
 80028ba:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80028bc:	0219      	lsls	r1, r3, #8
 80028be:	d506      	bpl.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028c0:	4934      	ldr	r1, [pc, #208]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80028c4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ca:	4302      	orrs	r2, r0
 80028cc:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80028ce:	01da      	lsls	r2, r3, #7
 80028d0:	d506      	bpl.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80028d2:	4930      	ldr	r1, [pc, #192]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80028d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028dc:	4302      	orrs	r2, r0
 80028de:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80028e0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80028e4:	d103      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028e6:	4618      	mov	r0, r3
}
 80028e8:	b003      	add	sp, #12
 80028ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80028ee:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028f0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80028f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028f8:	430b      	orrs	r3, r1
  return HAL_OK;
 80028fa:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80028fe:	b003      	add	sp, #12
 8002900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4d24      	ldr	r5, [pc, #144]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800290c:	61da      	str	r2, [r3, #28]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 800291c:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	f53f af01 	bmi.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800292c:	f7fe fada 	bl	8000ee4 <HAL_GetTick>
 8002930:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	682b      	ldr	r3, [r5, #0]
 8002934:	05d8      	lsls	r0, r3, #23
 8002936:	f53f aef6 	bmi.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe fad3 	bl	8000ee4 <HAL_GetTick>
 800293e:	1bc0      	subs	r0, r0, r7
 8002940:	2864      	cmp	r0, #100	; 0x64
 8002942:	d9f6      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 8002944:	2003      	movs	r0, #3
}
 8002946:	b003      	add	sp, #12
 8002948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 800294c:	f7fe faca 	bl	8000ee4 <HAL_GetTick>
 8002950:	f04f 0902 	mov.w	r9, #2
 8002954:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	e015      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002958:	fa99 f3a9 	rbit	r3, r9
 800295c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800295e:	fa99 f3a9 	rbit	r3, r9
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	fa07 f303 	lsl.w	r3, r7, r3
 800296e:	4213      	tst	r3, r2
 8002970:	f47f aefe 	bne.w	8002770 <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe fab6 	bl	8000ee4 <HAL_GetTick>
 8002978:	f241 3388 	movw	r3, #5000	; 0x1388
 800297c:	eba0 0008 	sub.w	r0, r0, r8
 8002980:	4298      	cmp	r0, r3
 8002982:	d8df      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002984:	fa99 f3a9 	rbit	r3, r9
 8002988:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0e3      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002990:	6a2a      	ldr	r2, [r5, #32]
 8002992:	e7e4      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	10908100 	.word	0x10908100

080029a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a0:	6a03      	ldr	r3, [r0, #32]
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6203      	str	r3, [r0, #32]
{
 80029a8:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ae:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029b0:	4f1a      	ldr	r7, [pc, #104]	; (8002a1c <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 80029b2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80029b4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80029ba:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029c2:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 80029c4:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 80029c8:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029cc:	d012      	beq.n	80029f4 <TIM_OC1_SetConfig+0x54>
 80029ce:	4c14      	ldr	r4, [pc, #80]	; (8002a20 <TIM_OC1_SetConfig+0x80>)
 80029d0:	42a0      	cmp	r0, r4
 80029d2:	d00f      	beq.n	80029f4 <TIM_OC1_SetConfig+0x54>
 80029d4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80029d8:	42a0      	cmp	r0, r4
 80029da:	d00b      	beq.n	80029f4 <TIM_OC1_SetConfig+0x54>
 80029dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029e0:	42a0      	cmp	r0, r4
 80029e2:	d007      	beq.n	80029f4 <TIM_OC1_SetConfig+0x54>
 80029e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029e8:	42a0      	cmp	r0, r4
 80029ea:	d003      	beq.n	80029f4 <TIM_OC1_SetConfig+0x54>
 80029ec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80029f0:	42a0      	cmp	r0, r4
 80029f2:	d10b      	bne.n	8002a0c <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80029fa:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029fc:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a00:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a04:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a06:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a0a:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a0c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002a0e:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002a10:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002a12:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8002a14:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002a16:	6203      	str	r3, [r0, #32]
}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40013400 	.word	0x40013400

08002a24 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a24:	6a03      	ldr	r3, [r0, #32]
 8002a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2a:	6203      	str	r3, [r0, #32]
{
 8002a2c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a30:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a32:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a34:	4f21      	ldr	r7, [pc, #132]	; (8002abc <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a36:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002a38:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8002a3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a46:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a48:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8002a4c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a50:	d016      	beq.n	8002a80 <TIM_OC3_SetConfig+0x5c>
 8002a52:	4c1b      	ldr	r4, [pc, #108]	; (8002ac0 <TIM_OC3_SetConfig+0x9c>)
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d013      	beq.n	8002a80 <TIM_OC3_SetConfig+0x5c>
 8002a58:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8002a5c:	42a0      	cmp	r0, r4
 8002a5e:	d024      	beq.n	8002aaa <TIM_OC3_SetConfig+0x86>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a60:	4c18      	ldr	r4, [pc, #96]	; (8002ac4 <TIM_OC3_SetConfig+0xa0>)
 8002a62:	42a0      	cmp	r0, r4
 8002a64:	d013      	beq.n	8002a8e <TIM_OC3_SetConfig+0x6a>
 8002a66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a6a:	42a0      	cmp	r0, r4
 8002a6c:	d00f      	beq.n	8002a8e <TIM_OC3_SetConfig+0x6a>
 8002a6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a72:	42a0      	cmp	r0, r4
 8002a74:	d00b      	beq.n	8002a8e <TIM_OC3_SetConfig+0x6a>
 8002a76:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002a7a:	42a0      	cmp	r0, r4
 8002a7c:	d10e      	bne.n	8002a9c <TIM_OC3_SetConfig+0x78>
 8002a7e:	e006      	b.n	8002a8e <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a80:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a86:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a8e:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a92:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a96:	432c      	orrs	r4, r5
 8002a98:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a9c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002a9e:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002aa0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002aa2:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8002aa4:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002aa6:	6203      	str	r3, [r0, #32]
}
 8002aa8:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aaa:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ab0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab8:	e7d2      	b.n	8002a60 <TIM_OC3_SetConfig+0x3c>
 8002aba:	bf00      	nop
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40013400 	.word	0x40013400
 8002ac4:	40014000 	.word	0x40014000

08002ac8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	f000 8085 	beq.w	8002bd8 <HAL_TIM_Base_Init+0x110>
{
 8002ace:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d074      	beq.n	8002bc8 <HAL_TIM_Base_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ade:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae0:	4941      	ldr	r1, [pc, #260]	; (8002be8 <HAL_TIM_Base_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002aea:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aec:	d058      	beq.n	8002ba0 <HAL_TIM_Base_Init+0xd8>
 8002aee:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002af2:	d028      	beq.n	8002b46 <HAL_TIM_Base_Init+0x7e>
 8002af4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002af8:	428a      	cmp	r2, r1
 8002afa:	d024      	beq.n	8002b46 <HAL_TIM_Base_Init+0x7e>
 8002afc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b00:	428a      	cmp	r2, r1
 8002b02:	d020      	beq.n	8002b46 <HAL_TIM_Base_Init+0x7e>
 8002b04:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8002b08:	428a      	cmp	r2, r1
 8002b0a:	d049      	beq.n	8002ba0 <HAL_TIM_Base_Init+0xd8>
 8002b0c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8002b10:	428a      	cmp	r2, r1
 8002b12:	d063      	beq.n	8002bdc <HAL_TIM_Base_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b14:	4935      	ldr	r1, [pc, #212]	; (8002bec <HAL_TIM_Base_Init+0x124>)
 8002b16:	428a      	cmp	r2, r1
 8002b18:	d05b      	beq.n	8002bd2 <HAL_TIM_Base_Init+0x10a>
 8002b1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b1e:	428a      	cmp	r2, r1
 8002b20:	d057      	beq.n	8002bd2 <HAL_TIM_Base_Init+0x10a>
 8002b22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b26:	428a      	cmp	r2, r1
 8002b28:	d053      	beq.n	8002bd2 <HAL_TIM_Base_Init+0x10a>
 8002b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b2e:	428a      	cmp	r2, r1
 8002b30:	d04f      	beq.n	8002bd2 <HAL_TIM_Base_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b32:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b34:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8002b36:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002b3e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b40:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b42:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b44:	e010      	b.n	8002b68 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8002b46:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b48:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b50:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b56:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b58:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b5e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002b60:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002b62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b66:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002b74:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002b78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002b8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b90:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002b94:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002b9c:	2000      	movs	r0, #0
}
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002ba0:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002baa:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002bb8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bba:	68e3      	ldr	r3, [r4, #12]
 8002bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002bbe:	6863      	ldr	r3, [r4, #4]
 8002bc0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc2:	6963      	ldr	r3, [r4, #20]
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	e7cf      	b.n	8002b68 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002bc8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002bcc:	f7fd ff98 	bl	8000b00 <HAL_TIM_Base_MspInit>
 8002bd0:	e785      	b.n	8002ade <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd4:	69a1      	ldr	r1, [r4, #24]
 8002bd6:	e7e9      	b.n	8002bac <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
}
 8002bda:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002bdc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002be2:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be4:	e796      	b.n	8002b14 <HAL_TIM_Base_Init+0x4c>
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40014000 	.word	0x40014000

08002bf0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d126      	bne.n	8002c46 <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	4919      	ldr	r1, [pc, #100]	; (8002c60 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c02:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c04:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0c:	d01d      	beq.n	8002c4a <HAL_TIM_Base_Start_IT+0x5a>
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d01a      	beq.n	8002c4a <HAL_TIM_Base_Start_IT+0x5a>
 8002c14:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <HAL_TIM_Base_Start_IT+0x74>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d017      	beq.n	8002c4a <HAL_TIM_Base_Start_IT+0x5a>
 8002c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_TIM_Base_Start_IT+0x5a>
 8002c22:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00f      	beq.n	8002c4a <HAL_TIM_Base_Start_IT+0x5a>
 8002c2a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <HAL_TIM_Base_Start_IT+0x5a>
 8002c32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <HAL_TIM_Base_Start_IT+0x5a>
    __HAL_TIM_ENABLE(htim);
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c42:	2000      	movs	r0, #0
 8002c44:	4770      	bx	lr
    return HAL_ERROR;
 8002c46:	2001      	movs	r0, #1
 8002c48:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <HAL_TIM_Base_Start_IT+0x78>)
 8002c4e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c50:	2a06      	cmp	r2, #6
 8002c52:	d002      	beq.n	8002c5a <HAL_TIM_Base_Start_IT+0x6a>
 8002c54:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002c58:	d1ef      	bne.n	8002c3a <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 8002c5a:	2000      	movs	r0, #0
}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	00010007 	.word	0x00010007

08002c6c <HAL_TIM_PWM_MspInit>:
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002c70:	2800      	cmp	r0, #0
 8002c72:	f000 8085 	beq.w	8002d80 <HAL_TIM_PWM_Init+0x110>
{
 8002c76:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c78:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d074      	beq.n	8002d70 <HAL_TIM_PWM_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c86:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c88:	4941      	ldr	r1, [pc, #260]	; (8002d90 <HAL_TIM_PWM_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002c92:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c94:	d058      	beq.n	8002d48 <HAL_TIM_PWM_Init+0xd8>
 8002c96:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002c9a:	d028      	beq.n	8002cee <HAL_TIM_PWM_Init+0x7e>
 8002c9c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002ca0:	428a      	cmp	r2, r1
 8002ca2:	d024      	beq.n	8002cee <HAL_TIM_PWM_Init+0x7e>
 8002ca4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002ca8:	428a      	cmp	r2, r1
 8002caa:	d020      	beq.n	8002cee <HAL_TIM_PWM_Init+0x7e>
 8002cac:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8002cb0:	428a      	cmp	r2, r1
 8002cb2:	d049      	beq.n	8002d48 <HAL_TIM_PWM_Init+0xd8>
 8002cb4:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8002cb8:	428a      	cmp	r2, r1
 8002cba:	d063      	beq.n	8002d84 <HAL_TIM_PWM_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbc:	4935      	ldr	r1, [pc, #212]	; (8002d94 <HAL_TIM_PWM_Init+0x124>)
 8002cbe:	428a      	cmp	r2, r1
 8002cc0:	d05b      	beq.n	8002d7a <HAL_TIM_PWM_Init+0x10a>
 8002cc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002cc6:	428a      	cmp	r2, r1
 8002cc8:	d057      	beq.n	8002d7a <HAL_TIM_PWM_Init+0x10a>
 8002cca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002cce:	428a      	cmp	r2, r1
 8002cd0:	d053      	beq.n	8002d7a <HAL_TIM_PWM_Init+0x10a>
 8002cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cd6:	428a      	cmp	r2, r1
 8002cd8:	d04f      	beq.n	8002d7a <HAL_TIM_PWM_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cda:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8002cde:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002ce6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002cea:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cec:	e010      	b.n	8002d10 <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8002cee:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf0:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf2:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cf8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cfe:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d00:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d06:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002d08:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002d0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d0e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002d10:	2301      	movs	r3, #1
 8002d12:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d14:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002d1c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d38:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002d3c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d44:	2000      	movs	r0, #0
}
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002d48:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d4c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d52:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d58:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d5e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002d60:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d62:	68e3      	ldr	r3, [r4, #12]
 8002d64:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d66:	6863      	ldr	r3, [r4, #4]
 8002d68:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002d6a:	6963      	ldr	r3, [r4, #20]
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	e7cf      	b.n	8002d10 <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002d70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002d74:	f7ff ff7a 	bl	8002c6c <HAL_TIM_PWM_MspInit>
 8002d78:	e785      	b.n	8002c86 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d7c:	69a1      	ldr	r1, [r4, #24]
 8002d7e:	e7e9      	b.n	8002d54 <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 8002d80:	2001      	movs	r0, #1
}
 8002d82:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002d84:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d8a:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8c:	e796      	b.n	8002cbc <HAL_TIM_PWM_Init+0x4c>
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40014000 	.word	0x40014000

08002d98 <HAL_TIM_PWM_Start>:
 8002d98:	2900      	cmp	r1, #0
 8002d9a:	d154      	bne.n	8002e46 <HAL_TIM_PWM_Start+0xae>
 8002d9c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d15a      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xc2>
 8002da4:	2302      	movs	r3, #2
 8002da6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002daa:	6803      	ldr	r3, [r0, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	6a18      	ldr	r0, [r3, #32]
 8002db0:	f001 011f 	and.w	r1, r1, #31
 8002db4:	fa02 f101 	lsl.w	r1, r2, r1
 8002db8:	ea20 0001 	bic.w	r0, r0, r1
 8002dbc:	b410      	push	{r4}
 8002dbe:	6218      	str	r0, [r3, #32]
 8002dc0:	6a1a      	ldr	r2, [r3, #32]
 8002dc2:	4c3e      	ldr	r4, [pc, #248]	; (8002ebc <HAL_TIM_PWM_Start+0x124>)
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	42a3      	cmp	r3, r4
 8002dc8:	6219      	str	r1, [r3, #32]
 8002dca:	d056      	beq.n	8002e7a <HAL_TIM_PWM_Start+0xe2>
 8002dcc:	4a3c      	ldr	r2, [pc, #240]	; (8002ec0 <HAL_TIM_PWM_Start+0x128>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00f      	beq.n	8002df2 <HAL_TIM_PWM_Start+0x5a>
 8002dd2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00b      	beq.n	8002df2 <HAL_TIM_PWM_Start+0x5a>
 8002dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_TIM_PWM_Start+0x5a>
 8002de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_PWM_Start+0x5a>
 8002dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d103      	bne.n	8002dfa <HAL_TIM_PWM_Start+0x62>
 8002df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d012      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x8e>
 8002e00:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <HAL_TIM_PWM_Start+0x12c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00f      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x8e>
 8002e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x8e>
 8002e0e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x8e>
 8002e16:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x8e>
 8002e1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d107      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x9e>
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_TIM_PWM_Start+0x130>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	2a06      	cmp	r2, #6
 8002e2e:	d016      	beq.n	8002e5e <HAL_TIM_PWM_Start+0xc6>
 8002e30:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e34:	d013      	beq.n	8002e5e <HAL_TIM_PWM_Start+0xc6>
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	2000      	movs	r0, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4770      	bx	lr
 8002e46:	2904      	cmp	r1, #4
 8002e48:	d01c      	beq.n	8002e84 <HAL_TIM_PWM_Start+0xec>
 8002e4a:	2908      	cmp	r1, #8
 8002e4c:	d022      	beq.n	8002e94 <HAL_TIM_PWM_Start+0xfc>
 8002e4e:	290c      	cmp	r1, #12
 8002e50:	d109      	bne.n	8002e66 <HAL_TIM_PWM_Start+0xce>
 8002e52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d024      	beq.n	8002ea4 <HAL_TIM_PWM_Start+0x10c>
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	4770      	bx	lr
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	2910      	cmp	r1, #16
 8002e68:	d020      	beq.n	8002eac <HAL_TIM_PWM_Start+0x114>
 8002e6a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d1f3      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xc2>
 8002e72:	2302      	movs	r3, #2
 8002e74:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002e78:	e797      	b.n	8002daa <HAL_TIM_PWM_Start+0x12>
 8002e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
 8002e82:	e7d0      	b.n	8002e26 <HAL_TIM_PWM_Start+0x8e>
 8002e84:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1e6      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xc2>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002e92:	e78a      	b.n	8002daa <HAL_TIM_PWM_Start+0x12>
 8002e94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d1de      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xc2>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002ea2:	e782      	b.n	8002daa <HAL_TIM_PWM_Start+0x12>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002eaa:	e77e      	b.n	8002daa <HAL_TIM_PWM_Start+0x12>
 8002eac:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d1d2      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xc2>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002eba:	e776      	b.n	8002daa <HAL_TIM_PWM_Start+0x12>
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40013400 	.word	0x40013400
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	00010007 	.word	0x00010007

08002ecc <HAL_TIM_PWM_Start_IT>:
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	d159      	bne.n	8002f84 <HAL_TIM_PWM_Start_IT+0xb8>
 8002ed0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d15f      	bne.n	8002f98 <HAL_TIM_PWM_Start_IT+0xcc>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002ede:	6803      	ldr	r3, [r0, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	f042 0202 	orr.w	r2, r2, #2
 8002ee6:	60da      	str	r2, [r3, #12]
 8002ee8:	6a18      	ldr	r0, [r3, #32]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f001 011f 	and.w	r1, r1, #31
 8002ef0:	fa02 f101 	lsl.w	r1, r2, r1
 8002ef4:	ea20 0001 	bic.w	r0, r0, r1
 8002ef8:	b410      	push	{r4}
 8002efa:	6218      	str	r0, [r3, #32]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	4c57      	ldr	r4, [pc, #348]	; (800305c <HAL_TIM_PWM_Start_IT+0x190>)
 8002f00:	4311      	orrs	r1, r2
 8002f02:	42a3      	cmp	r3, r4
 8002f04:	6219      	str	r1, [r3, #32]
 8002f06:	f000 809a 	beq.w	800303e <HAL_TIM_PWM_Start_IT+0x172>
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <HAL_TIM_PWM_Start_IT+0x194>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00f      	beq.n	8002f30 <HAL_TIM_PWM_Start_IT+0x64>
 8002f10:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <HAL_TIM_PWM_Start_IT+0x64>
 8002f18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <HAL_TIM_PWM_Start_IT+0x64>
 8002f20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <HAL_TIM_PWM_Start_IT+0x64>
 8002f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d103      	bne.n	8002f38 <HAL_TIM_PWM_Start_IT+0x6c>
 8002f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d012      	beq.n	8002f64 <HAL_TIM_PWM_Start_IT+0x98>
 8002f3e:	4a49      	ldr	r2, [pc, #292]	; (8003064 <HAL_TIM_PWM_Start_IT+0x198>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00f      	beq.n	8002f64 <HAL_TIM_PWM_Start_IT+0x98>
 8002f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <HAL_TIM_PWM_Start_IT+0x98>
 8002f4c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <HAL_TIM_PWM_Start_IT+0x98>
 8002f54:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <HAL_TIM_PWM_Start_IT+0x98>
 8002f5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_PWM_Start_IT+0xa8>
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	4a40      	ldr	r2, [pc, #256]	; (8003068 <HAL_TIM_PWM_Start_IT+0x19c>)
 8002f68:	400a      	ands	r2, r1
 8002f6a:	2a06      	cmp	r2, #6
 8002f6c:	d016      	beq.n	8002f9c <HAL_TIM_PWM_Start_IT+0xd0>
 8002f6e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002f72:	d013      	beq.n	8002f9c <HAL_TIM_PWM_Start_IT+0xd0>
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	2000      	movs	r0, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	4770      	bx	lr
 8002f84:	2904      	cmp	r1, #4
 8002f86:	d044      	beq.n	8003012 <HAL_TIM_PWM_Start_IT+0x146>
 8002f88:	2908      	cmp	r1, #8
 8002f8a:	d035      	beq.n	8002ff8 <HAL_TIM_PWM_Start_IT+0x12c>
 8002f8c:	290c      	cmp	r1, #12
 8002f8e:	d109      	bne.n	8002fa4 <HAL_TIM_PWM_Start_IT+0xd8>
 8002f90:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d049      	beq.n	800302c <HAL_TIM_PWM_Start_IT+0x160>
 8002f98:	2001      	movs	r0, #1
 8002f9a:	4770      	bx	lr
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	2910      	cmp	r1, #16
 8002fa6:	d04f      	beq.n	8003048 <HAL_TIM_PWM_Start_IT+0x17c>
 8002fa8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d1f3      	bne.n	8002f98 <HAL_TIM_PWM_Start_IT+0xcc>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002fb6:	290c      	cmp	r1, #12
 8002fb8:	d81c      	bhi.n	8002ff4 <HAL_TIM_PWM_Start_IT+0x128>
 8002fba:	a301      	add	r3, pc, #4	; (adr r3, 8002fc0 <HAL_TIM_PWM_Start_IT+0xf4>)
 8002fbc:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002fc0:	08002edf 	.word	0x08002edf
 8002fc4:	08002ff5 	.word	0x08002ff5
 8002fc8:	08002ff5 	.word	0x08002ff5
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	08003021 	.word	0x08003021
 8002fd4:	08002ff5 	.word	0x08002ff5
 8002fd8:	08002ff5 	.word	0x08002ff5
 8002fdc:	08002ff5 	.word	0x08002ff5
 8002fe0:	08003007 	.word	0x08003007
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	08002ff5 	.word	0x08002ff5
 8002fec:	08002ff5 	.word	0x08002ff5
 8002ff0:	08003033 	.word	0x08003033
 8002ff4:	6803      	ldr	r3, [r0, #0]
 8002ff6:	e777      	b.n	8002ee8 <HAL_TIM_PWM_Start_IT+0x1c>
 8002ff8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d1cb      	bne.n	8002f98 <HAL_TIM_PWM_Start_IT+0xcc>
 8003000:	2302      	movs	r3, #2
 8003002:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003006:	6803      	ldr	r3, [r0, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	f042 0208 	orr.w	r2, r2, #8
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	e76a      	b.n	8002ee8 <HAL_TIM_PWM_Start_IT+0x1c>
 8003012:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003016:	2b01      	cmp	r3, #1
 8003018:	d1be      	bne.n	8002f98 <HAL_TIM_PWM_Start_IT+0xcc>
 800301a:	2302      	movs	r3, #2
 800301c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003020:	6803      	ldr	r3, [r0, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	f042 0204 	orr.w	r2, r2, #4
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	e75d      	b.n	8002ee8 <HAL_TIM_PWM_Start_IT+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003032:	6803      	ldr	r3, [r0, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	f042 0210 	orr.w	r2, r2, #16
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	e754      	b.n	8002ee8 <HAL_TIM_PWM_Start_IT+0x1c>
 800303e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
 8003046:	e78d      	b.n	8002f64 <HAL_TIM_PWM_Start_IT+0x98>
 8003048:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800304c:	2b01      	cmp	r3, #1
 800304e:	d1a3      	bne.n	8002f98 <HAL_TIM_PWM_Start_IT+0xcc>
 8003050:	2302      	movs	r3, #2
 8003052:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003056:	6803      	ldr	r3, [r0, #0]
 8003058:	e746      	b.n	8002ee8 <HAL_TIM_PWM_Start_IT+0x1c>
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40013400 	.word	0x40013400
 8003064:	40000400 	.word	0x40000400
 8003068:	00010007 	.word	0x00010007

0800306c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800306c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d073      	beq.n	800315c <HAL_TIM_ConfigClockSource+0xf0>
{
 8003074:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8003076:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8003078:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800307a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800307c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003084:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003086:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003088:	4c4a      	ldr	r4, [pc, #296]	; (80031b4 <HAL_TIM_ConfigClockSource+0x148>)
  switch (sClockSourceConfig->ClockSource)
 800308a:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308c:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8003090:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003092:	d065      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0xf4>
 8003094:	d831      	bhi.n	80030fa <HAL_TIM_ConfigClockSource+0x8e>
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d048      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xc0>
 800309a:	d921      	bls.n	80030e0 <HAL_TIM_ConfigClockSource+0x74>
 800309c:	2b50      	cmp	r3, #80	; 0x50
 800309e:	d116      	bne.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a0:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a4:	684c      	ldr	r4, [r1, #4]
 80030a6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a8:	f026 0601 	bic.w	r6, r6, #1
 80030ac:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ae:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80030bc:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030be:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80030c0:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c2:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030cc:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80030ce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	2201      	movs	r2, #1
 80030d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80030da:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80030dc:	4618      	mov	r0, r3
}
 80030de:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d002      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x7e>
 80030e4:	d91e      	bls.n	8003124 <HAL_TIM_ConfigClockSource+0xb8>
 80030e6:	2b30      	cmp	r3, #48	; 0x30
 80030e8:	d1f1      	bne.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 80030ea:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030f0:	430b      	orrs	r3, r1
 80030f2:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80030f6:	6093      	str	r3, [r2, #8]
}
 80030f8:	e7e9      	b.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80030fa:	2b70      	cmp	r3, #112	; 0x70
 80030fc:	d049      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x126>
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003102:	d1e4      	bne.n	80030ce <HAL_TIM_ConfigClockSource+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003104:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003108:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800310a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800310c:	432b      	orrs	r3, r5
 800310e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003112:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003116:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003118:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311a:	6893      	ldr	r3, [r2, #8]
 800311c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003120:	6093      	str	r3, [r2, #8]
      break;
 8003122:	e7d4      	b.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003124:	f033 0110 	bics.w	r1, r3, #16
 8003128:	d1d1      	bne.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
 800312a:	e7de      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 800312c:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312e:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003130:	684c      	ldr	r4, [r1, #4]
 8003132:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003134:	f026 0601 	bic.w	r6, r6, #1
 8003138:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313a:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003144:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003148:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800314a:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800314c:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800314e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003154:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003158:	6093      	str	r3, [r2, #8]
}
 800315a:	e7b8      	b.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 800315c:	2002      	movs	r0, #2
}
 800315e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003160:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003162:	684d      	ldr	r5, [r1, #4]
 8003164:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003166:	f024 0410 	bic.w	r4, r4, #16
 800316a:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316c:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 800316e:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003170:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003178:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800317c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003180:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003182:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003184:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800318a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800318e:	6093      	str	r3, [r2, #8]
}
 8003190:	e79d      	b.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003192:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003196:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003198:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319a:	432b      	orrs	r3, r5
 800319c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80031a6:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80031a8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80031ae:	6093      	str	r3, [r2, #8]
      break;
 80031b0:	e78d      	b.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
 80031b2:	bf00      	nop
 80031b4:	fffe0088 	.word	0xfffe0088

080031b8 <HAL_TIM_PeriodElapsedCallback>:
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop

080031bc <HAL_TIM_OC_DelayElapsedCallback>:
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <HAL_TIM_IC_CaptureCallback>:
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop

080031c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop

080031c8 <HAL_TIM_TriggerCallback>:
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop

080031cc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031cc:	6803      	ldr	r3, [r0, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	0791      	lsls	r1, r2, #30
{
 80031d2:	b510      	push	{r4, lr}
 80031d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d6:	d502      	bpl.n	80031de <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	0792      	lsls	r2, r2, #30
 80031dc:	d468      	bmi.n	80032b0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	0752      	lsls	r2, r2, #29
 80031e2:	d502      	bpl.n	80031ea <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	0750      	lsls	r0, r2, #29
 80031e8:	d44f      	bmi.n	800328a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	0711      	lsls	r1, r2, #28
 80031ee:	d502      	bpl.n	80031f6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	0712      	lsls	r2, r2, #28
 80031f4:	d437      	bmi.n	8003266 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	06d0      	lsls	r0, r2, #27
 80031fa:	d502      	bpl.n	8003202 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	06d1      	lsls	r1, r2, #27
 8003200:	d41e      	bmi.n	8003240 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	07d2      	lsls	r2, r2, #31
 8003206:	d502      	bpl.n	800320e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	07d0      	lsls	r0, r2, #31
 800320c:	d469      	bmi.n	80032e2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	0611      	lsls	r1, r2, #24
 8003212:	d502      	bpl.n	800321a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	0612      	lsls	r2, r2, #24
 8003218:	d46b      	bmi.n	80032f2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	05d0      	lsls	r0, r2, #23
 800321e:	d502      	bpl.n	8003226 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	0611      	lsls	r1, r2, #24
 8003224:	d46d      	bmi.n	8003302 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	0652      	lsls	r2, r2, #25
 800322a:	d502      	bpl.n	8003232 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	0650      	lsls	r0, r2, #25
 8003230:	d46f      	bmi.n	8003312 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	0691      	lsls	r1, r2, #26
 8003236:	d502      	bpl.n	800323e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	0692      	lsls	r2, r2, #26
 800323c:	d449      	bmi.n	80032d2 <HAL_TIM_IRQHandler+0x106>
}
 800323e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003240:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003244:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003246:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003248:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003250:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003252:	d16f      	bne.n	8003334 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003254:	f7ff ffb2 	bl	80031bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	4620      	mov	r0, r4
 800325a:	f7ff ffb3 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	2200      	movs	r2, #0
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	7722      	strb	r2, [r4, #28]
 8003264:	e7cd      	b.n	8003202 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003266:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800326c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003274:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003276:	d15a      	bne.n	800332e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003278:	f7ff ffa0 	bl	80031bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff ffa1 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	2200      	movs	r2, #0
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	7722      	strb	r2, [r4, #28]
 8003288:	e7b5      	b.n	80031f6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800328a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800328e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003290:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003292:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800329a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800329c:	d144      	bne.n	8003328 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	f7ff ff8d 	bl	80031bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a2:	4620      	mov	r0, r4
 80032a4:	f7ff ff8e 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a8:	2200      	movs	r2, #0
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	7722      	strb	r2, [r4, #28]
 80032ae:	e79c      	b.n	80031ea <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	0799      	lsls	r1, r3, #30
 80032be:	d130      	bne.n	8003322 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c0:	f7ff ff7c 	bl	80031bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff ff7d 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	2200      	movs	r2, #0
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	7722      	strb	r2, [r4, #28]
 80032d0:	e785      	b.n	80031de <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80032d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d8:	611a      	str	r2, [r3, #16]
}
 80032da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80032de:	f000 ba5f 	b.w	80037a0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e2:	f06f 0201 	mvn.w	r2, #1
 80032e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ff65 	bl	80031b8 <HAL_TIM_PeriodElapsedCallback>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	e78d      	b.n	800320e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 fa53 	bl	80037a4 <HAL_TIMEx_BreakCallback>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	e78b      	b.n	800321a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003302:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003306:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003308:	4620      	mov	r0, r4
 800330a:	f000 fa4d 	bl	80037a8 <HAL_TIMEx_Break2Callback>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	e789      	b.n	8003226 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003312:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003316:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003318:	4620      	mov	r0, r4
 800331a:	f7ff ff55 	bl	80031c8 <HAL_TIM_TriggerCallback>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	e787      	b.n	8003232 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8003322:	f7ff ff4d 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8003326:	e7d0      	b.n	80032ca <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003328:	f7ff ff4a 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 800332c:	e7bc      	b.n	80032a8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	f7ff ff47 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8003332:	e7a6      	b.n	8003282 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003334:	f7ff ff44 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8003338:	e791      	b.n	800325e <HAL_TIM_IRQHandler+0x92>
 800333a:	bf00      	nop

0800333c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333c:	6a03      	ldr	r3, [r0, #32]
 800333e:	f023 0310 	bic.w	r3, r3, #16
 8003342:	6203      	str	r3, [r0, #32]
{
 8003344:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8003346:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003348:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800334a:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800334c:	4f21      	ldr	r7, [pc, #132]	; (80033d4 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800334e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003350:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003352:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8003356:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800335a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800335e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003360:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003364:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003368:	d016      	beq.n	8003398 <TIM_OC2_SetConfig+0x5c>
 800336a:	4c1b      	ldr	r4, [pc, #108]	; (80033d8 <TIM_OC2_SetConfig+0x9c>)
 800336c:	42a0      	cmp	r0, r4
 800336e:	d013      	beq.n	8003398 <TIM_OC2_SetConfig+0x5c>
 8003370:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003374:	42a0      	cmp	r0, r4
 8003376:	d024      	beq.n	80033c2 <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003378:	4c18      	ldr	r4, [pc, #96]	; (80033dc <TIM_OC2_SetConfig+0xa0>)
 800337a:	42a0      	cmp	r0, r4
 800337c:	d013      	beq.n	80033a6 <TIM_OC2_SetConfig+0x6a>
 800337e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003382:	42a0      	cmp	r0, r4
 8003384:	d00f      	beq.n	80033a6 <TIM_OC2_SetConfig+0x6a>
 8003386:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800338a:	42a0      	cmp	r0, r4
 800338c:	d00b      	beq.n	80033a6 <TIM_OC2_SetConfig+0x6a>
 800338e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003392:	42a0      	cmp	r0, r4
 8003394:	d10e      	bne.n	80033b4 <TIM_OC2_SetConfig+0x78>
 8003396:	e006      	b.n	80033a6 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003398:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800339a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800339e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80033a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033a6:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033aa:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ae:	432c      	orrs	r4, r5
 80033b0:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80033b4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80033b6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033b8:	6182      	str	r2, [r0, #24]
}
 80033ba:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80033bc:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80033be:	6203      	str	r3, [r0, #32]
}
 80033c0:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80033cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d0:	e7d2      	b.n	8003378 <TIM_OC2_SetConfig+0x3c>
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40013400 	.word	0x40013400
 80033dc:	40014000 	.word	0x40014000

080033e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80033e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	f000 8124 	beq.w	8003634 <HAL_TIM_PWM_ConfigChannel+0x254>
 80033ec:	2301      	movs	r3, #1
 80033ee:	4604      	mov	r4, r0
 80033f0:	460d      	mov	r5, r1
 80033f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80033f6:	2a14      	cmp	r2, #20
 80033f8:	d84e      	bhi.n	8003498 <HAL_TIM_PWM_ConfigChannel+0xb8>
 80033fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80033fe:	0098      	.short	0x0098
 8003400:	004d004d 	.word	0x004d004d
 8003404:	00ac004d 	.word	0x00ac004d
 8003408:	004d004d 	.word	0x004d004d
 800340c:	00c1004d 	.word	0x00c1004d
 8003410:	004d004d 	.word	0x004d004d
 8003414:	0015004d 	.word	0x0015004d
 8003418:	004d004d 	.word	0x004d004d
 800341c:	00d5004d 	.word	0x00d5004d
 8003420:	004d004d 	.word	0x004d004d
 8003424:	0051004d 	.word	0x0051004d
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003428:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800342a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800342e:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003432:	4e89      	ldr	r6, [pc, #548]	; (8003658 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003434:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003438:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800343a:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800343c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800343e:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003440:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8003444:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003448:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800344e:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003452:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003456:	d008      	beq.n	800346a <HAL_TIM_PWM_ConfigChannel+0x8a>
 8003458:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800345c:	42b3      	cmp	r3, r6
 800345e:	d004      	beq.n	800346a <HAL_TIM_PWM_ConfigChannel+0x8a>
 8003460:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003464:	42b3      	cmp	r3, r6
 8003466:	f040 80e7 	bne.w	8003638 <HAL_TIM_PWM_ConfigChannel+0x258>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800346a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800346c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003470:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8003474:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003476:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003478:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800347a:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800347c:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800347e:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003480:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003482:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003486:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003488:	69d9      	ldr	r1, [r3, #28]
 800348a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800348e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003496:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003498:	2000      	movs	r0, #0
 800349a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034a0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034a6:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034aa:	4e6b      	ldr	r6, [pc, #428]	; (8003658 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034ac:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 80034b0:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80034b2:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80034b4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80034b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034c6:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ce:	d013      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0x118>
 80034d0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80034d4:	42b3      	cmp	r3, r6
 80034d6:	d00f      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0x118>
 80034d8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80034dc:	42b3      	cmp	r3, r6
 80034de:	d00b      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0x118>
 80034e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80034e4:	42b3      	cmp	r3, r6
 80034e6:	d007      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0x118>
 80034e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80034ec:	42b3      	cmp	r3, r6
 80034ee:	d003      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0x118>
 80034f0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80034f4:	42b3      	cmp	r3, r6
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x122>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034f8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034fa:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034fe:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8003502:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003504:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003508:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 800350a:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800350c:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800350e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003510:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003514:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003516:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003518:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800351c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800351e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003520:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8003524:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003528:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800352c:	e7b7      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800352e:	6800      	ldr	r0, [r0, #0]
 8003530:	f7ff fa36 	bl	80029a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003534:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003536:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003538:	6999      	ldr	r1, [r3, #24]
 800353a:	f041 0108 	orr.w	r1, r1, #8
 800353e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003540:	6999      	ldr	r1, [r3, #24]
 8003542:	f021 0104 	bic.w	r1, r1, #4
 8003546:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800354c:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800354e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003550:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003554:	e7a3      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003556:	6800      	ldr	r0, [r0, #0]
 8003558:	f7ff fef0 	bl	800333c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800355c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800355e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003560:	6999      	ldr	r1, [r3, #24]
 8003562:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003566:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800356e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8003576:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003578:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800357a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800357e:	e78e      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003580:	6800      	ldr	r0, [r0, #0]
 8003582:	f7ff fa4f 	bl	8002a24 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003586:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003588:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800358a:	69d9      	ldr	r1, [r3, #28]
 800358c:	f041 0108 	orr.w	r1, r1, #8
 8003590:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	f021 0104 	bic.w	r1, r1, #4
 8003598:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800359e:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035a0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80035a2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80035a6:	e77a      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035a8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035aa:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035ae:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	4e29      	ldr	r6, [pc, #164]	; (8003658 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035b4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80035b8:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80035ba:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80035bc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80035be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80035c4:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035cc:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80035d2:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d6:	d013      	beq.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x220>
 80035d8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80035dc:	42b3      	cmp	r3, r6
 80035de:	d00f      	beq.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x220>
 80035e0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80035e4:	42b3      	cmp	r3, r6
 80035e6:	d00b      	beq.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x220>
 80035e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035ec:	42b3      	cmp	r3, r6
 80035ee:	d007      	beq.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x220>
 80035f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035f4:	42b3      	cmp	r3, r6
 80035f6:	d003      	beq.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x220>
 80035f8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80035fc:	42b3      	cmp	r3, r6
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_ConfigChannel+0x22a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003600:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003602:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003606:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800360a:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800360c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003610:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8003612:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003614:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003616:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003618:	f041 0108 	orr.w	r1, r1, #8
 800361c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800361e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003620:	f021 0104 	bic.w	r1, r1, #4
 8003624:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003626:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003628:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800362a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800362e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003632:	e734      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0xbe>
  __HAL_LOCK(htim);
 8003634:	2002      	movs	r0, #2
}
 8003636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003638:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800363c:	42b3      	cmp	r3, r6
 800363e:	f43f af14 	beq.w	800346a <HAL_TIM_PWM_ConfigChannel+0x8a>
 8003642:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003646:	42b3      	cmp	r3, r6
 8003648:	f43f af0f 	beq.w	800346a <HAL_TIM_PWM_ConfigChannel+0x8a>
 800364c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003650:	42b3      	cmp	r3, r6
 8003652:	f47f af0f 	bne.w	8003474 <HAL_TIM_PWM_ConfigChannel+0x94>
 8003656:	e708      	b.n	800346a <HAL_TIM_PWM_ConfigChannel+0x8a>
 8003658:	40012c00 	.word	0x40012c00

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800365c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d04e      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 8003664:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003666:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003668:	4c27      	ldr	r4, [pc, #156]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 800366a:	2202      	movs	r2, #2
 800366c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003670:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 8003672:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003674:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003676:	d03a      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003678:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800367c:	42a3      	cmp	r3, r4
 800367e:	d02c      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003680:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003684:	42a3      	cmp	r3, r4
 8003686:	d028      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003688:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800368a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800368e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003696:	d012      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800369e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80036a6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80036ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80036b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d104      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036be:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c4:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c6:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80036c8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	2201      	movs	r2, #1
 80036cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80036d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80036d4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80036d6:	4618      	mov	r0, r3
}
 80036d8:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036da:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036e2:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e8:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 80036ea:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ec:	e7d1      	b.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ee:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036f6:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fc:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 80036fe:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	e7dd      	b.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 8003702:	2002      	movs	r0, #2
}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40000400 	.word	0x40000400

08003710 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003710:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d03f      	beq.n	8003798 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 8003718:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800371a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800371e:	4602      	mov	r2, r0
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003724:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003728:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800372a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800372e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003734:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003738:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800373a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800373e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003744:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003746:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003748:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800374a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800374e:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003750:	4c12      	ldr	r4, [pc, #72]	; (800379c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003752:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003754:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003758:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800375a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800375e:	d007      	beq.n	8003770 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8003760:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003764:	42a0      	cmp	r0, r4
 8003766:	d003      	beq.n	8003770 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8003768:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800376c:	42a0      	cmp	r0, r4
 800376e:	d10c      	bne.n	800378a <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003770:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8003772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003776:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800377a:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003782:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003784:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003788:	430b      	orrs	r3, r1
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800378a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800378c:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800378e:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8003792:	4608      	mov	r0, r1
}
 8003794:	bc30      	pop	{r4, r5}
 8003796:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003798:	2002      	movs	r0, #2
}
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00

080037a0 <HAL_TIMEx_CommutCallback>:
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop

080037a4 <HAL_TIMEx_BreakCallback>:
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop

080037a8 <HAL_TIMEx_Break2Callback>:
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop

080037ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	4604      	mov	r4, r0
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80037b2:	2820      	cmp	r0, #32
 80037b4:	d141      	bne.n	800383a <HAL_UART_Receive_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b6:	2900      	cmp	r1, #0
 80037b8:	d03d      	beq.n	8003836 <HAL_UART_Receive_DMA+0x8a>
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d03b      	beq.n	8003836 <HAL_UART_Receive_DMA+0x8a>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80037be:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d039      	beq.n	800383a <HAL_UART_Receive_DMA+0x8e>

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	2300      	movs	r3, #0

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037c8:	6825      	ldr	r5, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ca:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_LOCK(huart);
 80037cc:	2001      	movs	r0, #1
 80037ce:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037d2:	686b      	ldr	r3, [r5, #4]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	d503      	bpl.n	80037e0 <HAL_UART_Receive_DMA+0x34>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037de:	602b      	str	r3, [r5, #0]
  huart->RxXferSize = Size;

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;

  if (huart->hdmarx != NULL)
 80037e0:	6f20      	ldr	r0, [r4, #112]	; 0x70
  huart->pRxBuffPtr = pData;
 80037e2:	6561      	str	r1, [r4, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	2600      	movs	r6, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e6:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  huart->RxXferSize = Size;
 80037ec:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f0:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80037f2:	b180      	cbz	r0, 8003816 <HAL_UART_Receive_DMA+0x6a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037f4:	4f16      	ldr	r7, [pc, #88]	; (8003850 <HAL_UART_Receive_DMA+0xa4>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037f6:	f8df c060 	ldr.w	ip, [pc, #96]	; 8003858 <HAL_UART_Receive_DMA+0xac>

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037fa:	6346      	str	r6, [r0, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80037fc:	4613      	mov	r3, r2
 80037fe:	460a      	mov	r2, r1
 8003800:	f105 0124 	add.w	r1, r5, #36	; 0x24
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003804:	4d13      	ldr	r5, [pc, #76]	; (8003854 <HAL_UART_Receive_DMA+0xa8>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003806:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800380a:	e9c0 750b 	strd	r7, r5, [r0, #44]	; 0x2c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800380e:	f7fe f99b 	bl	8001b48 <HAL_DMA_Start_IT>
 8003812:	b9a0      	cbnz	r0, 800383e <HAL_UART_Receive_DMA+0x92>
 8003814:	6825      	ldr	r5, [r4, #0]
      huart->gState = HAL_UART_STATE_READY;

      return HAL_ERROR;
    }
  }
  __HAL_UNLOCK(huart);
 8003816:	2000      	movs	r0, #0
 8003818:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003822:	602b      	str	r3, [r5, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	68ab      	ldr	r3, [r5, #8]
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	60ab      	str	r3, [r5, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382c:	68ab      	ldr	r3, [r5, #8]
 800382e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003832:	60ab      	str	r3, [r5, #8]
}
 8003834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003836:	2001      	movs	r0, #1
}
 8003838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800383a:	2002      	movs	r0, #2
}
 800383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800383e:	2210      	movs	r2, #16
      huart->gState = HAL_UART_STATE_READY;
 8003840:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8003842:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003846:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
      huart->gState = HAL_UART_STATE_READY;
 800384c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003850:	080038e1 	.word	0x080038e1
 8003854:	08003869 	.word	0x08003869
 8003858:	080038fd 	.word	0x080038fd

0800385c <HAL_UART_RxCpltCallback>:
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop

08003860 <HAL_UART_RxHalfCpltCallback>:
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <HAL_UART_ErrorCallback>:
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003868:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800386a:	6803      	ldr	r3, [r0, #0]
{
 800386c:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800386e:	6f84      	ldr	r4, [r0, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003870:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	0612      	lsls	r2, r2, #24
 8003876:	d501      	bpl.n	800387c <UART_DMAError+0x14>
 8003878:	2c21      	cmp	r4, #33	; 0x21
 800387a:	d025      	beq.n	80038c8 <UART_DMAError+0x60>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	d501      	bpl.n	8003886 <UART_DMAError+0x1e>
 8003882:	2922      	cmp	r1, #34	; 0x22
 8003884:	d008      	beq.n	8003898 <UART_DMAError+0x30>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003886:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800388a:	f043 0310 	orr.w	r3, r3, #16
 800388e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003892:	f7ff ffe7 	bl	8003864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003896:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8003898:	2200      	movs	r2, #0
 800389a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80038b0:	2a01      	cmp	r2, #1
 80038b2:	d103      	bne.n	80038bc <UART_DMAError+0x54>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f022 0210 	bic.w	r2, r2, #16
 80038ba:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038bc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	2220      	movs	r2, #32
 80038c0:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->RxISR = NULL;
 80038c2:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c4:	6603      	str	r3, [r0, #96]	; 0x60
}
 80038c6:	e7de      	b.n	8003886 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038ce:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80038d6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80038d8:	6784      	str	r4, [r0, #120]	; 0x78
}
 80038da:	e7cf      	b.n	800387c <UART_DMAError+0x14>

080038dc <HAL_UARTEx_RxEventCallback>:
}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop

080038e0 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80038e2:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d002      	beq.n	80038f0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80038ea:	f7ff ffb9 	bl	8003860 <HAL_UART_RxHalfCpltCallback>
}
 80038ee:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80038f0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80038f4:	0849      	lsrs	r1, r1, #1
 80038f6:	f7ff fff1 	bl	80038dc <HAL_UARTEx_RxEventCallback>
}
 80038fa:	bd08      	pop	{r3, pc}

080038fc <UART_DMAReceiveCplt>:
{
 80038fc:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80038fe:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003900:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003902:	2b20      	cmp	r3, #32
 8003904:	d014      	beq.n	8003930 <UART_DMAReceiveCplt+0x34>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003906:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8003908:	2200      	movs	r2, #0
 800390a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003914:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391e:	689a      	ldr	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8003920:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003926:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8003928:	67c1      	str	r1, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800392c:	2a01      	cmp	r2, #1
 800392e:	d005      	beq.n	800393c <UART_DMAReceiveCplt+0x40>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003930:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003932:	2b01      	cmp	r3, #1
 8003934:	d009      	beq.n	800394a <UART_DMAReceiveCplt+0x4e>
    HAL_UART_RxCpltCallback(huart);
 8003936:	f7ff ff91 	bl	800385c <HAL_UART_RxCpltCallback>
}
 800393a:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f022 0210 	bic.w	r2, r2, #16
 8003942:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003944:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003946:	2b01      	cmp	r3, #1
 8003948:	d1f5      	bne.n	8003936 <UART_DMAReceiveCplt+0x3a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800394a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800394e:	f7ff ffc5 	bl	80038dc <HAL_UARTEx_RxEventCallback>
}
 8003952:	bd08      	pop	{r3, pc}

08003954 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003956:	07da      	lsls	r2, r3, #31
{
 8003958:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800395a:	d506      	bpl.n	800396a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800395c:	6801      	ldr	r1, [r0, #0]
 800395e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003960:	684a      	ldr	r2, [r1, #4]
 8003962:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003966:	4322      	orrs	r2, r4
 8003968:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800396a:	079c      	lsls	r4, r3, #30
 800396c:	d506      	bpl.n	800397c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396e:	6801      	ldr	r1, [r0, #0]
 8003970:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003972:	684a      	ldr	r2, [r1, #4]
 8003974:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003978:	4322      	orrs	r2, r4
 800397a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800397c:	0759      	lsls	r1, r3, #29
 800397e:	d506      	bpl.n	800398e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003980:	6801      	ldr	r1, [r0, #0]
 8003982:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003984:	684a      	ldr	r2, [r1, #4]
 8003986:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800398a:	4322      	orrs	r2, r4
 800398c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800398e:	071a      	lsls	r2, r3, #28
 8003990:	d506      	bpl.n	80039a0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003992:	6801      	ldr	r1, [r0, #0]
 8003994:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003996:	684a      	ldr	r2, [r1, #4]
 8003998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800399c:	4322      	orrs	r2, r4
 800399e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039a0:	06dc      	lsls	r4, r3, #27
 80039a2:	d506      	bpl.n	80039b2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039a4:	6801      	ldr	r1, [r0, #0]
 80039a6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80039a8:	688a      	ldr	r2, [r1, #8]
 80039aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039ae:	4322      	orrs	r2, r4
 80039b0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039b2:	0699      	lsls	r1, r3, #26
 80039b4:	d506      	bpl.n	80039c4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039b6:	6801      	ldr	r1, [r0, #0]
 80039b8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80039ba:	688a      	ldr	r2, [r1, #8]
 80039bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c0:	4322      	orrs	r2, r4
 80039c2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c4:	065a      	lsls	r2, r3, #25
 80039c6:	d509      	bpl.n	80039dc <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80039cc:	684a      	ldr	r2, [r1, #4]
 80039ce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80039d2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039d8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039da:	d00b      	beq.n	80039f4 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	d506      	bpl.n	80039ee <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e0:	6802      	ldr	r2, [r0, #0]
 80039e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80039e4:	6853      	ldr	r3, [r2, #4]
 80039e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6053      	str	r3, [r2, #4]
}
 80039ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039f2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039f4:	684a      	ldr	r2, [r1, #4]
 80039f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80039f8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80039fc:	4322      	orrs	r2, r4
 80039fe:	604a      	str	r2, [r1, #4]
 8003a00:	e7ec      	b.n	80039dc <UART_AdvFeatureConfig+0x88>
 8003a02:	bf00      	nop

08003a04 <UART_CheckIdleState>:
{
 8003a04:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a06:	2300      	movs	r3, #0
{
 8003a08:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003a0e:	f7fd fa69 	bl	8000ee4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8003a18:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a1a:	d40b      	bmi.n	8003a34 <UART_CheckIdleState+0x30>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	0752      	lsls	r2, r2, #29
 8003a20:	d42d      	bmi.n	8003a7e <UART_CheckIdleState+0x7a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8003a26:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8003a2a:	67a2      	str	r2, [r4, #120]	; 0x78
  return HAL_OK;
 8003a2c:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	0292      	lsls	r2, r2, #10
 8003a38:	d4f0      	bmi.n	8003a1c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fd fa53 	bl	8000ee4 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a40:	1b40      	subs	r0, r0, r5
 8003a42:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a46:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a48:	d22a      	bcs.n	8003aa0 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a4a:	0750      	lsls	r0, r2, #29
 8003a4c:	d5f2      	bpl.n	8003a34 <UART_CheckIdleState+0x30>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	0511      	lsls	r1, r2, #20
 8003a52:	d5ef      	bpl.n	8003a34 <UART_CheckIdleState+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a58:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a60:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8003a64:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a66:	f021 0101 	bic.w	r1, r1, #1
 8003a6a:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003a6c:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8003a6e:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8003a72:	67a2      	str	r2, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8003a76:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a78:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	0258      	lsls	r0, r3, #9
 8003a82:	d4ce      	bmi.n	8003a22 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fd fa2e 	bl	8000ee4 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a88:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	1b40      	subs	r0, r0, r5
 8003a8c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a90:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	d205      	bcs.n	8003aa0 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a94:	0751      	lsls	r1, r2, #29
 8003a96:	d5f2      	bpl.n	8003a7e <UART_CheckIdleState+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	0512      	lsls	r2, r2, #20
 8003a9c:	d5ef      	bpl.n	8003a7e <UART_CheckIdleState+0x7a>
 8003a9e:	e7d9      	b.n	8003a54 <UART_CheckIdleState+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8003aa8:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003ab0:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003ab2:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8003ab6:	67a1      	str	r1, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8003ab8:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8003aba:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	bf00      	nop

08003ac0 <HAL_UART_Init>:
  if (huart == NULL)
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	f000 8128 	beq.w	8003d16 <HAL_UART_Init+0x256>
{
 8003ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003aca:	4604      	mov	r4, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d036      	beq.n	8003b3e <HAL_UART_Init+0x7e>
  __HAL_UART_DISABLE(huart);
 8003ad0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad2:	6927      	ldr	r7, [r4, #16]
 8003ad4:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ad6:	499c      	ldr	r1, [pc, #624]	; (8003d48 <HAL_UART_Init+0x288>)
  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	2224      	movs	r2, #36	; 0x24
 8003ada:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003adc:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ade:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8003ae0:	f020 0001 	bic.w	r0, r0, #1
 8003ae4:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae8:	69e0      	ldr	r0, [r4, #28]
 8003aea:	433a      	orrs	r2, r7
 8003aec:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aee:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003afa:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8003afc:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afe:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003b02:	4329      	orrs	r1, r5
 8003b04:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b06:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b08:	4d90      	ldr	r5, [pc, #576]	; (8003d4c <HAL_UART_Init+0x28c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b0a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8003b0e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b10:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b12:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b14:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b16:	d017      	beq.n	8003b48 <HAL_UART_Init+0x88>
 8003b18:	4a8d      	ldr	r2, [pc, #564]	; (8003d50 <HAL_UART_Init+0x290>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d038      	beq.n	8003b90 <HAL_UART_Init+0xd0>
 8003b1e:	4a8d      	ldr	r2, [pc, #564]	; (8003d54 <HAL_UART_Init+0x294>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	f000 80e0 	beq.w	8003ce6 <HAL_UART_Init+0x226>
 8003b26:	4a8c      	ldr	r2, [pc, #560]	; (8003d58 <HAL_UART_Init+0x298>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	f000 8098 	beq.w	8003c5e <HAL_UART_Init+0x19e>
 8003b2e:	4a8b      	ldr	r2, [pc, #556]	; (8003d5c <HAL_UART_Init+0x29c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_UART_Init+0x10a>
  huart->RxISR = NULL;
 8003b34:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003b36:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8003b3e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003b42:	f7fd f869 	bl	8000c18 <HAL_UART_MspInit>
 8003b46:	e7c3      	b.n	8003ad0 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b48:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_UART_Init+0x2a0>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d874      	bhi.n	8003c40 <HAL_UART_Init+0x180>
 8003b56:	4a83      	ldr	r2, [pc, #524]	; (8003d64 <HAL_UART_Init+0x2a4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	f000 808c 	beq.w	8003c7a <HAL_UART_Init+0x1ba>
    switch (clocksource)
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d8e6      	bhi.n	8003b34 <HAL_UART_Init+0x74>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <HAL_UART_Init+0xac>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003c59 	.word	0x08003c59
 8003b70:	08003c47 	.word	0x08003c47
 8003b74:	08003c3d 	.word	0x08003c3d
 8003b78:	08003b35 	.word	0x08003b35
 8003b7c:	08003bb3 	.word	0x08003bb3
 8003b80:	08003b35 	.word	0x08003b35
 8003b84:	08003b35 	.word	0x08003b35
 8003b88:	08003b35 	.word	0x08003b35
 8003b8c:	08003bdf 	.word	0x08003bdf
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b90:	4b73      	ldr	r3, [pc, #460]	; (8003d60 <HAL_UART_Init+0x2a0>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_UART_Init+0x118>
 8003b9e:	d846      	bhi.n	8003c2e <HAL_UART_Init+0x16e>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d056      	beq.n	8003c52 <HAL_UART_Init+0x192>
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d1c4      	bne.n	8003b34 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003bae:	f000 80bd 	beq.w	8003d2c <HAL_UART_Init+0x26c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7fe fd47 	bl	8002644 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003bb6:	b9a0      	cbnz	r0, 8003be2 <HAL_UART_Init+0x122>
  huart->RxISR = NULL;
 8003bb8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003bba:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc0:	b31b      	cbz	r3, 8003c0a <HAL_UART_Init+0x14a>
    UART_AdvFeatureConfig(huart);
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff fec6 	bl	8003954 <UART_AdvFeatureConfig>
 8003bc8:	e01f      	b.n	8003c0a <HAL_UART_Init+0x14a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bca:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_UART_Init+0x2a0>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd6:	d139      	bne.n	8003c4c <HAL_UART_Init+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003bdc:	d066      	beq.n	8003cac <HAL_UART_Init+0x1ec>
        pclk = (uint32_t) LSE_VALUE;
 8003bde:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003be8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bec:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bee:	f1a0 0210 	sub.w	r2, r0, #16
 8003bf2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d89c      	bhi.n	8003b34 <HAL_UART_Init+0x74>
        huart->Instance->BRR = usartdiv;
 8003bfa:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8003bfc:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 8003bfe:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8003c00:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1db      	bne.n	8003bc2 <HAL_UART_Init+0x102>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c1a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003c22:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8003c2a:	f7ff beeb 	b.w	8003a04 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c32:	f47f af7f 	bne.w	8003b34 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c36:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c3a:	d052      	beq.n	8003ce2 <HAL_UART_Init+0x222>
 8003c3c:	484a      	ldr	r0, [pc, #296]	; (8003d68 <HAL_UART_Init+0x2a8>)
 8003c3e:	e7d0      	b.n	8003be2 <HAL_UART_Init+0x122>
 8003c40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c44:	d07c      	beq.n	8003d40 <HAL_UART_Init+0x280>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c46:	f7fe fd43 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8003c4a:	e7b4      	b.n	8003bb6 <HAL_UART_Init+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c4c:	d86a      	bhi.n	8003d24 <HAL_UART_Init+0x264>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d163      	bne.n	8003d1a <HAL_UART_Init+0x25a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c56:	d070      	beq.n	8003d3a <HAL_UART_Init+0x27a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7fe fd22 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
        break;
 8003c5c:	e7ab      	b.n	8003bb6 <HAL_UART_Init+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c5e:	4b40      	ldr	r3, [pc, #256]	; (8003d60 <HAL_UART_Init+0x2a0>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6a:	d0b5      	beq.n	8003bd8 <HAL_UART_Init+0x118>
 8003c6c:	d84f      	bhi.n	8003d0e <HAL_UART_Init+0x24e>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ef      	beq.n	8003c52 <HAL_UART_Init+0x192>
 8003c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c76:	d098      	beq.n	8003baa <HAL_UART_Init+0xea>
 8003c78:	e75c      	b.n	8003b34 <HAL_UART_Init+0x74>
    switch (clocksource)
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	f63f af5a 	bhi.w	8003b34 <HAL_UART_Init+0x74>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <HAL_UART_Init+0x1c8>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003d3b 	.word	0x08003d3b
 8003c8c:	08003d41 	.word	0x08003d41
 8003c90:	08003ce3 	.word	0x08003ce3
 8003c94:	08003b35 	.word	0x08003b35
 8003c98:	08003d2d 	.word	0x08003d2d
 8003c9c:	08003b35 	.word	0x08003b35
 8003ca0:	08003b35 	.word	0x08003b35
 8003ca4:	08003b35 	.word	0x08003b35
 8003ca8:	08003cad 	.word	0x08003cad
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cb0:	6863      	ldr	r3, [r4, #4]
 8003cb2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003cb6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cba:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cbc:	f1a3 0110 	sub.w	r1, r3, #16
 8003cc0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003cc4:	4291      	cmp	r1, r2
 8003cc6:	f63f af35 	bhi.w	8003b34 <HAL_UART_Init+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cca:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cce:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003cd2:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cd4:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003cd6:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8003cd8:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 8003cda:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8003cdc:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  return ret;
 8003ce0:	e790      	b.n	8003c04 <HAL_UART_Init+0x144>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce2:	4822      	ldr	r0, [pc, #136]	; (8003d6c <HAL_UART_Init+0x2ac>)
 8003ce4:	e7e4      	b.n	8003cb0 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_UART_Init+0x2a0>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cf2:	f43f af71 	beq.w	8003bd8 <HAL_UART_Init+0x118>
 8003cf6:	d806      	bhi.n	8003d06 <HAL_UART_Init+0x246>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0aa      	beq.n	8003c52 <HAL_UART_Init+0x192>
 8003cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d00:	f43f af53 	beq.w	8003baa <HAL_UART_Init+0xea>
 8003d04:	e716      	b.n	8003b34 <HAL_UART_Init+0x74>
 8003d06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d0a:	d094      	beq.n	8003c36 <HAL_UART_Init+0x176>
 8003d0c:	e712      	b.n	8003b34 <HAL_UART_Init+0x74>
 8003d0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d12:	d090      	beq.n	8003c36 <HAL_UART_Init+0x176>
 8003d14:	e70e      	b.n	8003b34 <HAL_UART_Init+0x74>
}
 8003d16:	2001      	movs	r0, #1
 8003d18:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1e:	f43f af44 	beq.w	8003baa <HAL_UART_Init+0xea>
 8003d22:	e707      	b.n	8003b34 <HAL_UART_Init+0x74>
 8003d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d28:	d085      	beq.n	8003c36 <HAL_UART_Init+0x176>
 8003d2a:	e703      	b.n	8003b34 <HAL_UART_Init+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2c:	f7fe fc8a 	bl	8002644 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003d30:	2800      	cmp	r0, #0
 8003d32:	f43f af41 	beq.w	8003bb8 <HAL_UART_Init+0xf8>
 8003d36:	0040      	lsls	r0, r0, #1
 8003d38:	e7ba      	b.n	8003cb0 <HAL_UART_Init+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d3a:	f7fe fcb1 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
        break;
 8003d3e:	e7f7      	b.n	8003d30 <HAL_UART_Init+0x270>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7fe fcc6 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8003d44:	e7f4      	b.n	8003d30 <HAL_UART_Init+0x270>
 8003d46:	bf00      	nop
 8003d48:	efff69f3 	.word	0xefff69f3
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	40004400 	.word	0x40004400
 8003d54:	40004800 	.word	0x40004800
 8003d58:	40004c00 	.word	0x40004c00
 8003d5c:	40005000 	.word	0x40005000
 8003d60:	40021000 	.word	0x40021000
 8003d64:	08004000 	.word	0x08004000
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	00f42400 	.word	0x00f42400

08003d70 <UART_WaitOnFlagUntilTimeout>:
{
 8003d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d78:	6804      	ldr	r4, [r0, #0]
 8003d7a:	4607      	mov	r7, r0
 8003d7c:	460e      	mov	r6, r1
 8003d7e:	4615      	mov	r5, r2
 8003d80:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d82:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003d86:	d10a      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d88:	69e3      	ldr	r3, [r4, #28]
 8003d8a:	ea36 0303 	bics.w	r3, r6, r3
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	429d      	cmp	r5, r3
 8003d96:	d0f7      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8003d98:	2000      	movs	r0, #0
}
 8003d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9e:	69e3      	ldr	r3, [r4, #28]
 8003da0:	ea36 0303 	bics.w	r3, r6, r3
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	429d      	cmp	r5, r3
 8003dac:	d1f4      	bne.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fd f899 	bl	8000ee4 <HAL_GetTick>
 8003db2:	eba0 0009 	sub.w	r0, r0, r9
 8003db6:	4540      	cmp	r0, r8
 8003db8:	d81e      	bhi.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x88>
 8003dba:	f1b8 0f00 	cmp.w	r8, #0
 8003dbe:	d01b      	beq.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x88>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc0:	683c      	ldr	r4, [r7, #0]
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	075a      	lsls	r2, r3, #29
 8003dc6:	d5dc      	bpl.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc8:	69e3      	ldr	r3, [r4, #28]
 8003dca:	051b      	lsls	r3, r3, #20
 8003dcc:	d5d9      	bpl.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dd2:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dda:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ddc:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003dde:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de0:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 8003de4:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 8003de8:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8003dea:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003dec:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003df0:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 8003df6:	e7d0      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003e04:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8003e0a:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8003e0e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8003e10:	67b9      	str	r1, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003e12:	f887 4074 	strb.w	r4, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e16:	67f9      	str	r1, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 8003e18:	e7bf      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x2a>
 8003e1a:	bf00      	nop

08003e1c <HAL_UART_Transmit>:
{
 8003e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e20:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003e22:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003e24:	2820      	cmp	r0, #32
{
 8003e26:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003e28:	d177      	bne.n	8003f1a <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8003e2a:	4688      	mov	r8, r1
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d046      	beq.n	8003ebe <HAL_UART_Transmit+0xa2>
 8003e30:	4617      	mov	r7, r2
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	d043      	beq.n	8003ebe <HAL_UART_Transmit+0xa2>
 8003e36:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8003e38:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d06c      	beq.n	8003f1a <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e40:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8003e42:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	f04f 0900 	mov.w	r9, #0
 8003e48:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    __HAL_LOCK(huart);
 8003e4c:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e50:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003e52:	f7fd f847 	bl	8000ee4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e56:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003e58:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003e60:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003e62:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e66:	d05c      	beq.n	8003f22 <HAL_UART_Transmit+0x106>
      pdata16bits = NULL;
 8003e68:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8003e6a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8003e6e:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003e70:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003e72:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8003e76:	b1b3      	cbz	r3, 8003ea6 <HAL_UART_Transmit+0x8a>
 8003e78:	6822      	ldr	r2, [r4, #0]
 8003e7a:	1c69      	adds	r1, r5, #1
 8003e7c:	d123      	bne.n	8003ec6 <HAL_UART_Transmit+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	69d3      	ldr	r3, [r2, #28]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	d5fc      	bpl.n	8003e7e <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 8003e84:	f1b8 0f00 	cmp.w	r8, #0
 8003e88:	d042      	beq.n	8003f10 <HAL_UART_Transmit+0xf4>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e8a:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003e8e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003e90:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e9c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e9      	bne.n	8003e7a <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ea6:	9500      	str	r5, [sp, #0]
 8003ea8:	4633      	mov	r3, r6
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2140      	movs	r1, #64	; 0x40
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7ff ff5e 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d14d      	bne.n	8003f54 <HAL_UART_Transmit+0x138>
    huart->gState = HAL_UART_STATE_READY;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8003ebc:	e000      	b.n	8003ec0 <HAL_UART_Transmit+0xa4>
      return  HAL_ERROR;
 8003ebe:	2001      	movs	r0, #1
}
 8003ec0:	b003      	add	sp, #12
 8003ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	69d3      	ldr	r3, [r2, #28]
 8003ec8:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8003ecc:	d1da      	bne.n	8003e84 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fd f809 	bl	8000ee4 <HAL_GetTick>
 8003ed2:	1b80      	subs	r0, r0, r6
 8003ed4:	4285      	cmp	r5, r0
 8003ed6:	d32a      	bcc.n	8003f2e <HAL_UART_Transmit+0x112>
 8003ed8:	b34d      	cbz	r5, 8003f2e <HAL_UART_Transmit+0x112>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	6813      	ldr	r3, [r2, #0]
 8003ede:	075b      	lsls	r3, r3, #29
 8003ee0:	d5cb      	bpl.n	8003e7a <HAL_UART_Transmit+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ee2:	69d3      	ldr	r3, [r2, #28]
 8003ee4:	0518      	lsls	r0, r3, #20
 8003ee6:	d5c8      	bpl.n	8003e7a <HAL_UART_Transmit+0x5e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eec:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ef4:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003ef8:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	f021 0101 	bic.w	r1, r1, #1
 8003efe:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 8003f00:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8003f02:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003f04:	f884 9074 	strb.w	r9, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f08:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f0a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8003f0e:	e7d7      	b.n	8003ec0 <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f10:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	e7b9      	b.n	8003e8e <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003f1a:	2002      	movs	r0, #2
}
 8003f1c:	b003      	add	sp, #12
 8003f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d19f      	bne.n	8003e68 <HAL_UART_Transmit+0x4c>
 8003f28:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8003f2a:	4698      	mov	r8, r3
 8003f2c:	e79d      	b.n	8003e6a <HAL_UART_Transmit+0x4e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003f3a:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8003f40:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8003f42:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f44:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003f46:	67a1      	str	r1, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003f48:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 8003f4e:	b003      	add	sp, #12
 8003f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8003f54:	2003      	movs	r0, #3
 8003f56:	e7b3      	b.n	8003ec0 <HAL_UART_Transmit+0xa4>

08003f58 <__libc_init_array>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4d0d      	ldr	r5, [pc, #52]	; (8003f90 <__libc_init_array+0x38>)
 8003f5c:	4c0d      	ldr	r4, [pc, #52]	; (8003f94 <__libc_init_array+0x3c>)
 8003f5e:	1b64      	subs	r4, r4, r5
 8003f60:	10a4      	asrs	r4, r4, #2
 8003f62:	2600      	movs	r6, #0
 8003f64:	42a6      	cmp	r6, r4
 8003f66:	d109      	bne.n	8003f7c <__libc_init_array+0x24>
 8003f68:	4d0b      	ldr	r5, [pc, #44]	; (8003f98 <__libc_init_array+0x40>)
 8003f6a:	4c0c      	ldr	r4, [pc, #48]	; (8003f9c <__libc_init_array+0x44>)
 8003f6c:	f000 f820 	bl	8003fb0 <_init>
 8003f70:	1b64      	subs	r4, r4, r5
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	2600      	movs	r6, #0
 8003f76:	42a6      	cmp	r6, r4
 8003f78:	d105      	bne.n	8003f86 <__libc_init_array+0x2e>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f80:	4798      	blx	r3
 8003f82:	3601      	adds	r6, #1
 8003f84:	e7ee      	b.n	8003f64 <__libc_init_array+0xc>
 8003f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8a:	4798      	blx	r3
 8003f8c:	3601      	adds	r6, #1
 8003f8e:	e7f2      	b.n	8003f76 <__libc_init_array+0x1e>
 8003f90:	08004004 	.word	0x08004004
 8003f94:	08004004 	.word	0x08004004
 8003f98:	08004004 	.word	0x08004004
 8003f9c:	08004008 	.word	0x08004008

08003fa0 <memset>:
 8003fa0:	4402      	add	r2, r0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d100      	bne.n	8003faa <memset+0xa>
 8003fa8:	4770      	bx	lr
 8003faa:	f803 1b01 	strb.w	r1, [r3], #1
 8003fae:	e7f9      	b.n	8003fa4 <memset+0x4>

08003fb0 <_init>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr

08003fbc <_fini>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr

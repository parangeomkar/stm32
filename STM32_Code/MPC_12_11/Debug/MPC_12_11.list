
MPC_12_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004878  08004878  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08004878  08004878  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004878  08004878  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08004880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000038  080048b8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080048b8  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf59  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034da  00000000  00000000  0003cfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000404a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002340  00000000  00000000  000410e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002220f  00000000  00000000  00043420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da94  00000000  00000000  0006562f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d32d3  00000000  00000000  000830c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  001563ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00014a43  00000000  00000000  00159110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004608 	.word	0x08004608

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08004608 	.word	0x08004608

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SVPWM>:

/**
 * This function computes SVPWM timings for TIM1
 *
 */
void SVPWM(){
 80005f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(run == 1){
 80005f4:	4b6f      	ldr	r3, [pc, #444]	; (80007b4 <SVPWM+0x1c4>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d006      	beq.n	800060a <SVPWM+0x1a>
		TIM1->CCR1 = Ta;
		TIM1->CCR2 = Tb;
		TIM1->CCR3 = Tc;

	} else {
		TIM1->CCR1 = 0;
 80005fc:	4b6e      	ldr	r3, [pc, #440]	; (80007b8 <SVPWM+0x1c8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000602:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000604:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		n = ((uint8_t)(wt/60))+1;
 800060a:	4e6c      	ldr	r6, [pc, #432]	; (80007bc <SVPWM+0x1cc>)
 800060c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80007e0 <SVPWM+0x1f0>
 8000610:	8830      	ldrh	r0, [r6, #0]
		T1 = (uint16_t)(V*sin2(n*60 - wt)/1200);
 8000612:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80007e4 <SVPWM+0x1f4>
 8000616:	4d6a      	ldr	r5, [pc, #424]	; (80007c0 <SVPWM+0x1d0>)
 8000618:	f8b8 4000 	ldrh.w	r4, [r8]
 800061c:	4f69      	ldr	r7, [pc, #420]	; (80007c4 <SVPWM+0x1d4>)
		n = ((uint8_t)(wt/60))+1;
 800061e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000622:	fba3 2300 	umull	r2, r3, r3, r0
 8000626:	095b      	lsrs	r3, r3, #5
 8000628:	3301      	adds	r3, #1
 800062a:	b2db      	uxtb	r3, r3
		T1 = (uint16_t)(V*sin2(n*60 - wt)/1200);
 800062c:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8000630:	ebc0 0082 	rsb	r0, r0, r2, lsl #2
 8000634:	b200      	sxth	r0, r0
		n = ((uint8_t)(wt/60))+1;
 8000636:	f889 3000 	strb.w	r3, [r9]
		T1 = (uint16_t)(V*sin2(n*60 - wt)/1200);
 800063a:	f000 fbcd 	bl	8000dd8 <sin2>
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60))/1200);
 800063e:	f899 3000 	ldrb.w	r3, [r9]
 8000642:	8832      	ldrh	r2, [r6, #0]
 8000644:	f8b8 8000 	ldrh.w	r8, [r8]
 8000648:	3b01      	subs	r3, #1
		T1 = (uint16_t)(V*sin2(n*60 - wt)/1200);
 800064a:	fb04 f000 	mul.w	r0, r4, r0
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60))/1200);
 800064e:	eba3 1303 	sub.w	r3, r3, r3, lsl #4
 8000652:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		T1 = (uint16_t)(V*sin2(n*60 - wt)/1200);
 8000656:	fb85 3100 	smull	r3, r1, r5, r0
 800065a:	17c3      	asrs	r3, r0, #31
 800065c:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
 8000660:	b29b      	uxth	r3, r3
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60))/1200);
 8000662:	b210      	sxth	r0, r2
		T1 = (uint16_t)(V*sin2(n*60 - wt)/1200);
 8000664:	603b      	str	r3, [r7, #0]
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60))/1200);
 8000666:	f000 fbb7 	bl	8000dd8 <sin2>
 800066a:	fb08 f000 	mul.w	r0, r8, r0
 800066e:	fb85 3500 	smull	r3, r5, r5, r0
 8000672:	17c0      	asrs	r0, r0, #31
		T0 = Ts - (T1+T2) + 5;
 8000674:	4b54      	ldr	r3, [pc, #336]	; (80007c8 <SVPWM+0x1d8>)
 8000676:	683c      	ldr	r4, [r7, #0]
 8000678:	881b      	ldrh	r3, [r3, #0]
		if(wt < 60) {
 800067a:	8832      	ldrh	r2, [r6, #0]
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60))/1200);
 800067c:	4f53      	ldr	r7, [pc, #332]	; (80007cc <SVPWM+0x1dc>)
		T0 = Ts - (T1+T2) + 5;
 800067e:	4e54      	ldr	r6, [pc, #336]	; (80007d0 <SVPWM+0x1e0>)
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60))/1200);
 8000680:	ebc0 15e5 	rsb	r5, r0, r5, asr #7
 8000684:	b2a9      	uxth	r1, r5
		T0 = Ts - (T1+T2) + 5;
 8000686:	1860      	adds	r0, r4, r1
 8000688:	1a1b      	subs	r3, r3, r0
 800068a:	3305      	adds	r3, #5
		if(wt < 60) {
 800068c:	2a3b      	cmp	r2, #59	; 0x3b
		T2 = (uint16_t)(V*sin2(wt - ((n-1)*60))/1200);
 800068e:	460d      	mov	r5, r1
 8000690:	6039      	str	r1, [r7, #0]
		T0 = Ts - (T1+T2) + 5;
 8000692:	6033      	str	r3, [r6, #0]
		if(wt < 60) {
 8000694:	d91b      	bls.n	80006ce <SVPWM+0xde>
		} else if(wt >= 60 && wt < 120) {
 8000696:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 800069a:	293b      	cmp	r1, #59	; 0x3b
 800069c:	d824      	bhi.n	80006e8 <SVPWM+0xf8>
			Ta = T1 + (T0/2);
 800069e:	b2a2      	uxth	r2, r4
 80006a0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
			Tb = T1 + T2 + (T0/2);
 80006a4:	4415      	add	r5, r2
			Ta = T1 + (T0/2);
 80006a6:	f3c3 004f 	ubfx	r0, r3, #1, #16
			Tb = T1 + T2 + (T0/2);
 80006aa:	4405      	add	r5, r0
			Ta = T1 + (T0/2);
 80006ac:	4402      	add	r2, r0
 80006ae:	4f49      	ldr	r7, [pc, #292]	; (80007d4 <SVPWM+0x1e4>)
			Tb = T1 + T2 + (T0/2);
 80006b0:	4e49      	ldr	r6, [pc, #292]	; (80007d8 <SVPWM+0x1e8>)
			Tc = (T0/2);
 80006b2:	4c4a      	ldr	r4, [pc, #296]	; (80007dc <SVPWM+0x1ec>)
			Tb = T1 + T2 + (T0/2);
 80006b4:	b2a9      	uxth	r1, r5
			Ta = T1 + (T0/2);
 80006b6:	b292      	uxth	r2, r2
 80006b8:	803a      	strh	r2, [r7, #0]
			Tb = T1 + T2 + (T0/2);
 80006ba:	8031      	strh	r1, [r6, #0]
			Tc = (T0/2);
 80006bc:	4603      	mov	r3, r0
 80006be:	460d      	mov	r5, r1
 80006c0:	8020      	strh	r0, [r4, #0]
		TIM1->CCR1 = Ta;
 80006c2:	493d      	ldr	r1, [pc, #244]	; (80007b8 <SVPWM+0x1c8>)
 80006c4:	634a      	str	r2, [r1, #52]	; 0x34
		TIM1->CCR2 = Tb;
 80006c6:	638d      	str	r5, [r1, #56]	; 0x38
		TIM1->CCR3 = Tc;
 80006c8:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80006ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			Ta = T1 + T2 + (T0/2);
 80006ce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80006d2:	4602      	mov	r2, r0
 80006d4:	f3c3 004f 	ubfx	r0, r3, #1, #16
 80006d8:	4402      	add	r2, r0
			Tb = T2 + (T0/2);
 80006da:	4405      	add	r5, r0
			Ta = T1 + T2 + (T0/2);
 80006dc:	4f3d      	ldr	r7, [pc, #244]	; (80007d4 <SVPWM+0x1e4>)
			Tb = T2 + (T0/2);
 80006de:	4e3e      	ldr	r6, [pc, #248]	; (80007d8 <SVPWM+0x1e8>)
			Tc = (T0/2);
 80006e0:	4c3e      	ldr	r4, [pc, #248]	; (80007dc <SVPWM+0x1ec>)
			Ta = T1 + T2 + (T0/2);
 80006e2:	b292      	uxth	r2, r2
			Tb = T2 + (T0/2);
 80006e4:	b2a9      	uxth	r1, r5
 80006e6:	e7e7      	b.n	80006b8 <SVPWM+0xc8>
		} else if(wt >= 120 && wt < 180) {
 80006e8:	f1a2 0178 	sub.w	r1, r2, #120	; 0x78
 80006ec:	293b      	cmp	r1, #59	; 0x3b
 80006ee:	d915      	bls.n	800071c <SVPWM+0x12c>
		} else if(wt >= 180 && wt < 240) {
 80006f0:	f1a2 01b4 	sub.w	r1, r2, #180	; 0xb4
 80006f4:	293b      	cmp	r1, #59	; 0x3b
 80006f6:	d823      	bhi.n	8000740 <SVPWM+0x150>
			Ta = (T0/2);
 80006f8:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
			Tb = T1 + (T0/2);
 80006fc:	b2a4      	uxth	r4, r4
			Ta = (T0/2);
 80006fe:	f3c2 014f 	ubfx	r1, r2, #1, #16
			Tc = T1 + T2 + (T0/2);
 8000702:	192b      	adds	r3, r5, r4
			Tb = T1 + (T0/2);
 8000704:	4f34      	ldr	r7, [pc, #208]	; (80007d8 <SVPWM+0x1e8>)
			Tc = T1 + T2 + (T0/2);
 8000706:	4e35      	ldr	r6, [pc, #212]	; (80007dc <SVPWM+0x1ec>)
			Ta = (T0/2);
 8000708:	4832      	ldr	r0, [pc, #200]	; (80007d4 <SVPWM+0x1e4>)
			Tc = T1 + T2 + (T0/2);
 800070a:	440b      	add	r3, r1
			Tb = T1 + (T0/2);
 800070c:	440c      	add	r4, r1
			Tc = T1 + T2 + (T0/2);
 800070e:	b29b      	uxth	r3, r3
			Tb = T1 + (T0/2);
 8000710:	b2a5      	uxth	r5, r4
 8000712:	460a      	mov	r2, r1
 8000714:	803d      	strh	r5, [r7, #0]
			Tc = T1 + T2 + (T0/2);
 8000716:	8033      	strh	r3, [r6, #0]
			Ta = (T0/2);
 8000718:	8001      	strh	r1, [r0, #0]
			Tc = T1 + T2 + (T0/2);
 800071a:	e7d2      	b.n	80006c2 <SVPWM+0xd2>
			Ta = (T0/2);
 800071c:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8000720:	f3c2 004f 	ubfx	r0, r2, #1, #16
			Tb = T1 + T2 + (T0/2);
 8000724:	1929      	adds	r1, r5, r4
			Tc = T2 + (T0/2);
 8000726:	182b      	adds	r3, r5, r0
 8000728:	4e2c      	ldr	r6, [pc, #176]	; (80007dc <SVPWM+0x1ec>)
			Tb = T1 + T2 + (T0/2);
 800072a:	4d2b      	ldr	r5, [pc, #172]	; (80007d8 <SVPWM+0x1e8>)
			Ta = (T0/2);
 800072c:	4c29      	ldr	r4, [pc, #164]	; (80007d4 <SVPWM+0x1e4>)
			Tb = T1 + T2 + (T0/2);
 800072e:	4401      	add	r1, r0
 8000730:	b289      	uxth	r1, r1
			Tc = T2 + (T0/2);
 8000732:	b29b      	uxth	r3, r3
			Tb = T1 + T2 + (T0/2);
 8000734:	8029      	strh	r1, [r5, #0]
			Tc = T2 + (T0/2);
 8000736:	8033      	strh	r3, [r6, #0]
 8000738:	4602      	mov	r2, r0
 800073a:	460d      	mov	r5, r1
			Ta = (T0/2);
 800073c:	8020      	strh	r0, [r4, #0]
			Tc = T2 + (T0/2);
 800073e:	e7c0      	b.n	80006c2 <SVPWM+0xd2>
		} else if(wt >= 240 && wt < 300) {
 8000740:	f1a2 01f0 	sub.w	r1, r2, #240	; 0xf0
 8000744:	293b      	cmp	r1, #59	; 0x3b
 8000746:	d812      	bhi.n	800076e <SVPWM+0x17e>
			Ta = T2 + (T0/2);
 8000748:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
			Tc = T1 + T2 + (T0/2);
 800074c:	192b      	adds	r3, r5, r4
			Ta = T2 + (T0/2);
 800074e:	f3c1 044f 	ubfx	r4, r1, #1, #16
 8000752:	192a      	adds	r2, r5, r4
 8000754:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80007d4 <SVPWM+0x1e4>
			Tc = T1 + T2 + (T0/2);
 8000758:	4f20      	ldr	r7, [pc, #128]	; (80007dc <SVPWM+0x1ec>)
			Tb = (T0/2);
 800075a:	4e1f      	ldr	r6, [pc, #124]	; (80007d8 <SVPWM+0x1e8>)
			Tc = T1 + T2 + (T0/2);
 800075c:	18e0      	adds	r0, r4, r3
			Ta = T2 + (T0/2);
 800075e:	b292      	uxth	r2, r2
			Tc = T1 + T2 + (T0/2);
 8000760:	b283      	uxth	r3, r0
 8000762:	4625      	mov	r5, r4
			Ta = T2 + (T0/2);
 8000764:	f8ac 2000 	strh.w	r2, [ip]
			Tc = T1 + T2 + (T0/2);
 8000768:	803b      	strh	r3, [r7, #0]
			Tb = (T0/2);
 800076a:	8034      	strh	r4, [r6, #0]
			Tc = T1 + T2 + (T0/2);
 800076c:	e7a9      	b.n	80006c2 <SVPWM+0xd2>
		} else if(wt >= 300 && wt < 360) {
 800076e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8000772:	2a3b      	cmp	r2, #59	; 0x3b
 8000774:	d814      	bhi.n	80007a0 <SVPWM+0x1b0>
			Ta = T1 + T2 + (T0/2);
 8000776:	b2a2      	uxth	r2, r4
 8000778:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800077c:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8000780:	4415      	add	r5, r2
 8000782:	1960      	adds	r0, r4, r5
			Tc = T1 + (T0/2);
 8000784:	1911      	adds	r1, r2, r4
			Ta = T1 + T2 + (T0/2);
 8000786:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80007d4 <SVPWM+0x1e4>
			Tc = T1 + (T0/2);
 800078a:	4f14      	ldr	r7, [pc, #80]	; (80007dc <SVPWM+0x1ec>)
			Tb = (T0/2);
 800078c:	4e12      	ldr	r6, [pc, #72]	; (80007d8 <SVPWM+0x1e8>)
			Tc = T1 + (T0/2);
 800078e:	b289      	uxth	r1, r1
			Ta = T1 + T2 + (T0/2);
 8000790:	b282      	uxth	r2, r0
 8000792:	4625      	mov	r5, r4
 8000794:	f8ac 2000 	strh.w	r2, [ip]
			Tc = T1 + (T0/2);
 8000798:	8039      	strh	r1, [r7, #0]
 800079a:	460b      	mov	r3, r1
			Tb = (T0/2);
 800079c:	8034      	strh	r4, [r6, #0]
			Tc = T1 + (T0/2);
 800079e:	e790      	b.n	80006c2 <SVPWM+0xd2>
			Ta = 0;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <SVPWM+0x1e4>)
			Tb = 0;
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <SVPWM+0x1e8>)
			Tc = 0;
 80007a4:	490d      	ldr	r1, [pc, #52]	; (80007dc <SVPWM+0x1ec>)
			Ta = 0;
 80007a6:	2200      	movs	r2, #0
 80007a8:	801a      	strh	r2, [r3, #0]
			Tb = 0;
 80007aa:	8002      	strh	r2, [r0, #0]
			Tc = 0;
 80007ac:	4613      	mov	r3, r2
 80007ae:	800a      	strh	r2, [r1, #0]
 80007b0:	4615      	mov	r5, r2
 80007b2:	e786      	b.n	80006c2 <SVPWM+0xd2>
 80007b4:	20000004 	.word	0x20000004
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	20000068 	.word	0x20000068
 80007c0:	1b4e81b5 	.word	0x1b4e81b5
 80007c4:	20000058 	.word	0x20000058
 80007c8:	20000000 	.word	0x20000000
 80007cc:	2000005c 	.word	0x2000005c
 80007d0:	20000054 	.word	0x20000054
 80007d4:	20000060 	.word	0x20000060
 80007d8:	20000062 	.word	0x20000062
 80007dc:	20000064 	.word	0x20000064
 80007e0:	20000066 	.word	0x20000066
 80007e4:	20000002 	.word	0x20000002

080007e8 <PIController>:
/**
 * This function implements Speed PI controller
 *
 */
void PIController(){
	error = 500 - speed;
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <PIController+0xbc>)
	Kterm = error*35/10;
	Iterm += (float)error/10000; // error*Kp*Ts => error*2*0.0001 => error/5000
 80007ea:	492f      	ldr	r1, [pc, #188]	; (80008a8 <PIController+0xc0>)
	error = 500 - speed;
 80007ec:	681a      	ldr	r2, [r3, #0]
	Iterm += (float)error/10000; // error*Kp*Ts => error*2*0.0001 => error/5000
 80007ee:	edd1 6a00 	vldr	s13, [r1]
 80007f2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80008ac <PIController+0xc4>
	Kterm = error*35/10;
 80007f6:	482e      	ldr	r0, [pc, #184]	; (80008b0 <PIController+0xc8>)

	if(Iterm > 100){
 80007f8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80008b4 <PIController+0xcc>
	error = 500 - speed;
 80007fc:	f5c2 72fa 	rsb	r2, r2, #500	; 0x1f4
 8000800:	b212      	sxth	r2, r2
	Iterm += (float)error/10000; // error*Kp*Ts => error*2*0.0001 => error/5000
 8000802:	ee06 2a10 	vmov	s12, r2
	Kterm = error*35/10;
 8000806:	eb02 0382 	add.w	r3, r2, r2, lsl #2
	Iterm += (float)error/10000; // error*Kp*Ts => error*2*0.0001 => error/5000
 800080a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	Kterm = error*35/10;
 800080e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	Iterm += (float)error/10000; // error*Kp*Ts => error*2*0.0001 => error/5000
 8000812:	eee6 6a27 	vfma.f32	s13, s12, s15
	Kterm = error*35/10;
 8000816:	fb80 c003 	smull	ip, r0, r0, r3
 800081a:	17db      	asrs	r3, r3, #31
 800081c:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 8000820:	ee07 3a90 	vmov	s15, r3
void PIController(){
 8000824:	b430      	push	{r4, r5}
	Kterm = error*35/10;
 8000826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	error = 500 - speed;
 800082a:	4d23      	ldr	r5, [pc, #140]	; (80008b8 <PIController+0xd0>)
	Kterm = error*35/10;
 800082c:	4c23      	ldr	r4, [pc, #140]	; (80008bc <PIController+0xd4>)
	error = 500 - speed;
 800082e:	802a      	strh	r2, [r5, #0]
	if(Iterm > 100){
 8000830:	eef4 6ac7 	vcmpe.f32	s13, s14
 8000834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Iterm += (float)error/10000; // error*Kp*Ts => error*2*0.0001 => error/5000
 8000838:	edc1 6a00 	vstr	s13, [r1]
	Kterm = error*35/10;
 800083c:	edc4 7a00 	vstr	s15, [r4]
	if(Iterm > 100){
 8000840:	dc1d      	bgt.n	800087e <PIController+0x96>
		Iterm = 100;
	} else if(Iterm < -100){
 8000842:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80008c0 <PIController+0xd8>
 8000846:	eef4 6ac7 	vcmpe.f32	s13, s14
 800084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084e:	d416      	bmi.n	800087e <PIController+0x96>
		Iterm = -100;
	}
	iqRef = (Kterm+Iterm);
 8000850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <PIController+0xdc>)
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	ee17 3a90 	vmov	r3, s15
 800085e:	b21b      	sxth	r3, r3

	if(iqRef>500){
 8000860:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
	iqRef = (Kterm+Iterm);
 8000864:	8013      	strh	r3, [r2, #0]
	if(iqRef>500){
 8000866:	dc18      	bgt.n	800089a <PIController+0xb2>
		iqRef = 500;
	} else if(Iterm < -500){
 8000868:	eddf 7a17 	vldr	s15, [pc, #92]	; 80008c8 <PIController+0xe0>
 800086c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8000870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000874:	d514      	bpl.n	80008a0 <PIController+0xb8>
		Iterm = -500;
	}
}
 8000876:	bc30      	pop	{r4, r5}
		Iterm = -500;
 8000878:	edc1 7a00 	vstr	s15, [r1]
}
 800087c:	4770      	bx	lr
	iqRef = (Kterm+Iterm);
 800087e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <PIController+0xdc>)
		Iterm = -100;
 8000884:	ed81 7a00 	vstr	s14, [r1]
	iqRef = (Kterm+Iterm);
 8000888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800088c:	ee17 3a90 	vmov	r3, s15
 8000890:	b21b      	sxth	r3, r3
	if(iqRef>500){
 8000892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
	iqRef = (Kterm+Iterm);
 8000896:	8013      	strh	r3, [r2, #0]
	if(iqRef>500){
 8000898:	dd02      	ble.n	80008a0 <PIController+0xb8>
		iqRef = 500;
 800089a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800089e:	8013      	strh	r3, [r2, #0]
}
 80008a0:	bc30      	pop	{r4, r5}
 80008a2:	4770      	bx	lr
 80008a4:	200000dc 	.word	0x200000dc
 80008a8:	2000006c 	.word	0x2000006c
 80008ac:	38d1b717 	.word	0x38d1b717
 80008b0:	66666667 	.word	0x66666667
 80008b4:	42c80000 	.word	0x42c80000
 80008b8:	200001b0 	.word	0x200001b0
 80008bc:	200001ac 	.word	0x200001ac
 80008c0:	c2c80000 	.word	0xc2c80000
 80008c4:	20000072 	.word	0x20000072
 80008c8:	c3fa0000 	.word	0xc3fa0000

080008cc <modelPredictiveControl>:

/**
 * This function implements model predictive control (MPC)
 *
 */
void modelPredictiveControl(){
 80008cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d0:	ed2d 8b06 	vpush	{d8-d10}
	computeSinCos();
 80008d4:	f000 fa20 	bl	8000d18 <computeSinCos>

	parkTransform(Ia,Ib,Ic,&Idq);
 80008d8:	4d7b      	ldr	r5, [pc, #492]	; (8000ac8 <modelPredictiveControl+0x1fc>)
 80008da:	4b7c      	ldr	r3, [pc, #496]	; (8000acc <modelPredictiveControl+0x200>)
 80008dc:	4a7c      	ldr	r2, [pc, #496]	; (8000ad0 <modelPredictiveControl+0x204>)
 80008de:	497d      	ldr	r1, [pc, #500]	; (8000ad4 <modelPredictiveControl+0x208>)
 80008e0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80008e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008e8:	f9b1 1000 	ldrsh.w	r1, [r1]
	parkTransform(Ea,Eb,Ec,&Edq);
 80008ec:	4c7a      	ldr	r4, [pc, #488]	; (8000ad8 <modelPredictiveControl+0x20c>)
	Idq.q = Idq.q/4096;

	Edq.d = Edq.d/1241; // 3.3/4096 = 1/1241
	Edq.q = Edq.q/1241;

	cost = 100000;
 80008ee:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8000b30 <modelPredictiveControl+0x264>

	for(i=0;i<6;i++){
 80008f2:	4f7a      	ldr	r7, [pc, #488]	; (8000adc <modelPredictiveControl+0x210>)
 80008f4:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8000b34 <modelPredictiveControl+0x268>
 80008f8:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8000b38 <modelPredictiveControl+0x26c>
 80008fc:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8000b3c <modelPredictiveControl+0x270>
		for(j=0;j<3;j++){
			IdPred = (4*Vdq.d + 2*IdPred - Edq.d);
			IqPred = (4*Vdq.q + 2*IqPred - Edq.q);
		}

		costTemp = (square(mod((IdPred*1000))) + 2*square(mod(800 - (IqPred*1000))))/1000000;
 8000900:	ed9f aa77 	vldr	s20, [pc, #476]	; 8000ae0 <modelPredictiveControl+0x214>
 8000904:	ed9f 9a77 	vldr	s18, [pc, #476]	; 8000ae4 <modelPredictiveControl+0x218>
 8000908:	eddf 8a77 	vldr	s17, [pc, #476]	; 8000ae8 <modelPredictiveControl+0x21c>
 800090c:	eddf 9a77 	vldr	s19, [pc, #476]	; 8000aec <modelPredictiveControl+0x220>
 8000910:	ed9f 8a77 	vldr	s16, [pc, #476]	; 8000af0 <modelPredictiveControl+0x224>
	parkTransform(Ia,Ib,Ic,&Idq);
 8000914:	462b      	mov	r3, r5
 8000916:	f000 fb5d 	bl	8000fd4 <parkTransform>
	parkTransform(Ea,Eb,Ec,&Edq);
 800091a:	4b76      	ldr	r3, [pc, #472]	; (8000af4 <modelPredictiveControl+0x228>)
 800091c:	4a76      	ldr	r2, [pc, #472]	; (8000af8 <modelPredictiveControl+0x22c>)
 800091e:	4977      	ldr	r1, [pc, #476]	; (8000afc <modelPredictiveControl+0x230>)
 8000920:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000924:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000928:	f9b1 1000 	ldrsh.w	r1, [r1]
 800092c:	4623      	mov	r3, r4
 800092e:	f000 fb51 	bl	8000fd4 <parkTransform>
	Idq.d = Idq.d/4096; // 3.3/4096 = 1/1241
 8000932:	ed95 6a00 	vldr	s12, [r5]
 8000936:	ed9f 5a72 	vldr	s10, [pc, #456]	; 8000b00 <modelPredictiveControl+0x234>
	Idq.q = Idq.q/4096;
 800093a:	edd5 6a01 	vldr	s13, [r5, #4]
	Edq.d = Edq.d/1241; // 3.3/4096 = 1/1241
 800093e:	ed94 7a00 	vldr	s14, [r4]
 8000942:	eddf 5a70 	vldr	s11, [pc, #448]	; 8000b04 <modelPredictiveControl+0x238>
	Edq.q = Edq.q/1241;
 8000946:	edd4 7a01 	vldr	s15, [r4, #4]
	cost = 100000;
 800094a:	4b6f      	ldr	r3, [pc, #444]	; (8000b08 <modelPredictiveControl+0x23c>)
 800094c:	f8c8 3000 	str.w	r3, [r8]
	Idq.d = Idq.d/4096; // 3.3/4096 = 1/1241
 8000950:	ee26 6a05 	vmul.f32	s12, s12, s10
	Idq.q = Idq.q/4096;
 8000954:	ee66 6a85 	vmul.f32	s13, s13, s10
	Edq.d = Edq.d/1241; // 3.3/4096 = 1/1241
 8000958:	ee27 7a25 	vmul.f32	s14, s14, s11
	Edq.q = Edq.q/1241;
 800095c:	ee67 7aa5 	vmul.f32	s15, s15, s11
	for(i=0;i<6;i++){
 8000960:	2200      	movs	r2, #0
		parkTransform(Va,Vb,Vc,&Vdq);
 8000962:	4b6a      	ldr	r3, [pc, #424]	; (8000b0c <modelPredictiveControl+0x240>)
	Idq.d = Idq.d/4096; // 3.3/4096 = 1/1241
 8000964:	ed85 6a00 	vstr	s12, [r5]
	Idq.q = Idq.q/4096;
 8000968:	edc5 6a01 	vstr	s13, [r5, #4]
	Edq.d = Edq.d/1241; // 3.3/4096 = 1/1241
 800096c:	ed84 7a00 	vstr	s14, [r4]
	Edq.q = Edq.q/1241;
 8000970:	edc4 7a01 	vstr	s15, [r4, #4]
	for(i=0;i<6;i++){
 8000974:	603a      	str	r2, [r7, #0]
		Va = states[i] & 0x01;
 8000976:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
		Vc = (states[i]>>2) & 0x01;
 800097a:	4e65      	ldr	r6, [pc, #404]	; (8000b10 <modelPredictiveControl+0x244>)
		Va = states[i] & 0x01;
 800097c:	f002 0001 	and.w	r0, r2, #1
		Vb = (states[i]>>1) & 0x01;
 8000980:	f3c2 0140 	ubfx	r1, r2, #1, #1
		Vc = (states[i]>>2) & 0x01;
 8000984:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8000988:	8032      	strh	r2, [r6, #0]
		Va = states[i] & 0x01;
 800098a:	f8aa 0000 	strh.w	r0, [sl]
		Vb = (states[i]>>1) & 0x01;
 800098e:	f8a9 1000 	strh.w	r1, [r9]
		parkTransform(Va,Vb,Vc,&Vdq);
 8000992:	f000 fb1f 	bl	8000fd4 <parkTransform>
		IdPred = (4*Vdq.d + 2*Idq.d - Edq.d);
 8000996:	4b5d      	ldr	r3, [pc, #372]	; (8000b0c <modelPredictiveControl+0x240>)
 8000998:	ed95 7a00 	vldr	s14, [r5]
 800099c:	ed93 6a00 	vldr	s12, [r3]
 80009a0:	edd4 4a00 	vldr	s9, [r4]
		IqPred = (4*Vdq.q + 2*Idq.q - Edq.q);
 80009a4:	ed94 5a01 	vldr	s10, [r4, #4]
 80009a8:	edd3 5a01 	vldr	s11, [r3, #4]
 80009ac:	edd5 7a01 	vldr	s15, [r5, #4]
 80009b0:	4b58      	ldr	r3, [pc, #352]	; (8000b14 <modelPredictiveControl+0x248>)
		IdPred = (4*Vdq.d + 2*Idq.d - Edq.d);
 80009b2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80009b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80009ba:	eea6 7a26 	vfma.f32	s14, s12, s13
 80009be:	2203      	movs	r2, #3
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	eeb0 4a64 	vmov.f32	s8, s9
 80009c6:	ee37 7a64 	vsub.f32	s14, s14, s9
		IqPred = (4*Vdq.q + 2*Idq.q - Edq.q);
 80009ca:	eef0 4a45 	vmov.f32	s9, s10
 80009ce:	ee96 4a26 	vfnms.f32	s8, s12, s13
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <modelPredictiveControl+0x24c>)
		costTemp = (square(mod((IdPred*1000))) + 2*square(mod(800 - (IqPred*1000))))/1000000;
 80009d4:	4a51      	ldr	r2, [pc, #324]	; (8000b1c <modelPredictiveControl+0x250>)
 80009d6:	eed5 4aa6 	vfnms.f32	s9, s11, s13
		IqPred = (4*Vdq.q + 2*Idq.q - Edq.q);
 80009da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009de:	eeb0 6a44 	vmov.f32	s12, s8
 80009e2:	eee5 7aa6 	vfma.f32	s15, s11, s13
			IdPred = (4*Vdq.d + 2*IdPred - Edq.d);
 80009e6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80009ea:	eef0 6a64 	vmov.f32	s13, s9
 80009ee:	eef0 4a44 	vmov.f32	s9, s8
 80009f2:	eee7 4a25 	vfma.f32	s9, s14, s11
		IqPred = (4*Vdq.q + 2*Idq.q - Edq.q);
 80009f6:	ee77 7ac5 	vsub.f32	s15, s15, s10
			IdPred = (4*Vdq.d + 2*IdPred - Edq.d);
 80009fa:	eeb0 5a44 	vmov.f32	s10, s8
 80009fe:	eea4 5aa5 	vfma.f32	s10, s9, s11
 8000a02:	eeb0 7a45 	vmov.f32	s14, s10
			IqPred = (4*Vdq.q + 2*IqPred - Edq.q);
 8000a06:	eeb0 5a66 	vmov.f32	s10, s13
 8000a0a:	eea7 5aa5 	vfma.f32	s10, s15, s11
			IdPred = (4*Vdq.d + 2*IdPred - Edq.d);
 8000a0e:	eea7 6a25 	vfma.f32	s12, s14, s11
			IqPred = (4*Vdq.q + 2*IqPred - Edq.q);
 8000a12:	eeb0 7a66 	vmov.f32	s14, s13
 8000a16:	eea5 7a25 	vfma.f32	s14, s10, s11
 8000a1a:	ed83 6a00 	vstr	s12, [r3]
 8000a1e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <modelPredictiveControl+0x254>)
		costTemp = (square(mod((IdPred*1000))) + 2*square(mod(800 - (IqPred*1000))))/1000000;
 8000a24:	ee66 7a0a 	vmul.f32	s15, s12, s20
			IqPred = (4*Vdq.q + 2*IqPred - Edq.q);
 8000a28:	eeb0 7a66 	vmov.f32	s14, s13
		costTemp = (square(mod((IdPred*1000))) + 2*square(mod(800 - (IqPred*1000))))/1000000;
 8000a2c:	eef4 6ac9 	vcmpe.f32	s13, s18
 8000a30:	edc3 6a00 	vstr	s13, [r3]
 8000a34:	eef0 6a68 	vmov.f32	s13, s17
 8000a38:	eee7 6a4a 	vfms.f32	s13, s14, s20
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <modelPredictiveControl+0x240>)
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	bf44      	itt	mi
 8000a44:	eef0 6a69 	vmovmi.f32	s13, s19
 8000a48:	eee7 6a4a 	vfmsmi.f32	s13, s14, s20
 8000a4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a50:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8000a54:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000a58:	eee6 7a86 	vfma.f32	s15, s13, s12

		if(costTemp < cost){
 8000a5c:	ed98 7a00 	vldr	s14, [r8]
		costTemp = (square(mod((IdPred*1000))) + 2*square(mod(800 - (IqPred*1000))))/1000000;
 8000a60:	ee67 7a88 	vmul.f32	s15, s15, s16
		if(costTemp < cost){
 8000a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		costTemp = (square(mod((IdPred*1000))) + 2*square(mod(800 - (IqPred*1000))))/1000000;
 8000a6c:	edc2 7a00 	vstr	s15, [r2]
		if(costTemp < cost){
 8000a70:	d41e      	bmi.n	8000ab0 <modelPredictiveControl+0x1e4>
	for(i=0;i<6;i++){
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	3201      	adds	r2, #1
 8000a76:	2a05      	cmp	r2, #5
 8000a78:	603a      	str	r2, [r7, #0]
 8000a7a:	f77f af7c 	ble.w	8000976 <modelPredictiveControl+0xaa>
		}
	}

	V = 400;

	wt = limitTheta((optimalVector+1)*60);
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <modelPredictiveControl+0x258>)
	V = 400;
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <modelPredictiveControl+0x25c>)
	wt = limitTheta((optimalVector+1)*60);
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000a8a:	0098      	lsls	r0, r3, #2
 8000a8c:	b200      	sxth	r0, r0
	V = 400;
 8000a8e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a92:	8013      	strh	r3, [r2, #0]
	wt = limitTheta((optimalVector+1)*60);
 8000a94:	f000 f97e 	bl	8000d94 <limitTheta>
	if(wt >= 360){
		wt = 0;
	}
}
 8000a98:	ecbd 8b06 	vpop	{d8-d10}
	wt = limitTheta((optimalVector+1)*60);
 8000a9c:	b280      	uxth	r0, r0
	if(wt >= 360){
 8000a9e:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
		wt = 0;
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <modelPredictiveControl+0x260>)
 8000aa4:	bf2a      	itet	cs
 8000aa6:	2200      	movcs	r2, #0
	wt = limitTheta((optimalVector+1)*60);
 8000aa8:	8018      	strhcc	r0, [r3, #0]
		wt = 0;
 8000aaa:	801a      	strhcs	r2, [r3, #0]
}
 8000aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			optimalVector = i;
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	491c      	ldr	r1, [pc, #112]	; (8000b24 <modelPredictiveControl+0x258>)
			cost = costTemp;
 8000ab4:	edc8 7a00 	vstr	s15, [r8]
			optimalVector = i;
 8000ab8:	700a      	strb	r2, [r1, #0]
	for(i=0;i<6;i++){
 8000aba:	3201      	adds	r2, #1
 8000abc:	2a05      	cmp	r2, #5
 8000abe:	603a      	str	r2, [r7, #0]
 8000ac0:	f77f af59 	ble.w	8000976 <modelPredictiveControl+0xaa>
 8000ac4:	e7db      	b.n	8000a7e <modelPredictiveControl+0x1b2>
 8000ac6:	bf00      	nop
 8000ac8:	20000170 	.word	0x20000170
 8000acc:	20000098 	.word	0x20000098
 8000ad0:	200000d6 	.word	0x200000d6
 8000ad4:	200000bc 	.word	0x200000bc
 8000ad8:	200000cc 	.word	0x200000cc
 8000adc:	200001a8 	.word	0x200001a8
 8000ae0:	447a0000 	.word	0x447a0000
 8000ae4:	3f4ccccd 	.word	0x3f4ccccd
 8000ae8:	c4480000 	.word	0xc4480000
 8000aec:	44480000 	.word	0x44480000
 8000af0:	358637bd 	.word	0x358637bd
 8000af4:	200000c8 	.word	0x200000c8
 8000af8:	200000a4 	.word	0x200000a4
 8000afc:	2000016c 	.word	0x2000016c
 8000b00:	39800000 	.word	0x39800000
 8000b04:	3a533c71 	.word	0x3a533c71
 8000b08:	47c35000 	.word	0x47c35000
 8000b0c:	200000a8 	.word	0x200000a8
 8000b10:	200000be 	.word	0x200000be
 8000b14:	20000194 	.word	0x20000194
 8000b18:	200001a0 	.word	0x200001a0
 8000b1c:	20000198 	.word	0x20000198
 8000b20:	200001b8 	.word	0x200001b8
 8000b24:	200001bc 	.word	0x200001bc
 8000b28:	20000002 	.word	0x20000002
 8000b2c:	20000068 	.word	0x20000068
 8000b30:	2000019c 	.word	0x2000019c
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200000a6 	.word	0x200000a6
 8000b3c:	200000d8 	.word	0x200000d8

08000b40 <startStop>:
/**
 * This function controls start/stop of motor with Blue button
 *
 */
void startStop(){
	if(!run){
 8000b40:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <startStop+0x10>)
 8000b42:	7813      	ldrb	r3, [r2, #0]
 8000b44:	fab3 f383 	clz	r3, r3
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	7013      	strb	r3, [r2, #0]
		run = 1;
	} else {
		run = 0;
	}
}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000004 	.word	0x20000004

08000b54 <executeAll>:
/**
 * This function controls the execution and ADC measurement
 *
 */
uint16_t executionCount, cnts = 0;
void executeAll(){
 8000b54:	b510      	push	{r4, lr}
	measureADC();
 8000b56:	f000 f881 	bl	8000c5c <measureADC>
	if(run){
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <executeAll+0x30>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b12b      	cbz	r3, 8000b6c <executeAll+0x18>
//		if(executionCount > 10000){
			if(cnts == 50){
 8000b60:	4c09      	ldr	r4, [pc, #36]	; (8000b88 <executeAll+0x34>)
 8000b62:	8823      	ldrh	r3, [r4, #0]
 8000b64:	2b32      	cmp	r3, #50	; 0x32
 8000b66:	d005      	beq.n	8000b74 <executeAll+0x20>
				modelPredictiveControl();
				cnts = 0;
			} else {
				cnts++;
 8000b68:	3301      	adds	r3, #1
 8000b6a:	8023      	strh	r3, [r4, #0]
//			executionCount++;
//		}
	}
	SVPWM();
//	transferUART();
}
 8000b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SVPWM();
 8000b70:	f7ff bd3e 	b.w	80005f0 <SVPWM>
				modelPredictiveControl();
 8000b74:	f7ff feaa 	bl	80008cc <modelPredictiveControl>
				cnts = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	8023      	strh	r3, [r4, #0]
}
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SVPWM();
 8000b80:	f7ff bd36 	b.w	80005f0 <SVPWM>
 8000b84:	20000004 	.word	0x20000004
 8000b88:	20000070 	.word	0x20000070

08000b8c <computePosition>:
 * This function computes rotor position
 *
 * @param uint8_t x in range 0 to 128
 * @return uint8_t arcsin(x) range 0 to 90
 */
void computePosition(){
 8000b8c:	b538      	push	{r3, r4, r5, lr}
	// Compute alpha-beta BEMFS
	clarkeTransform(Ea,Eb,Ec, &Ealbt);
 8000b8e:	4929      	ldr	r1, [pc, #164]	; (8000c34 <computePosition+0xa8>)
 8000b90:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <computePosition+0xac>)
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <computePosition+0xb0>)
 8000b94:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ba0:	4c27      	ldr	r4, [pc, #156]	; (8000c40 <computePosition+0xb4>)

	// Compute theta
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 8000ba2:	4d28      	ldr	r5, [pc, #160]	; (8000c44 <computePosition+0xb8>)
	clarkeTransform(Ea,Eb,Ec, &Ealbt);
 8000ba4:	ee00 3a10 	vmov	s0, r3
 8000ba8:	ee01 1a10 	vmov	s2, r1
 8000bac:	ee00 2a90 	vmov	s1, r2
 8000bb0:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8000bb4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8000bb8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f000 fa45 	bl	800104c <clarkeTransform>
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 8000bc2:	edd4 0a00 	vldr	s1, [r4]
 8000bc6:	ed94 0a01 	vldr	s0, [r4, #4]
 8000bca:	f000 f98d 	bl	8000ee8 <arctan2>
 8000bce:	b203      	sxth	r3, r0

	// Limit theta value
	if(theta < 0){
 8000bd0:	2b00      	cmp	r3, #0
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 8000bd2:	802b      	strh	r3, [r5, #0]
	if(theta < 0){
 8000bd4:	db0f      	blt.n	8000bf6 <computePosition+0x6a>
		theta += 360;
	}

	if(theta > 360){
 8000bd6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
		theta = thetaOld;
 8000bda:	4c1b      	ldr	r4, [pc, #108]	; (8000c48 <computePosition+0xbc>)
	if(theta > 360){
 8000bdc:	dd28      	ble.n	8000c30 <computePosition+0xa4>
	dTheta = thetaOld - theta;
 8000bde:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <computePosition+0xc0>)
		theta = thetaOld;
 8000be0:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000be4:	802b      	strh	r3, [r5, #0]
	dTheta = thetaOld - theta;
 8000be6:	2100      	movs	r1, #0
 8000be8:	8011      	strh	r1, [r2, #0]
		clockTicks++;
 8000bea:	4919      	ldr	r1, [pc, #100]	; (8000c50 <computePosition+0xc4>)
	}

	// Compute rotor speed
	computeSpeed();

	thetaOld = theta;
 8000bec:	8023      	strh	r3, [r4, #0]
		clockTicks++;
 8000bee:	880a      	ldrh	r2, [r1, #0]
 8000bf0:	3201      	adds	r2, #1
 8000bf2:	800a      	strh	r2, [r1, #0]
}
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
		theta += 360;
 8000bf6:	4c14      	ldr	r4, [pc, #80]	; (8000c48 <computePosition+0xbc>)
 8000bf8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8000bfc:	b203      	sxth	r3, r0
 8000bfe:	8822      	ldrh	r2, [r4, #0]
 8000c00:	802b      	strh	r3, [r5, #0]
 8000c02:	b280      	uxth	r0, r0
	dTheta = thetaOld - theta;
 8000c04:	1a10      	subs	r0, r2, r0
 8000c06:	b200      	sxth	r0, r0
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <computePosition+0xc0>)
	if(dTheta > 250){
 8000c0a:	28fa      	cmp	r0, #250	; 0xfa
	dTheta = thetaOld - theta;
 8000c0c:	8010      	strh	r0, [r2, #0]
	if(dTheta > 250){
 8000c0e:	ddec      	ble.n	8000bea <computePosition+0x5e>
		if(clockTicks > 0){
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <computePosition+0xc4>)
 8000c12:	881a      	ldrh	r2, [r3, #0]
 8000c14:	b122      	cbz	r2, 8000c20 <computePosition+0x94>
			speed = 150000/clockTicks; 	// speed = 60/(Ts*p*clockTicks) = 150000/clockTicks --> p = 4 || Ts = 1 clockTick = 100uS
 8000c16:	480f      	ldr	r0, [pc, #60]	; (8000c54 <computePosition+0xc8>)
 8000c18:	490f      	ldr	r1, [pc, #60]	; (8000c58 <computePosition+0xcc>)
 8000c1a:	fbb1 f2f2 	udiv	r2, r1, r2
 8000c1e:	6002      	str	r2, [r0, #0]
		clockTicks = 0;
 8000c20:	2200      	movs	r2, #0
 8000c22:	801a      	strh	r2, [r3, #0]
		PIController();
 8000c24:	f7ff fde0 	bl	80007e8 <PIController>
 8000c28:	f9b5 3000 	ldrsh.w	r3, [r5]
	thetaOld = theta;
 8000c2c:	8023      	strh	r3, [r4, #0]
}
 8000c2e:	bd38      	pop	{r3, r4, r5, pc}
 8000c30:	8822      	ldrh	r2, [r4, #0]
 8000c32:	e7e7      	b.n	8000c04 <computePosition+0x78>
 8000c34:	200000a4 	.word	0x200000a4
 8000c38:	2000016c 	.word	0x2000016c
 8000c3c:	200000c8 	.word	0x200000c8
 8000c40:	20000180 	.word	0x20000180
 8000c44:	200000b0 	.word	0x200000b0
 8000c48:	200000d4 	.word	0x200000d4
 8000c4c:	200000a2 	.word	0x200000a2
 8000c50:	20000020 	.word	0x20000020
 8000c54:	200000dc 	.word	0x200000dc
 8000c58:	000249f0 	.word	0x000249f0

08000c5c <measureADC>:

/**
 * This function computes 2 phase currents and 2 BEMFs
 *
 */
void measureADC(){
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_ADC_Start_DMA(&hadc2, Eab, 2);
 8000c5e:	4c22      	ldr	r4, [pc, #136]	; (8000ce8 <measureADC+0x8c>)
	HAL_ADC_Start_DMA(&hadc1, Iab, 2);
 8000c60:	4d22      	ldr	r5, [pc, #136]	; (8000cec <measureADC+0x90>)
	HAL_ADC_Start_DMA(&hadc2, Eab, 2);
 8000c62:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <measureADC+0x94>)

	// Compute abc currents
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000c64:	4f23      	ldr	r7, [pc, #140]	; (8000cf4 <measureADC+0x98>)
	HAL_ADC_Start_DMA(&hadc2, Eab, 2);
 8000c66:	4621      	mov	r1, r4
 8000c68:	2202      	movs	r2, #2
 8000c6a:	f001 f89b 	bl	8001da4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, Iab, 2);
 8000c6e:	4629      	mov	r1, r5
 8000c70:	2202      	movs	r2, #2
 8000c72:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <measureADC+0x9c>)
 8000c74:	f001 f896 	bl	8001da4 <HAL_ADC_Start_DMA>
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000c78:	f9b5 3000 	ldrsh.w	r3, [r5]
	Ib = ((short)Iab[1] - 1923);
	Ic = -(Ia+Ib);


	// Compute abc BEMFs
	Ea = ((short)Eab[0]-1885)*9/10;
 8000c7c:	f9b4 1000 	ldrsh.w	r1, [r4]
	Ib = ((short)Iab[1] - 1923);
 8000c80:	6868      	ldr	r0, [r5, #4]
	Ea = ((short)Eab[0]-1885)*9/10;
 8000c82:	4d1e      	ldr	r5, [pc, #120]	; (8000cfc <measureADC+0xa0>)
	Eb =  (short)Eab[1]-1745;
 8000c84:	6866      	ldr	r6, [r4, #4]
	Ib = ((short)Iab[1] - 1923);
 8000c86:	4c1e      	ldr	r4, [pc, #120]	; (8000d00 <measureADC+0xa4>)
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000c88:	f46f 62f3 	mvn.w	r2, #1944	; 0x798
 8000c8c:	4413      	add	r3, r2
 8000c8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000c92:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
	Ea = ((short)Eab[0]-1885)*9/10;
 8000c96:	f2a1 715d 	subw	r1, r1, #1885	; 0x75d
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000c9a:	fb87 2703 	smull	r2, r7, r7, r3
	Ea = ((short)Eab[0]-1885)*9/10;
 8000c9e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
	Ib = ((short)Iab[1] - 1923);
 8000ca2:	f2a0 7083 	subw	r0, r0, #1923	; 0x783
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000ca6:	17db      	asrs	r3, r3, #31
	Ea = ((short)Eab[0]-1885)*9/10;
 8000ca8:	fb85 2501 	smull	r2, r5, r5, r1
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000cac:	ebc3 1367 	rsb	r3, r3, r7, asr #5
	Ib = ((short)Iab[1] - 1923);
 8000cb0:	b280      	uxth	r0, r0
	Ea = ((short)Eab[0]-1885)*9/10;
 8000cb2:	17ca      	asrs	r2, r1, #31
	Eb =  (short)Eab[1]-1745;
 8000cb4:	f46f 6cda 	mvn.w	ip, #1744	; 0x6d0
	Ib = ((short)Iab[1] - 1923);
 8000cb8:	8020      	strh	r0, [r4, #0]
	Ea = ((short)Eab[0]-1885)*9/10;
 8000cba:	ebc2 02a5 	rsb	r2, r2, r5, asr #2
	Ic = -(Ia+Ib);
 8000cbe:	4c11      	ldr	r4, [pc, #68]	; (8000d04 <measureADC+0xa8>)
 8000cc0:	18c5      	adds	r5, r0, r3
	Eb =  (short)Eab[1]-1745;
 8000cc2:	4466      	add	r6, ip
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <measureADC+0xac>)
	Eb =  (short)Eab[1]-1745;
 8000cc6:	b2b1      	uxth	r1, r6
	Ic = -(Ia+Ib);
 8000cc8:	426d      	negs	r5, r5
 8000cca:	8025      	strh	r5, [r4, #0]
	Ia = ((short)Iab[0] - 1945)*95/100;
 8000ccc:	8003      	strh	r3, [r0, #0]
	Eb =  (short)Eab[1]-1745;
 8000cce:	4d0f      	ldr	r5, [pc, #60]	; (8000d0c <measureADC+0xb0>)
	Ec = -(Ea+Eb);
 8000cd0:	4c0f      	ldr	r4, [pc, #60]	; (8000d10 <measureADC+0xb4>)
	Ea = ((short)Eab[0]-1885)*9/10;
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <measureADC+0xb8>)
	Eb =  (short)Eab[1]-1745;
 8000cd4:	8029      	strh	r1, [r5, #0]
	Ec = -(Ea+Eb);
 8000cd6:	188b      	adds	r3, r1, r2
 8000cd8:	425b      	negs	r3, r3
 8000cda:	8023      	strh	r3, [r4, #0]

	// Compute rotor position
	computePosition();
}
 8000cdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Ea = ((short)Eab[0]-1885)*9/10;
 8000ce0:	8002      	strh	r2, [r0, #0]
	computePosition();
 8000ce2:	f7ff bf53 	b.w	8000b8c <computePosition>
 8000ce6:	bf00      	nop
 8000ce8:	200000e0 	.word	0x200000e0
 8000cec:	200000b4 	.word	0x200000b4
 8000cf0:	20000208 	.word	0x20000208
 8000cf4:	51eb851f 	.word	0x51eb851f
 8000cf8:	20000258 	.word	0x20000258
 8000cfc:	66666667 	.word	0x66666667
 8000d00:	200000bc 	.word	0x200000bc
 8000d04:	200000d6 	.word	0x200000d6
 8000d08:	20000098 	.word	0x20000098
 8000d0c:	2000016c 	.word	0x2000016c
 8000d10:	200000a4 	.word	0x200000a4
 8000d14:	200000c8 	.word	0x200000c8

08000d18 <computeSinCos>:

/**
 * This function sine cos values for given theta used in park transform
 *
 */
void computeSinCos(){
 8000d18:	b510      	push	{r4, lr}
	sin000 = sin2(theta);
 8000d1a:	4c17      	ldr	r4, [pc, #92]	; (8000d78 <computeSinCos+0x60>)
 8000d1c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8000d20:	f000 f85a 	bl	8000dd8 <sin2>
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <computeSinCos+0x64>)
 8000d26:	4602      	mov	r2, r0
	cos000 = cos2(theta);
 8000d28:	f9b4 0000 	ldrsh.w	r0, [r4]
	sin000 = sin2(theta);
 8000d2c:	801a      	strh	r2, [r3, #0]
	cos000 = cos2(theta);
 8000d2e:	f000 f891 	bl	8000e54 <cos2>
 8000d32:	4602      	mov	r2, r0
	sin120 = sin2(theta+120);
 8000d34:	8820      	ldrh	r0, [r4, #0]
	cos000 = cos2(theta);
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <computeSinCos+0x68>)
	sin120 = sin2(theta+120);
 8000d38:	3078      	adds	r0, #120	; 0x78
 8000d3a:	b200      	sxth	r0, r0
	cos000 = cos2(theta);
 8000d3c:	801a      	strh	r2, [r3, #0]
	sin120 = sin2(theta+120);
 8000d3e:	f000 f84b 	bl	8000dd8 <sin2>
 8000d42:	4602      	mov	r2, r0
	sin240 = sin2(theta+240);
 8000d44:	8820      	ldrh	r0, [r4, #0]
	sin120 = sin2(theta+120);
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <computeSinCos+0x6c>)
	sin240 = sin2(theta+240);
 8000d48:	30f0      	adds	r0, #240	; 0xf0
 8000d4a:	b200      	sxth	r0, r0
	sin120 = sin2(theta+120);
 8000d4c:	801a      	strh	r2, [r3, #0]
	sin240 = sin2(theta+240);
 8000d4e:	f000 f843 	bl	8000dd8 <sin2>
 8000d52:	4602      	mov	r2, r0
	cos120 = cos2(theta+120);
 8000d54:	8820      	ldrh	r0, [r4, #0]
	sin240 = sin2(theta+240);
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <computeSinCos+0x70>)
	cos120 = cos2(theta+120);
 8000d58:	3078      	adds	r0, #120	; 0x78
 8000d5a:	b200      	sxth	r0, r0
	sin240 = sin2(theta+240);
 8000d5c:	801a      	strh	r2, [r3, #0]
	cos120 = cos2(theta+120);
 8000d5e:	f000 f879 	bl	8000e54 <cos2>
 8000d62:	4602      	mov	r2, r0
	cos240 = cos2(theta+240);
 8000d64:	8820      	ldrh	r0, [r4, #0]
	cos120 = cos2(theta+120);
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <computeSinCos+0x74>)
	cos240 = cos2(theta+240);
 8000d68:	30f0      	adds	r0, #240	; 0xf0
 8000d6a:	b200      	sxth	r0, r0
	cos120 = cos2(theta+120);
 8000d6c:	801a      	strh	r2, [r3, #0]
	cos240 = cos2(theta+240);
 8000d6e:	f000 f871 	bl	8000e54 <cos2>
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <computeSinCos+0x78>)
 8000d74:	8018      	strh	r0, [r3, #0]
}
 8000d76:	bd10      	pop	{r4, pc}
 8000d78:	200000b0 	.word	0x200000b0
 8000d7c:	20000090 	.word	0x20000090
 8000d80:	20000094 	.word	0x20000094
 8000d84:	20000096 	.word	0x20000096
 8000d88:	2000008e 	.word	0x2000008e
 8000d8c:	2000008a 	.word	0x2000008a
 8000d90:	20000088 	.word	0x20000088

08000d94 <limitTheta>:
 * @param short theta
 * @return short angle between 0 to 360 degrees
 */
short limitTheta(short theta){
	if(theta < 0){
		return ((360+theta) - 360*(1+(theta/360)));
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <limitTheta+0x40>)
	if(theta < 0){
 8000d96:	2800      	cmp	r0, #0
		return ((360+theta) - 360*(1+(theta/360)));
 8000d98:	fb83 2300 	smull	r2, r3, r3, r0
 8000d9c:	eb03 0200 	add.w	r2, r3, r0
 8000da0:	ea4f 73e0 	mov.w	r3, r0, asr #31
 8000da4:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	if(theta < 0){
 8000da8:	db07      	blt.n	8000dba <limitTheta+0x26>
	} else {
		return (theta - 360*(theta/360));
 8000daa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000dae:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000db2:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 8000db6:	b200      	sxth	r0, r0
	}
}
 8000db8:	4770      	bx	lr
		return ((360+theta) - 360*(1+(theta/360)));
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000dc2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000dc6:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8000dca:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 8000dce:	b200      	sxth	r0, r0
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	b60b60b7 	.word	0xb60b60b7

08000dd8 <sin2>:
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <sin2+0x74>)
	if(theta < 0){
 8000dda:	2800      	cmp	r0, #0
		return ((360+theta) - 360*(1+(theta/360)));
 8000ddc:	fb83 2300 	smull	r2, r3, r3, r0
 8000de0:	eb03 0200 	add.w	r2, r3, r0
 8000de4:	ea4f 73e0 	mov.w	r3, r0, asr #31
 8000de8:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	if(theta < 0){
 8000dec:	db20      	blt.n	8000e30 <sin2+0x58>
		return (theta - 360*(theta/360));
 8000dee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000df2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000df6:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 8000dfa:	b283      	uxth	r3, r0
 8000dfc:	b200      	sxth	r0, r0
 * @return short sin(x) range -512 to +512
 */
short sin2(short theta){
  theta = limitTheta(theta);

  if(theta <= 90){
 8000dfe:	285a      	cmp	r0, #90	; 0x5a
 8000e00:	dd12      	ble.n	8000e28 <sin2+0x50>
    return sinTable[theta];
  } else if(theta > 90 && theta <=180){
 8000e02:	f1a3 025b 	sub.w	r2, r3, #91	; 0x5b
 8000e06:	2a59      	cmp	r2, #89	; 0x59
 8000e08:	d90c      	bls.n	8000e24 <sin2+0x4c>
    return sinTable[180 - theta];
  } else if(theta > 180 && theta <= 270){
 8000e0a:	3bb5      	subs	r3, #181	; 0xb5
 8000e0c:	2b59      	cmp	r3, #89	; 0x59
    return -sinTable[theta - 180];
 8000e0e:	bf98      	it	ls
 8000e10:	38b4      	subls	r0, #180	; 0xb4
  } else {
    return -sinTable[360 - theta];
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <sin2+0x78>)
 8000e14:	bf88      	it	hi
 8000e16:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
 8000e1a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000e1e:	4240      	negs	r0, r0
 8000e20:	b200      	sxth	r0, r0
  }
}
 8000e22:	4770      	bx	lr
    return sinTable[180 - theta];
 8000e24:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <sin2+0x78>)
 8000e2a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8000e2e:	4770      	bx	lr
		return ((360+theta) - 360*(1+(theta/360)));
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e38:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000e3c:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8000e40:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 8000e44:	b283      	uxth	r3, r0
 8000e46:	b200      	sxth	r0, r0
 8000e48:	e7d9      	b.n	8000dfe <sin2+0x26>
 8000e4a:	bf00      	nop
 8000e4c:	b60b60b7 	.word	0xb60b60b7
 8000e50:	08004788 	.word	0x08004788

08000e54 <cos2>:
 *
 * @param short theta in degrees
 * @return short cos(x) range -512 to +512
 */
short cos2(short theta){
  return sin2(theta+90);
 8000e54:	b280      	uxth	r0, r0
 8000e56:	f100 025a 	add.w	r2, r0, #90	; 0x5a
 8000e5a:	b213      	sxth	r3, r2
	if(theta < 0){
 8000e5c:	2b00      	cmp	r3, #0
  return sin2(theta+90);
 8000e5e:	b292      	uxth	r2, r2
	if(theta < 0){
 8000e60:	db27      	blt.n	8000eb2 <cos2+0x5e>
		return (theta - 360*(theta/360));
 8000e62:	491e      	ldr	r1, [pc, #120]	; (8000edc <cos2+0x88>)
 8000e64:	fb81 0103 	smull	r0, r1, r1, r3
 8000e68:	4419      	add	r1, r3
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8000e70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e74:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000e78:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	b21b      	sxth	r3, r3
  if(theta <= 90){
 8000e80:	2b5a      	cmp	r3, #90	; 0x5a
 8000e82:	dd12      	ble.n	8000eaa <cos2+0x56>
  } else if(theta > 90 && theta <=180){
 8000e84:	f1a2 015b 	sub.w	r1, r2, #91	; 0x5b
 8000e88:	2959      	cmp	r1, #89	; 0x59
 8000e8a:	d90c      	bls.n	8000ea6 <cos2+0x52>
  } else if(theta > 180 && theta <= 270){
 8000e8c:	3ab5      	subs	r2, #181	; 0xb5
 8000e8e:	2a59      	cmp	r2, #89	; 0x59
    return -sinTable[theta - 180];
 8000e90:	bf98      	it	ls
 8000e92:	3bb4      	subls	r3, #180	; 0xb4
    return -sinTable[360 - theta];
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <cos2+0x8c>)
 8000e96:	bf88      	it	hi
 8000e98:	f5c3 73b4 	rsbhi	r3, r3, #360	; 0x168
 8000e9c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8000ea0:	4240      	negs	r0, r0
 8000ea2:	b200      	sxth	r0, r0
}
 8000ea4:	4770      	bx	lr
    return sinTable[180 - theta];
 8000ea6:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <cos2+0x8c>)
 8000eac:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8000eb0:	4770      	bx	lr
		return ((360+theta) - 360*(1+(theta/360)));
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <cos2+0x88>)
 8000eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb8:	441a      	add	r2, r3
 8000eba:	17db      	asrs	r3, r3, #31
 8000ebc:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ec8:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
 8000ecc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000ed0:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	e7d2      	b.n	8000e80 <cos2+0x2c>
 8000eda:	bf00      	nop
 8000edc:	b60b60b7 	.word	0xb60b60b7
 8000ee0:	08004788 	.word	0x08004788
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <arctan2>:
 * This function computes arctan2(x)
 *
 * @param float x, y
 * @return uint18_t arctan2(x) range 0 to 360 degrees
 */
uint16_t arctan2(float y,float x){
 8000ee8:	b508      	push	{r3, lr}
   abs_y = mod(y)+0.0000001;
 8000eea:	eef0 7ac0 	vabs.f32	s15, s0
uint16_t arctan2(float y,float x){
 8000eee:	ed2d 8b02 	vpush	{d8}
   abs_y = mod(y)+0.0000001;
 8000ef2:	ee17 0a90 	vmov	r0, s15
uint16_t arctan2(float y,float x){
 8000ef6:	eeb0 8a60 	vmov.f32	s16, s1
 8000efa:	eef0 8a40 	vmov.f32	s17, s0
   abs_y = mod(y)+0.0000001;
 8000efe:	f7ff facf 	bl	80004a0 <__aeabi_f2d>
 8000f02:	a332      	add	r3, pc, #200	; (adr r3, 8000fcc <arctan2+0xe4>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff f96c 	bl	80001e4 <__adddf3>
 8000f0c:	f7ff fb20 	bl	8000550 <__aeabi_d2f>
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <arctan2+0xc0>)

   if (x>=0){
 8000f12:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   abs_y = mod(y)+0.0000001;
 8000f1a:	ee07 0a90 	vmov	s15, r0
 8000f1e:	6018      	str	r0, [r3, #0]
   if (x>=0){
 8000f20:	db31      	blt.n	8000f86 <arctan2+0x9e>
      r = (x - abs_y)/(x + abs_y);
 8000f22:	ee38 7a67 	vsub.f32	s14, s16, s15
 8000f26:	ee77 7a88 	vadd.f32	s15, s15, s16
      angle = (1-r)*c1;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <arctan2+0xc4>)
      r = (x - abs_y)/(x + abs_y);
 8000f2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
      angle = (1-r)*c1;
 8000f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f34:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000f38:	edd3 7a00 	vldr	s15, [r3]
 8000f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <arctan2+0xc8>)
      angle = c2 - (r*c1);
   }


   if (y < 0){
	   tempTheta = (uint16_t)(180-(angle*57));
 8000f42:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000fb4 <arctan2+0xcc>
 8000f46:	edc3 6a00 	vstr	s13, [r3]
   if (y < 0){
 8000f4a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
	   tempTheta = (uint16_t)(180-(angle*57));
 8000f4e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000fb8 <arctan2+0xd0>
 8000f52:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <arctan2+0xd4>)
   } else {
	   tempTheta = (uint16_t)(180+(angle*57));
   }

   return (tempTheta - atan2Error[tempTheta] + 5);
 8000f54:	491a      	ldr	r1, [pc, #104]	; (8000fc0 <arctan2+0xd8>)
 8000f56:	ed82 7a00 	vstr	s14, [r2]
   if (y < 0){
 8000f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	   tempTheta = (uint16_t)(180-(angle*57));
 8000f5e:	bf48      	it	mi
 8000f60:	eee7 7a66 	vfmsmi.f32	s15, s14, s13
}
 8000f64:	ecbd 8b02 	vpop	{d8}
	   tempTheta = (uint16_t)(180+(angle*57));
 8000f68:	bf58      	it	pl
 8000f6a:	eee7 7a26 	vfmapl.f32	s15, s14, s13
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <arctan2+0xdc>)
 8000f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f74:	ee17 3a90 	vmov	r3, s15
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	8013      	strh	r3, [r2, #0]
   return (tempTheta - atan2Error[tempTheta] + 5);
 8000f7c:	5cc8      	ldrb	r0, [r1, r3]
 8000f7e:	3305      	adds	r3, #5
 8000f80:	1a18      	subs	r0, r3, r0
}
 8000f82:	b280      	uxth	r0, r0
 8000f84:	bd08      	pop	{r3, pc}
      r = (x + abs_y) / (abs_y - x);
 8000f86:	ee77 5a88 	vadd.f32	s11, s15, s16
 8000f8a:	ee77 7ac8 	vsub.f32	s15, s15, s16
      angle = c2 - (r*c1);
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <arctan2+0xc4>)
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <arctan2+0xe0>)
 8000f92:	ed92 6a00 	vldr	s12, [r2]
 8000f96:	ed93 7a00 	vldr	s14, [r3]
      r = (x + abs_y) / (abs_y - x);
 8000f9a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
      angle = c2 - (r*c1);
 8000f9e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8000fa2:	e7cd      	b.n	8000f40 <arctan2+0x58>
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	20000074 	.word	0x20000074
 8000fac:	20000024 	.word	0x20000024
 8000fb0:	2000007c 	.word	0x2000007c
 8000fb4:	43340000 	.word	0x43340000
 8000fb8:	42640000 	.word	0x42640000
 8000fbc:	20000078 	.word	0x20000078
 8000fc0:	08004620 	.word	0x08004620
 8000fc4:	20000080 	.word	0x20000080
 8000fc8:	20000028 	.word	0x20000028
 8000fcc:	9abcaf48 	.word	0x9abcaf48
 8000fd0:	3e7ad7f2 	.word	0x3e7ad7f2

08000fd4 <parkTransform>:

/**
 * This function computes Park transform
 *
 */
void parkTransform(short a, short b, short c, struct directQuad *Xdq){
 8000fd4:	b4f0      	push	{r4, r5, r6, r7}
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000fd6:	4c16      	ldr	r4, [pc, #88]	; (8001030 <parkTransform+0x5c>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000fd8:	4e16      	ldr	r6, [pc, #88]	; (8001034 <parkTransform+0x60>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000fda:	8824      	ldrh	r4, [r4, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000fdc:	8836      	ldrh	r6, [r6, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000fde:	4d16      	ldr	r5, [pc, #88]	; (8001038 <parkTransform+0x64>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000fe0:	4f16      	ldr	r7, [pc, #88]	; (800103c <parkTransform+0x68>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000fe2:	882d      	ldrh	r5, [r5, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000fe4:	883f      	ldrh	r7, [r7, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000fe6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001040 <parkTransform+0x6c>
 8000fea:	fb14 fc01 	smulbb	ip, r4, r1
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000fee:	fb16 f101 	smulbb	r1, r6, r1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000ff2:	4c14      	ldr	r4, [pc, #80]	; (8001044 <parkTransform+0x70>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000ff4:	4e14      	ldr	r6, [pc, #80]	; (8001048 <parkTransform+0x74>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000ff6:	8824      	ldrh	r4, [r4, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000ff8:	8836      	ldrh	r6, [r6, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000ffa:	fb15 c500 	smlabb	r5, r5, r0, ip
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000ffe:	fb10 1007 	smlabb	r0, r0, r7, r1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8001002:	fb14 5102 	smlabb	r1, r4, r2, r5
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8001006:	fb12 0206 	smlabb	r2, r2, r6, r0
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 800100a:	ee07 1a10 	vmov	s14, r1
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 800100e:	ee07 2a90 	vmov	s15, r2
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8001012:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 800101a:	ee27 7a26 	vmul.f32	s14, s14, s13
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 800101e:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 8001022:	bcf0      	pop	{r4, r5, r6, r7}
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8001024:	ed83 7a00 	vstr	s14, [r3]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8001028:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000008e 	.word	0x2000008e
 8001034:	20000088 	.word	0x20000088
 8001038:	20000090 	.word	0x20000090
 800103c:	20000094 	.word	0x20000094
 8001040:	3aaaaaab 	.word	0x3aaaaaab
 8001044:	20000096 	.word	0x20000096
 8001048:	2000008a 	.word	0x2000008a

0800104c <clarkeTransform>:
/**
 * This function computes Clarke transform
 *
 */
void clarkeTransform(float a, float b, float c, struct alphaBeta *Xalbt){
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 800104c:	ee30 6a81 	vadd.f32	s12, s1, s2
 8001050:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001078 <clarkeTransform+0x2c>
 8001054:	eddf 6a09 	vldr	s13, [pc, #36]	; 800107c <clarkeTransform+0x30>
	Xalbt->beta = (b-c)*250/433;
 8001058:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001080 <clarkeTransform+0x34>
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 800105c:	ee67 7ac6 	vnmul.f32	s15, s15, s12
	Xalbt->beta = (b-c)*250/433;
 8001060:	ee30 1ac1 	vsub.f32	s2, s1, s2
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001064:	eee0 7a26 	vfma.f32	s15, s0, s13
	Xalbt->beta = (b-c)*250/433;
 8001068:	ee61 0a07 	vmul.f32	s1, s2, s14
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 800106c:	edc0 7a00 	vstr	s15, [r0]
	Xalbt->beta = (b-c)*250/433;
 8001070:	edc0 0a01 	vstr	s1, [r0, #4]
}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	3eaaaaab 	.word	0x3eaaaaab
 800107c:	3f2aaaab 	.word	0x3f2aaaab
 8001080:	3f13ce56 	.word	0x3f13ce56

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b530      	push	{r4, r5, lr}
 8001086:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001088:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108a:	2258      	movs	r2, #88	; 0x58
 800108c:	a810      	add	r0, sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108e:	e9cd 1100 	strd	r1, r1, [sp]
 8001092:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	910a      	str	r1, [sp, #40]	; 0x28
 8001098:	9108      	str	r1, [sp, #32]
 800109a:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109e:	f003 faab 	bl	80045f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2202      	movs	r2, #2
 80010ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b6:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80010bc:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	9109      	str	r1, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f001 fbbf 	bl	8002848 <HAL_RCC_OscConfig>
 80010ca:	b108      	cbz	r0, 80010d0 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ce:	e7fe      	b.n	80010ce <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	240f      	movs	r4, #15
 80010d4:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010de:	4668      	mov	r0, sp
 80010e0:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	e9cd 4500 	strd	r4, r5, [sp]
 80010e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ea:	f001 fe9b 	bl	8002e24 <HAL_RCC_ClockConfig>
 80010ee:	b108      	cbz	r0, 80010f4 <SystemClock_Config+0x70>
 80010f0:	b672      	cpsid	i
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <SystemClock_Config+0x6e>
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 80010f8:	f241 0182 	movw	r1, #4226	; 0x1082
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80010fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8001102:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001104:	9213      	str	r2, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001106:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8001108:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	f001 ffd7 	bl	80030bc <HAL_RCCEx_PeriphCLKConfig>
 800110e:	b108      	cbz	r0, 8001114 <SystemClock_Config+0x90>
 8001110:	b672      	cpsid	i
  while (1)
 8001112:	e7fe      	b.n	8001112 <SystemClock_Config+0x8e>
}
 8001114:	b027      	add	sp, #156	; 0x9c
 8001116:	bd30      	pop	{r4, r5, pc}

08001118 <main>:
{
 8001118:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	2400      	movs	r4, #0
{
 800111c:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 800111e:	f000 fc25 	bl	800196c <HAL_Init>
  SystemClock_Config();
 8001122:	f7ff ffaf 	bl	8001084 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 800112a:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 80013f0 <main+0x2d8>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001138:	4da9      	ldr	r5, [pc, #676]	; (80013e0 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800113e:	f8c8 3014 	str.w	r3, [r8, #20]
 8001142:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114a:	9303      	str	r3, [sp, #12]
 800114c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001156:	f8c8 3014 	str.w	r3, [r8, #20]
 800115a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	9304      	str	r3, [sp, #16]
 8001164:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	f8c8 3014 	str.w	r3, [r8, #20]
 8001172:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800117c:	4622      	mov	r2, r4
 800117e:	2120      	movs	r1, #32
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001186:	f001 fb4b 	bl	8002820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 800118a:	4896      	ldr	r0, [pc, #600]	; (80013e4 <main+0x2cc>)
 800118c:	4622      	mov	r2, r4
 800118e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001192:	f001 fb45 	bl	8002820 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800119e:	4891      	ldr	r0, [pc, #580]	; (80013e4 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80011a2:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80011a4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011a8:	2600      	movs	r6, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f001 fa3d 	bl	8002628 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ae:	2700      	movs	r7, #0
 80011b0:	2220      	movs	r2, #32
 80011b2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	a916      	add	r1, sp, #88	; 0x58
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80011be:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f001 fa31 	bl	8002628 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80011c6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80011ca:	2301      	movs	r3, #1
 80011cc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	4884      	ldr	r0, [pc, #528]	; (80013e4 <main+0x2cc>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80011d2:	2303      	movs	r3, #3
 80011d4:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80011d8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f001 fa24 	bl	8002628 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80011e0:	4622      	mov	r2, r4
 80011e2:	2103      	movs	r1, #3
 80011e4:	2028      	movs	r0, #40	; 0x28
 80011e6:	f001 f939 	bl	800245c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f001 f96e 	bl	80024cc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f0:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	f885 4020 	strb.w	r4, [r5, #32]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	f8c8 3014 	str.w	r3, [r8, #20]
 8001200:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001204:	62ec      	str	r4, [r5, #44]	; 0x2c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120e:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001212:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	f8c8 3014 	str.w	r3, [r8, #20]
 800121e:	f8d8 3014 	ldr.w	r3, [r8, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001222:	606c      	str	r4, [r5, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	9302      	str	r3, [sp, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800122a:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.NbrOfConversion = 2;
 800122e:	2302      	movs	r3, #2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001230:	9802      	ldr	r0, [sp, #8]
  hadc1.Init.NbrOfConversion = 2;
 8001232:	61eb      	str	r3, [r5, #28]
  hadc1.Instance = ADC1;
 8001234:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001238:	2301      	movs	r3, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123a:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123e:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001240:	832a      	strh	r2, [r5, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001246:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800124a:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 800124e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001256:	e9c5 3804 	strd	r3, r8, [r5, #16]
  ADC_MultiModeTypeDef multimode = {0};
 800125a:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800125c:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Instance = ADC1;
 800125e:	6029      	str	r1, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001260:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001262:	f000 fc49 	bl	8001af8 <HAL_ADC_Init>
 8001266:	b108      	cbz	r0, 800126c <main+0x154>
 8001268:	b672      	cpsid	i
  while (1)
 800126a:	e7fe      	b.n	800126a <main+0x152>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800126c:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800126e:	a90e      	add	r1, sp, #56	; 0x38
 8001270:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001272:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001274:	f001 f84e 	bl	8002314 <HAL_ADCEx_MultiModeConfigChannel>
 8001278:	b108      	cbz	r0, 800127e <main+0x166>
 800127a:	b672      	cpsid	i
  while (1)
 800127c:	e7fe      	b.n	800127c <main+0x164>
  sConfig.Channel = ADC_CHANNEL_1;
 800127e:	2201      	movs	r2, #1
 8001280:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001282:	a916      	add	r1, sp, #88	; 0x58
 8001284:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001286:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 800128a:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 800128e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001292:	f000 fe7f 	bl	8001f94 <HAL_ADC_ConfigChannel>
 8001296:	b108      	cbz	r0, 800129c <main+0x184>
 8001298:	b672      	cpsid	i
  while (1)
 800129a:	e7fe      	b.n	800129a <main+0x182>
  sConfig.Channel = ADC_CHANNEL_7;
 800129c:	2207      	movs	r2, #7
 800129e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	4628      	mov	r0, r5
 80012a2:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_7;
 80012a4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	f000 fe74 	bl	8001f94 <HAL_ADC_ConfigChannel>
 80012ac:	4604      	mov	r4, r0
 80012ae:	b108      	cbz	r0, 80012b4 <main+0x19c>
 80012b0:	b672      	cpsid	i
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <main+0x19a>
  htim1.Instance = TIM1;
 80012b4:	4d4c      	ldr	r5, [pc, #304]	; (80013e8 <main+0x2d0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b8:	4601      	mov	r1, r0
 80012ba:	222c      	movs	r2, #44	; 0x2c
 80012bc:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012be:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80012c2:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 80012c6:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80012d2:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d4:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d8:	f003 f98e 	bl	80045f8 <memset>
  htim1.Instance = TIM1;
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <main+0x2d4>)
 80012de:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 13;
 80012e0:	200d      	movs	r0, #13
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80012e2:	2120      	movs	r1, #32
  htim1.Init.Period = 517;
 80012e4:	f240 2205 	movw	r2, #517	; 0x205
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e8:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 13;
 80012ea:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ec:	4628      	mov	r0, r5
  htim1.Init.Period = 517;
 80012ee:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f4:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f6:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f8:	f002 f8c4 	bl	8003484 <HAL_TIM_Base_Init>
 80012fc:	b108      	cbz	r0, 8001302 <main+0x1ea>
 80012fe:	b672      	cpsid	i
  while (1)
 8001300:	e7fe      	b.n	8001300 <main+0x1e8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001306:	a90a      	add	r1, sp, #40	; 0x28
 8001308:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800130c:	f002 fb50 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 8001310:	b108      	cbz	r0, 8001316 <main+0x1fe>
 8001312:	b672      	cpsid	i
  while (1)
 8001314:	e7fe      	b.n	8001314 <main+0x1fc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001316:	4628      	mov	r0, r5
 8001318:	f002 f94a 	bl	80035b0 <HAL_TIM_PWM_Init>
 800131c:	b108      	cbz	r0, 8001322 <main+0x20a>
 800131e:	b672      	cpsid	i
  while (1)
 8001320:	e7fe      	b.n	8001320 <main+0x208>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001322:	2270      	movs	r2, #112	; 0x70
 8001324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132a:	a906      	add	r1, sp, #24
 800132c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800132e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001332:	f002 fe33 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	b108      	cbz	r0, 800133c <main+0x224>
 8001338:	b672      	cpsid	i
  while (1)
 800133a:	e7fe      	b.n	800133a <main+0x222>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133c:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8001340:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	2660      	movs	r6, #96	; 0x60
 8001348:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134a:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	a90e      	add	r1, sp, #56	; 0x38
 800134e:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001350:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001354:	f002 fcf0 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8001358:	b108      	cbz	r0, 800135e <main+0x246>
 800135a:	b672      	cpsid	i
  while (1)
 800135c:	e7fe      	b.n	800135c <main+0x244>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135e:	4642      	mov	r2, r8
 8001360:	4628      	mov	r0, r5
 8001362:	a90e      	add	r1, sp, #56	; 0x38
 8001364:	f002 fce8 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8001368:	b108      	cbz	r0, 800136e <main+0x256>
 800136a:	b672      	cpsid	i
  while (1)
 800136c:	e7fe      	b.n	800136c <main+0x254>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <main+0x2d0>)
 8001370:	2208      	movs	r2, #8
 8001372:	a90e      	add	r1, sp, #56	; 0x38
 8001374:	f002 fce0 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8001378:	b108      	cbz	r0, 800137e <main+0x266>
 800137a:	b672      	cpsid	i
  while (1)
 800137c:	e7fe      	b.n	800137c <main+0x264>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800137e:	481a      	ldr	r0, [pc, #104]	; (80013e8 <main+0x2d0>)
 8001380:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001382:	2470      	movs	r4, #112	; 0x70
 8001384:	f44f 7500 	mov.w	r5, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001388:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800138a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138e:	f002 fcd3 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	b108      	cbz	r0, 800139a <main+0x282>
 8001396:	b672      	cpsid	i
  while (1)
 8001398:	e7fe      	b.n	8001398 <main+0x280>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139a:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800139c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a0:	2300      	movs	r3, #0
 80013a2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80013b0:	2200      	movs	r2, #0
 80013b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80013ba:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80013be:	2200      	movs	r2, #0
 80013c0:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <main+0x2d0>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80013c4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c8:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80013ca:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 80013ce:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d2:	f002 fe3d 	bl	8004050 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d6:	4604      	mov	r4, r0
 80013d8:	b160      	cbz	r0, 80013f4 <main+0x2dc>
 80013da:	b672      	cpsid	i
  while (1)
 80013dc:	e7fe      	b.n	80013dc <main+0x2c4>
 80013de:	bf00      	nop
 80013e0:	20000258 	.word	0x20000258
 80013e4:	48000800 	.word	0x48000800
 80013e8:	20000330 	.word	0x20000330
 80013ec:	40012c00 	.word	0x40012c00
 80013f0:	40021000 	.word	0x40021000
  HAL_TIM_MspPostInit(&htim1);
 80013f4:	4849      	ldr	r0, [pc, #292]	; (800151c <main+0x404>)
 80013f6:	f000 f9a7 	bl	8001748 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80013fa:	4b49      	ldr	r3, [pc, #292]	; (8001520 <main+0x408>)
 80013fc:	4a49      	ldr	r2, [pc, #292]	; (8001524 <main+0x40c>)
  huart2.Init.BaudRate = 2250000;
 80013fe:	484a      	ldr	r0, [pc, #296]	; (8001528 <main+0x410>)
  huart2.Instance = USART2;
 8001400:	601a      	str	r2, [r3, #0]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001402:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001406:	2120      	movs	r1, #32
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001408:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.BaudRate = 2250000;
 800140c:	6058      	str	r0, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140e:	260c      	movs	r6, #12
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001410:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001414:	4618      	mov	r0, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	609c      	str	r4, [r3, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141c:	619c      	str	r4, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800141e:	61dd      	str	r5, [r3, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001420:	6259      	str	r1, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	615e      	str	r6, [r3, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001426:	621f      	str	r7, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001428:	f003 f85a 	bl	80044e0 <HAL_UART_Init>
 800142c:	b108      	cbz	r0, 8001432 <main+0x31a>
 800142e:	b672      	cpsid	i
  while (1)
 8001430:	e7fe      	b.n	8001430 <main+0x318>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001432:	4c3e      	ldr	r4, [pc, #248]	; (800152c <main+0x414>)
  hadc2.Instance = ADC2;
 8001434:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <main+0x418>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	9016      	str	r0, [sp, #88]	; 0x58
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001438:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	f04f 0801 	mov.w	r8, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8001440:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 8001444:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001448:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hadc2.Init.NbrOfConversion = 2;
 800144c:	2102      	movs	r1, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 800144e:	901b      	str	r0, [sp, #108]	; 0x6c
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001450:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001454:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001456:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800145a:	60e0      	str	r0, [r4, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800145c:	6360      	str	r0, [r4, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800145e:	f04f 0904 	mov.w	r9, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001462:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001464:	8323      	strh	r3, [r4, #24]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001466:	e9c4 8904 	strd	r8, r9, [r4, #16]
  hadc2.Init.NbrOfConversion = 2;
 800146a:	61e1      	str	r1, [r4, #28]
  hadc2.Instance = ADC2;
 800146c:	6022      	str	r2, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001472:	f000 fb41 	bl	8001af8 <HAL_ADC_Init>
 8001476:	b108      	cbz	r0, 800147c <main+0x364>
 8001478:	b672      	cpsid	i
  while (1)
 800147a:	e7fe      	b.n	800147a <main+0x362>
  sConfig.Channel = ADC_CHANNEL_4;
 800147c:	2204      	movs	r2, #4
 800147e:	2301      	movs	r3, #1
 8001480:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001484:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_4;
 8001486:	2200      	movs	r2, #0
 8001488:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800148a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 800148c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8001490:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001494:	f000 fd7e 	bl	8001f94 <HAL_ADC_ConfigChannel>
 8001498:	b108      	cbz	r0, 800149e <main+0x386>
 800149a:	b672      	cpsid	i
  while (1)
 800149c:	e7fe      	b.n	800149c <main+0x384>
  sConfig.Channel = ADC_CHANNEL_9;
 800149e:	2209      	movs	r2, #9
 80014a0:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014a2:	a916      	add	r1, sp, #88	; 0x58
 80014a4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 80014a6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014aa:	f000 fd73 	bl	8001f94 <HAL_ADC_ConfigChannel>
 80014ae:	4605      	mov	r5, r0
 80014b0:	b108      	cbz	r0, 80014b6 <main+0x39e>
 80014b2:	b672      	cpsid	i
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <main+0x39c>
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014b6:	4602      	mov	r2, r0
 80014b8:	4601      	mov	r1, r0
 80014ba:	201b      	movs	r0, #27
 80014bc:	f000 ffce 	bl	800245c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014c0:	201b      	movs	r0, #27
 80014c2:	f001 f803 	bl	80024cc <HAL_NVIC_EnableIRQ>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80014c6:	4629      	mov	r1, r5
 80014c8:	481a      	ldr	r0, [pc, #104]	; (8001534 <main+0x41c>)
 80014ca:	f000 fd17 	bl	8001efc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80014ce:	4629      	mov	r1, r5
 80014d0:	4620      	mov	r0, r4
 80014d2:	f000 fd13 	bl	8001efc <HAL_ADCEx_Calibration_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <main+0x420>)
 80014d8:	4642      	mov	r2, r8
 80014da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014de:	f001 f99f 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <main+0x420>)
 80014e4:	4642      	mov	r2, r8
 80014e6:	4639      	mov	r1, r7
 80014e8:	f001 f99a 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 80014ec:	4642      	mov	r2, r8
 80014ee:	4812      	ldr	r0, [pc, #72]	; (8001538 <main+0x420>)
 80014f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f4:	f001 f994 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 80014f8:	4631      	mov	r1, r6
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <main+0x404>)
 80014fc:	f002 f986 	bl	800380c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001500:	4629      	mov	r1, r5
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <main+0x404>)
 8001504:	f002 f8e8 	bl	80036d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001508:	4649      	mov	r1, r9
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <main+0x404>)
 800150c:	f002 f8e4 	bl	80036d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <main+0x404>)
 8001512:	2108      	movs	r1, #8
 8001514:	f002 f8e0 	bl	80036d8 <HAL_TIM_PWM_Start>
  while (1)
 8001518:	e7fe      	b.n	8001518 <main+0x400>
 800151a:	bf00      	nop
 800151c:	20000330 	.word	0x20000330
 8001520:	200000e8 	.word	0x200000e8
 8001524:	40004400 	.word	0x40004400
 8001528:	00225510 	.word	0x00225510
 800152c:	20000208 	.word	0x20000208
 8001530:	50000100 	.word	0x50000100
 8001534:	20000258 	.word	0x20000258
 8001538:	48000800 	.word	0x48000800

0800153c <Error_Handler>:
 800153c:	b672      	cpsid	i
  while (1)
 800153e:	e7fe      	b.n	800153e <Error_Handler+0x2>

08001540 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_MspInit+0x30>)
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	619a      	str	r2, [r3, #24]
 800154a:	699a      	ldr	r2, [r3, #24]
{
 800154c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	f002 0201 	and.w	r2, r2, #1
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800155c:	61da      	str	r2, [r3, #28]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001568:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800156c:	f000 bf62 	b.w	8002434 <HAL_NVIC_SetPriorityGrouping>
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001576:	6802      	ldr	r2, [r0, #0]
{
 8001578:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800157c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001584:	e9cd 3308 	strd	r3, r3, [sp, #32]
{
 8001588:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 800158c:	d04a      	beq.n	8001624 <HAL_ADC_MspInit+0xb0>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_ADC_MspInit+0x144>)
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001594:	b00c      	add	sp, #48	; 0x30
 8001596:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001598:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_ADC_MspInit+0x148>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800159e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015a2:	d07a      	beq.n	800169a <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <HAL_ADC_MspInit+0x14c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	4847      	ldr	r0, [pc, #284]	; (80016c4 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a8:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA2_Channel1;
 80015aa:	4d47      	ldr	r5, [pc, #284]	; (80016c8 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80015b8:	9204      	str	r2, [sp, #16]
 80015ba:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015cc:	2208      	movs	r2, #8
 80015ce:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f001 f824 	bl	8002628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015e0:	2303      	movs	r3, #3
 80015e2:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	a906      	add	r1, sp, #24
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f001 f81a 	bl	8002628 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_ADC_MspInit+0x158>)
 80015f6:	602b      	str	r3, [r5, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fa:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001602:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	60e8      	str	r0, [r5, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001606:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001610:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001612:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001614:	f000 ff82 	bl	800251c <HAL_DMA_Init>
 8001618:	2800      	cmp	r0, #0
 800161a:	d149      	bne.n	80016b0 <HAL_ADC_MspInit+0x13c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800161c:	63a5      	str	r5, [r4, #56]	; 0x38
 800161e:	626c      	str	r4, [r5, #36]	; 0x24
}
 8001620:	b00c      	add	sp, #48	; 0x30
 8001622:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001624:	4a25      	ldr	r2, [pc, #148]	; (80016bc <HAL_ADC_MspInit+0x148>)
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800162a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800162c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800162e:	d029      	beq.n	8001684 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <HAL_ADC_MspInit+0x14c>)
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001632:	4824      	ldr	r0, [pc, #144]	; (80016c4 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001634:	695a      	ldr	r2, [r3, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001636:	4d26      	ldr	r5, [pc, #152]	; (80016d0 <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001638:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8001658:	2202      	movs	r2, #2
 800165a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2600      	movs	r6, #0
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001660:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8001662:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001668:	f000 ffde 	bl	8002628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 800166c:	2303      	movs	r3, #3
 800166e:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8001670:	a906      	add	r1, sp, #24
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8001676:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 800167c:	f000 ffd4 	bl	8002628 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_ADC_MspInit+0x160>)
 8001682:	e7b8      	b.n	80015f6 <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_ADC_MspInit+0x14c>)
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	9b00      	ldr	r3, [sp, #0]
 8001698:	e7ca      	b.n	8001630 <HAL_ADC_MspInit+0xbc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_ADC_MspInit+0x14c>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	9303      	str	r3, [sp, #12]
 80016ac:	9b03      	ldr	r3, [sp, #12]
 80016ae:	e779      	b.n	80015a4 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 80016b0:	f7ff ff44 	bl	800153c <Error_Handler>
 80016b4:	e7b2      	b.n	800161c <HAL_ADC_MspInit+0xa8>
 80016b6:	bf00      	nop
 80016b8:	50000100 	.word	0x50000100
 80016bc:	20000084 	.word	0x20000084
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000800 	.word	0x48000800
 80016c8:	2000037c 	.word	0x2000037c
 80016cc:	40020408 	.word	0x40020408
 80016d0:	200002ec 	.word	0x200002ec
 80016d4:	40020008 	.word	0x40020008

080016d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80016da:	6801      	ldr	r1, [r0, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_TIM_Base_MspInit+0x6c>)
{
 80016de:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80016e2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80016ec:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 80016ee:	d001      	beq.n	80016f4 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016f0:	b008      	add	sp, #32
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 80016fc:	200c      	movs	r0, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001704:	619a      	str	r2, [r3, #24]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800170c:	9200      	str	r2, [sp, #0]
 800170e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800171a:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001722:	2201      	movs	r2, #1
 8001724:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001726:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001728:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800172c:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001732:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001736:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800173c:	f000 ff74 	bl	8002628 <HAL_GPIO_Init>
}
 8001740:	b008      	add	sp, #32
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	40012c00 	.word	0x40012c00

08001748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800174a:	6801      	ldr	r1, [r0, #0]
 800174c:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <HAL_TIM_MspPostInit+0x5c>)
{
 800174e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8001752:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001758:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800175c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800175e:	d001      	beq.n	8001764 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001760:	b008      	add	sp, #32
 8001762:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001768:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800176c:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001778:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001780:	2202      	movs	r2, #2
 8001782:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001786:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 800178a:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001790:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001794:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f000 ff45 	bl	8002628 <HAL_GPIO_Init>
}
 800179e:	b008      	add	sp, #32
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
 80017a2:	bf00      	nop
 80017a4:	40012c00 	.word	0x40012c00

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80017aa:	6802      	ldr	r2, [r0, #0]
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_UART_MspInit+0xc0>)
{
 80017ae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80017b2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80017b8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80017bc:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 80017be:	d001      	beq.n	80017c4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c0:	b008      	add	sp, #32
 80017c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80017c8:	4e28      	ldr	r6, [pc, #160]	; (800186c <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ca:	69da      	ldr	r2, [r3, #28]
 80017cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017d0:	61da      	str	r2, [r3, #28]
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80017ec:	220c      	movs	r2, #12
 80017ee:	2302      	movs	r3, #2
 80017f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017f4:	2200      	movs	r2, #0
 80017f6:	2300      	movs	r3, #0
 80017f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001804:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f000 ff0d 	bl	8002628 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800180e:	4918      	ldr	r1, [pc, #96]	; (8001870 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001810:	6074      	str	r4, [r6, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001812:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001814:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001816:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001818:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181c:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800181e:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001820:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001822:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001824:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001826:	f000 fe79 	bl	800251c <HAL_DMA_Init>
 800182a:	b9b0      	cbnz	r0, 800185a <HAL_UART_MspInit+0xb2>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800182c:	4c11      	ldr	r4, [pc, #68]	; (8001874 <HAL_UART_MspInit+0xcc>)
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_UART_MspInit+0xd0>)
 8001830:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001832:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001834:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001836:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001838:	672e      	str	r6, [r5, #112]	; 0x70
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800183a:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183c:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001840:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001844:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001848:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800184a:	6061      	str	r1, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800184c:	f000 fe66 	bl	800251c <HAL_DMA_Init>
 8001850:	b930      	cbnz	r0, 8001860 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001852:	66ec      	str	r4, [r5, #108]	; 0x6c
 8001854:	6265      	str	r5, [r4, #36]	; 0x24
}
 8001856:	b008      	add	sp, #32
 8001858:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800185a:	f7ff fe6f 	bl	800153c <Error_Handler>
 800185e:	e7e5      	b.n	800182c <HAL_UART_MspInit+0x84>
      Error_Handler();
 8001860:	f7ff fe6c 	bl	800153c <Error_Handler>
 8001864:	e7f5      	b.n	8001852 <HAL_UART_MspInit+0xaa>
 8001866:	bf00      	nop
 8001868:	40004400 	.word	0x40004400
 800186c:	200001c4 	.word	0x200001c4
 8001870:	4002006c 	.word	0x4002006c
 8001874:	200002a8 	.word	0x200002a8
 8001878:	40020080 	.word	0x40020080

0800187c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800187c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	2120      	movs	r1, #32
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f000 ffcb 	bl	8002820 <HAL_GPIO_WritePin>
  executeAll();
 800188a:	f7ff f963 	bl	8000b54 <executeAll>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800188e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001892:	2200      	movs	r2, #0
 8001894:	2120      	movs	r1, #32
 8001896:	f000 ffc3 	bl	8002820 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800189a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 800189e:	4801      	ldr	r0, [pc, #4]	; (80018a4 <TIM1_CC_IRQHandler+0x28>)
 80018a0:	f002 b940 	b.w	8003b24 <HAL_TIM_IRQHandler>
 80018a4:	20000330 	.word	0x20000330

080018a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  startStop();
 80018aa:	f7ff f949 	bl	8000b40 <startStop>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018b6:	f000 bfbb 	b.w	8002830 <HAL_GPIO_EXTI_IRQHandler>
 80018ba:	bf00      	nop

080018bc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <SystemInit+0x10>)
 80018be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopForever+0x6>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopForever+0xe>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopForever+0x16>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018fa:	f7ff ffdf 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f002 fe57 	bl	80045b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001902:	f7ff fc09 	bl	8001118 <main>

08001906 <LoopForever>:

LoopForever:
    b LoopForever
 8001906:	e7fe      	b.n	8001906 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001908:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001914:	08004880 	.word	0x08004880
  ldr r2, =_sbss
 8001918:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800191c:	200003c4 	.word	0x200003c4

08001920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC1_2_IRQHandler>
	...

08001924 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_InitTick+0x3c>)
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_InitTick+0x40>)
 800192a:	7812      	ldrb	r2, [r2, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
{
 800192e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001934:	fbb0 f0f2 	udiv	r0, r0, r2
 8001938:	fbb3 f0f0 	udiv	r0, r3, r0
 800193c:	f000 fdd4 	bl	80024e8 <HAL_SYSTICK_Config>
 8001940:	b908      	cbnz	r0, 8001946 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	2d0f      	cmp	r5, #15
 8001944:	d901      	bls.n	800194a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001946:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8001948:	bd38      	pop	{r3, r4, r5, pc}
 800194a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	4602      	mov	r2, r0
 800194e:	4629      	mov	r1, r5
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 fd82 	bl	800245c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_InitTick+0x44>)
 800195a:	4620      	mov	r0, r4
 800195c:	601d      	str	r5, [r3, #0]
}
 800195e:	bd38      	pop	{r3, r4, r5, pc}
 8001960:	20000030 	.word	0x20000030
 8001964:	2000002c 	.word	0x2000002c
 8001968:	20000034 	.word	0x20000034

0800196c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_Init+0x20>)
{
 800196e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 fd5b 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2004      	movs	r0, #4
 8001980:	f7ff ffd0 	bl	8001924 <HAL_InitTick>
  HAL_MspInit();
 8001984:	f7ff fddc 	bl	8001540 <HAL_MspInit>
}
 8001988:	2000      	movs	r0, #0
 800198a:	bd08      	pop	{r3, pc}
 800198c:	40022000 	.word	0x40022000

08001990 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001990:	4b01      	ldr	r3, [pc, #4]	; (8001998 <HAL_GetTick+0x8>)
 8001992:	6818      	ldr	r0, [r3, #0]
}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200003c0 	.word	0x200003c0

0800199c <HAL_ADC_ConvCpltCallback>:
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <HAL_ADC_ConvHalfCpltCallback>:
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop

080019a4 <HAL_ADC_ErrorCallback>:
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019a8:	6802      	ldr	r2, [r0, #0]
{
 80019aa:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019ac:	6893      	ldr	r3, [r2, #8]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019b6:	2000      	movs	r0, #0
}
 80019b8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019ba:	6811      	ldr	r1, [r2, #0]
 80019bc:	07cc      	lsls	r4, r1, #31
 80019be:	d5fa      	bpl.n	80019b6 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019c0:	6891      	ldr	r1, [r2, #8]
 80019c2:	f001 010d 	and.w	r1, r1, #13
 80019c6:	2901      	cmp	r1, #1
 80019c8:	4604      	mov	r4, r0
 80019ca:	d009      	beq.n	80019e0 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80019ce:	f042 0210 	orr.w	r2, r2, #16
 80019d2:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80019d6:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 80019da:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	6462      	str	r2, [r4, #68]	; 0x44
}
 80019de:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80019e0:	6893      	ldr	r3, [r2, #8]
 80019e2:	2103      	movs	r1, #3
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6093      	str	r3, [r2, #8]
 80019ea:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80019ec:	f7ff ffd0 	bl	8001990 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80019f6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019f8:	d403      	bmi.n	8001a02 <ADC_Disable+0x5a>
 80019fa:	e7dc      	b.n	80019b6 <ADC_Disable+0xe>
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	07db      	lsls	r3, r3, #31
 8001a00:	d5d9      	bpl.n	80019b6 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a02:	f7ff ffc5 	bl	8001990 <HAL_GetTick>
 8001a06:	1b40      	subs	r0, r0, r5
 8001a08:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a0a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a0c:	d9f6      	bls.n	80019fc <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	07d2      	lsls	r2, r2, #31
 8001a12:	d5f3      	bpl.n	80019fc <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
}
 8001a26:	bd38      	pop	{r3, r4, r5, pc}

08001a28 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a28:	6802      	ldr	r2, [r0, #0]
{
 8001a2a:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a2c:	6893      	ldr	r3, [r2, #8]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
{
 8001a34:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a36:	d026      	beq.n	8001a86 <ADC_Enable+0x5e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a38:	6891      	ldr	r1, [r2, #8]
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <ADC_Enable+0x68>)
 8001a3c:	4219      	tst	r1, r3
 8001a3e:	d009      	beq.n	8001a54 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a42:	f043 0310 	orr.w	r3, r3, #16
 8001a46:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001a50:	2001      	movs	r0, #1
}
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a54:	6893      	ldr	r3, [r2, #8]
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001a5c:	f7ff ff98 	bl	8001990 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();  
 8001a66:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a68:	d40b      	bmi.n	8001a82 <ADC_Enable+0x5a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a6a:	f7ff ff91 	bl	8001990 <HAL_GetTick>
 8001a6e:	1b43      	subs	r3, r0, r5
 8001a70:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a72:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a74:	d902      	bls.n	8001a7c <ADC_Enable+0x54>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	07d2      	lsls	r2, r2, #31
 8001a7a:	d5e1      	bpl.n	8001a40 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	07db      	lsls	r3, r3, #31
 8001a80:	d5f3      	bpl.n	8001a6a <ADC_Enable+0x42>
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
}
 8001a84:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	07d8      	lsls	r0, r3, #31
 8001a8a:	d5d5      	bpl.n	8001a38 <ADC_Enable+0x10>
  return HAL_OK;
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	e7f9      	b.n	8001a84 <ADC_Enable+0x5c>
 8001a90:	8000003f 	.word	0x8000003f

08001a94 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a94:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9c:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a9e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001aa6:	f7ff bf7d 	b.w	80019a4 <HAL_ADC_ErrorCallback>
 8001aaa:	bf00      	nop

08001aac <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001aae:	f7ff bf77 	b.w	80019a0 <HAL_ADC_ConvHalfCpltCallback>
 8001ab2:	bf00      	nop

08001ab4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab8:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001abc:	d118      	bne.n	8001af0 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ac0:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ac8:	68ca      	ldr	r2, [r1, #12]
 8001aca:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001ace:	d10c      	bne.n	8001aea <ADC_DMAConvCplt+0x36>
 8001ad0:	7e5a      	ldrb	r2, [r3, #25]
 8001ad2:	b952      	cbnz	r2, 8001aea <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ade:	04d2      	lsls	r2, r2, #19
 8001ae0:	d403      	bmi.n	8001aea <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff bf56 	b.w	800199c <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	4718      	bx	r3
 8001af6:	bf00      	nop

08001af8 <HAL_ADC_Init>:
{
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001b00:	2800      	cmp	r0, #0
 8001b02:	f000 809d 	beq.w	8001c40 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b08:	f013 0310 	ands.w	r3, r3, #16
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	d118      	bne.n	8001b42 <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b10:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001b12:	2d00      	cmp	r5, #0
 8001b14:	f000 8097 	beq.w	8001c46 <HAL_ADC_Init+0x14e>
 8001b18:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b1a:	6891      	ldr	r1, [r2, #8]
 8001b1c:	00cd      	lsls	r5, r1, #3
 8001b1e:	f140 8083 	bpl.w	8001c28 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b22:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b24:	0088      	lsls	r0, r1, #2
 8001b26:	d47f      	bmi.n	8001c28 <HAL_ADC_Init+0x130>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b28:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b2a:	06c9      	lsls	r1, r1, #27
 8001b2c:	d400      	bmi.n	8001b30 <HAL_ADC_Init+0x38>
 8001b2e:	b163      	cbz	r3, 8001b4a <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b32:	f023 0312 	bic.w	r3, r3, #18
 8001b36:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8001b3a:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8001b3c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b44:	06da      	lsls	r2, r3, #27
 8001b46:	d4f3      	bmi.n	8001b30 <HAL_ADC_Init+0x38>
 8001b48:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b4a:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001b4c:	f010 0004 	ands.w	r0, r0, #4
 8001b50:	d1ee      	bne.n	8001b30 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b54:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8001b58:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b5c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001b60:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b62:	f000 80e3 	beq.w	8001d2c <HAL_ADC_Init+0x234>
 8001b66:	4b87      	ldr	r3, [pc, #540]	; (8001d84 <HAL_ADC_Init+0x28c>)
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f000 80e7 	beq.w	8001d3c <HAL_ADC_Init+0x244>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b6e:	4986      	ldr	r1, [pc, #536]	; (8001d88 <HAL_ADC_Init+0x290>)
 8001b70:	428a      	cmp	r2, r1
 8001b72:	d075      	beq.n	8001c60 <HAL_ADC_Init+0x168>
 8001b74:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <HAL_ADC_Init+0x294>)
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d073      	beq.n	8001c62 <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b7a:	6893      	ldr	r3, [r2, #8]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	f000 80ed 	beq.w	8001d60 <HAL_ADC_Init+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b86:	4d82      	ldr	r5, [pc, #520]	; (8001d90 <HAL_ADC_Init+0x298>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b88:	68ab      	ldr	r3, [r5, #8]
 8001b8a:	6861      	ldr	r1, [r4, #4]
 8001b8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b90:	430b      	orrs	r3, r1
 8001b92:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b94:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8001b98:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001b9a:	7e65      	ldrb	r5, [r4, #25]
 8001b9c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b9e:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ba2:	2e01      	cmp	r6, #1
 8001ba4:	bf18      	it	ne
 8001ba6:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001baa:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bae:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001bb0:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bb4:	f000 8095 	beq.w	8001ce2 <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001bba:	2901      	cmp	r1, #1
 8001bbc:	d00d      	beq.n	8001bda <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001bbe:	4872      	ldr	r0, [pc, #456]	; (8001d88 <HAL_ADC_Init+0x290>)
 8001bc0:	4282      	cmp	r2, r0
 8001bc2:	f000 809e 	beq.w	8001d02 <HAL_ADC_Init+0x20a>
 8001bc6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001bca:	4282      	cmp	r2, r0
 8001bcc:	f000 8099 	beq.w	8001d02 <HAL_ADC_Init+0x20a>
 8001bd0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001bd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001bd6:	4303      	orrs	r3, r0
 8001bd8:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bda:	6891      	ldr	r1, [r2, #8]
 8001bdc:	f011 0f0c 	tst.w	r1, #12
 8001be0:	d10c      	bne.n	8001bfc <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001be2:	68d1      	ldr	r1, [r2, #12]
 8001be4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001be8:	f021 0102 	bic.w	r1, r1, #2
 8001bec:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001bee:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001bf2:	7e20      	ldrb	r0, [r4, #24]
 8001bf4:	0049      	lsls	r1, r1, #1
 8001bf6:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8001bfa:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001bfc:	68d5      	ldr	r5, [r2, #12]
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_ADC_Init+0x29c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c00:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001c02:	4029      	ands	r1, r5
 8001c04:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c06:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8001c08:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c0a:	d072      	beq.n	8001cf2 <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c0e:	f023 030f 	bic.w	r3, r3, #15
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001c14:	2000      	movs	r0, #0
 8001c16:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001c18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001c24:	b002      	add	sp, #8
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8001c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c2a:	f023 0312 	bic.w	r3, r3, #18
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c3e:	e777      	b.n	8001b30 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8001c40:	2001      	movs	r0, #1
}
 8001c42:	b002      	add	sp, #8
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c46:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8001c4a:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8001c4c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001c50:	f7ff fc90 	bl	8001574 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	6893      	ldr	r3, [r2, #8]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	d511      	bpl.n	8001c80 <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	e75c      	b.n	8001b1a <HAL_ADC_Init+0x22>
 8001c60:	494a      	ldr	r1, [pc, #296]	; (8001d8c <HAL_ADC_Init+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c62:	4d4b      	ldr	r5, [pc, #300]	; (8001d90 <HAL_ADC_Init+0x298>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c64:	6893      	ldr	r3, [r2, #8]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d061      	beq.n	8001d32 <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c6e:	688b      	ldr	r3, [r1, #8]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d187      	bne.n	8001b88 <HAL_ADC_Init+0x90>
 8001c78:	680b      	ldr	r3, [r1, #0]
 8001c7a:	07db      	lsls	r3, r3, #31
 8001c7c:	d48a      	bmi.n	8001b94 <HAL_ADC_Init+0x9c>
 8001c7e:	e783      	b.n	8001b88 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fe91 	bl	80019a8 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c88:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8001c8a:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8c:	f53f af44 	bmi.w	8001b18 <HAL_ADC_Init+0x20>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	f47f af41 	bne.w	8001b18 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8001c96:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c98:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9a:	493f      	ldr	r1, [pc, #252]	; (8001d98 <HAL_ADC_Init+0x2a0>)
 8001c9c:	4d3f      	ldr	r5, [pc, #252]	; (8001d9c <HAL_ADC_Init+0x2a4>)
 8001c9e:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8001ca4:	f020 0002 	bic.w	r0, r0, #2
 8001ca8:	f040 0002 	orr.w	r0, r0, #2
 8001cac:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cae:	6890      	ldr	r0, [r2, #8]
 8001cb0:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8001cb4:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb6:	fba5 0101 	umull	r0, r1, r5, r1
 8001cba:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cbc:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001cc2:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cc4:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001cc8:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cca:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001ccc:	9901      	ldr	r1, [sp, #4]
 8001cce:	2900      	cmp	r1, #0
 8001cd0:	f43f af23 	beq.w	8001b1a <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8001cd4:	9901      	ldr	r1, [sp, #4]
 8001cd6:	3901      	subs	r1, #1
 8001cd8:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001cda:	9901      	ldr	r1, [sp, #4]
 8001cdc:	2900      	cmp	r1, #0
 8001cde:	d1f9      	bne.n	8001cd4 <HAL_ADC_Init+0x1dc>
 8001ce0:	e71b      	b.n	8001b1a <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ce2:	bb7d      	cbnz	r5, 8001d44 <HAL_ADC_Init+0x24c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001ce4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ce6:	3901      	subs	r1, #1
 8001ce8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	e762      	b.n	8001bb8 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001cf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cf4:	69e3      	ldr	r3, [r4, #28]
 8001cf6:	f021 010f 	bic.w	r1, r1, #15
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	e788      	b.n	8001c14 <HAL_ADC_Init+0x11c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d02:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8001d06:	d028      	beq.n	8001d5a <HAL_ADC_Init+0x262>
 8001d08:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001d0c:	d02d      	beq.n	8001d6a <HAL_ADC_Init+0x272>
 8001d0e:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8001d12:	d02d      	beq.n	8001d70 <HAL_ADC_Init+0x278>
 8001d14:	f5b1 5f8a 	cmp.w	r1, #4416	; 0x1140
 8001d18:	d02d      	beq.n	8001d76 <HAL_ADC_Init+0x27e>
 8001d1a:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 8001d1e:	d02d      	beq.n	8001d7c <HAL_ADC_Init+0x284>
 8001d20:	f5b1 5f86 	cmp.w	r1, #4288	; 0x10c0
 8001d24:	bf08      	it	eq
 8001d26:	f44f 71c0 	moveq.w	r1, #384	; 0x180
 8001d2a:	e753      	b.n	8001bd4 <HAL_ADC_Init+0xdc>
 8001d2c:	4915      	ldr	r1, [pc, #84]	; (8001d84 <HAL_ADC_Init+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2e:	4d1c      	ldr	r5, [pc, #112]	; (8001da0 <HAL_ADC_Init+0x2a8>)
 8001d30:	e798      	b.n	8001c64 <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d32:	6813      	ldr	r3, [r2, #0]
 8001d34:	07de      	lsls	r6, r3, #31
 8001d36:	f53f af2d 	bmi.w	8001b94 <HAL_ADC_Init+0x9c>
 8001d3a:	e798      	b.n	8001c6e <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3c:	4d18      	ldr	r5, [pc, #96]	; (8001da0 <HAL_ADC_Init+0x2a8>)
 8001d3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001d42:	e78f      	b.n	8001c64 <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 8001d44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001d46:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8001d4a:	f041 0120 	orr.w	r1, r1, #32
 8001d4e:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d52:	f041 0101 	orr.w	r1, r1, #1
 8001d56:	6461      	str	r1, [r4, #68]	; 0x44
 8001d58:	e72e      	b.n	8001bb8 <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d5a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001d5e:	e739      	b.n	8001bd4 <HAL_ADC_Init+0xdc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	07db      	lsls	r3, r3, #31
 8001d64:	f53f af16 	bmi.w	8001b94 <HAL_ADC_Init+0x9c>
 8001d68:	e70d      	b.n	8001b86 <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d6a:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001d6e:	e731      	b.n	8001bd4 <HAL_ADC_Init+0xdc>
 8001d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d74:	e72e      	b.n	8001bd4 <HAL_ADC_Init+0xdc>
 8001d76:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001d7a:	e72b      	b.n	8001bd4 <HAL_ADC_Init+0xdc>
 8001d7c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001d80:	e728      	b.n	8001bd4 <HAL_ADC_Init+0xdc>
 8001d82:	bf00      	nop
 8001d84:	50000100 	.word	0x50000100
 8001d88:	50000400 	.word	0x50000400
 8001d8c:	50000500 	.word	0x50000500
 8001d90:	50000700 	.word	0x50000700
 8001d94:	fff0c007 	.word	0xfff0c007
 8001d98:	2000002c 	.word	0x2000002c
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	50000300 	.word	0x50000300

08001da4 <HAL_ADC_Start_DMA>:
{
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001da8:	6800      	ldr	r0, [r0, #0]
 8001daa:	6885      	ldr	r5, [r0, #8]
 8001dac:	076d      	lsls	r5, r5, #29
 8001dae:	d478      	bmi.n	8001ea2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001db0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d074      	beq.n	8001ea2 <HAL_ADC_Start_DMA+0xfe>
 8001db8:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001dba:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001dbe:	460f      	mov	r7, r1
 8001dc0:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 8001dc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001dc6:	d00f      	beq.n	8001de8 <HAL_ADC_Start_DMA+0x44>
 8001dc8:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <HAL_ADC_Start_DMA+0x13c>)
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d00c      	beq.n	8001de8 <HAL_ADC_Start_DMA+0x44>
 8001dce:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HAL_ADC_Start_DMA+0x140>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f013 0f1f 	tst.w	r3, #31
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b96b      	cbnz	r3, 8001dfa <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8001dde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001de2:	2501      	movs	r5, #1
}
 8001de4:	4628      	mov	r0, r5
 8001de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_ADC_Start_DMA+0x144>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f013 0f1f 	tst.w	r3, #31
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f1      	beq.n	8001dde <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff fe14 	bl	8001a28 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001e00:	4605      	mov	r5, r0
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d150      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0x104>
        ADC_STATE_CLR_SET(hadc->State,
 8001e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e08:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e16:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8001e1a:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e1c:	d056      	beq.n	8001ecc <HAL_ADC_Start_DMA+0x128>
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_ADC_Start_DMA+0x13c>)
 8001e20:	4299      	cmp	r1, r3
 8001e22:	d045      	beq.n	8001eb0 <HAL_ADC_Start_DMA+0x10c>
 8001e24:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	06d8      	lsls	r0, r3, #27
 8001e2c:	d050      	beq.n	8001ed0 <HAL_ADC_Start_DMA+0x12c>
 8001e2e:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <HAL_ADC_Start_DMA+0x148>)
 8001e30:	4291      	cmp	r1, r2
 8001e32:	d04d      	beq.n	8001ed0 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e3a:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e3c:	68d3      	ldr	r3, [r2, #12]
 8001e3e:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001e42:	b12b      	cbz	r3, 8001e50 <HAL_ADC_Start_DMA+0xac>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e4e:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <HAL_ADC_Start_DMA+0x14c>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e56:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e5a:	bf1c      	itt	ne
 8001e5c:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001e5e:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001e62:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001e64:	f04f 0c00 	mov.w	ip, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 8001e6a:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e6e:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e70:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e72:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <HAL_ADC_Start_DMA+0x154>)
 8001e74:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e76:	231c      	movs	r3, #28
 8001e78:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e7a:	684b      	ldr	r3, [r1, #4]
 8001e7c:	f043 0310 	orr.w	r3, r3, #16
 8001e80:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e82:	68cb      	ldr	r3, [r1, #12]
 8001e84:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e88:	463a      	mov	r2, r7
 8001e8a:	4633      	mov	r3, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e8c:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e90:	3140      	adds	r1, #64	; 0x40
 8001e92:	f000 fb87 	bl	80025a4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	6893      	ldr	r3, [r2, #8]
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6093      	str	r3, [r2, #8]
 8001ea0:	e7a0      	b.n	8001de4 <HAL_ADC_Start_DMA+0x40>
    tmp_hal_status = HAL_BUSY;
 8001ea2:	2502      	movs	r5, #2
}
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001eae:	e799      	b.n	8001de4 <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_ADC_Start_DMA+0x144>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	06db      	lsls	r3, r3, #27
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001eba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ec2:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ec4:	68d3      	ldr	r3, [r2, #12]
 8001ec6:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001eca:	e7ba      	b.n	8001e42 <HAL_ADC_Start_DMA+0x9e>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_ADC_Start_DMA+0x144>)
 8001ece:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ed6:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ed8:	68cb      	ldr	r3, [r1, #12]
 8001eda:	019a      	lsls	r2, r3, #6
 8001edc:	d5b8      	bpl.n	8001e50 <HAL_ADC_Start_DMA+0xac>
 8001ede:	e7b1      	b.n	8001e44 <HAL_ADC_Start_DMA+0xa0>
 8001ee0:	50000100 	.word	0x50000100
 8001ee4:	50000700 	.word	0x50000700
 8001ee8:	50000300 	.word	0x50000300
 8001eec:	50000400 	.word	0x50000400
 8001ef0:	08001ab5 	.word	0x08001ab5
 8001ef4:	08001aad 	.word	0x08001aad
 8001ef8:	08001a95 	.word	0x08001a95

08001efc <HAL_ADCEx_Calibration_Start>:
{
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001efe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d036      	beq.n	8001f74 <HAL_ADCEx_Calibration_Start+0x78>
 8001f06:	2701      	movs	r7, #1
 8001f08:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
 8001f10:	f7ff fd4a 	bl	80019a8 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8001f14:	4606      	mov	r6, r0
 8001f16:	bb40      	cbnz	r0, 8001f6a <HAL_ADCEx_Calibration_Start+0x6e>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001f18:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8001f1a:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001f1c:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f1e:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001f20:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001f24:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f26:	d103      	bne.n	8001f30 <HAL_ADCEx_Calibration_Start+0x34>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f36:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001f38:	f7ff fd2a 	bl	8001990 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
    tickstart = HAL_GetTick();  
 8001f42:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f44:	da0b      	bge.n	8001f5e <HAL_ADCEx_Calibration_Start+0x62>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f46:	f7ff fd23 	bl	8001990 <HAL_GetTick>
 8001f4a:	1b43      	subs	r3, r0, r5
 8001f4c:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f4e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f50:	d902      	bls.n	8001f58 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	db10      	blt.n	8001f7a <HAL_ADCEx_Calibration_Start+0x7e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	dbf3      	blt.n	8001f46 <HAL_ADCEx_Calibration_Start+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 8001f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f60:	f023 0303 	bic.w	r3, r3, #3
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001f70:	4630      	mov	r0, r6
 8001f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8001f74:	2602      	movs	r6, #2
}
 8001f76:	4630      	mov	r0, r6
 8001f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8001f7c:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	f023 0312 	bic.w	r3, r3, #18
 8001f82:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 8001f86:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 8001f88:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001f8e:	4630      	mov	r0, r6
 8001f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f92:	bf00      	nop

08001f94 <HAL_ADC_ConfigChannel>:
{
 8001f94:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8001f96:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f9a:	68cc      	ldr	r4, [r1, #12]
{
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001fa0:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001fa8:	f000 80fe 	beq.w	80021a8 <HAL_ADC_ConfigChannel+0x214>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fac:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fb4:	6895      	ldr	r5, [r2, #8]
 8001fb6:	076d      	lsls	r5, r5, #29
 8001fb8:	d436      	bmi.n	8002028 <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 8001fba:	6848      	ldr	r0, [r1, #4]
 8001fbc:	2804      	cmp	r0, #4
 8001fbe:	f200 8088 	bhi.w	80020d2 <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->SQR1,
 8001fc2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001fc6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001fc8:	680d      	ldr	r5, [r1, #0]
 8001fca:	0040      	lsls	r0, r0, #1
 8001fcc:	271f      	movs	r7, #31
 8001fce:	4087      	lsls	r7, r0
 8001fd0:	ea26 0607 	bic.w	r6, r6, r7
 8001fd4:	fa05 f000 	lsl.w	r0, r5, r0
 8001fd8:	4330      	orrs	r0, r6
 8001fda:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fdc:	6890      	ldr	r0, [r2, #8]
 8001fde:	f010 0f0c 	tst.w	r0, #12
 8001fe2:	d134      	bne.n	800204e <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fe4:	2d09      	cmp	r5, #9
 8001fe6:	f200 8089 	bhi.w	80020fc <HAL_ADC_ConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fea:	6950      	ldr	r0, [r2, #20]
 8001fec:	688e      	ldr	r6, [r1, #8]
 8001fee:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001ff2:	2707      	movs	r7, #7
 8001ff4:	fa07 f70c 	lsl.w	r7, r7, ip
 8001ff8:	ea20 0007 	bic.w	r0, r0, r7
 8001ffc:	fa06 f60c 	lsl.w	r6, r6, ip
 8002000:	4330      	orrs	r0, r6
 8002002:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002004:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8002008:	68d0      	ldr	r0, [r2, #12]
 800200a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800200e:	0040      	lsls	r0, r0, #1
 8002010:	3e01      	subs	r6, #1
 8002012:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8002016:	2e03      	cmp	r6, #3
 8002018:	f200 8142 	bhi.w	80022a0 <HAL_ADC_ConfigChannel+0x30c>
 800201c:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002020:	0105000e 	.word	0x0105000e
 8002024:	00f100fb 	.word	0x00f100fb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202a:	f042 0220 	orr.w	r2, r2, #32
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002036:	b002      	add	sp, #8
 8002038:	bcf0      	pop	{r4, r5, r6, r7}
 800203a:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 800203c:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800203e:	4eae      	ldr	r6, [pc, #696]	; (80022f8 <HAL_ADC_ConfigChannel+0x364>)
 8002040:	403e      	ands	r6, r7
 8002042:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002046:	4330      	orrs	r0, r6
 8002048:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800204c:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800204e:	6890      	ldr	r0, [r2, #8]
 8002050:	f000 0003 	and.w	r0, r0, #3
 8002054:	2801      	cmp	r0, #1
 8002056:	f000 80a2 	beq.w	800219e <HAL_ADC_ConfigChannel+0x20a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800205a:	2c01      	cmp	r4, #1
 800205c:	f000 80a8 	beq.w	80021b0 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002060:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8002064:	2001      	movs	r0, #1
 8002066:	40a8      	lsls	r0, r5
 8002068:	ea21 0100 	bic.w	r1, r1, r0
 800206c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002070:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002074:	d073      	beq.n	800215e <HAL_ADC_ConfigChannel+0x1ca>
 8002076:	49a1      	ldr	r1, [pc, #644]	; (80022fc <HAL_ADC_ConfigChannel+0x368>)
 8002078:	428a      	cmp	r2, r1
 800207a:	d070      	beq.n	800215e <HAL_ADC_ConfigChannel+0x1ca>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800207c:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207e:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002082:	d06f      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x1d0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002084:	2d11      	cmp	r5, #17
 8002086:	f040 80aa 	bne.w	80021de <HAL_ADC_ConfigChannel+0x24a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800208a:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800208c:	01c4      	lsls	r4, r0, #7
 800208e:	d46c      	bmi.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002090:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002094:	f000 80d3 	beq.w	800223e <HAL_ADC_ConfigChannel+0x2aa>
 8002098:	4898      	ldr	r0, [pc, #608]	; (80022fc <HAL_ADC_ConfigChannel+0x368>)
 800209a:	4282      	cmp	r2, r0
 800209c:	d067      	beq.n	800216e <HAL_ADC_ConfigChannel+0x1da>
 800209e:	4c98      	ldr	r4, [pc, #608]	; (8002300 <HAL_ADC_ConfigChannel+0x36c>)
 80020a0:	42a2      	cmp	r2, r4
 80020a2:	f000 80f7 	beq.w	8002294 <HAL_ADC_ConfigChannel+0x300>
 80020a6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80020aa:	4282      	cmp	r2, r0
 80020ac:	d061      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020ae:	6890      	ldr	r0, [r2, #8]
 80020b0:	f000 0003 	and.w	r0, r0, #3
 80020b4:	2801      	cmp	r0, #1
 80020b6:	f000 80ef 	beq.w	8002298 <HAL_ADC_ConfigChannel+0x304>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020ba:	2d10      	cmp	r5, #16
 80020bc:	d055      	beq.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020be:	2d11      	cmp	r5, #17
 80020c0:	d053      	beq.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020c2:	2d12      	cmp	r5, #18
 80020c4:	d151      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80020c6:	688a      	ldr	r2, [r1, #8]
 80020c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80020cc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2000      	movs	r0, #0
 80020d0:	e7ae      	b.n	8002030 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 80020d2:	2809      	cmp	r0, #9
 80020d4:	d921      	bls.n	800211a <HAL_ADC_ConfigChannel+0x186>
    else if (sConfig->Rank < 15U)
 80020d6:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80020dc:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80020e0:	f200 8083 	bhi.w	80021ea <HAL_ADC_ConfigChannel+0x256>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020e4:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80020e6:	680d      	ldr	r5, [r1, #0]
 80020e8:	383c      	subs	r0, #60	; 0x3c
 80020ea:	271f      	movs	r7, #31
 80020ec:	4087      	lsls	r7, r0
 80020ee:	ea26 0607 	bic.w	r6, r6, r7
 80020f2:	fa05 f000 	lsl.w	r0, r5, r0
 80020f6:	4330      	orrs	r0, r6
 80020f8:	6390      	str	r0, [r2, #56]	; 0x38
 80020fa:	e76f      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020fc:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002100:	6990      	ldr	r0, [r2, #24]
 8002102:	688e      	ldr	r6, [r1, #8]
 8002104:	3f1e      	subs	r7, #30
 8002106:	f04f 0c07 	mov.w	ip, #7
 800210a:	fa0c fc07 	lsl.w	ip, ip, r7
 800210e:	ea20 000c 	bic.w	r0, r0, ip
 8002112:	40be      	lsls	r6, r7
 8002114:	4330      	orrs	r0, r6
 8002116:	6190      	str	r0, [r2, #24]
 8002118:	e774      	b.n	8002004 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 800211a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800211e:	0040      	lsls	r0, r0, #1
 8002120:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002122:	680d      	ldr	r5, [r1, #0]
 8002124:	381e      	subs	r0, #30
 8002126:	271f      	movs	r7, #31
 8002128:	4087      	lsls	r7, r0
 800212a:	ea26 0607 	bic.w	r6, r6, r7
 800212e:	fa05 f000 	lsl.w	r0, r5, r0
 8002132:	4330      	orrs	r0, r6
 8002134:	6350      	str	r0, [r2, #52]	; 0x34
 8002136:	e751      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x48>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002138:	1c68      	adds	r0, r5, #1
 800213a:	688e      	ldr	r6, [r1, #8]
 800213c:	6954      	ldr	r4, [r2, #20]
 800213e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002142:	2707      	movs	r7, #7
 8002144:	408f      	lsls	r7, r1
 8002146:	fa06 f001 	lsl.w	r0, r6, r1
 800214a:	ea24 0107 	bic.w	r1, r4, r7
 800214e:	4301      	orrs	r1, r0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002150:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002154:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002156:	d008      	beq.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
 8002158:	4968      	ldr	r1, [pc, #416]	; (80022fc <HAL_ADC_ConfigChannel+0x368>)
 800215a:	428a      	cmp	r2, r1
 800215c:	d105      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800215e:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002160:	4968      	ldr	r1, [pc, #416]	; (8002304 <HAL_ADC_ConfigChannel+0x370>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002162:	d18f      	bne.n	8002084 <HAL_ADC_ConfigChannel+0xf0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002164:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002166:	0206      	lsls	r6, r0, #8
 8002168:	d592      	bpl.n	8002090 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216a:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800216c:	e760      	b.n	8002030 <HAL_ADC_ConfigChannel+0x9c>
 800216e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002172:	6890      	ldr	r0, [r2, #8]
 8002174:	f000 0003 	and.w	r0, r0, #3
 8002178:	2801      	cmp	r0, #1
 800217a:	d062      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x2ae>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800217c:	68a0      	ldr	r0, [r4, #8]
 800217e:	f000 0003 	and.w	r0, r0, #3
 8002182:	2801      	cmp	r0, #1
 8002184:	d066      	beq.n	8002254 <HAL_ADC_ConfigChannel+0x2c0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002186:	2d10      	cmp	r5, #16
 8002188:	d068      	beq.n	800225c <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800218a:	2d11      	cmp	r5, #17
 800218c:	d199      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x12e>
 800218e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002192:	d1ea      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002194:	688a      	ldr	r2, [r1, #8]
 8002196:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800219a:	608a      	str	r2, [r1, #8]
 800219c:	e7e5      	b.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800219e:	6810      	ldr	r0, [r2, #0]
 80021a0:	07c7      	lsls	r7, r0, #31
 80021a2:	f57f af5a 	bpl.w	800205a <HAL_ADC_ConfigChannel+0xc6>
 80021a6:	e7e0      	b.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
  __HAL_LOCK(hadc);
 80021a8:	2002      	movs	r0, #2
}
 80021aa:	b002      	add	sp, #8
 80021ac:	bcf0      	pop	{r4, r5, r6, r7}
 80021ae:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021b0:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 80021b4:	40ac      	lsls	r4, r5
 80021b6:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80021b8:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021ba:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80021be:	d9bb      	bls.n	8002138 <HAL_ADC_ConfigChannel+0x1a4>
        MODIFY_REG(hadc->Instance->SMPR2,
 80021c0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80021c4:	688e      	ldr	r6, [r1, #8]
 80021c6:	6994      	ldr	r4, [r2, #24]
 80021c8:	f1a0 011b 	sub.w	r1, r0, #27
 80021cc:	2707      	movs	r7, #7
 80021ce:	408f      	lsls	r7, r1
 80021d0:	fa06 f001 	lsl.w	r0, r6, r1
 80021d4:	ea24 0107 	bic.w	r1, r4, r7
 80021d8:	4301      	orrs	r1, r0
 80021da:	6191      	str	r1, [r2, #24]
 80021dc:	e748      	b.n	8002070 <HAL_ADC_ConfigChannel+0xdc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021de:	2d12      	cmp	r5, #18
 80021e0:	d1c3      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021e2:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021e4:	0240      	lsls	r0, r0, #9
 80021e6:	d4c0      	bmi.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
 80021e8:	e752      	b.n	8002090 <HAL_ADC_ConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021ea:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80021ec:	680d      	ldr	r5, [r1, #0]
 80021ee:	385a      	subs	r0, #90	; 0x5a
 80021f0:	271f      	movs	r7, #31
 80021f2:	4087      	lsls	r7, r0
 80021f4:	ea26 0607 	bic.w	r6, r6, r7
 80021f8:	fa05 f000 	lsl.w	r0, r5, r0
 80021fc:	4330      	orrs	r0, r6
 80021fe:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002200:	e6ec      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002202:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8002204:	4e3c      	ldr	r6, [pc, #240]	; (80022f8 <HAL_ADC_ConfigChannel+0x364>)
 8002206:	403e      	ands	r6, r7
 8002208:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800220c:	4330      	orrs	r0, r6
 800220e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002212:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8002214:	e71b      	b.n	800204e <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002216:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8002218:	4e37      	ldr	r6, [pc, #220]	; (80022f8 <HAL_ADC_ConfigChannel+0x364>)
 800221a:	403e      	ands	r6, r7
 800221c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002220:	4330      	orrs	r0, r6
 8002222:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002226:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8002228:	e711      	b.n	800204e <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 800222a:	6e57      	ldr	r7, [r2, #100]	; 0x64
 800222c:	4e32      	ldr	r6, [pc, #200]	; (80022f8 <HAL_ADC_ConfigChannel+0x364>)
 800222e:	403e      	ands	r6, r7
 8002230:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002234:	4330      	orrs	r0, r6
 8002236:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800223a:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 800223c:	e707      	b.n	800204e <HAL_ADC_ConfigChannel+0xba>
 800223e:	4c2f      	ldr	r4, [pc, #188]	; (80022fc <HAL_ADC_ConfigChannel+0x368>)
 8002240:	e797      	b.n	8002172 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002242:	6810      	ldr	r0, [r2, #0]
 8002244:	07c6      	lsls	r6, r0, #31
 8002246:	d599      	bpl.n	800217c <HAL_ADC_ConfigChannel+0x1e8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002250:	2001      	movs	r0, #1
 8002252:	e6ed      	b.n	8002030 <HAL_ADC_ConfigChannel+0x9c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002254:	6820      	ldr	r0, [r4, #0]
 8002256:	07c0      	lsls	r0, r0, #31
 8002258:	d4f6      	bmi.n	8002248 <HAL_ADC_ConfigChannel+0x2b4>
 800225a:	e794      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800225c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002260:	d183      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002262:	4a29      	ldr	r2, [pc, #164]	; (8002308 <HAL_ADC_ConfigChannel+0x374>)
 8002264:	4c29      	ldr	r4, [pc, #164]	; (800230c <HAL_ADC_ConfigChannel+0x378>)
 8002266:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002268:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226a:	fba4 4202 	umull	r4, r2, r4, r2
 800226e:	0c92      	lsrs	r2, r2, #18
 8002270:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002274:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800227a:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800227c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800227e:	9a01      	ldr	r2, [sp, #4]
 8002280:	2a00      	cmp	r2, #0
 8002282:	f43f af72 	beq.w	800216a <HAL_ADC_ConfigChannel+0x1d6>
            wait_loop_index--;
 8002286:	9a01      	ldr	r2, [sp, #4]
 8002288:	3a01      	subs	r2, #1
 800228a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800228c:	9a01      	ldr	r2, [sp, #4]
 800228e:	2a00      	cmp	r2, #0
 8002290:	d1f9      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x2f2>
 8002292:	e76a      	b.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
 8002294:	4c1e      	ldr	r4, [pc, #120]	; (8002310 <HAL_ADC_ConfigChannel+0x37c>)
 8002296:	e76c      	b.n	8002172 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	07d7      	lsls	r7, r2, #31
 800229c:	d4d4      	bmi.n	8002248 <HAL_ADC_ConfigChannel+0x2b4>
 800229e:	e70c      	b.n	80020ba <HAL_ADC_ConfigChannel+0x126>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80022a2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80022a6:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80022aa:	ea4f 6685 	mov.w	r6, r5, lsl #26
 80022ae:	d014      	beq.n	80022da <HAL_ADC_ConfigChannel+0x346>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80022b2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80022b6:	4286      	cmp	r6, r0
 80022b8:	d014      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x350>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ba:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80022bc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80022c0:	4286      	cmp	r6, r0
 80022c2:	d014      	beq.n	80022ee <HAL_ADC_ConfigChannel+0x35a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80022c6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80022ca:	4286      	cmp	r6, r0
 80022cc:	f47f aebf 	bne.w	800204e <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80022d0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80022d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80022d6:	66d0      	str	r0, [r2, #108]	; 0x6c
 80022d8:	e6b9      	b.n	800204e <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80022da:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80022dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80022e0:	6610      	str	r0, [r2, #96]	; 0x60
 80022e2:	e7e5      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x31c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022e4:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80022e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80022ea:	6650      	str	r0, [r2, #100]	; 0x64
 80022ec:	e7e5      	b.n	80022ba <HAL_ADC_ConfigChannel+0x326>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80022ee:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80022f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80022f4:	6690      	str	r0, [r2, #104]	; 0x68
 80022f6:	e7e5      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x330>
 80022f8:	83fff000 	.word	0x83fff000
 80022fc:	50000100 	.word	0x50000100
 8002300:	50000400 	.word	0x50000400
 8002304:	50000300 	.word	0x50000300
 8002308:	2000002c 	.word	0x2000002c
 800230c:	431bde83 	.word	0x431bde83
 8002310:	50000500 	.word	0x50000500

08002314 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002314:	6803      	ldr	r3, [r0, #0]
 8002316:	4a43      	ldr	r2, [pc, #268]	; (8002424 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800231c:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800231e:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002320:	d00e      	beq.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002322:	4293      	cmp	r3, r2
 8002324:	d00a      	beq.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8002326:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800232a:	4293      	cmp	r3, r2
 800232c:	d049      	beq.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800232e:	4c3e      	ldr	r4, [pc, #248]	; (8002428 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002330:	42a3      	cmp	r3, r4
 8002332:	d005      	beq.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
} 
 8002336:	4618      	mov	r0, r3
 8002338:	bcf0      	pop	{r4, r5, r6, r7}
 800233a:	4770      	bx	lr
 800233c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8002340:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002344:	2c01      	cmp	r4, #1
 8002346:	d041      	beq.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8002348:	2401      	movs	r4, #1
 800234a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800234e:	689c      	ldr	r4, [r3, #8]
 8002350:	0766      	lsls	r6, r4, #29
 8002352:	d50a      	bpl.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002356:	f043 0320 	orr.w	r3, r3, #32
 800235a:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 800235e:	2200      	movs	r2, #0
 8002360:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 8002364:	bcf0      	pop	{r4, r5, r6, r7}
 8002366:	4618      	mov	r0, r3
 8002368:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800236a:	6894      	ldr	r4, [r2, #8]
 800236c:	0764      	lsls	r4, r4, #29
 800236e:	d4f1      	bmi.n	8002354 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002374:	d044      	beq.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8002376:	4f2b      	ldr	r7, [pc, #172]	; (8002424 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002378:	4c2c      	ldr	r4, [pc, #176]	; (800242c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800237a:	4e2d      	ldr	r6, [pc, #180]	; (8002430 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 800237c:	42bb      	cmp	r3, r7
 800237e:	bf18      	it	ne
 8002380:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002382:	b33d      	cbz	r5, 80023d4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002384:	68a7      	ldr	r7, [r4, #8]
 8002386:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 800238a:	684e      	ldr	r6, [r1, #4]
 800238c:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 8002390:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8002394:	433e      	orrs	r6, r7
 8002396:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002398:	689e      	ldr	r6, [r3, #8]
 800239a:	f006 0603 	and.w	r6, r6, #3
 800239e:	2e01      	cmp	r6, #1
 80023a0:	d03c      	beq.n	800241c <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023a2:	6893      	ldr	r3, [r2, #8]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d02f      	beq.n	800240c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023ac:	68a2      	ldr	r2, [r4, #8]
 80023ae:	688b      	ldr	r3, [r1, #8]
 80023b0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80023b4:	431d      	orrs	r5, r3
 80023b6:	f022 020f 	bic.w	r2, r2, #15
 80023ba:	4315      	orrs	r5, r2
 80023bc:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e7cd      	b.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80023c2:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80023c6:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80023c8:	2c01      	cmp	r4, #1
 80023ca:	d1bd      	bne.n	8002348 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 80023cc:	2302      	movs	r3, #2
} 
 80023ce:	4618      	mov	r0, r3
 80023d0:	bcf0      	pop	{r4, r5, r6, r7}
 80023d2:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023d4:	68a1      	ldr	r1, [r4, #8]
 80023d6:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80023da:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	f001 0103 	and.w	r1, r1, #3
 80023e2:	2901      	cmp	r1, #1
 80023e4:	d016      	beq.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023e6:	6893      	ldr	r3, [r2, #8]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d009      	beq.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80023f0:	68a3      	ldr	r3, [r4, #8]
 80023f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023f6:	f023 030f 	bic.w	r3, r3, #15
 80023fa:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e7ae      	b.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002400:	4c0a      	ldr	r4, [pc, #40]	; (800242c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002402:	e7be      	b.n	8002382 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	07db      	lsls	r3, r3, #31
 8002408:	d4d9      	bmi.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800240a:	e7f1      	b.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800240c:	6813      	ldr	r3, [r2, #0]
 800240e:	07de      	lsls	r6, r3, #31
 8002410:	d4d5      	bmi.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002412:	e7cb      	b.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	07d9      	lsls	r1, r3, #31
 8002418:	d4d1      	bmi.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800241a:	e7e4      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	07df      	lsls	r7, r3, #31
 8002420:	d5bf      	bpl.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8002422:	e7cc      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002424:	50000100 	.word	0x50000100
 8002428:	50000500 	.word	0x50000500
 800242c:	50000300 	.word	0x50000300
 8002430:	50000700 	.word	0x50000700

08002434 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4908      	ldr	r1, [pc, #32]	; (8002458 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8002436:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002440:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002442:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002450:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8002454:	60cb      	str	r3, [r1, #12]
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_NVIC_SetPriority+0x68>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002466:	f1c3 0507 	rsb	r5, r3, #7
 800246a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	bf28      	it	cs
 8002472:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002474:	2c06      	cmp	r4, #6
 8002476:	d919      	bls.n	80024ac <HAL_NVIC_SetPriority+0x50>
 8002478:	3b03      	subs	r3, #3
 800247a:	f04f 34ff 	mov.w	r4, #4294967295
 800247e:	409c      	lsls	r4, r3
 8002480:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 34ff 	mov.w	r4, #4294967295
 8002488:	40ac      	lsls	r4, r5
 800248a:	ea21 0104 	bic.w	r1, r1, r4
 800248e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002490:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002492:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002496:	db0c      	blt.n	80024b2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800249c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80024a0:	0109      	lsls	r1, r1, #4
 80024a2:	b2c9      	uxtb	r1, r1
 80024a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024a8:	bc30      	pop	{r4, r5}
 80024aa:	4770      	bx	lr
 80024ac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	4613      	mov	r3, r2
 80024b0:	e7e8      	b.n	8002484 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_NVIC_SetPriority+0x6c>)
 80024b4:	f000 000f 	and.w	r0, r0, #15
 80024b8:	0109      	lsls	r1, r1, #4
 80024ba:	4403      	add	r3, r0
 80024bc:	b2c9      	uxtb	r1, r1
 80024be:	7619      	strb	r1, [r3, #24]
 80024c0:	bc30      	pop	{r4, r5}
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00
 80024c8:	e000ecfc 	.word	0xe000ecfc

080024cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024cc:	2800      	cmp	r0, #0
 80024ce:	db07      	blt.n	80024e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d0:	f000 011f 	and.w	r1, r0, #31
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <HAL_NVIC_EnableIRQ+0x18>)
 80024d6:	0940      	lsrs	r0, r0, #5
 80024d8:	2301      	movs	r3, #1
 80024da:	408b      	lsls	r3, r1
 80024dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000e100 	.word	0xe000e100

080024e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	3801      	subs	r0, #1
 80024ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024ee:	d20e      	bcs.n	800250e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	4c08      	ldr	r4, [pc, #32]	; (8002518 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	20f0      	movs	r0, #240	; 0xf0
 80024fa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002500:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002502:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8002506:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	6019      	str	r1, [r3, #0]
 800250c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2001      	movs	r0, #1
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800251c:	2800      	cmp	r0, #0
 800251e:	d034      	beq.n	800258a <HAL_DMA_Init+0x6e>
{ 
 8002520:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002522:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 800252a:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 800252c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 8002534:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002538:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 800253a:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002542:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002546:	4c12      	ldr	r4, [pc, #72]	; (8002590 <HAL_DMA_Init+0x74>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002548:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800254c:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800254e:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 8002550:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002552:	d910      	bls.n	8002576 <HAL_DMA_Init+0x5a>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_DMA_Init+0x78>)
 8002556:	4910      	ldr	r1, [pc, #64]	; (8002598 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8002558:	4c10      	ldr	r4, [pc, #64]	; (800259c <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800255a:	4402      	add	r2, r0
 800255c:	fba1 1202 	umull	r1, r2, r1, r2
 8002560:	0912      	lsrs	r2, r2, #4
 8002562:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 8002564:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002568:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800256a:	8419      	strh	r1, [r3, #32]
 800256c:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
}  
 8002570:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002572:	6398      	str	r0, [r3, #56]	; 0x38
}  
 8002574:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_DMA_Init+0x84>)
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <HAL_DMA_Init+0x7c>)
 800257a:	4402      	add	r2, r0
 800257c:	fba1 1202 	umull	r1, r2, r1, r2
 8002580:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8002582:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002586:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8002588:	e7ec      	b.n	8002564 <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 800258a:	2001      	movs	r0, #1
}  
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40020407 	.word	0x40020407
 8002594:	bffdfbf8 	.word	0xbffdfbf8
 8002598:	cccccccd 	.word	0xcccccccd
 800259c:	40020400 	.word	0x40020400
 80025a0:	bffdfff8 	.word	0xbffdfff8

080025a4 <HAL_DMA_Start_IT>:
{
 80025a4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80025a6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80025aa:	2c01      	cmp	r4, #1
 80025ac:	d039      	beq.n	8002622 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ae:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80025b2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80025b4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80025b6:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ba:	d005      	beq.n	80025c8 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 80025bc:	2300      	movs	r3, #0
 80025be:	f880 3020 	strb.w	r3, [r0, #32]
} 
 80025c2:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80025c4:	2002      	movs	r0, #2
} 
 80025c6:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025c8:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 80025ca:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025cc:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 80025ce:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d2:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025d4:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025d6:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025d8:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025dc:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025de:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025e2:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e4:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025e6:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80025e8:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 80025ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ec:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 80025ee:	bf0b      	itete	eq
 80025f0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80025f2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80025f4:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80025f6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80025f8:	b153      	cbz	r3, 8002610 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	f043 030e 	orr.w	r3, r3, #14
 8002600:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800260a:	2000      	movs	r0, #0
} 
 800260c:	bcf0      	pop	{r4, r5, r6, r7}
 800260e:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	f043 030a 	orr.w	r3, r3, #10
 8002616:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	e7ef      	b.n	8002602 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8002622:	2002      	movs	r0, #2
} 
 8002624:	bcf0      	pop	{r4, r5, r6, r7}
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262c:	680c      	ldr	r4, [r1, #0]
{
 800262e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002630:	2c00      	cmp	r4, #0
 8002632:	f000 8084 	beq.w	800273e <HAL_GPIO_Init+0x116>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002636:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800281c <HAL_GPIO_Init+0x1f4>
  uint32_t position = 0x00u;
 800263a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800263c:	f04f 0a01 	mov.w	sl, #1
 8002640:	4688      	mov	r8, r1
 8002642:	fa0a fc03 	lsl.w	ip, sl, r3
    if (iocurrent != 0x00u)
 8002646:	ea1c 0904 	ands.w	r9, ip, r4
 800264a:	d074      	beq.n	8002736 <HAL_GPIO_Init+0x10e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800264c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8002650:	f005 0203 	and.w	r2, r5, #3
 8002654:	1e51      	subs	r1, r2, #1
 8002656:	2901      	cmp	r1, #1
 8002658:	ea4f 0743 	mov.w	r7, r3, lsl #1
 800265c:	d972      	bls.n	8002744 <HAL_GPIO_Init+0x11c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265e:	2a03      	cmp	r2, #3
 8002660:	f040 80b0 	bne.w	80027c4 <HAL_GPIO_Init+0x19c>
 8002664:	40ba      	lsls	r2, r7
 8002666:	43d1      	mvns	r1, r2
 8002668:	9100      	str	r1, [sp, #0]
      temp = GPIOx->MODER;
 800266a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800266c:	9900      	ldr	r1, [sp, #0]
 800266e:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002670:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002672:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002676:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002678:	d05d      	beq.n	8002736 <HAL_GPIO_Init+0x10e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267a:	4961      	ldr	r1, [pc, #388]	; (8002800 <HAL_GPIO_Init+0x1d8>)
 800267c:	698a      	ldr	r2, [r1, #24]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	618a      	str	r2, [r1, #24]
 8002684:	698a      	ldr	r2, [r1, #24]
 8002686:	f023 0603 	bic.w	r6, r3, #3
 800268a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800268e:	f002 0201 	and.w	r2, r2, #1
 8002692:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002696:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002698:	f003 0103 	and.w	r1, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800269e:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026a0:	0089      	lsls	r1, r1, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	408a      	lsls	r2, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026a6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026aa:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ae:	d01b      	beq.n	80026e8 <HAL_GPIO_Init+0xc0>
 80026b0:	4f54      	ldr	r7, [pc, #336]	; (8002804 <HAL_GPIO_Init+0x1dc>)
 80026b2:	42b8      	cmp	r0, r7
 80026b4:	f000 8090 	beq.w	80027d8 <HAL_GPIO_Init+0x1b0>
 80026b8:	4f53      	ldr	r7, [pc, #332]	; (8002808 <HAL_GPIO_Init+0x1e0>)
 80026ba:	42b8      	cmp	r0, r7
 80026bc:	f000 8090 	beq.w	80027e0 <HAL_GPIO_Init+0x1b8>
 80026c0:	4f52      	ldr	r7, [pc, #328]	; (800280c <HAL_GPIO_Init+0x1e4>)
 80026c2:	42b8      	cmp	r0, r7
 80026c4:	f000 8083 	beq.w	80027ce <HAL_GPIO_Init+0x1a6>
 80026c8:	4f51      	ldr	r7, [pc, #324]	; (8002810 <HAL_GPIO_Init+0x1e8>)
 80026ca:	42b8      	cmp	r0, r7
 80026cc:	f000 808d 	beq.w	80027ea <HAL_GPIO_Init+0x1c2>
 80026d0:	4f50      	ldr	r7, [pc, #320]	; (8002814 <HAL_GPIO_Init+0x1ec>)
 80026d2:	42b8      	cmp	r0, r7
 80026d4:	f000 808e 	beq.w	80027f4 <HAL_GPIO_Init+0x1cc>
 80026d8:	4f4f      	ldr	r7, [pc, #316]	; (8002818 <HAL_GPIO_Init+0x1f0>)
 80026da:	42b8      	cmp	r0, r7
 80026dc:	bf0c      	ite	eq
 80026de:	2706      	moveq	r7, #6
 80026e0:	2707      	movne	r7, #7
 80026e2:	fa07 f101 	lsl.w	r1, r7, r1
 80026e6:	430a      	orrs	r2, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e8:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 80026ea:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
 80026ee:	ea6f 0609 	mvn.w	r6, r9
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f2:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 80026f4:	bf54      	ite	pl
 80026f6:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80026f8:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 80026fc:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR;
 8002700:	f8db 1004 	ldr.w	r1, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002704:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8002706:	bf54      	ite	pl
 8002708:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 800270a:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR = temp;
 800270e:	f8cb 1004 	str.w	r1, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	f8db 1008 	ldr.w	r1, [fp, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002716:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8002718:	bf54      	ite	pl
 800271a:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 800271c:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->RTSR = temp;
 8002720:	f8cb 1008 	str.w	r1, [fp, #8]

        temp = EXTI->FTSR;
 8002724:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002728:	02a9      	lsls	r1, r5, #10
        temp &= ~(iocurrent);
 800272a:	bf54      	ite	pl
 800272c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800272e:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR = temp;
 8002732:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 8002736:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002738:	fa34 f203 	lsrs.w	r2, r4, r3
 800273c:	d181      	bne.n	8002642 <HAL_GPIO_Init+0x1a>
  }
}
 800273e:	b005      	add	sp, #20
 8002740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002744:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002746:	2103      	movs	r1, #3
 8002748:	40b9      	lsls	r1, r7
 800274a:	ea26 0e01 	bic.w	lr, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 800274e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8002752:	40be      	lsls	r6, r7
 8002754:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002758:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800275a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002762:	ea2e 0c0c 	bic.w	ip, lr, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002766:	409e      	lsls	r6, r3
 8002768:	ea46 060c 	orr.w	r6, r6, ip
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800276c:	43c9      	mvns	r1, r1
 800276e:	9100      	str	r1, [sp, #0]
        GPIOx->OTYPER = temp;
 8002770:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002772:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002774:	ea06 0c01 	and.w	ip, r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002778:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800277c:	40be      	lsls	r6, r7
 800277e:	ea46 060c 	orr.w	r6, r6, ip
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002782:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002784:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	d001      	beq.n	800278c <HAL_GPIO_Init+0x164>
 8002788:	40ba      	lsls	r2, r7
 800278a:	e76e      	b.n	800266a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 800278c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002790:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002794:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002798:	f8de 1020 	ldr.w	r1, [lr, #32]
 800279c:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800279e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80027a2:	210f      	movs	r1, #15
 80027a4:	fa01 f60c 	lsl.w	r6, r1, ip
 80027a8:	9901      	ldr	r1, [sp, #4]
 80027aa:	ea21 0606 	bic.w	r6, r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b2:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027b4:	fa01 f60c 	lsl.w	r6, r1, ip
 80027b8:	9901      	ldr	r1, [sp, #4]
 80027ba:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 80027bc:	40ba      	lsls	r2, r7
 80027be:	f8ce 6020 	str.w	r6, [lr, #32]
 80027c2:	e752      	b.n	800266a <HAL_GPIO_Init+0x42>
 80027c4:	2103      	movs	r1, #3
 80027c6:	40b9      	lsls	r1, r7
 80027c8:	43c9      	mvns	r1, r1
 80027ca:	9100      	str	r1, [sp, #0]
 80027cc:	e7d1      	b.n	8002772 <HAL_GPIO_Init+0x14a>
 80027ce:	2703      	movs	r7, #3
 80027d0:	fa07 f101 	lsl.w	r1, r7, r1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	e787      	b.n	80026e8 <HAL_GPIO_Init+0xc0>
 80027d8:	fa0a f101 	lsl.w	r1, sl, r1
 80027dc:	430a      	orrs	r2, r1
 80027de:	e783      	b.n	80026e8 <HAL_GPIO_Init+0xc0>
 80027e0:	2702      	movs	r7, #2
 80027e2:	fa07 f101 	lsl.w	r1, r7, r1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	e77e      	b.n	80026e8 <HAL_GPIO_Init+0xc0>
 80027ea:	2704      	movs	r7, #4
 80027ec:	fa07 f101 	lsl.w	r1, r7, r1
 80027f0:	430a      	orrs	r2, r1
 80027f2:	e779      	b.n	80026e8 <HAL_GPIO_Init+0xc0>
 80027f4:	2705      	movs	r7, #5
 80027f6:	fa07 f101 	lsl.w	r1, r7, r1
 80027fa:	430a      	orrs	r2, r1
 80027fc:	e774      	b.n	80026e8 <HAL_GPIO_Init+0xc0>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	48000400 	.word	0x48000400
 8002808:	48000800 	.word	0x48000800
 800280c:	48000c00 	.word	0x48000c00
 8002810:	48001000 	.word	0x48001000
 8002814:	48001400 	.word	0x48001400
 8002818:	48001800 	.word	0x48001800
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002820:	b10a      	cbz	r2, 8002826 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002822:	6181      	str	r1, [r0, #24]
 8002824:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002826:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop

0800282c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002832:	6951      	ldr	r1, [r2, #20]
 8002834:	4201      	tst	r1, r0
 8002836:	d100      	bne.n	800283a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002838:	4770      	bx	lr
{
 800283a:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800283c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800283e:	f7ff fff5 	bl	800282c <HAL_GPIO_EXTI_Callback>
}
 8002842:	bd08      	pop	{r3, pc}
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	2800      	cmp	r0, #0
 800284a:	f000 827f 	beq.w	8002d4c <HAL_RCC_OscConfig+0x504>
{
 800284e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002852:	6803      	ldr	r3, [r0, #0]
 8002854:	07df      	lsls	r7, r3, #31
{
 8002856:	b083      	sub	sp, #12
 8002858:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	d53d      	bpl.n	80028d8 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800285c:	49c1      	ldr	r1, [pc, #772]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 800285e:	684a      	ldr	r2, [r1, #4]
 8002860:	f002 020c 	and.w	r2, r2, #12
 8002864:	2a04      	cmp	r2, #4
 8002866:	f000 815f 	beq.w	8002b28 <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800286a:	684a      	ldr	r2, [r1, #4]
 800286c:	f002 020c 	and.w	r2, r2, #12
 8002870:	2a08      	cmp	r2, #8
 8002872:	f000 8152 	beq.w	8002b1a <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	6863      	ldr	r3, [r4, #4]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	f000 816b 	beq.w	8002b56 <HAL_RCC_OscConfig+0x30e>
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 819a 	beq.w	8002bba <HAL_RCC_OscConfig+0x372>
 8002886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288a:	f000 82bc 	beq.w	8002e06 <HAL_RCC_OscConfig+0x5be>
 800288e:	4bb5      	ldr	r3, [pc, #724]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800289e:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff f876 	bl	8001990 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a4:	4faf      	ldr	r7, [pc, #700]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80028a6:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ac:	2601      	movs	r6, #1
 80028ae:	e005      	b.n	80028bc <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff f86e 	bl	8001990 <HAL_GetTick>
 80028b4:	1b40      	subs	r0, r0, r5
 80028b6:	2864      	cmp	r0, #100	; 0x64
 80028b8:	f200 817b 	bhi.w	8002bb2 <HAL_RCC_OscConfig+0x36a>
 80028bc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	fa98 f3a8 	rbit	r3, r8
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	fa06 f303 	lsl.w	r3, r6, r3
 80028d2:	4213      	tst	r3, r2
 80028d4:	d0ec      	beq.n	80028b0 <HAL_RCC_OscConfig+0x68>
 80028d6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d8:	079e      	lsls	r6, r3, #30
 80028da:	d542      	bpl.n	8002962 <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028dc:	4aa1      	ldr	r2, [pc, #644]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 80028de:	6851      	ldr	r1, [r2, #4]
 80028e0:	f011 0f0c 	tst.w	r1, #12
 80028e4:	f000 80cf 	beq.w	8002a86 <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e8:	6851      	ldr	r1, [r2, #4]
 80028ea:	f001 010c 	and.w	r1, r1, #12
 80028ee:	2908      	cmp	r1, #8
 80028f0:	f000 80c2 	beq.w	8002a78 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f4:	68e2      	ldr	r2, [r4, #12]
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	f000 81b8 	beq.w	8002c6c <HAL_RCC_OscConfig+0x424>
 80028fc:	2201      	movs	r2, #1
 80028fe:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800290a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800290e:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 8002912:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002914:	f7ff f83c 	bl	8001990 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	4e92      	ldr	r6, [pc, #584]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 800291a:	4605      	mov	r5, r0
 800291c:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e005      	b.n	800292e <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002922:	f7ff f835 	bl	8001990 <HAL_GetTick>
 8002926:	1b40      	subs	r0, r0, r5
 8002928:	2802      	cmp	r0, #2
 800292a:	f200 8142 	bhi.w	8002bb2 <HAL_RCC_OscConfig+0x36a>
 800292e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	6832      	ldr	r2, [r6, #0]
 8002934:	fa98 f3a8 	rbit	r3, r8
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa07 f303 	lsl.w	r3, r7, r3
 8002944:	4213      	tst	r3, r2
 8002946:	d0ec      	beq.n	8002922 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	6831      	ldr	r1, [r6, #0]
 800294a:	22f8      	movs	r2, #248	; 0xf8
 800294c:	fa92 f2a2 	rbit	r2, r2
 8002950:	6923      	ldr	r3, [r4, #16]
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800295a:	4093      	lsls	r3, r2
 800295c:	430b      	orrs	r3, r1
 800295e:	6033      	str	r3, [r6, #0]
 8002960:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	071d      	lsls	r5, r3, #28
 8002964:	d421      	bmi.n	80029aa <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002966:	0758      	lsls	r0, r3, #29
 8002968:	d54e      	bpl.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	00d1      	lsls	r1, r2, #3
 8002970:	f140 80c7 	bpl.w	8002b02 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8002974:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	4d7b      	ldr	r5, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x320>)
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	05da      	lsls	r2, r3, #23
 800297e:	f140 8108 	bpl.w	8002b92 <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002982:	68a3      	ldr	r3, [r4, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	f000 8197 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x470>
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8138 	beq.w	8002c00 <HAL_RCC_OscConfig+0x3b8>
 8002990:	2b05      	cmp	r3, #5
 8002992:	4b74      	ldr	r3, [pc, #464]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	f000 81d1 	beq.w	8002d3c <HAL_RCC_OscConfig+0x4f4>
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	621a      	str	r2, [r3, #32]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	621a      	str	r2, [r3, #32]
 80029a8:	e18b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029aa:	6962      	ldr	r2, [r4, #20]
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	f000 8081 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x26c>
 80029b2:	2201      	movs	r2, #1
 80029b4:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 80029b8:	4b6c      	ldr	r3, [pc, #432]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4f6a      	ldr	r7, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 80029bc:	fab1 f181 	clz	r1, r1
 80029c0:	440b      	add	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c4:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 80029c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029c8:	f7fe ffe2 	bl	8001990 <HAL_GetTick>
 80029cc:	f04f 0802 	mov.w	r8, #2
 80029d0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e005      	b.n	80029e0 <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe ffdc 	bl	8001990 <HAL_GetTick>
 80029d8:	1b40      	subs	r0, r0, r5
 80029da:	2802      	cmp	r0, #2
 80029dc:	f200 80e9 	bhi.w	8002bb2 <HAL_RCC_OscConfig+0x36a>
 80029e0:	fa98 f3a8 	rbit	r3, r8
 80029e4:	fa98 f3a8 	rbit	r3, r8
 80029e8:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	fa98 f3a8 	rbit	r3, r8
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	fa06 f303 	lsl.w	r3, r6, r3
 80029fe:	4213      	tst	r3, r2
 8002a00:	d0e8      	beq.n	80029d4 <HAL_RCC_OscConfig+0x18c>
 8002a02:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	0758      	lsls	r0, r3, #29
 8002a06:	d4b0      	bmi.n	800296a <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a08:	69a0      	ldr	r0, [r4, #24]
 8002a0a:	b388      	cbz	r0, 8002a70 <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	4d55      	ldr	r5, [pc, #340]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 8002a0e:	686b      	ldr	r3, [r5, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	f000 8179 	beq.w	8002d0c <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1a:	2802      	cmp	r0, #2
 8002a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a20:	f000 8196 	beq.w	8002d50 <HAL_RCC_OscConfig+0x508>
 8002a24:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe ffa9 	bl	8001990 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	462c      	mov	r4, r5
 8002a40:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8002a44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a46:	2601      	movs	r6, #1
 8002a48:	e005      	b.n	8002a56 <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe ffa1 	bl	8001990 <HAL_GetTick>
 8002a4e:	1b40      	subs	r0, r0, r5
 8002a50:	2802      	cmp	r0, #2
 8002a52:	f200 80ae 	bhi.w	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002a56:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5a:	6822      	ldr	r2, [r4, #0]
 8002a5c:	fa97 f3a7 	rbit	r3, r7
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa06 f303 	lsl.w	r3, r6, r3
 8002a6c:	4213      	tst	r3, r2
 8002a6e:	d1ec      	bne.n	8002a4a <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 8002a70:	2000      	movs	r0, #0
}
 8002a72:	b003      	add	sp, #12
 8002a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a78:	6852      	ldr	r2, [r2, #4]
 8002a7a:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002a7e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a82:	f47f af37 	bne.w	80028f4 <HAL_RCC_OscConfig+0xac>
 8002a86:	2202      	movs	r2, #2
 8002a88:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8c:	4935      	ldr	r1, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 8002a8e:	6808      	ldr	r0, [r1, #0]
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	f002 021f 	and.w	r2, r2, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa2:	4202      	tst	r2, r0
 8002aa4:	d064      	beq.n	8002b70 <HAL_RCC_OscConfig+0x328>
 8002aa6:	68e2      	ldr	r2, [r4, #12]
 8002aa8:	428a      	cmp	r2, r1
 8002aaa:	d061      	beq.n	8002b70 <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 8002aac:	2001      	movs	r0, #1
}
 8002aae:	b003      	add	sp, #12
 8002ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ab4:	2501      	movs	r5, #1
 8002ab6:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	4f29      	ldr	r7, [pc, #164]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8002abe:	fab1 f181 	clz	r1, r1
 8002ac2:	440b      	add	r3, r1
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	f04f 0802 	mov.w	r8, #2
 8002aca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002acc:	f7fe ff60 	bl	8001990 <HAL_GetTick>
 8002ad0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad2:	e004      	b.n	8002ade <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe ff5c 	bl	8001990 <HAL_GetTick>
 8002ad8:	1b80      	subs	r0, r0, r6
 8002ada:	2802      	cmp	r0, #2
 8002adc:	d869      	bhi.n	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002ade:	fa98 f3a8 	rbit	r3, r8
 8002ae2:	fa98 f3a8 	rbit	r3, r8
 8002ae6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aec:	fa98 f3a8 	rbit	r3, r8
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa05 f303 	lsl.w	r3, r5, r3
 8002afc:	4213      	tst	r3, r2
 8002afe:	d1e9      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x28c>
 8002b00:	e77f      	b.n	8002a02 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b08:	61da      	str	r2, [r3, #28]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b14:	f04f 0801 	mov.w	r8, #1
 8002b18:	e72e      	b.n	8002978 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b1a:	684a      	ldr	r2, [r1, #4]
 8002b1c:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002b20:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002b24:	f47f aea7 	bne.w	8002876 <HAL_RCC_OscConfig+0x2e>
 8002b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	490c      	ldr	r1, [pc, #48]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 8002b32:	6808      	ldr	r0, [r1, #0]
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	f002 021f 	and.w	r2, r2, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	4202      	tst	r2, r0
 8002b48:	f43f aec6 	beq.w	80028d8 <HAL_RCC_OscConfig+0x90>
 8002b4c:	6862      	ldr	r2, [r4, #4]
 8002b4e:	2a00      	cmp	r2, #0
 8002b50:	f47f aec2 	bne.w	80028d8 <HAL_RCC_OscConfig+0x90>
 8002b54:	e7aa      	b.n	8002aac <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b56:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <HAL_RCC_OscConfig+0x31c>)
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	e69e      	b.n	80028a0 <HAL_RCC_OscConfig+0x58>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4dab      	ldr	r5, [pc, #684]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
 8002b72:	21f8      	movs	r1, #248	; 0xf8
 8002b74:	6828      	ldr	r0, [r5, #0]
 8002b76:	fa91 f1a1 	rbit	r1, r1
 8002b7a:	6922      	ldr	r2, [r4, #16]
 8002b7c:	fab1 f181 	clz	r1, r1
 8002b80:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8002b84:	408a      	lsls	r2, r1
 8002b86:	4302      	orrs	r2, r0
 8002b88:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8a:	071d      	lsls	r5, r3, #28
 8002b8c:	f57f aeeb 	bpl.w	8002966 <HAL_RCC_OscConfig+0x11e>
 8002b90:	e70b      	b.n	80029aa <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	682b      	ldr	r3, [r5, #0]
 8002b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b98:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fef9 	bl	8001990 <HAL_GetTick>
 8002b9e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	05db      	lsls	r3, r3, #23
 8002ba4:	f53f aeed 	bmi.w	8002982 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe fef2 	bl	8001990 <HAL_GetTick>
 8002bac:	1b80      	subs	r0, r0, r6
 8002bae:	2864      	cmp	r0, #100	; 0x64
 8002bb0:	d9f6      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8002bb2:	2003      	movs	r0, #3
}
 8002bb4:	b003      	add	sp, #12
 8002bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	4d99      	ldr	r5, [pc, #612]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	602b      	str	r3, [r5, #0]
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fee0 	bl	8001990 <HAL_GetTick>
 8002bd0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002bd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	2701      	movs	r7, #1
 8002bd8:	e004      	b.n	8002be4 <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bda:	f7fe fed9 	bl	8001990 <HAL_GetTick>
 8002bde:	1b80      	subs	r0, r0, r6
 8002be0:	2864      	cmp	r0, #100	; 0x64
 8002be2:	d8e6      	bhi.n	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002be4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be8:	682a      	ldr	r2, [r5, #0]
 8002bea:	fa98 f3a8 	rbit	r3, r8
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	fa07 f303 	lsl.w	r3, r7, r3
 8002bfa:	4213      	tst	r3, r2
 8002bfc:	d1ed      	bne.n	8002bda <HAL_RCC_OscConfig+0x392>
 8002bfe:	e66a      	b.n	80028d6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c00:	4d87      	ldr	r5, [pc, #540]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
 8002c02:	6a2b      	ldr	r3, [r5, #32]
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	622b      	str	r3, [r5, #32]
 8002c0a:	6a2b      	ldr	r3, [r5, #32]
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002c12:	f7fe febd 	bl	8001990 <HAL_GetTick>
 8002c16:	f04f 0902 	mov.w	r9, #2
 8002c1a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	2701      	movs	r7, #1
 8002c1e:	e013      	b.n	8002c48 <HAL_RCC_OscConfig+0x400>
 8002c20:	fa99 f3a9 	rbit	r3, r9
 8002c24:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002c26:	fa99 f3a9 	rbit	r3, r9
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	fa07 f303 	lsl.w	r3, r7, r3
 8002c36:	4213      	tst	r3, r2
 8002c38:	d00e      	beq.n	8002c58 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fea9 	bl	8001990 <HAL_GetTick>
 8002c3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c42:	1b80      	subs	r0, r0, r6
 8002c44:	4298      	cmp	r0, r3
 8002c46:	d8b4      	bhi.n	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002c48:	fa99 f3a9 	rbit	r3, r9
 8002c4c:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0e5      	beq.n	8002c20 <HAL_RCC_OscConfig+0x3d8>
 8002c54:	6a2a      	ldr	r2, [r5, #32]
 8002c56:	e7e6      	b.n	8002c26 <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 8002c58:	f1b8 0f00 	cmp.w	r8, #0
 8002c5c:	f43f aed4 	beq.w	8002a08 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4a6f      	ldr	r2, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
 8002c62:	69d3      	ldr	r3, [r2, #28]
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c68:	61d3      	str	r3, [r2, #28]
 8002c6a:	e6cd      	b.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
 8002c6c:	2501      	movs	r5, #1
 8002c6e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c7e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c80:	4f67      	ldr	r7, [pc, #412]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 8002c82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c84:	f7fe fe84 	bl	8001990 <HAL_GetTick>
 8002c88:	f04f 0802 	mov.w	r8, #2
 8002c8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e004      	b.n	8002c9a <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fe7e 	bl	8001990 <HAL_GetTick>
 8002c94:	1b80      	subs	r0, r0, r6
 8002c96:	2802      	cmp	r0, #2
 8002c98:	d88b      	bhi.n	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002c9a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	fa98 f3a8 	rbit	r3, r8
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	fa05 f303 	lsl.w	r3, r5, r3
 8002cb0:	4213      	tst	r3, r2
 8002cb2:	d1ed      	bne.n	8002c90 <HAL_RCC_OscConfig+0x448>
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	e654      	b.n	8002962 <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
 8002cba:	6a13      	ldr	r3, [r2, #32]
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fe65 	bl	8001990 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	4f56      	ldr	r7, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8002cc8:	4605      	mov	r5, r0
 8002cca:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	2601      	movs	r6, #1
 8002cd0:	e014      	b.n	8002cfc <HAL_RCC_OscConfig+0x4b4>
 8002cd2:	fa99 f3a9 	rbit	r3, r9
 8002cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd8:	fa99 f3a9 	rbit	r3, r9
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa06 f303 	lsl.w	r3, r6, r3
 8002ce8:	4213      	tst	r3, r2
 8002cea:	d1b5      	bne.n	8002c58 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe fe50 	bl	8001990 <HAL_GetTick>
 8002cf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cf4:	1b40      	subs	r0, r0, r5
 8002cf6:	4298      	cmp	r0, r3
 8002cf8:	f63f af5b 	bhi.w	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002cfc:	fa99 f3a9 	rbit	r3, r9
 8002d00:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0e4      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x48a>
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	e7e5      	b.n	8002cd8 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	2801      	cmp	r0, #1
 8002d0e:	f43f aeb0 	beq.w	8002a72 <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 8002d12:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d14:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8002d16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d18:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8002d1c:	4288      	cmp	r0, r1
 8002d1e:	f47f aec5 	bne.w	8002aac <HAL_RCC_OscConfig+0x264>
 8002d22:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d24:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d28:	428a      	cmp	r2, r1
 8002d2a:	f47f aebf 	bne.w	8002aac <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d30:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 8002d34:	1a18      	subs	r0, r3, r0
 8002d36:	bf18      	it	ne
 8002d38:	2001      	movne	r0, #1
 8002d3a:	e69a      	b.n	8002a72 <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	f042 0204 	orr.w	r2, r2, #4
 8002d40:	621a      	str	r2, [r3, #32]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	e7ba      	b.n	8002cc2 <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 8002d4c:	2001      	movs	r0, #1
}
 8002d4e:	4770      	bx	lr
 8002d50:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d66:	f7fe fe13 	bl	8001990 <HAL_GetTick>
 8002d6a:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002d6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d70:	2701      	movs	r7, #1
 8002d72:	e005      	b.n	8002d80 <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe fe0c 	bl	8001990 <HAL_GetTick>
 8002d78:	1b80      	subs	r0, r0, r6
 8002d7a:	2802      	cmp	r0, #2
 8002d7c:	f63f af19 	bhi.w	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002d80:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	682a      	ldr	r2, [r5, #0]
 8002d86:	fa98 f3a8 	rbit	r3, r8
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	fa07 f303 	lsl.w	r3, r7, r3
 8002d96:	4213      	tst	r3, r2
 8002d98:	d1ec      	bne.n	8002d74 <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002d9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d9e:	f023 030f 	bic.w	r3, r3, #15
 8002da2:	4313      	orrs	r3, r2
 8002da4:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002da6:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8002daa:	686a      	ldr	r2, [r5, #4]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8002db2:	4313      	orrs	r3, r2
 8002db4:	606b      	str	r3, [r5, #4]
 8002db6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dca:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dcc:	4e14      	ldr	r6, [pc, #80]	; (8002e20 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 8002dce:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fdde 	bl	8001990 <HAL_GetTick>
 8002dd4:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002dd8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dda:	2501      	movs	r5, #1
 8002ddc:	e005      	b.n	8002dea <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fdd7 	bl	8001990 <HAL_GetTick>
 8002de2:	1b00      	subs	r0, r0, r4
 8002de4:	2802      	cmp	r0, #2
 8002de6:	f63f aee4 	bhi.w	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002dea:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dee:	6832      	ldr	r2, [r6, #0]
 8002df0:	fa98 f3a8 	rbit	r3, r8
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa05 f303 	lsl.w	r3, r5, r3
 8002e00:	4213      	tst	r3, r2
 8002e02:	d0ec      	beq.n	8002dde <HAL_RCC_OscConfig+0x596>
 8002e04:	e634      	b.n	8002a70 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e0a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e53f      	b.n	80028a0 <HAL_RCC_OscConfig+0x58>
 8002e20:	40021000 	.word	0x40021000

08002e24 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e24:	2800      	cmp	r0, #0
 8002e26:	f000 80c4 	beq.w	8002fb2 <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2a:	4a6d      	ldr	r2, [pc, #436]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	6813      	ldr	r3, [r2, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	428b      	cmp	r3, r1
{
 8002e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e38:	460d      	mov	r5, r1
 8002e3a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	d20c      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	f023 0307 	bic.w	r3, r3, #7
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	428b      	cmp	r3, r1
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8002e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	0798      	lsls	r0, r3, #30
 8002e5c:	d506      	bpl.n	8002e6c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5e:	4961      	ldr	r1, [pc, #388]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	68a0      	ldr	r0, [r4, #8]
 8002e62:	684a      	ldr	r2, [r1, #4]
 8002e64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e68:	4302      	orrs	r2, r0
 8002e6a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6c:	07d9      	lsls	r1, r3, #31
 8002e6e:	d52f      	bpl.n	8002ed0 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e70:	6861      	ldr	r1, [r4, #4]
 8002e72:	2901      	cmp	r1, #1
 8002e74:	f000 809f 	beq.w	8002fb6 <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e78:	2902      	cmp	r1, #2
 8002e7a:	f000 8087 	beq.w	8002f8c <HAL_RCC_ClockConfig+0x168>
 8002e7e:	2202      	movs	r2, #2
 8002e80:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	fa92 f2a2 	rbit	r2, r2
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	f002 021f 	and.w	r2, r2, #31
 8002e94:	2301      	movs	r3, #1
 8002e96:	fa03 f202 	lsl.w	r2, r3, r2
 8002e9a:	4202      	tst	r2, r0
 8002e9c:	d0d9      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9e:	4e51      	ldr	r6, [pc, #324]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	6873      	ldr	r3, [r6, #4]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002eaa:	f7fe fd71 	bl	8001990 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eae:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002eb2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb4:	e005      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb6:	f7fe fd6b 	bl	8001990 <HAL_GetTick>
 8002eba:	1bc0      	subs	r0, r0, r7
 8002ebc:	4540      	cmp	r0, r8
 8002ebe:	f200 808c 	bhi.w	8002fda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	6873      	ldr	r3, [r6, #4]
 8002ec4:	6862      	ldr	r2, [r4, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ece:	d1f2      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4a43      	ldr	r2, [pc, #268]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	6813      	ldr	r3, [r2, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	42ab      	cmp	r3, r5
 8002eda:	d909      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	f023 0307 	bic.w	r3, r3, #7
 8002ee2:	432b      	orrs	r3, r5
 8002ee4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	42ab      	cmp	r3, r5
 8002eee:	d1b0      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	075a      	lsls	r2, r3, #29
 8002ef4:	d506      	bpl.n	8002f04 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef6:	493b      	ldr	r1, [pc, #236]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	68e0      	ldr	r0, [r4, #12]
 8002efa:	684a      	ldr	r2, [r1, #4]
 8002efc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f00:	4302      	orrs	r2, r0
 8002f02:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	d507      	bpl.n	8002f18 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f08:	4a36      	ldr	r2, [pc, #216]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0a:	6921      	ldr	r1, [r4, #16]
 8002f0c:	6853      	ldr	r3, [r2, #4]
 8002f0e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002f12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f16:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002f18:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1a:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f1c:	f003 010c 	and.w	r1, r3, #12
 8002f20:	2908      	cmp	r1, #8
 8002f22:	d017      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f24:	4930      	ldr	r1, [pc, #192]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f26:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	22f0      	movs	r2, #240	; 0xf0
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	fa92 f2a2 	rbit	r2, r2
 8002f30:	fab2 f282 	clz	r2, r2
 8002f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f38:	40d3      	lsrs	r3, r2
 8002f3a:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 8002f3c:	482c      	ldr	r0, [pc, #176]	; (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	4a2c      	ldr	r2, [pc, #176]	; (8002ff4 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8002f42:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f44:	fa21 f303 	lsr.w	r3, r1, r3
 8002f48:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002f4a:	f7fe fceb 	bl	8001924 <HAL_InitTick>
  return HAL_OK;
 8002f4e:	2000      	movs	r0, #0
}
 8002f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f54:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8002f58:	fa91 f1a1 	rbit	r1, r1
 8002f5c:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f60:	fab1 f181 	clz	r1, r1
 8002f64:	fa90 f0a0 	rbit	r0, r0
 8002f68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f6c:	40cb      	lsrs	r3, r1
 8002f6e:	4922      	ldr	r1, [pc, #136]	; (8002ff8 <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f70:	4c22      	ldr	r4, [pc, #136]	; (8002ffc <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f74:	491c      	ldr	r1, [pc, #112]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f76:	fab0 f080 	clz	r0, r0
 8002f7a:	f002 020f 	and.w	r2, r2, #15
 8002f7e:	40c2      	lsrs	r2, r0
 8002f80:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f82:	fbb1 f1f2 	udiv	r1, r1, r2
 8002f86:	fb03 f101 	mul.w	r1, r3, r1
 8002f8a:	e7cc      	b.n	8002f26 <HAL_RCC_ClockConfig+0x102>
 8002f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f90:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f96:	6810      	ldr	r0, [r2, #0]
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	4203      	tst	r3, r0
 8002fac:	f47f af77 	bne.w	8002e9e <HAL_RCC_ClockConfig+0x7a>
 8002fb0:	e74f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002fb2:	2001      	movs	r0, #1
}
 8002fb4:	4770      	bx	lr
 8002fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fba:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa92 f2a2 	rbit	r2, r2
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	f002 021f 	and.w	r2, r2, #31
 8002fce:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd2:	421a      	tst	r2, r3
 8002fd4:	f47f af63 	bne.w	8002e9e <HAL_RCC_ClockConfig+0x7a>
 8002fd8:	e73b      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002fda:	2003      	movs	r0, #3
 8002fdc:	e73a      	b.n	8002e54 <HAL_RCC_ClockConfig+0x30>
 8002fde:	bf00      	nop
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	007a1200 	.word	0x007a1200
 8002fec:	0800483c 	.word	0x0800483c
 8002ff0:	20000034 	.word	0x20000034
 8002ff4:	2000002c 	.word	0x2000002c
 8002ff8:	08004854 	.word	0x08004854
 8002ffc:	08004864 	.word	0x08004864

08003000 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <HAL_RCC_GetSysClockFreq+0x4c>)
 8003002:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003004:	f003 010c 	and.w	r1, r3, #12
 8003008:	2908      	cmp	r1, #8
 800300a:	d001      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800300c:	4810      	ldr	r0, [pc, #64]	; (8003050 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800300e:	4770      	bx	lr
{
 8003010:	b430      	push	{r4, r5}
 8003012:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 8003016:	fa90 f0a0 	rbit	r0, r0
 800301a:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800301c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800301e:	fab0 f080 	clz	r0, r0
 8003022:	fa91 f1a1 	rbit	r1, r1
 8003026:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800302a:	40c3      	lsrs	r3, r0
 800302c:	4809      	ldr	r0, [pc, #36]	; (8003054 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800302e:	4d0a      	ldr	r5, [pc, #40]	; (8003058 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003030:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003032:	4c07      	ldr	r4, [pc, #28]	; (8003050 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003034:	fab1 f181 	clz	r1, r1
 8003038:	f002 030f 	and.w	r3, r2, #15
 800303c:	40cb      	lsrs	r3, r1
 800303e:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003040:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003044:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003046:	fb00 f003 	mul.w	r0, r0, r3
}
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	007a1200 	.word	0x007a1200
 8003054:	08004854 	.word	0x08004854
 8003058:	08004864 	.word	0x08004864

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	fa92 f2a2 	rbit	r2, r2
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003070:	4904      	ldr	r1, [pc, #16]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003072:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	6810      	ldr	r0, [r2, #0]
}    
 800307a:	40d8      	lsrs	r0, r3
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	0800484c 	.word	0x0800484c
 8003088:	2000002c 	.word	0x2000002c

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	fa92 f2a2 	rbit	r2, r2
 8003098:	fab2 f282 	clz	r2, r2
 800309c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a2:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	6810      	ldr	r0, [r2, #0]
} 
 80030aa:	40d8      	lsrs	r0, r3
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	0800484c 	.word	0x0800484c
 80030b8:	2000002c 	.word	0x2000002c

080030bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030c0:	6803      	ldr	r3, [r0, #0]
 80030c2:	03d9      	lsls	r1, r3, #15
{
 80030c4:	b083      	sub	sp, #12
 80030c6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030c8:	d53d      	bpl.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x8a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4ba1      	ldr	r3, [pc, #644]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	00d2      	lsls	r2, r2, #3
 80030d0:	f140 80f6 	bpl.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4d9f      	ldr	r5, [pc, #636]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80030da:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	f140 80ff 	bpl.w	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030e2:	4d9b      	ldr	r5, [pc, #620]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80030e4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80030ea:	d01f      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x70>
 80030ec:	6861      	ldr	r1, [r4, #4]
 80030ee:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d01b      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f6:	6a29      	ldr	r1, [r5, #32]
 80030f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fc:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8003100:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003104:	f8df c250 	ldr.w	ip, [pc, #592]	; 8003358 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003108:	fab2 f282 	clz	r2, r2
 800310c:	4462      	add	r2, ip
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	2701      	movs	r7, #1
 8003112:	6017      	str	r7, [r2, #0]
 8003114:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	4463      	add	r3, ip
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003122:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003124:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8003126:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003128:	f100 80ee 	bmi.w	8003308 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800312c:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800312e:	4a88      	ldr	r2, [pc, #544]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003130:	6a13      	ldr	r3, [r2, #32]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	430b      	orrs	r3, r1
 8003138:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800313a:	b11e      	cbz	r6, 8003144 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	69d3      	ldr	r3, [r2, #28]
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
 8003144:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003146:	07da      	lsls	r2, r3, #31
 8003148:	d506      	bpl.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800314a:	4981      	ldr	r1, [pc, #516]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800314c:	68a0      	ldr	r0, [r4, #8]
 800314e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003150:	f022 0203 	bic.w	r2, r2, #3
 8003154:	4302      	orrs	r2, r0
 8003156:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003158:	079f      	lsls	r7, r3, #30
 800315a:	d506      	bpl.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315c:	497c      	ldr	r1, [pc, #496]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800315e:	68e0      	ldr	r0, [r4, #12]
 8003160:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003162:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003166:	4302      	orrs	r2, r0
 8003168:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316a:	075e      	lsls	r6, r3, #29
 800316c:	d506      	bpl.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800316e:	4978      	ldr	r1, [pc, #480]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003170:	6920      	ldr	r0, [r4, #16]
 8003172:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003174:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003178:	4302      	orrs	r2, r0
 800317a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800317c:	069d      	lsls	r5, r3, #26
 800317e:	d506      	bpl.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003180:	4973      	ldr	r1, [pc, #460]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003182:	69e0      	ldr	r0, [r4, #28]
 8003184:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003186:	f022 0210 	bic.w	r2, r2, #16
 800318a:	4302      	orrs	r2, r0
 800318c:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800318e:	0398      	lsls	r0, r3, #14
 8003190:	d506      	bpl.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003192:	496f      	ldr	r1, [pc, #444]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003194:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003196:	684a      	ldr	r2, [r1, #4]
 8003198:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800319c:	4302      	orrs	r2, r0
 800319e:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a0:	0659      	lsls	r1, r3, #25
 80031a2:	d506      	bpl.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a4:	496a      	ldr	r1, [pc, #424]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031a6:	6a20      	ldr	r0, [r4, #32]
 80031a8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031aa:	f022 0220 	bic.w	r2, r2, #32
 80031ae:	4302      	orrs	r2, r0
 80031b0:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b2:	035a      	lsls	r2, r3, #13
 80031b4:	d506      	bpl.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b6:	4966      	ldr	r1, [pc, #408]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80031ba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c0:	4302      	orrs	r2, r0
 80031c2:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031c4:	071f      	lsls	r7, r3, #28
 80031c6:	d506      	bpl.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031c8:	4961      	ldr	r1, [pc, #388]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031ca:	6960      	ldr	r0, [r4, #20]
 80031cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031ce:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80031d2:	4302      	orrs	r2, r0
 80031d4:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031d6:	06de      	lsls	r6, r3, #27
 80031d8:	d506      	bpl.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031da:	495d      	ldr	r1, [pc, #372]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031dc:	69a0      	ldr	r0, [r4, #24]
 80031de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031e0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80031e4:	4302      	orrs	r2, r0
 80031e6:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031e8:	059d      	lsls	r5, r3, #22
 80031ea:	d506      	bpl.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031ec:	4958      	ldr	r1, [pc, #352]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80031f0:	684a      	ldr	r2, [r1, #4]
 80031f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80031f6:	4302      	orrs	r2, r0
 80031f8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031fa:	0618      	lsls	r0, r3, #24
 80031fc:	d506      	bpl.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031fe:	4954      	ldr	r1, [pc, #336]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003202:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003204:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8003208:	4302      	orrs	r2, r0
 800320a:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800320c:	05d9      	lsls	r1, r3, #23
 800320e:	d506      	bpl.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003210:	494f      	ldr	r1, [pc, #316]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003212:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003214:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003216:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800321a:	4302      	orrs	r2, r0
 800321c:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800321e:	04da      	lsls	r2, r3, #19
 8003220:	d506      	bpl.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003222:	494b      	ldr	r1, [pc, #300]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003224:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003226:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322c:	4302      	orrs	r2, r0
 800322e:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003230:	049f      	lsls	r7, r3, #18
 8003232:	d506      	bpl.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003234:	4946      	ldr	r1, [pc, #280]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003236:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003238:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800323a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800323e:	4302      	orrs	r2, r0
 8003240:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003242:	02de      	lsls	r6, r3, #11
 8003244:	d506      	bpl.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003246:	4942      	ldr	r1, [pc, #264]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003248:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800324a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800324c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003250:	4302      	orrs	r2, r0
 8003252:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003254:	029d      	lsls	r5, r3, #10
 8003256:	d506      	bpl.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003258:	493d      	ldr	r1, [pc, #244]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800325a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800325c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800325e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003262:	4302      	orrs	r2, r0
 8003264:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003266:	0258      	lsls	r0, r3, #9
 8003268:	d506      	bpl.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800326a:	4939      	ldr	r1, [pc, #228]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800326c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800326e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003274:	4302      	orrs	r2, r0
 8003276:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003278:	0219      	lsls	r1, r3, #8
 800327a:	d506      	bpl.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800327c:	4934      	ldr	r1, [pc, #208]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800327e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003280:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003286:	4302      	orrs	r2, r0
 8003288:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800328a:	01da      	lsls	r2, r3, #7
 800328c:	d506      	bpl.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800328e:	4930      	ldr	r1, [pc, #192]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003290:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003292:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003298:	4302      	orrs	r2, r0
 800329a:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800329c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80032a0:	d103      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032a2:	4618      	mov	r0, r3
}
 80032a4:	b003      	add	sp, #12
 80032a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80032ac:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80032ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032b4:	430b      	orrs	r3, r1
  return HAL_OK;
 80032b6:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80032ba:	b003      	add	sp, #12
 80032bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4d24      	ldr	r5, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032c8:	61da      	str	r2, [r3, #28]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 80032d8:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	f53f af01 	bmi.w	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80032e8:	f7fe fb52 	bl	8001990 <HAL_GetTick>
 80032ec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	682b      	ldr	r3, [r5, #0]
 80032f0:	05d8      	lsls	r0, r3, #23
 80032f2:	f53f aef6 	bmi.w	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe fb4b 	bl	8001990 <HAL_GetTick>
 80032fa:	1bc0      	subs	r0, r0, r7
 80032fc:	2864      	cmp	r0, #100	; 0x64
 80032fe:	d9f6      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 8003300:	2003      	movs	r0, #3
}
 8003302:	b003      	add	sp, #12
 8003304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8003308:	f7fe fb42 	bl	8001990 <HAL_GetTick>
 800330c:	f04f 0902 	mov.w	r9, #2
 8003310:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	e015      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003314:	fa99 f3a9 	rbit	r3, r9
 8003318:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800331a:	fa99 f3a9 	rbit	r3, r9
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	fa07 f303 	lsl.w	r3, r7, r3
 800332a:	4213      	tst	r3, r2
 800332c:	f47f aefe 	bne.w	800312c <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7fe fb2e 	bl	8001990 <HAL_GetTick>
 8003334:	f241 3388 	movw	r3, #5000	; 0x1388
 8003338:	eba0 0008 	sub.w	r0, r0, r8
 800333c:	4298      	cmp	r0, r3
 800333e:	d8df      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003340:	fa99 f3a9 	rbit	r3, r9
 8003344:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0e3      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800334c:	6a2a      	ldr	r2, [r5, #32]
 800334e:	e7e4      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003350:	40021000 	.word	0x40021000
 8003354:	40007000 	.word	0x40007000
 8003358:	10908100 	.word	0x10908100

0800335c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335c:	6a03      	ldr	r3, [r0, #32]
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6203      	str	r3, [r0, #32]
{
 8003364:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800336c:	4f1a      	ldr	r7, [pc, #104]	; (80033d8 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 800336e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003370:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003372:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8003376:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800337a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800337e:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8003380:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8003384:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003388:	d012      	beq.n	80033b0 <TIM_OC1_SetConfig+0x54>
 800338a:	4c14      	ldr	r4, [pc, #80]	; (80033dc <TIM_OC1_SetConfig+0x80>)
 800338c:	42a0      	cmp	r0, r4
 800338e:	d00f      	beq.n	80033b0 <TIM_OC1_SetConfig+0x54>
 8003390:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003394:	42a0      	cmp	r0, r4
 8003396:	d00b      	beq.n	80033b0 <TIM_OC1_SetConfig+0x54>
 8003398:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800339c:	42a0      	cmp	r0, r4
 800339e:	d007      	beq.n	80033b0 <TIM_OC1_SetConfig+0x54>
 80033a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033a4:	42a0      	cmp	r0, r4
 80033a6:	d003      	beq.n	80033b0 <TIM_OC1_SetConfig+0x54>
 80033a8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80033ac:	42a0      	cmp	r0, r4
 80033ae:	d10b      	bne.n	80033c8 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b0:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80033b6:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033b8:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033bc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c0:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c6:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033c8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80033ca:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033cc:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80033ce:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80033d0:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80033d2:	6203      	str	r3, [r0, #32]
}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40013400 	.word	0x40013400

080033e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e0:	6a03      	ldr	r3, [r0, #32]
 80033e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e6:	6203      	str	r3, [r0, #32]
{
 80033e8:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ee:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033f0:	4f21      	ldr	r7, [pc, #132]	; (8003478 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033f2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80033f4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80033fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003402:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003404:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8003408:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800340c:	d016      	beq.n	800343c <TIM_OC3_SetConfig+0x5c>
 800340e:	4c1b      	ldr	r4, [pc, #108]	; (800347c <TIM_OC3_SetConfig+0x9c>)
 8003410:	42a0      	cmp	r0, r4
 8003412:	d013      	beq.n	800343c <TIM_OC3_SetConfig+0x5c>
 8003414:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003418:	42a0      	cmp	r0, r4
 800341a:	d024      	beq.n	8003466 <TIM_OC3_SetConfig+0x86>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	4c18      	ldr	r4, [pc, #96]	; (8003480 <TIM_OC3_SetConfig+0xa0>)
 800341e:	42a0      	cmp	r0, r4
 8003420:	d013      	beq.n	800344a <TIM_OC3_SetConfig+0x6a>
 8003422:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003426:	42a0      	cmp	r0, r4
 8003428:	d00f      	beq.n	800344a <TIM_OC3_SetConfig+0x6a>
 800342a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800342e:	42a0      	cmp	r0, r4
 8003430:	d00b      	beq.n	800344a <TIM_OC3_SetConfig+0x6a>
 8003432:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003436:	42a0      	cmp	r0, r4
 8003438:	d10e      	bne.n	8003458 <TIM_OC3_SetConfig+0x78>
 800343a:	e006      	b.n	800344a <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343c:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800343e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003442:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800344a:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800344e:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003452:	432c      	orrs	r4, r5
 8003454:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003458:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800345a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800345c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800345e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8003460:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003462:	6203      	str	r3, [r0, #32]
}
 8003464:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003466:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800346c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	e7d2      	b.n	800341c <TIM_OC3_SetConfig+0x3c>
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40013400 	.word	0x40013400
 8003480:	40014000 	.word	0x40014000

08003484 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003484:	2800      	cmp	r0, #0
 8003486:	f000 8085 	beq.w	8003594 <HAL_TIM_Base_Init+0x110>
{
 800348a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800348c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003490:	4604      	mov	r4, r0
 8003492:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003496:	2b00      	cmp	r3, #0
 8003498:	d074      	beq.n	8003584 <HAL_TIM_Base_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349c:	4941      	ldr	r1, [pc, #260]	; (80035a4 <HAL_TIM_Base_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80034a6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	d058      	beq.n	800355c <HAL_TIM_Base_Init+0xd8>
 80034aa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80034ae:	d028      	beq.n	8003502 <HAL_TIM_Base_Init+0x7e>
 80034b0:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80034b4:	428a      	cmp	r2, r1
 80034b6:	d024      	beq.n	8003502 <HAL_TIM_Base_Init+0x7e>
 80034b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80034bc:	428a      	cmp	r2, r1
 80034be:	d020      	beq.n	8003502 <HAL_TIM_Base_Init+0x7e>
 80034c0:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80034c4:	428a      	cmp	r2, r1
 80034c6:	d049      	beq.n	800355c <HAL_TIM_Base_Init+0xd8>
 80034c8:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80034cc:	428a      	cmp	r2, r1
 80034ce:	d063      	beq.n	8003598 <HAL_TIM_Base_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d0:	4935      	ldr	r1, [pc, #212]	; (80035a8 <HAL_TIM_Base_Init+0x124>)
 80034d2:	428a      	cmp	r2, r1
 80034d4:	d05b      	beq.n	800358e <HAL_TIM_Base_Init+0x10a>
 80034d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80034da:	428a      	cmp	r2, r1
 80034dc:	d057      	beq.n	800358e <HAL_TIM_Base_Init+0x10a>
 80034de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80034e2:	428a      	cmp	r2, r1
 80034e4:	d053      	beq.n	800358e <HAL_TIM_Base_Init+0x10a>
 80034e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ea:	428a      	cmp	r2, r1
 80034ec:	d04f      	beq.n	800358e <HAL_TIM_Base_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ee:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80034f2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80034fa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034fc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034fe:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003500:	e010      	b.n	8003524 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8003502:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003504:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003506:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800350c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003512:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003514:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800351c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800351e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003522:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003524:	2301      	movs	r3, #1
 8003526:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003530:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003534:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003538:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800353c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003548:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800354c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003550:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003554:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003558:	2000      	movs	r0, #0
}
 800355a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800355c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003560:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003566:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003572:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003574:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003576:	68e3      	ldr	r3, [r4, #12]
 8003578:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800357a:	6863      	ldr	r3, [r4, #4]
 800357c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800357e:	6963      	ldr	r3, [r4, #20]
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	e7cf      	b.n	8003524 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8003584:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003588:	f7fe f8a6 	bl	80016d8 <HAL_TIM_Base_MspInit>
 800358c:	e785      	b.n	800349a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	69a1      	ldr	r1, [r4, #24]
 8003592:	e7e9      	b.n	8003568 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 8003594:	2001      	movs	r0, #1
}
 8003596:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003598:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800359e:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a0:	e796      	b.n	80034d0 <HAL_TIM_Base_Init+0x4c>
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40014000 	.word	0x40014000

080035ac <HAL_TIM_PWM_MspInit>:
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80035b0:	2800      	cmp	r0, #0
 80035b2:	f000 8085 	beq.w	80036c0 <HAL_TIM_PWM_Init+0x110>
{
 80035b6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80035b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035bc:	4604      	mov	r4, r0
 80035be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d074      	beq.n	80036b0 <HAL_TIM_PWM_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	4941      	ldr	r1, [pc, #260]	; (80036d0 <HAL_TIM_PWM_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 80035ca:	2302      	movs	r3, #2
 80035cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80035d2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	d058      	beq.n	8003688 <HAL_TIM_PWM_Init+0xd8>
 80035d6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80035da:	d028      	beq.n	800362e <HAL_TIM_PWM_Init+0x7e>
 80035dc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80035e0:	428a      	cmp	r2, r1
 80035e2:	d024      	beq.n	800362e <HAL_TIM_PWM_Init+0x7e>
 80035e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80035e8:	428a      	cmp	r2, r1
 80035ea:	d020      	beq.n	800362e <HAL_TIM_PWM_Init+0x7e>
 80035ec:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80035f0:	428a      	cmp	r2, r1
 80035f2:	d049      	beq.n	8003688 <HAL_TIM_PWM_Init+0xd8>
 80035f4:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80035f8:	428a      	cmp	r2, r1
 80035fa:	d063      	beq.n	80036c4 <HAL_TIM_PWM_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fc:	4935      	ldr	r1, [pc, #212]	; (80036d4 <HAL_TIM_PWM_Init+0x124>)
 80035fe:	428a      	cmp	r2, r1
 8003600:	d05b      	beq.n	80036ba <HAL_TIM_PWM_Init+0x10a>
 8003602:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003606:	428a      	cmp	r2, r1
 8003608:	d057      	beq.n	80036ba <HAL_TIM_PWM_Init+0x10a>
 800360a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800360e:	428a      	cmp	r2, r1
 8003610:	d053      	beq.n	80036ba <HAL_TIM_PWM_Init+0x10a>
 8003612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003616:	428a      	cmp	r2, r1
 8003618:	d04f      	beq.n	80036ba <HAL_TIM_PWM_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800361e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003624:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003626:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003628:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800362a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362c:	e010      	b.n	8003650 <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 800362e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003630:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003632:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003638:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003640:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003646:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003648:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800364a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800364c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800364e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003650:	2301      	movs	r3, #1
 8003652:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003654:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800365c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003660:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003664:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800366c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003678:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800367c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003680:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003684:	2000      	movs	r0, #0
}
 8003686:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003688:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003692:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003698:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80036a0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a2:	68e3      	ldr	r3, [r4, #12]
 80036a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036a6:	6863      	ldr	r3, [r4, #4]
 80036a8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80036aa:	6963      	ldr	r3, [r4, #20]
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	e7cf      	b.n	8003650 <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 80036b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036b4:	f7ff ff7a 	bl	80035ac <HAL_TIM_PWM_MspInit>
 80036b8:	e785      	b.n	80035c6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ba:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036bc:	69a1      	ldr	r1, [r4, #24]
 80036be:	e7e9      	b.n	8003694 <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 80036c0:	2001      	movs	r0, #1
}
 80036c2:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80036c4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036ca:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036cc:	e796      	b.n	80035fc <HAL_TIM_PWM_Init+0x4c>
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40014000 	.word	0x40014000

080036d8 <HAL_TIM_PWM_Start>:
 80036d8:	2900      	cmp	r1, #0
 80036da:	d154      	bne.n	8003786 <HAL_TIM_PWM_Start+0xae>
 80036dc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d15a      	bne.n	800379a <HAL_TIM_PWM_Start+0xc2>
 80036e4:	2302      	movs	r3, #2
 80036e6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	6a18      	ldr	r0, [r3, #32]
 80036f0:	f001 011f 	and.w	r1, r1, #31
 80036f4:	fa02 f101 	lsl.w	r1, r2, r1
 80036f8:	ea20 0001 	bic.w	r0, r0, r1
 80036fc:	b410      	push	{r4}
 80036fe:	6218      	str	r0, [r3, #32]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	4c3e      	ldr	r4, [pc, #248]	; (80037fc <HAL_TIM_PWM_Start+0x124>)
 8003704:	4311      	orrs	r1, r2
 8003706:	42a3      	cmp	r3, r4
 8003708:	6219      	str	r1, [r3, #32]
 800370a:	d056      	beq.n	80037ba <HAL_TIM_PWM_Start+0xe2>
 800370c:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <HAL_TIM_PWM_Start+0x128>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00f      	beq.n	8003732 <HAL_TIM_PWM_Start+0x5a>
 8003712:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <HAL_TIM_PWM_Start+0x5a>
 800371a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <HAL_TIM_PWM_Start+0x5a>
 8003722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <HAL_TIM_PWM_Start+0x5a>
 800372a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372e:	4293      	cmp	r3, r2
 8003730:	d103      	bne.n	800373a <HAL_TIM_PWM_Start+0x62>
 8003732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003734:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d012      	beq.n	8003766 <HAL_TIM_PWM_Start+0x8e>
 8003740:	4a30      	ldr	r2, [pc, #192]	; (8003804 <HAL_TIM_PWM_Start+0x12c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00f      	beq.n	8003766 <HAL_TIM_PWM_Start+0x8e>
 8003746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800374a:	4293      	cmp	r3, r2
 800374c:	d00b      	beq.n	8003766 <HAL_TIM_PWM_Start+0x8e>
 800374e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <HAL_TIM_PWM_Start+0x8e>
 8003756:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <HAL_TIM_PWM_Start+0x8e>
 800375e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003762:	4293      	cmp	r3, r2
 8003764:	d107      	bne.n	8003776 <HAL_TIM_PWM_Start+0x9e>
 8003766:	6899      	ldr	r1, [r3, #8]
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_TIM_PWM_Start+0x130>)
 800376a:	400a      	ands	r2, r1
 800376c:	2a06      	cmp	r2, #6
 800376e:	d016      	beq.n	800379e <HAL_TIM_PWM_Start+0xc6>
 8003770:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003774:	d013      	beq.n	800379e <HAL_TIM_PWM_Start+0xc6>
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	2000      	movs	r0, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	4770      	bx	lr
 8003786:	2904      	cmp	r1, #4
 8003788:	d01c      	beq.n	80037c4 <HAL_TIM_PWM_Start+0xec>
 800378a:	2908      	cmp	r1, #8
 800378c:	d022      	beq.n	80037d4 <HAL_TIM_PWM_Start+0xfc>
 800378e:	290c      	cmp	r1, #12
 8003790:	d109      	bne.n	80037a6 <HAL_TIM_PWM_Start+0xce>
 8003792:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003796:	2b01      	cmp	r3, #1
 8003798:	d024      	beq.n	80037e4 <HAL_TIM_PWM_Start+0x10c>
 800379a:	2001      	movs	r0, #1
 800379c:	4770      	bx	lr
 800379e:	2000      	movs	r0, #0
 80037a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	2910      	cmp	r1, #16
 80037a8:	d020      	beq.n	80037ec <HAL_TIM_PWM_Start+0x114>
 80037aa:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d1f3      	bne.n	800379a <HAL_TIM_PWM_Start+0xc2>
 80037b2:	2302      	movs	r3, #2
 80037b4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80037b8:	e797      	b.n	80036ea <HAL_TIM_PWM_Start+0x12>
 80037ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
 80037c2:	e7d0      	b.n	8003766 <HAL_TIM_PWM_Start+0x8e>
 80037c4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d1e6      	bne.n	800379a <HAL_TIM_PWM_Start+0xc2>
 80037cc:	2302      	movs	r3, #2
 80037ce:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80037d2:	e78a      	b.n	80036ea <HAL_TIM_PWM_Start+0x12>
 80037d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d1de      	bne.n	800379a <HAL_TIM_PWM_Start+0xc2>
 80037dc:	2302      	movs	r3, #2
 80037de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80037e2:	e782      	b.n	80036ea <HAL_TIM_PWM_Start+0x12>
 80037e4:	2302      	movs	r3, #2
 80037e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80037ea:	e77e      	b.n	80036ea <HAL_TIM_PWM_Start+0x12>
 80037ec:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d1d2      	bne.n	800379a <HAL_TIM_PWM_Start+0xc2>
 80037f4:	2302      	movs	r3, #2
 80037f6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80037fa:	e776      	b.n	80036ea <HAL_TIM_PWM_Start+0x12>
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40013400 	.word	0x40013400
 8003804:	40000400 	.word	0x40000400
 8003808:	00010007 	.word	0x00010007

0800380c <HAL_TIM_PWM_Start_IT>:
 800380c:	2900      	cmp	r1, #0
 800380e:	d15a      	bne.n	80038c6 <HAL_TIM_PWM_Start_IT+0xba>
 8003810:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003814:	2b01      	cmp	r3, #1
 8003816:	d160      	bne.n	80038da <HAL_TIM_PWM_Start_IT+0xce>
 8003818:	2302      	movs	r3, #2
 800381a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	f042 0202 	orr.w	r2, r2, #2
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	6a18      	ldr	r0, [r3, #32]
 800382a:	2201      	movs	r2, #1
 800382c:	f001 011f 	and.w	r1, r1, #31
 8003830:	fa02 f101 	lsl.w	r1, r2, r1
 8003834:	ea20 0001 	bic.w	r0, r0, r1
 8003838:	b410      	push	{r4}
 800383a:	6218      	str	r0, [r3, #32]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	4c58      	ldr	r4, [pc, #352]	; (80039a0 <HAL_TIM_PWM_Start_IT+0x194>)
 8003840:	4311      	orrs	r1, r2
 8003842:	42a3      	cmp	r3, r4
 8003844:	6219      	str	r1, [r3, #32]
 8003846:	f000 809c 	beq.w	8003982 <HAL_TIM_PWM_Start_IT+0x176>
 800384a:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <HAL_TIM_PWM_Start_IT+0x198>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00f      	beq.n	8003870 <HAL_TIM_PWM_Start_IT+0x64>
 8003850:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <HAL_TIM_PWM_Start_IT+0x64>
 8003858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <HAL_TIM_PWM_Start_IT+0x64>
 8003860:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <HAL_TIM_PWM_Start_IT+0x64>
 8003868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386c:	4293      	cmp	r3, r2
 800386e:	d103      	bne.n	8003878 <HAL_TIM_PWM_Start_IT+0x6c>
 8003870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d012      	beq.n	80038a4 <HAL_TIM_PWM_Start_IT+0x98>
 800387e:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_TIM_PWM_Start_IT+0x19c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00f      	beq.n	80038a4 <HAL_TIM_PWM_Start_IT+0x98>
 8003884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <HAL_TIM_PWM_Start_IT+0x98>
 800388c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <HAL_TIM_PWM_Start_IT+0x98>
 8003894:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <HAL_TIM_PWM_Start_IT+0x98>
 800389c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_PWM_Start_IT+0xa8>
 80038a4:	6899      	ldr	r1, [r3, #8]
 80038a6:	4a41      	ldr	r2, [pc, #260]	; (80039ac <HAL_TIM_PWM_Start_IT+0x1a0>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	2a06      	cmp	r2, #6
 80038ac:	d018      	beq.n	80038e0 <HAL_TIM_PWM_Start_IT+0xd4>
 80038ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80038b2:	d015      	beq.n	80038e0 <HAL_TIM_PWM_Start_IT+0xd4>
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	4770      	bx	lr
 80038c6:	2904      	cmp	r1, #4
 80038c8:	d04e      	beq.n	8003968 <HAL_TIM_PWM_Start_IT+0x15c>
 80038ca:	2908      	cmp	r1, #8
 80038cc:	d03f      	beq.n	800394e <HAL_TIM_PWM_Start_IT+0x142>
 80038ce:	290c      	cmp	r1, #12
 80038d0:	d10b      	bne.n	80038ea <HAL_TIM_PWM_Start_IT+0xde>
 80038d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d030      	beq.n	800393c <HAL_TIM_PWM_Start_IT+0x130>
 80038da:	2301      	movs	r3, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	4770      	bx	lr
 80038e0:	2300      	movs	r3, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	2910      	cmp	r1, #16
 80038ec:	d04e      	beq.n	800398c <HAL_TIM_PWM_Start_IT+0x180>
 80038ee:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 80038f2:	2a01      	cmp	r2, #1
 80038f4:	b2d3      	uxtb	r3, r2
 80038f6:	d1f0      	bne.n	80038da <HAL_TIM_PWM_Start_IT+0xce>
 80038f8:	2202      	movs	r2, #2
 80038fa:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
 80038fe:	290c      	cmp	r1, #12
 8003900:	d8ec      	bhi.n	80038dc <HAL_TIM_PWM_Start_IT+0xd0>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_TIM_PWM_Start_IT+0xfc>)
 8003904:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8003908:	0800381f 	.word	0x0800381f
 800390c:	080038dd 	.word	0x080038dd
 8003910:	080038dd 	.word	0x080038dd
 8003914:	080038dd 	.word	0x080038dd
 8003918:	08003977 	.word	0x08003977
 800391c:	080038dd 	.word	0x080038dd
 8003920:	080038dd 	.word	0x080038dd
 8003924:	080038dd 	.word	0x080038dd
 8003928:	0800395d 	.word	0x0800395d
 800392c:	080038dd 	.word	0x080038dd
 8003930:	080038dd 	.word	0x080038dd
 8003934:	080038dd 	.word	0x080038dd
 8003938:	08003943 	.word	0x08003943
 800393c:	2302      	movs	r3, #2
 800393e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003942:	6803      	ldr	r3, [r0, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	f042 0210 	orr.w	r2, r2, #16
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	e76c      	b.n	8003828 <HAL_TIM_PWM_Start_IT+0x1c>
 800394e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003952:	2b01      	cmp	r3, #1
 8003954:	d1c1      	bne.n	80038da <HAL_TIM_PWM_Start_IT+0xce>
 8003956:	2302      	movs	r3, #2
 8003958:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800395c:	6803      	ldr	r3, [r0, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	f042 0208 	orr.w	r2, r2, #8
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	e75f      	b.n	8003828 <HAL_TIM_PWM_Start_IT+0x1c>
 8003968:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800396c:	2b01      	cmp	r3, #1
 800396e:	d1b4      	bne.n	80038da <HAL_TIM_PWM_Start_IT+0xce>
 8003970:	2302      	movs	r3, #2
 8003972:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	f042 0204 	orr.w	r2, r2, #4
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	e752      	b.n	8003828 <HAL_TIM_PWM_Start_IT+0x1c>
 8003982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
 800398a:	e78b      	b.n	80038a4 <HAL_TIM_PWM_Start_IT+0x98>
 800398c:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8003990:	2a01      	cmp	r2, #1
 8003992:	b2d3      	uxtb	r3, r2
 8003994:	d1a1      	bne.n	80038da <HAL_TIM_PWM_Start_IT+0xce>
 8003996:	2202      	movs	r2, #2
 8003998:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
 800399c:	e79e      	b.n	80038dc <HAL_TIM_PWM_Start_IT+0xd0>
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40000400 	.word	0x40000400
 80039ac:	00010007 	.word	0x00010007

080039b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80039b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d074      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xf2>
 80039b8:	4602      	mov	r2, r0
{
 80039ba:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80039be:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80039c4:	2001      	movs	r0, #1
 80039c6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80039ca:	68a6      	ldr	r6, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80039cc:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ce:	4d4f      	ldr	r5, [pc, #316]	; (8003b0c <HAL_TIM_ConfigClockSource+0x15c>)
  switch (sClockSourceConfig->ClockSource)
 80039d0:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d2:	ea05 0506 	and.w	r5, r5, r6
  htim->Instance->SMCR = tmpsmcr;
 80039d6:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80039d8:	d065      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0xf6>
 80039da:	d824      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x76>
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d07c      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x12a>
 80039e0:	d94b      	bls.n	8003a7a <HAL_TIM_ConfigClockSource+0xca>
 80039e2:	2b50      	cmp	r3, #80	; 0x50
 80039e4:	d117      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e6:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e8:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	6848      	ldr	r0, [r1, #4]
 80039ec:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ee:	f026 0601 	bic.w	r6, r6, #1
 80039f2:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f4:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039f6:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80039fe:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a00:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a04:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003a06:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a08:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a16:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003a18:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a1e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003a22:	bcf0      	pop	{r4, r5, r6, r7}
 8003a24:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d038      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xee>
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d110      	bne.n	8003a54 <HAL_TIM_ConfigClockSource+0xa4>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a32:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003a36:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003a38:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a3a:	432b      	orrs	r3, r5
 8003a3c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a40:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a44:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a46:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a48:	68a3      	ldr	r3, [r4, #8]
 8003a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4e:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2000      	movs	r0, #0
      break;
 8003a52:	e7e0      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003a54:	2b70      	cmp	r3, #112	; 0x70
 8003a56:	d1de      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a58:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003a5c:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003a5e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a60:	432b      	orrs	r3, r5
 8003a62:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a66:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a6a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003a6c:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003a6e:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003a74:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2000      	movs	r0, #0
      break;
 8003a78:	e7cd      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d002      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0xd4>
 8003a7e:	d90a      	bls.n	8003a96 <HAL_TIM_ConfigClockSource+0xe6>
 8003a80:	2b30      	cmp	r3, #48	; 0x30
 8003a82:	d1c8      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8003a84:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a86:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003a90:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2000      	movs	r0, #0
}
 8003a94:	e7bf      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003a96:	f033 0110 	bics.w	r1, r3, #16
 8003a9a:	d1bc      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
 8003a9c:	e7f2      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e7b9      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8003aa2:	2002      	movs	r0, #2
}
 8003aa4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa6:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa8:	684d      	ldr	r5, [r1, #4]
 8003aaa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aac:	f020 0010 	bic.w	r0, r0, #16
 8003ab0:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab2:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003ab4:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003abe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac6:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003ac8:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003aca:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003ad4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2000      	movs	r0, #0
}
 8003ad8:	e79d      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
  tmpccer = TIMx->CCER;
 8003ada:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003adc:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	6848      	ldr	r0, [r1, #4]
 8003ae0:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	f026 0601 	bic.w	r6, r6, #1
 8003ae6:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae8:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aea:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003af2:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af4:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003af8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003afa:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003afc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b02:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003b06:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2000      	movs	r0, #0
}
 8003b0a:	e784      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x66>
 8003b0c:	fffe0088 	.word	0xfffe0088

08003b10 <HAL_TIM_PeriodElapsedCallback>:
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop

08003b14 <HAL_TIM_OC_DelayElapsedCallback>:
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop

08003b18 <HAL_TIM_IC_CaptureCallback>:
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <HAL_TIM_PWM_PulseFinishedCallback>:
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <HAL_TIM_TriggerCallback>:
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b24:	6803      	ldr	r3, [r0, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	0791      	lsls	r1, r2, #30
{
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b2e:	d502      	bpl.n	8003b36 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	0792      	lsls	r2, r2, #30
 8003b34:	d468      	bmi.n	8003c08 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	0752      	lsls	r2, r2, #29
 8003b3a:	d502      	bpl.n	8003b42 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	0750      	lsls	r0, r2, #29
 8003b40:	d44f      	bmi.n	8003be2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	0711      	lsls	r1, r2, #28
 8003b46:	d502      	bpl.n	8003b4e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	0712      	lsls	r2, r2, #28
 8003b4c:	d437      	bmi.n	8003bbe <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	06d0      	lsls	r0, r2, #27
 8003b52:	d502      	bpl.n	8003b5a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	06d1      	lsls	r1, r2, #27
 8003b58:	d41e      	bmi.n	8003b98 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	07d2      	lsls	r2, r2, #31
 8003b5e:	d502      	bpl.n	8003b66 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	07d0      	lsls	r0, r2, #31
 8003b64:	d469      	bmi.n	8003c3a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	0611      	lsls	r1, r2, #24
 8003b6a:	d502      	bpl.n	8003b72 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	0612      	lsls	r2, r2, #24
 8003b70:	d46b      	bmi.n	8003c4a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	05d0      	lsls	r0, r2, #23
 8003b76:	d502      	bpl.n	8003b7e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	0611      	lsls	r1, r2, #24
 8003b7c:	d46d      	bmi.n	8003c5a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	0652      	lsls	r2, r2, #25
 8003b82:	d502      	bpl.n	8003b8a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	0650      	lsls	r0, r2, #25
 8003b88:	d46f      	bmi.n	8003c6a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	0691      	lsls	r1, r2, #26
 8003b8e:	d502      	bpl.n	8003b96 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	0692      	lsls	r2, r2, #26
 8003b94:	d449      	bmi.n	8003c2a <HAL_TIM_IRQHandler+0x106>
}
 8003b96:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b98:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003baa:	d16f      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bac:	f7ff ffb2 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff ffb3 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	7722      	strb	r2, [r4, #28]
 8003bbc:	e7cd      	b.n	8003b5a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bbe:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003bcc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bce:	d15a      	bne.n	8003c86 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd0:	f7ff ffa0 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff ffa1 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	2200      	movs	r2, #0
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	7722      	strb	r2, [r4, #28]
 8003be0:	e7b5      	b.n	8003b4e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf4:	d144      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	f7ff ff8d 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff ff8e 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c00:	2200      	movs	r2, #0
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	7722      	strb	r2, [r4, #28]
 8003c06:	e79c      	b.n	8003b42 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c08:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c0c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c0e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c10:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	0799      	lsls	r1, r3, #30
 8003c16:	d130      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c18:	f7ff ff7c 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f7ff ff7d 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	2200      	movs	r2, #0
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	7722      	strb	r2, [r4, #28]
 8003c28:	e785      	b.n	8003b36 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c2a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003c2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c30:	611a      	str	r2, [r3, #16]
}
 8003c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003c36:	f000 ba53 	b.w	80040e0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c3a:	f06f 0201 	mvn.w	r2, #1
 8003c3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7ff ff65 	bl	8003b10 <HAL_TIM_PeriodElapsedCallback>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	e78d      	b.n	8003b66 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 fa47 	bl	80040e4 <HAL_TIMEx_BreakCallback>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	e78b      	b.n	8003b72 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003c60:	4620      	mov	r0, r4
 8003c62:	f000 fa41 	bl	80040e8 <HAL_TIMEx_Break2Callback>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	e789      	b.n	8003b7e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff ff55 	bl	8003b20 <HAL_TIM_TriggerCallback>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	e787      	b.n	8003b8a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	f7ff ff4d 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003c7e:	e7d0      	b.n	8003c22 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c80:	f7ff ff4a 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003c84:	e7bc      	b.n	8003c00 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	f7ff ff47 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003c8a:	e7a6      	b.n	8003bda <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8c:	f7ff ff44 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e791      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x92>
 8003c92:	bf00      	nop

08003c94 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c94:	6a03      	ldr	r3, [r0, #32]
 8003c96:	f023 0310 	bic.w	r3, r3, #16
 8003c9a:	6203      	str	r3, [r0, #32]
{
 8003c9c:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8003c9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003ca0:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	4f21      	ldr	r7, [pc, #132]	; (8003d2c <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003caa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8003cae:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb6:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc0:	d016      	beq.n	8003cf0 <TIM_OC2_SetConfig+0x5c>
 8003cc2:	4c1b      	ldr	r4, [pc, #108]	; (8003d30 <TIM_OC2_SetConfig+0x9c>)
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d013      	beq.n	8003cf0 <TIM_OC2_SetConfig+0x5c>
 8003cc8:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d024      	beq.n	8003d1a <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	4c18      	ldr	r4, [pc, #96]	; (8003d34 <TIM_OC2_SetConfig+0xa0>)
 8003cd2:	42a0      	cmp	r0, r4
 8003cd4:	d013      	beq.n	8003cfe <TIM_OC2_SetConfig+0x6a>
 8003cd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003cda:	42a0      	cmp	r0, r4
 8003cdc:	d00f      	beq.n	8003cfe <TIM_OC2_SetConfig+0x6a>
 8003cde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ce2:	42a0      	cmp	r0, r4
 8003ce4:	d00b      	beq.n	8003cfe <TIM_OC2_SetConfig+0x6a>
 8003ce6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003cea:	42a0      	cmp	r0, r4
 8003cec:	d10e      	bne.n	8003d0c <TIM_OC2_SetConfig+0x78>
 8003cee:	e006      	b.n	8003cfe <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf0:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cfe:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d02:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d06:	432c      	orrs	r4, r5
 8003d08:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8003d0c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003d0e:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003d10:	6182      	str	r2, [r0, #24]
}
 8003d12:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8003d14:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003d16:	6203      	str	r3, [r0, #32]
}
 8003d18:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d1a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d20:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	e7d2      	b.n	8003cd0 <TIM_OC2_SetConfig+0x3c>
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40014000 	.word	0x40014000

08003d38 <HAL_TIM_PWM_ConfigChannel>:
{
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003d3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	f000 8128 	beq.w	8003f94 <HAL_TIM_PWM_ConfigChannel+0x25c>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4604      	mov	r4, r0
 8003d48:	460d      	mov	r5, r1
 8003d4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003d4e:	2a14      	cmp	r2, #20
 8003d50:	d816      	bhi.n	8003d80 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003d52:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003d56:	005f      	.short	0x005f
 8003d58:	00150015 	.word	0x00150015
 8003d5c:	00710015 	.word	0x00710015
 8003d60:	00150015 	.word	0x00150015
 8003d64:	00840015 	.word	0x00840015
 8003d68:	00150015 	.word	0x00150015
 8003d6c:	00960015 	.word	0x00960015
 8003d70:	00150015 	.word	0x00150015
 8003d74:	00db0015 	.word	0x00db0015
 8003d78:	00150015 	.word	0x00150015
 8003d7c:	001a0015 	.word	0x001a0015
  __HAL_LOCK(htim);
 8003d80:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003d82:	2300      	movs	r3, #0
 8003d84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d8a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d8c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d90:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d92:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d94:	4e80      	ldr	r6, [pc, #512]	; (8003f98 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d96:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8003d9a:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003d9c:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003d9e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003da2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003da6:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003daa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003db0:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	d013      	beq.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8003dba:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003dbe:	42b3      	cmp	r3, r6
 8003dc0:	d00f      	beq.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8003dc2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003dc6:	42b3      	cmp	r3, r6
 8003dc8:	d00b      	beq.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8003dca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003dce:	42b3      	cmp	r3, r6
 8003dd0:	d007      	beq.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8003dd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003dd6:	42b3      	cmp	r3, r6
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0xaa>
 8003dda:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003dde:	42b3      	cmp	r3, r6
 8003de0:	d104      	bne.n	8003dec <HAL_TIM_PWM_ConfigChannel+0xb4>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003de2:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003de4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003de8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8003dec:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003dee:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003df2:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8003df4:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003df6:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003df8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dfa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003dfe:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e02:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003e06:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e0a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2000      	movs	r0, #0
      break;
 8003e12:	e7b6      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e14:	6800      	ldr	r0, [r0, #0]
 8003e16:	f7ff faa1 	bl	800335c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e1a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e1c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e1e:	6999      	ldr	r1, [r3, #24]
 8003e20:	f041 0108 	orr.w	r1, r1, #8
 8003e24:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e26:	6999      	ldr	r1, [r3, #24]
 8003e28:	f021 0104 	bic.w	r1, r1, #4
 8003e2c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	4302      	orrs	r2, r0
 8003e32:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2000      	movs	r0, #0
      break;
 8003e36:	e7a4      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e38:	6800      	ldr	r0, [r0, #0]
 8003e3a:	f7ff ff2b 	bl	8003c94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e3e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e40:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e42:	6999      	ldr	r1, [r3, #24]
 8003e44:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003e48:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e4a:	6999      	ldr	r1, [r3, #24]
 8003e4c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003e50:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003e58:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2000      	movs	r0, #0
      break;
 8003e5c:	e791      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e5e:	6800      	ldr	r0, [r0, #0]
 8003e60:	f7ff fabe 	bl	80033e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e64:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e66:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e68:	69d9      	ldr	r1, [r3, #28]
 8003e6a:	f041 0108 	orr.w	r1, r1, #8
 8003e6e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e70:	69d9      	ldr	r1, [r3, #28]
 8003e72:	f021 0104 	bic.w	r1, r1, #4
 8003e76:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	4302      	orrs	r2, r0
 8003e7c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2000      	movs	r0, #0
      break;
 8003e80:	e77f      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e82:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e84:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e88:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e8a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8c:	4e42      	ldr	r6, [pc, #264]	; (8003f98 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e8e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003e92:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003e94:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003e96:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003e98:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e9a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8003e9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea6:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ea8:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eac:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	d013      	beq.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8003eb2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003eb6:	42b3      	cmp	r3, r6
 8003eb8:	d00f      	beq.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8003eba:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003ebe:	42b3      	cmp	r3, r6
 8003ec0:	d00b      	beq.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8003ec2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003ec6:	42b3      	cmp	r3, r6
 8003ec8:	d007      	beq.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8003eca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003ece:	42b3      	cmp	r3, r6
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8003ed2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003ed6:	42b3      	cmp	r3, r6
 8003ed8:	d104      	bne.n	8003ee4 <HAL_TIM_PWM_ConfigChannel+0x1ac>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eda:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003edc:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee0:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8003ee4:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003ee6:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003ee8:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003eea:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003eec:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eee:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ef2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003ef6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ef8:	69d9      	ldr	r1, [r3, #28]
 8003efa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003efe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003f06:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2000      	movs	r0, #0
      break;
 8003f0a:	e73a      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f0c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f0e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f12:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f16:	4e20      	ldr	r6, [pc, #128]	; (8003f98 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f18:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003f1c:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f1e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f20:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003f22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8003f28:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f30:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f32:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8003f36:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3a:	d013      	beq.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0x22c>
 8003f3c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f40:	42b3      	cmp	r3, r6
 8003f42:	d00f      	beq.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0x22c>
 8003f44:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003f48:	42b3      	cmp	r3, r6
 8003f4a:	d00b      	beq.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0x22c>
 8003f4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f50:	42b3      	cmp	r3, r6
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0x22c>
 8003f54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f58:	42b3      	cmp	r3, r6
 8003f5a:	d003      	beq.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0x22c>
 8003f5c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f60:	42b3      	cmp	r3, r6
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x236>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f64:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f66:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f6a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8003f6e:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003f70:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003f74:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8003f76:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f78:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f7a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f7c:	f041 0108 	orr.w	r1, r1, #8
 8003f80:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f84:	f021 0104 	bic.w	r1, r1, #4
 8003f88:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f8c:	4302      	orrs	r2, r0
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2000      	movs	r0, #0
      break;
 8003f92:	e6f6      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x4a>
  __HAL_LOCK(htim);
 8003f94:	2002      	movs	r0, #2
}
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f98:	40012c00 	.word	0x40012c00

08003f9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d04e      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 8003fa4:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa6:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fa8:	4c27      	ldr	r4, [pc, #156]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	2202      	movs	r2, #2
 8003fac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fb0:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 8003fb2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003fb4:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fb6:	d03a      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003fb8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	d02c      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003fc0:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	d028      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc8:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fce:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d012      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fe6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d104      	bne.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffe:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004000:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004004:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004006:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004008:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800400a:	2201      	movs	r2, #1
 800400c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004010:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004014:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004016:	4618      	mov	r0, r3
}
 8004018:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800401e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004022:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004028:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 800402a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	e7d1      	b.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800402e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004032:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004036:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004038:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800403c:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 800403e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	e7dd      	b.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 8004042:	2002      	movs	r0, #2
}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40000400 	.word	0x40000400

08004050 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d03f      	beq.n	80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 8004058:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800405a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800405e:	4602      	mov	r2, r0
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004064:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004068:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800406a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800406e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004074:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004078:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800407a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004084:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004086:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004088:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800408a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408e:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004090:	4c12      	ldr	r4, [pc, #72]	; (80040dc <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004092:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004094:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004098:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800409a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800409e:	d007      	beq.n	80040b0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80040a0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80040a4:	42a0      	cmp	r0, r4
 80040a6:	d003      	beq.n	80040b0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80040a8:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80040ac:	42a0      	cmp	r0, r4
 80040ae:	d10c      	bne.n	80040ca <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040b0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80040b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040b6:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040ba:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80040c8:	430b      	orrs	r3, r1
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80040ca:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80040cc:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80040ce:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80040d2:	4608      	mov	r0, r1
}
 80040d4:	bc30      	pop	{r4, r5}
 80040d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80040d8:	2002      	movs	r0, #2
}
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00

080040e0 <HAL_TIMEx_CommutCallback>:
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop

080040e4 <HAL_TIMEx_BreakCallback>:
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop

080040e8 <HAL_TIMEx_Break2Callback>:
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <UART_SetConfig>:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ec:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ee:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f0:	498b      	ldr	r1, [pc, #556]	; (8004320 <UART_SetConfig+0x234>)
{
 80040f2:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040f4:	6905      	ldr	r5, [r0, #16]
 80040f6:	6946      	ldr	r6, [r0, #20]
{
 80040f8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040fa:	432b      	orrs	r3, r5
 80040fc:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040fe:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004100:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004102:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004104:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004106:	430b      	orrs	r3, r1
 8004108:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410a:	6851      	ldr	r1, [r2, #4]
 800410c:	68e5      	ldr	r5, [r4, #12]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800410e:	69a3      	ldr	r3, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8004110:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004112:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004116:	4329      	orrs	r1, r5
 8004118:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411a:	6891      	ldr	r1, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800411c:	4d81      	ldr	r5, [pc, #516]	; (8004324 <UART_SetConfig+0x238>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8004122:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004124:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004126:	42aa      	cmp	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004128:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412a:	d036      	beq.n	800419a <UART_SetConfig+0xae>
 800412c:	4b7e      	ldr	r3, [pc, #504]	; (8004328 <UART_SetConfig+0x23c>)
 800412e:	429a      	cmp	r2, r3
 8004130:	d010      	beq.n	8004154 <UART_SetConfig+0x68>
 8004132:	4b7e      	ldr	r3, [pc, #504]	; (800432c <UART_SetConfig+0x240>)
 8004134:	429a      	cmp	r2, r3
 8004136:	f000 80c9 	beq.w	80042cc <UART_SetConfig+0x1e0>
 800413a:	4b7d      	ldr	r3, [pc, #500]	; (8004330 <UART_SetConfig+0x244>)
 800413c:	429a      	cmp	r2, r3
 800413e:	f000 80da 	beq.w	80042f6 <UART_SetConfig+0x20a>
 8004142:	4b7c      	ldr	r3, [pc, #496]	; (8004334 <UART_SetConfig+0x248>)
 8004144:	429a      	cmp	r2, r3
 8004146:	f000 8084 	beq.w	8004252 <UART_SetConfig+0x166>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800414a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800414c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004150:	2001      	movs	r0, #1

  return ret;
}
 8004152:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004154:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800415e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004162:	d05b      	beq.n	800421c <UART_SetConfig+0x130>
 8004164:	d811      	bhi.n	800418a <UART_SetConfig+0x9e>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d07c      	beq.n	8004264 <UART_SetConfig+0x178>
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d1ec      	bne.n	800414a <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004170:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004174:	f000 8086 	beq.w	8004284 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8004178:	f7fe ff42 	bl	8003000 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800417c:	2800      	cmp	r0, #0
 800417e:	d152      	bne.n	8004226 <UART_SetConfig+0x13a>
  huart->RxISR = NULL;
 8004180:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004182:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8004186:	2000      	movs	r0, #0
}
 8004188:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800418e:	d1dc      	bne.n	800414a <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004190:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004194:	d06c      	beq.n	8004270 <UART_SetConfig+0x184>
 8004196:	4868      	ldr	r0, [pc, #416]	; (8004338 <UART_SetConfig+0x24c>)
 8004198:	e045      	b.n	8004226 <UART_SetConfig+0x13a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419a:	4b68      	ldr	r3, [pc, #416]	; (800433c <UART_SetConfig+0x250>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d91c      	bls.n	80041e2 <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80041ac:	d14e      	bne.n	800424c <UART_SetConfig+0x160>
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ae:	f7fe ff6d 	bl	800308c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d0e4      	beq.n	8004180 <UART_SetConfig+0x94>
 80041b6:	0040      	lsls	r0, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80041be:	fbb0 f0f3 	udiv	r0, r0, r3
 80041c2:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c4:	f1a3 0110 	sub.w	r1, r3, #16
 80041c8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80041cc:	4291      	cmp	r1, r2
 80041ce:	d8bc      	bhi.n	800414a <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041d0:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 80041d4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041d6:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80041dc:	4318      	orrs	r0, r3
 80041de:	60d0      	str	r0, [r2, #12]
 80041e0:	e7ce      	b.n	8004180 <UART_SetConfig+0x94>
 80041e2:	4a57      	ldr	r2, [pc, #348]	; (8004340 <UART_SetConfig+0x254>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	d056      	beq.n	800429a <UART_SetConfig+0x1ae>
    switch (clocksource)
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d8ac      	bhi.n	800414a <UART_SetConfig+0x5e>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0x10c>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	0800426b 	.word	0x0800426b
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	08004197 	.word	0x08004197
 8004204:	0800414b 	.word	0x0800414b
 8004208:	08004179 	.word	0x08004179
 800420c:	0800414b 	.word	0x0800414b
 8004210:	0800414b 	.word	0x0800414b
 8004214:	0800414b 	.word	0x0800414b
 8004218:	08004223 	.word	0x08004223
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004220:	d02d      	beq.n	800427e <UART_SetConfig+0x192>
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004226:	6863      	ldr	r3, [r4, #4]
 8004228:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800422c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004230:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004232:	f1a3 0110 	sub.w	r1, r3, #16
 8004236:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800423a:	4291      	cmp	r1, r2
 800423c:	d885      	bhi.n	800414a <UART_SetConfig+0x5e>
        huart->Instance->BRR = usartdiv;
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8004242:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004244:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8004248:	2000      	movs	r0, #0
}
 800424a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe ff1e 	bl	800308c <HAL_RCC_GetPCLK2Freq>
        break;
 8004250:	e794      	b.n	800417c <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004252:	4b3a      	ldr	r3, [pc, #232]	; (800433c <UART_SetConfig+0x250>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800425a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800425e:	d0dd      	beq.n	800421c <UART_SetConfig+0x130>
 8004260:	d816      	bhi.n	8004290 <UART_SetConfig+0x1a4>
 8004262:	b93b      	cbnz	r3, 8004274 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004264:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004268:	d00f      	beq.n	800428a <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800426a:	f7fe fef7 	bl	800305c <HAL_RCC_GetPCLK1Freq>
        break;
 800426e:	e785      	b.n	800417c <UART_SetConfig+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004270:	4834      	ldr	r0, [pc, #208]	; (8004344 <UART_SetConfig+0x258>)
 8004272:	e7a1      	b.n	80041b8 <UART_SetConfig+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004278:	f43f af7a 	beq.w	8004170 <UART_SetConfig+0x84>
 800427c:	e765      	b.n	800414a <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004282:	e799      	b.n	80041b8 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetSysClockFreq();
 8004284:	f7fe febc 	bl	8003000 <HAL_RCC_GetSysClockFreq>
        break;
 8004288:	e793      	b.n	80041b2 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800428a:	f7fe fee7 	bl	800305c <HAL_RCC_GetPCLK1Freq>
        break;
 800428e:	e790      	b.n	80041b2 <UART_SetConfig+0xc6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004294:	f43f af7c 	beq.w	8004190 <UART_SetConfig+0xa4>
 8004298:	e757      	b.n	800414a <UART_SetConfig+0x5e>
    switch (clocksource)
 800429a:	2b08      	cmp	r3, #8
 800429c:	f63f af55 	bhi.w	800414a <UART_SetConfig+0x5e>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x1bc>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	0800428b 	.word	0x0800428b
 80042ac:	080041af 	.word	0x080041af
 80042b0:	08004271 	.word	0x08004271
 80042b4:	0800414b 	.word	0x0800414b
 80042b8:	08004285 	.word	0x08004285
 80042bc:	0800414b 	.word	0x0800414b
 80042c0:	0800414b 	.word	0x0800414b
 80042c4:	0800414b 	.word	0x0800414b
 80042c8:	0800427f 	.word	0x0800427f
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042cc:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042da:	d09f      	beq.n	800421c <UART_SetConfig+0x130>
 80042dc:	d806      	bhi.n	80042ec <UART_SetConfig+0x200>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0c0      	beq.n	8004264 <UART_SetConfig+0x178>
 80042e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e6:	f43f af43 	beq.w	8004170 <UART_SetConfig+0x84>
 80042ea:	e72e      	b.n	800414a <UART_SetConfig+0x5e>
 80042ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042f0:	f43f af4e 	beq.w	8004190 <UART_SetConfig+0xa4>
 80042f4:	e729      	b.n	800414a <UART_SetConfig+0x5e>
 80042f6:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004304:	d08a      	beq.n	800421c <UART_SetConfig+0x130>
 8004306:	d806      	bhi.n	8004316 <UART_SetConfig+0x22a>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ab      	beq.n	8004264 <UART_SetConfig+0x178>
 800430c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004310:	f43f af2e 	beq.w	8004170 <UART_SetConfig+0x84>
 8004314:	e719      	b.n	800414a <UART_SetConfig+0x5e>
 8004316:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800431a:	f43f af39 	beq.w	8004190 <UART_SetConfig+0xa4>
 800431e:	e714      	b.n	800414a <UART_SetConfig+0x5e>
 8004320:	efff69f3 	.word	0xefff69f3
 8004324:	40013800 	.word	0x40013800
 8004328:	40004400 	.word	0x40004400
 800432c:	40004800 	.word	0x40004800
 8004330:	40004c00 	.word	0x40004c00
 8004334:	40005000 	.word	0x40005000
 8004338:	007a1200 	.word	0x007a1200
 800433c:	40021000 	.word	0x40021000
 8004340:	08004874 	.word	0x08004874
 8004344:	00f42400 	.word	0x00f42400

08004348 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004348:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800434a:	07da      	lsls	r2, r3, #31
{
 800434c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800434e:	d506      	bpl.n	800435e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004350:	6801      	ldr	r1, [r0, #0]
 8004352:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004354:	684a      	ldr	r2, [r1, #4]
 8004356:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800435a:	4322      	orrs	r2, r4
 800435c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800435e:	079c      	lsls	r4, r3, #30
 8004360:	d506      	bpl.n	8004370 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004362:	6801      	ldr	r1, [r0, #0]
 8004364:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004366:	684a      	ldr	r2, [r1, #4]
 8004368:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800436c:	4322      	orrs	r2, r4
 800436e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004370:	0759      	lsls	r1, r3, #29
 8004372:	d506      	bpl.n	8004382 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004374:	6801      	ldr	r1, [r0, #0]
 8004376:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004378:	684a      	ldr	r2, [r1, #4]
 800437a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800437e:	4322      	orrs	r2, r4
 8004380:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004382:	071a      	lsls	r2, r3, #28
 8004384:	d506      	bpl.n	8004394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004386:	6801      	ldr	r1, [r0, #0]
 8004388:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800438a:	684a      	ldr	r2, [r1, #4]
 800438c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004390:	4322      	orrs	r2, r4
 8004392:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004394:	06dc      	lsls	r4, r3, #27
 8004396:	d506      	bpl.n	80043a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004398:	6801      	ldr	r1, [r0, #0]
 800439a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800439c:	688a      	ldr	r2, [r1, #8]
 800439e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043a2:	4322      	orrs	r2, r4
 80043a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043a6:	0699      	lsls	r1, r3, #26
 80043a8:	d506      	bpl.n	80043b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043aa:	6801      	ldr	r1, [r0, #0]
 80043ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80043ae:	688a      	ldr	r2, [r1, #8]
 80043b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b4:	4322      	orrs	r2, r4
 80043b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b8:	065a      	lsls	r2, r3, #25
 80043ba:	d509      	bpl.n	80043d0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043bc:	6801      	ldr	r1, [r0, #0]
 80043be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80043c0:	684a      	ldr	r2, [r1, #4]
 80043c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80043c6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043cc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ce:	d00b      	beq.n	80043e8 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	d506      	bpl.n	80043e2 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d4:	6802      	ldr	r2, [r0, #0]
 80043d6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80043d8:	6853      	ldr	r3, [r2, #4]
 80043da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80043de:	430b      	orrs	r3, r1
 80043e0:	6053      	str	r3, [r2, #4]
  }
}
 80043e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e8:	684a      	ldr	r2, [r1, #4]
 80043ea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80043ec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80043f0:	4322      	orrs	r2, r4
 80043f2:	604a      	str	r2, [r1, #4]
 80043f4:	e7ec      	b.n	80043d0 <UART_AdvFeatureConfig+0x88>
 80043f6:	bf00      	nop

080043f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004400:	6804      	ldr	r4, [r0, #0]
 8004402:	4607      	mov	r7, r0
 8004404:	460e      	mov	r6, r1
 8004406:	4615      	mov	r5, r2
 8004408:	4699      	mov	r9, r3
 800440a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800440e:	d10a      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0x2e>
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004410:	69e3      	ldr	r3, [r4, #28]
 8004412:	ea36 0303 	bics.w	r3, r6, r3
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	429d      	cmp	r5, r3
 800441e:	d0f7      	beq.n	8004410 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004420:	2000      	movs	r0, #0
}
 8004422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	69e3      	ldr	r3, [r4, #28]
 8004428:	ea36 0303 	bics.w	r3, r6, r3
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	42ab      	cmp	r3, r5
 8004434:	d1f4      	bne.n	8004420 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fd faab 	bl	8001990 <HAL_GetTick>
 800443a:	eba0 0009 	sub.w	r0, r0, r9
 800443e:	4540      	cmp	r0, r8
 8004440:	d831      	bhi.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xae>
 8004442:	f1b8 0f00 	cmp.w	r8, #0
 8004446:	d02e      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004448:	683c      	ldr	r4, [r7, #0]
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	0759      	lsls	r1, r3, #29
 800444e:	4622      	mov	r2, r4
 8004450:	d5db      	bpl.n	800440a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004452:	69e3      	ldr	r3, [r4, #28]
 8004454:	051b      	lsls	r3, r3, #20
 8004456:	d5d8      	bpl.n	800440a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800445c:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	e844 3100 	strex	r1, r3, [r4]
 800446a:	b139      	cbz	r1, 800447c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	e852 3f00 	ldrex	r3, [r2]
 8004470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	e842 3100 	strex	r1, r3, [r2]
 8004478:	2900      	cmp	r1, #0
 800447a:	d1f7      	bne.n	800446c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	f102 0308 	add.w	r3, r2, #8
 8004480:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	f102 0008 	add.w	r0, r2, #8
 800448c:	e840 3100 	strex	r1, r3, [r0]
 8004490:	2900      	cmp	r1, #0
 8004492:	d1f3      	bne.n	800447c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8004494:	2320      	movs	r3, #32
 8004496:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8004498:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800449c:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 800449e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 80044a4:	e7bd      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0x2a>
 80044a6:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	e842 3100 	strex	r1, r3, [r2]
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d1f7      	bne.n	80044a8 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	f102 0308 	add.w	r3, r2, #8
 80044bc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	f102 0008 	add.w	r0, r2, #8
 80044c8:	e840 3100 	strex	r1, r3, [r0]
 80044cc:	2900      	cmp	r1, #0
 80044ce:	d1f3      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 80044d0:	2320      	movs	r3, #32
 80044d2:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80044d4:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        return HAL_TIMEOUT;
 80044d8:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80044da:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 80044dc:	e7a1      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0x2a>
 80044de:	bf00      	nop

080044e0 <HAL_UART_Init>:
  if (huart == NULL)
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d062      	beq.n	80045aa <HAL_UART_Init+0xca>
{
 80044e4:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80044e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80044e8:	b082      	sub	sp, #8
 80044ea:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d049      	beq.n	8004584 <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 80044f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80044f2:	2324      	movs	r3, #36	; 0x24
 80044f4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80044f6:	6813      	ldr	r3, [r2, #0]
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044fe:	4620      	mov	r0, r4
 8004500:	f7ff fdf4 	bl	80040ec <UART_SetConfig>
 8004504:	2801      	cmp	r0, #1
 8004506:	d03a      	beq.n	800457e <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d133      	bne.n	8004576 <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004520:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	2600      	movs	r6, #0
  __HAL_UART_ENABLE(huart);
 8004524:	f041 0101 	orr.w	r1, r1, #1
 8004528:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800452e:	f7fd fa2f 	bl	8001990 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8004538:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800453a:	d40c      	bmi.n	8004556 <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	075b      	lsls	r3, r3, #29
 8004540:	d425      	bmi.n	800458e <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004544:	2220      	movs	r2, #32
 8004546:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004548:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 800454e:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	6623      	str	r3, [r4, #96]	; 0x60
}
 8004552:	b002      	add	sp, #8
 8004554:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004556:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4632      	mov	r2, r6
 800455e:	4603      	mov	r3, r0
 8004560:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004564:	4620      	mov	r0, r4
 8004566:	f7ff ff47 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 800456a:	b9e0      	cbnz	r0, 80045a6 <HAL_UART_Init+0xc6>
 800456c:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	075b      	lsls	r3, r3, #29
 8004572:	d40c      	bmi.n	800458e <HAL_UART_Init+0xae>
 8004574:	e7e5      	b.n	8004542 <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff fee6 	bl	8004348 <UART_AdvFeatureConfig>
 800457c:	e7c7      	b.n	800450e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800457e:	2001      	movs	r0, #1
}
 8004580:	b002      	add	sp, #8
 8004582:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004584:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004588:	f7fd f90e 	bl	80017a8 <HAL_UART_MspInit>
 800458c:	e7b0      	b.n	80044f0 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004592:	9200      	str	r2, [sp, #0]
 8004594:	462b      	mov	r3, r5
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff ff2b 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d0cd      	beq.n	8004542 <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 80045a6:	2003      	movs	r0, #3
 80045a8:	e7d3      	b.n	8004552 <HAL_UART_Init+0x72>
    return HAL_ERROR;
 80045aa:	2001      	movs	r0, #1
}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4d0d      	ldr	r5, [pc, #52]	; (80045e8 <__libc_init_array+0x38>)
 80045b4:	4c0d      	ldr	r4, [pc, #52]	; (80045ec <__libc_init_array+0x3c>)
 80045b6:	1b64      	subs	r4, r4, r5
 80045b8:	10a4      	asrs	r4, r4, #2
 80045ba:	2600      	movs	r6, #0
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	4d0b      	ldr	r5, [pc, #44]	; (80045f0 <__libc_init_array+0x40>)
 80045c2:	4c0c      	ldr	r4, [pc, #48]	; (80045f4 <__libc_init_array+0x44>)
 80045c4:	f000 f820 	bl	8004608 <_init>
 80045c8:	1b64      	subs	r4, r4, r5
 80045ca:	10a4      	asrs	r4, r4, #2
 80045cc:	2600      	movs	r6, #0
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	08004878 	.word	0x08004878
 80045ec:	08004878 	.word	0x08004878
 80045f0:	08004878 	.word	0x08004878
 80045f4:	0800487c 	.word	0x0800487c

080045f8 <memset>:
 80045f8:	4402      	add	r2, r0
 80045fa:	4603      	mov	r3, r0
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d100      	bne.n	8004602 <memset+0xa>
 8004600:	4770      	bx	lr
 8004602:	f803 1b01 	strb.w	r1, [r3], #1
 8004606:	e7f9      	b.n	80045fc <memset+0x4>

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

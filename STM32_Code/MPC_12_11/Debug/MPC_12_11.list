
MPC_12_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b2c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08004d00  08004d00  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d00  08004d00  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d04  08004d04  00014d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200000ec  08004df4  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08004df4  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018624  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301c  00000000  00000000  00038740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0003b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026e0  00000000  00000000  0003c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c45  00000000  00000000  0003ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a66e  00000000  00000000  00060675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d37e3  00000000  00000000  0007ace3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e4c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d70  00000000  00000000  0014e51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00011964  00000000  00000000  0015128c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000ec 	.word	0x200000ec
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004cac 	.word	0x08004cac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f0 	.word	0x200000f0
 80001d4:	08004cac 	.word	0x08004cac

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	b0a6      	sub	sp, #152	; 0x98
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000888:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088a:	2258      	movs	r2, #88	; 0x58
 800088c:	a810      	add	r0, sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088e:	e9cd 1100 	strd	r1, r1, [sp]
 8000892:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	910a      	str	r1, [sp, #40]	; 0x28
 8000898:	9108      	str	r1, [sp, #32]
 800089a:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089e:	f004 f9fd 	bl	8004c9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2202      	movs	r2, #2
 80008ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b6:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80008bc:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	9109      	str	r1, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f002 fb27 	bl	8002f18 <HAL_RCC_OscConfig>
 80008ca:	b108      	cbz	r0, 80008d0 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ce:	e7fe      	b.n	80008ce <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008da:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	240f      	movs	r4, #15
 80008de:	2502      	movs	r5, #2
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e0:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80008e6:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ea:	f002 fe03 	bl	80034f4 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b108      	cbz	r0, 80008f6 <SystemClock_Config+0x72>
 80008f2:	b672      	cpsid	i
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 80008f6:	4e0d      	ldr	r6, [pc, #52]	; (800092c <SystemClock_Config+0xa8>)
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80008f8:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80008fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80008fe:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000902:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000906:	f44f 7280 	mov.w	r2, #256	; 0x100
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 800090a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000910:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000914:	9610      	str	r6, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000916:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000918:	921d      	str	r2, [sp, #116]	; 0x74
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 800091a:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f002 ff36 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 8000920:	b108      	cbz	r0, 8000926 <SystemClock_Config+0xa2>
 8000922:	b672      	cpsid	i
  while (1)
 8000924:	e7fe      	b.n	8000924 <SystemClock_Config+0xa0>
}
 8000926:	b026      	add	sp, #152	; 0x98
 8000928:	bd70      	pop	{r4, r5, r6, pc}
 800092a:	bf00      	nop
 800092c:	00301182 	.word	0x00301182

08000930 <main>:
{
 8000930:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	2400      	movs	r4, #0
{
 8000934:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8000936:	f001 fb8f 	bl	8002058 <HAL_Init>
  SystemClock_Config();
 800093a:	f7ff ffa3 	bl	8000884 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000942:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4dab      	ldr	r5, [pc, #684]	; (8000bf4 <main+0x2c4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	696b      	ldr	r3, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8000c08 <main+0x2d8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000954:	616b      	str	r3, [r5, #20]
 8000956:	696b      	ldr	r3, [r5, #20]
 8000958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095c:	9302      	str	r3, [sp, #8]
 800095e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000960:	696b      	ldr	r3, [r5, #20]
 8000962:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000966:	616b      	str	r3, [r5, #20]
 8000968:	696b      	ldr	r3, [r5, #20]
 800096a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096e:	9303      	str	r3, [sp, #12]
 8000970:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	696b      	ldr	r3, [r5, #20]
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	616b      	str	r3, [r5, #20]
 800097a:	696b      	ldr	r3, [r5, #20]
 800097c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000980:	9304      	str	r3, [sp, #16]
 8000982:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	696b      	ldr	r3, [r5, #20]
 8000986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098a:	616b      	str	r3, [r5, #20]
 800098c:	696b      	ldr	r3, [r5, #20]
 800098e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000992:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000994:	4622      	mov	r2, r4
 8000996:	2120      	movs	r1, #32
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800099e:	f002 faa7 	bl	8002ef0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80009a2:	4895      	ldr	r0, [pc, #596]	; (8000bf8 <main+0x2c8>)
 80009a4:	4622      	mov	r2, r4
 80009a6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80009aa:	f002 faa1 	bl	8002ef0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80009ae:	4b93      	ldr	r3, [pc, #588]	; (8000bfc <main+0x2cc>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80009b0:	4891      	ldr	r0, [pc, #580]	; (8000bf8 <main+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80009b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80009b8:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80009ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009be:	2600      	movs	r6, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f002 f994 	bl	8002cec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009c4:	2700      	movs	r7, #0
 80009c6:	2220      	movs	r2, #32
 80009c8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	a916      	add	r1, sp, #88	; 0x58
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009d0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80009d4:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f002 f988 	bl	8002cec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80009dc:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80009e0:	2301      	movs	r3, #1
 80009e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	4884      	ldr	r0, [pc, #528]	; (8000bf8 <main+0x2c8>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80009e8:	2303      	movs	r3, #3
 80009ea:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80009ee:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f002 f97b 	bl	8002cec <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80009f6:	4622      	mov	r2, r4
 80009f8:	2103      	movs	r1, #3
 80009fa:	2028      	movs	r0, #40	; 0x28
 80009fc:	f002 f890 	bl	8002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a00:	2028      	movs	r0, #40	; 0x28
 8000a02:	f002 f8c5 	bl	8002b90 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	696b      	ldr	r3, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a08:	f888 4020 	strb.w	r4, [r8, #32]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	616b      	str	r3, [r5, #20]
 8000a12:	696b      	ldr	r3, [r5, #20]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a14:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a20:	696b      	ldr	r3, [r5, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a22:	f888 4030 	strb.w	r4, [r8, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	616b      	str	r3, [r5, #20]
 8000a2c:	696b      	ldr	r3, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a2e:	f8c8 4004 	str.w	r4, [r8, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	9301      	str	r3, [sp, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000a38:	2302      	movs	r3, #2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3a:	9801      	ldr	r0, [sp, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000a3c:	f8c8 301c 	str.w	r3, [r8, #28]
  hadc1.Instance = ADC1;
 8000a40:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a44:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a46:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	f04f 0904 	mov.w	r9, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4e:	4640      	mov	r0, r8
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a50:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000a54:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8000a58:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8000a5c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a60:	e9c8 4402 	strd	r4, r4, [r8, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a64:	e9c8 3904 	strd	r3, r9, [r8, #16]
  ADC_MultiModeTypeDef multimode = {0};
 8000a68:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a6a:	f8c8 4034 	str.w	r4, [r8, #52]	; 0x34
  hadc1.Instance = ADC1;
 8000a6e:	f8c8 1000 	str.w	r1, [r8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a72:	f8a8 2018 	strh.w	r2, [r8, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a76:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7a:	f001 fba5 	bl	80021c8 <HAL_ADC_Init>
 8000a7e:	b108      	cbz	r0, 8000a84 <main+0x154>
 8000a80:	b672      	cpsid	i
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <main+0x152>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a84:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a86:	a90e      	add	r1, sp, #56	; 0x38
 8000a88:	4640      	mov	r0, r8
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a8a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8c:	f001 ffa4 	bl	80029d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a90:	b108      	cbz	r0, 8000a96 <main+0x166>
 8000a92:	b672      	cpsid	i
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <main+0x164>
  sConfig.Channel = ADC_CHANNEL_1;
 8000a96:	2201      	movs	r2, #1
 8000a98:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9a:	a916      	add	r1, sp, #88	; 0x58
 8000a9c:	4640      	mov	r0, r8
  sConfig.Channel = ADC_CHANNEL_1;
 8000a9e:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8000aa2:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8000aa6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	f001 fdd5 	bl	8002658 <HAL_ADC_ConfigChannel>
 8000aae:	b108      	cbz	r0, 8000ab4 <main+0x184>
 8000ab0:	b672      	cpsid	i
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <main+0x182>
  sConfig.Channel = ADC_CHANNEL_7;
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	4640      	mov	r0, r8
 8000aba:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_7;
 8000abc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	f001 fdca 	bl	8002658 <HAL_ADC_ConfigChannel>
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	b108      	cbz	r0, 8000acc <main+0x19c>
 8000ac8:	b672      	cpsid	i
  while (1)
 8000aca:	e7fe      	b.n	8000aca <main+0x19a>
  htim1.Instance = TIM1;
 8000acc:	4d4c      	ldr	r5, [pc, #304]	; (8000c00 <main+0x2d0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	222c      	movs	r2, #44	; 0x2c
 8000ad4:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000ada:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000ade:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000aea:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aec:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af0:	f004 f8d4 	bl	8004c9c <memset>
  htim1.Instance = TIM1;
 8000af4:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <main+0x2d4>)
 8000af6:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 12;
 8000af8:	200c      	movs	r0, #12
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000afa:	2120      	movs	r1, #32
  htim1.Init.Period = 517;
 8000afc:	f240 2205 	movw	r2, #517	; 0x205
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b00:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 12;
 8000b02:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b04:	4628      	mov	r0, r5
  htim1.Init.Period = 517;
 8000b06:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b0e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b10:	f003 f820 	bl	8003b54 <HAL_TIM_Base_Init>
 8000b14:	b108      	cbz	r0, 8000b1a <main+0x1ea>
 8000b16:	b672      	cpsid	i
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <main+0x1e8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1e:	a90a      	add	r1, sp, #40	; 0x28
 8000b20:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b22:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b24:	f003 fae8 	bl	80040f8 <HAL_TIM_ConfigClockSource>
 8000b28:	b108      	cbz	r0, 8000b2e <main+0x1fe>
 8000b2a:	b672      	cpsid	i
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <main+0x1fc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f003 f8e4 	bl	8003cfc <HAL_TIM_PWM_Init>
 8000b34:	b108      	cbz	r0, 8000b3a <main+0x20a>
 8000b36:	b672      	cpsid	i
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <main+0x208>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000b3a:	2270      	movs	r2, #112	; 0x70
 8000b3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b42:	a906      	add	r1, sp, #24
 8000b44:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000b46:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4a:	f003 fdcd 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	b108      	cbz	r0, 8000b54 <main+0x224>
 8000b50:	b672      	cpsid	i
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <main+0x222>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8000b58:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5c:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5e:	2660      	movs	r6, #96	; 0x60
 8000b60:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b62:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b64:	a90e      	add	r1, sp, #56	; 0x38
 8000b66:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b68:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6c:	f003 fc7e 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000b70:	b108      	cbz	r0, 8000b76 <main+0x246>
 8000b72:	b672      	cpsid	i
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <main+0x244>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b76:	464a      	mov	r2, r9
 8000b78:	4628      	mov	r0, r5
 8000b7a:	a90e      	add	r1, sp, #56	; 0x38
 8000b7c:	f003 fc76 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000b80:	b108      	cbz	r0, 8000b86 <main+0x256>
 8000b82:	b672      	cpsid	i
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <main+0x254>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b86:	481e      	ldr	r0, [pc, #120]	; (8000c00 <main+0x2d0>)
 8000b88:	2208      	movs	r2, #8
 8000b8a:	a90e      	add	r1, sp, #56	; 0x38
 8000b8c:	f003 fc6e 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000b90:	b108      	cbz	r0, 8000b96 <main+0x266>
 8000b92:	b672      	cpsid	i
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x264>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b96:	2470      	movs	r4, #112	; 0x70
 8000b98:	f44f 7500 	mov.w	r5, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <main+0x2d0>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ba2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ba6:	f003 fc61 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000baa:	b108      	cbz	r0, 8000bb0 <main+0x280>
 8000bac:	b672      	cpsid	i
  while (1)
 8000bae:	e7fe      	b.n	8000bae <main+0x27e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bd6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bda:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <main+0x2d0>)
 8000be2:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000be4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be8:	f003 fdd8 	bl	800479c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bec:	4604      	mov	r4, r0
 8000bee:	b168      	cbz	r0, 8000c0c <main+0x2dc>
 8000bf0:	b672      	cpsid	i
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <main+0x2c2>
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	10210000 	.word	0x10210000
 8000c00:	20000380 	.word	0x20000380
 8000c04:	40012c00 	.word	0x40012c00
 8000c08:	20000258 	.word	0x20000258
  htim2.Instance = TIM2;
 8000c0c:	4d7d      	ldr	r5, [pc, #500]	; (8000e04 <main+0x4d4>)
  HAL_TIM_MspPostInit(&htim1);
 8000c0e:	487e      	ldr	r0, [pc, #504]	; (8000e08 <main+0x4d8>)
 8000c10:	f000 fa38 	bl	8001084 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000c14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 30;
 8000c18:	221e      	movs	r2, #30
  htim2.Init.Period = 12000;
 8000c1a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c1e:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c20:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000c24:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000c2c:	9410      	str	r4, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8000c34:	6029      	str	r1, [r5, #0]
  htim2.Init.Prescaler = 30;
 8000c36:	606a      	str	r2, [r5, #4]
  htim2.Init.Period = 12000;
 8000c38:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c3a:	f002 ff8b 	bl	8003b54 <HAL_TIM_Base_Init>
 8000c3e:	b108      	cbz	r0, 8000c44 <main+0x314>
 8000c40:	b672      	cpsid	i
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x312>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c44:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c48:	a916      	add	r1, sp, #88	; 0x58
 8000c4a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4c:	9616      	str	r6, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f003 fa53 	bl	80040f8 <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b108      	cbz	r0, 8000c5a <main+0x32a>
 8000c56:	b672      	cpsid	i
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <main+0x328>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c62:	f003 fd41 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	b108      	cbz	r0, 8000c6c <main+0x33c>
 8000c68:	b672      	cpsid	i
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <main+0x33a>
  huart2.Instance = USART2;
 8000c6c:	4b67      	ldr	r3, [pc, #412]	; (8000e0c <main+0x4dc>)
 8000c6e:	4a68      	ldr	r2, [pc, #416]	; (8000e10 <main+0x4e0>)
  huart2.Init.BaudRate = 2250000;
 8000c70:	4d68      	ldr	r5, [pc, #416]	; (8000e14 <main+0x4e4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	6098      	str	r0, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c74:	e9c3 0003 	strd	r0, r0, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c78:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7c:	6198      	str	r0, [r3, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000c7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  huart2.Instance = USART2;
 8000c82:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2250000;
 8000c84:	605d      	str	r5, [r3, #4]
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8a:	270c      	movs	r7, #12
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000c8c:	2520      	movs	r5, #32
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8e:	4618      	mov	r0, r3
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c90:	61dc      	str	r4, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000c92:	6219      	str	r1, [r3, #32]
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c96:	615f      	str	r7, [r3, #20]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000c98:	625d      	str	r5, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9a:	f003 fe83 	bl	80049a4 <HAL_UART_Init>
 8000c9e:	b108      	cbz	r0, 8000ca4 <main+0x374>
 8000ca0:	b672      	cpsid	i
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <main+0x372>
  htim3.Instance = TIM3;
 8000ca4:	4c5c      	ldr	r4, [pc, #368]	; (8000e18 <main+0x4e8>)
 8000ca6:	4a5d      	ldr	r2, [pc, #372]	; (8000e1c <main+0x4ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	9010      	str	r0, [sp, #64]	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 8000cae:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb2:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim3.Init.Period = 517;
 8000cb6:	f240 2305 	movw	r3, #517	; 0x205
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc0:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 12;
 8000cc2:	6067      	str	r7, [r4, #4]
  htim3.Instance = TIM3;
 8000cc4:	6022      	str	r2, [r4, #0]
  htim3.Init.Period = 517;
 8000cc6:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc8:	f002 ff44 	bl	8003b54 <HAL_TIM_Base_Init>
 8000ccc:	b108      	cbz	r0, 8000cd2 <main+0x3a2>
 8000cce:	b672      	cpsid	i
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x3a0>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd2:	a916      	add	r1, sp, #88	; 0x58
 8000cd4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd6:	9616      	str	r6, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd8:	f003 fa0e 	bl	80040f8 <HAL_TIM_ConfigClockSource>
 8000cdc:	b108      	cbz	r0, 8000ce2 <main+0x3b2>
 8000cde:	b672      	cpsid	i
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <main+0x3b0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ce2:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ce4:	a90e      	add	r1, sp, #56	; 0x38
 8000ce6:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ce8:	950e      	str	r5, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cea:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cec:	f003 fcfc 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	b108      	cbz	r0, 8000cf6 <main+0x3c6>
 8000cf2:	b672      	cpsid	i
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <main+0x3c4>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4c4a      	ldr	r4, [pc, #296]	; (8000e20 <main+0x4f0>)
  hadc2.Instance = ADC2;
 8000cf8:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <main+0x4f4>)
 8000cfa:	6023      	str	r3, [r4, #0]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d00:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d02:	2601      	movs	r6, #1
  hadc2.Init.NbrOfConversion = 2;
 8000d04:	2102      	movs	r1, #2
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d06:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d08:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d0a:	8322      	strh	r2, [r4, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0c:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8000d10:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 8000d14:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d18:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1c:	e9c4 6704 	strd	r6, r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 2;
 8000d20:	61e1      	str	r1, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d22:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d26:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d28:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2c:	60e3      	str	r3, [r4, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d2e:	6363      	str	r3, [r4, #52]	; 0x34
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d30:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d32:	f001 fa49 	bl	80021c8 <HAL_ADC_Init>
 8000d36:	b108      	cbz	r0, 8000d3c <main+0x40c>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x40a>
  sConfig.Channel = ADC_CHANNEL_4;
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d44:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_4;
 8000d46:	2200      	movs	r2, #0
 8000d48:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d4a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8000d4c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8000d50:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d54:	f001 fc80 	bl	8002658 <HAL_ADC_ConfigChannel>
 8000d58:	b108      	cbz	r0, 8000d5e <main+0x42e>
 8000d5a:	b672      	cpsid	i
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <main+0x42c>
  sConfig.Channel = ADC_CHANNEL_9;
 8000d5e:	2209      	movs	r2, #9
 8000d60:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d62:	a916      	add	r1, sp, #88	; 0x58
 8000d64:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8000d66:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d6a:	f001 fc75 	bl	8002658 <HAL_ADC_ConfigChannel>
 8000d6e:	4605      	mov	r5, r0
 8000d70:	b108      	cbz	r0, 8000d76 <main+0x446>
 8000d72:	b672      	cpsid	i
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <main+0x444>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d76:	4602      	mov	r2, r0
 8000d78:	4601      	mov	r1, r0
 8000d7a:	201d      	movs	r0, #29
 8000d7c:	f001 fed0 	bl	8002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d80:	201d      	movs	r0, #29
 8000d82:	f001 ff05 	bl	8002b90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000d86:	462a      	mov	r2, r5
 8000d88:	2103      	movs	r1, #3
 8000d8a:	201c      	movs	r0, #28
 8000d8c:	f001 fec8 	bl	8002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d90:	201c      	movs	r0, #28
 8000d92:	f001 fefd 	bl	8002b90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d96:	462a      	mov	r2, r5
 8000d98:	4629      	mov	r1, r5
 8000d9a:	201b      	movs	r0, #27
 8000d9c:	f001 fec0 	bl	8002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000da0:	201b      	movs	r0, #27
 8000da2:	f001 fef5 	bl	8002b90 <HAL_NVIC_EnableIRQ>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000da6:	4629      	mov	r1, r5
 8000da8:	481f      	ldr	r0, [pc, #124]	; (8000e28 <main+0x4f8>)
 8000daa:	f001 fc0f 	bl	80025cc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000dae:	4629      	mov	r1, r5
 8000db0:	4620      	mov	r0, r4
 8000db2:	f001 fc0b 	bl	80025cc <HAL_ADCEx_Calibration_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8000db6:	481d      	ldr	r0, [pc, #116]	; (8000e2c <main+0x4fc>)
 8000db8:	4632      	mov	r2, r6
 8000dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbe:	f002 f897 	bl	8002ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8000dc2:	481a      	ldr	r0, [pc, #104]	; (8000e2c <main+0x4fc>)
 8000dc4:	4632      	mov	r2, r6
 8000dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dca:	f002 f891 	bl	8002ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8000dce:	4632      	mov	r2, r6
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <main+0x4fc>)
 8000dd6:	f002 f88b 	bl	8002ef0 <HAL_GPIO_WritePin>
  	HAL_TIM_Base_Start_IT(&htim2);
 8000dda:	480a      	ldr	r0, [pc, #40]	; (8000e04 <main+0x4d4>)
 8000ddc:	f002 ff4e 	bl	8003c7c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000de0:	210c      	movs	r1, #12
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <main+0x4d8>)
 8000de4:	f003 f8b8 	bl	8003f58 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000de8:	4629      	mov	r1, r5
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <main+0x4d8>)
 8000dec:	f003 f81a 	bl	8003e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000df0:	4639      	mov	r1, r7
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <main+0x4d8>)
 8000df4:	f003 f816 	bl	8003e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <main+0x4d8>)
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	f003 f812 	bl	8003e24 <HAL_TIM_PWM_Start>
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <main+0x4d0>
 8000e02:	bf00      	nop
 8000e04:	200003cc 	.word	0x200003cc
 8000e08:	20000380 	.word	0x20000380
 8000e0c:	20000418 	.word	0x20000418
 8000e10:	40004400 	.word	0x40004400
 8000e14:	00225510 	.word	0x00225510
 8000e18:	2000020c 	.word	0x2000020c
 8000e1c:	40000400 	.word	0x40000400
 8000e20:	20000178 	.word	0x20000178
 8000e24:	50000100 	.word	0x50000100
 8000e28:	20000258 	.word	0x20000258
 8000e2c:	48000800 	.word	0x48000800

08000e30 <Error_Handler>:
 8000e30:	b672      	cpsid	i
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <Error_Handler+0x2>

08000e34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_MspInit+0x30>)
 8000e36:	699a      	ldr	r2, [r3, #24]
 8000e38:	f042 0201 	orr.w	r2, r2, #1
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	699a      	ldr	r2, [r3, #24]
{
 8000e40:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	f002 0201 	and.w	r2, r2, #1
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	69da      	ldr	r2, [r3, #28]
 8000e4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e50:	61da      	str	r2, [r3, #28]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000e5c:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000e60:	f001 be4a 	b.w	8002af8 <HAL_NVIC_SetPriorityGrouping>
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e68:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8000e6a:	6802      	ldr	r2, [r0, #0]
{
 8000e6c:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8000e70:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000e78:	e9cd 3308 	strd	r3, r3, [sp, #32]
{
 8000e7c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8000e80:	d04a      	beq.n	8000f18 <HAL_ADC_MspInit+0xb0>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8000e82:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <HAL_ADC_MspInit+0x144>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e88:	b00c      	add	sp, #48	; 0x30
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_ADC_MspInit+0x148>)
 8000e8e:	6813      	ldr	r3, [r2, #0]
 8000e90:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e92:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e96:	d07a      	beq.n	8000f8e <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <HAL_ADC_MspInit+0x14c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	4847      	ldr	r0, [pc, #284]	; (8000fb8 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA2_Channel1;
 8000e9e:	4d47      	ldr	r5, [pc, #284]	; (8000fbc <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000eac:	9204      	str	r2, [sp, #16]
 8000eae:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f001 ff0c 	bl	8002cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	a906      	add	r1, sp, #24
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ede:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f001 ff02 	bl	8002cec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <HAL_ADC_MspInit+0x158>)
 8000eea:	602b      	str	r3, [r5, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000eec:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eee:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ef6:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ef8:	60e8      	str	r0, [r5, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000efa:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f02:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f04:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f06:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f08:	f001 fe6a 	bl	8002be0 <HAL_DMA_Init>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d149      	bne.n	8000fa4 <HAL_ADC_MspInit+0x13c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f10:	63a5      	str	r5, [r4, #56]	; 0x38
 8000f12:	626c      	str	r4, [r5, #36]	; 0x24
}
 8000f14:	b00c      	add	sp, #48	; 0x30
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f18:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <HAL_ADC_MspInit+0x148>)
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f1e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f20:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f22:	d029      	beq.n	8000f78 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_ADC_MspInit+0x14c>)
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8000f26:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	695a      	ldr	r2, [r3, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8000f2a:	4d26      	ldr	r5, [pc, #152]	; (8000fc4 <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2600      	movs	r6, #0
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8000f54:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8000f56:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f001 fec6 	bl	8002cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8000f60:	2303      	movs	r3, #3
 8000f62:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8000f64:	a906      	add	r1, sp, #24
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8000f6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f001 febc 	bl	8002cec <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_ADC_MspInit+0x160>)
 8000f76:	e7b8      	b.n	8000eea <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_ADC_MspInit+0x14c>)
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	9b00      	ldr	r3, [sp, #0]
 8000f8c:	e7ca      	b.n	8000f24 <HAL_ADC_MspInit+0xbc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_ADC_MspInit+0x14c>)
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	9303      	str	r3, [sp, #12]
 8000fa0:	9b03      	ldr	r3, [sp, #12]
 8000fa2:	e779      	b.n	8000e98 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 8000fa4:	f7ff ff44 	bl	8000e30 <Error_Handler>
 8000fa8:	e7b2      	b.n	8000f10 <HAL_ADC_MspInit+0xa8>
 8000faa:	bf00      	nop
 8000fac:	50000100 	.word	0x50000100
 8000fb0:	20000108 	.word	0x20000108
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	2000049c 	.word	0x2000049c
 8000fc0:	40020408 	.word	0x40020408
 8000fc4:	2000033c 	.word	0x2000033c
 8000fc8:	40020008 	.word	0x40020008

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8000fce:	6802      	ldr	r2, [r0, #0]
 8000fd0:	4929      	ldr	r1, [pc, #164]	; (8001078 <HAL_TIM_Base_MspInit+0xac>)
{
 8000fd2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8000fd6:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000fdc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000fe0:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8000fe2:	d020      	beq.n	8001026 <HAL_TIM_Base_MspInit+0x5a>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000fe4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000fe8:	d004      	beq.n	8000ff4 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_TIM_Base_MspInit+0xb0>)
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d00d      	beq.n	800100c <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ff0:	b00a      	add	sp, #40	; 0x28
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_TIM_Base_MspInit+0xb4>)
 8000ff6:	69da      	ldr	r2, [r3, #28]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	61da      	str	r2, [r3, #28]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	9b02      	ldr	r3, [sp, #8]
}
 8001008:	b00a      	add	sp, #40	; 0x28
 800100a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800100c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	f042 0202 	orr.w	r2, r2, #2
 8001016:	61da      	str	r2, [r3, #28]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	9b03      	ldr	r3, [sp, #12]
}
 8001022:	b00a      	add	sp, #40	; 0x28
 8001024:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800102a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800102e:	200c      	movs	r0, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001036:	619a      	str	r2, [r3, #24]
 8001038:	699a      	ldr	r2, [r3, #24]
 800103a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800103e:	9200      	str	r2, [sp, #0]
 8001040:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800104c:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001054:	2201      	movs	r2, #1
 8001056:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001058:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800105a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800105e:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001064:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001068:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800106e:	f001 fe3d 	bl	8002cec <HAL_GPIO_Init>
}
 8001072:	b00a      	add	sp, #40	; 0x28
 8001074:	bd70      	pop	{r4, r5, r6, pc}
 8001076:	bf00      	nop
 8001078:	40012c00 	.word	0x40012c00
 800107c:	40000400 	.word	0x40000400
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001084:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8001086:	6801      	ldr	r1, [r0, #0]
 8001088:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <HAL_TIM_MspPostInit+0x5c>)
{
 800108a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800108e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001094:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001098:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800109a:	d001      	beq.n	80010a0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800109c:	b008      	add	sp, #32
 800109e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010a8:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010b4:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80010bc:	2202      	movs	r2, #2
 80010be:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80010c2:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 80010c6:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80010cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80010d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f001 fe09 	bl	8002cec <HAL_GPIO_Init>
}
 80010da:	b008      	add	sp, #32
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
 80010de:	bf00      	nop
 80010e0:	40012c00 	.word	0x40012c00

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80010e6:	6802      	ldr	r2, [r0, #0]
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_UART_MspInit+0xc0>)
{
 80010ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80010ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80010f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80010f8:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010fc:	b008      	add	sp, #32
 80010fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001100:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001104:	4e28      	ldr	r6, [pc, #160]	; (80011a8 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800110c:	61da      	str	r2, [r3, #28]
 800110e:	69da      	ldr	r2, [r3, #28]
 8001110:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001128:	220c      	movs	r2, #12
 800112a:	2302      	movs	r3, #2
 800112c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001130:	2200      	movs	r2, #0
 8001132:	2300      	movs	r3, #0
 8001134:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113a:	2307      	movs	r3, #7
 800113c:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001140:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f001 fdd1 	bl	8002cec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800114a:	4918      	ldr	r1, [pc, #96]	; (80011ac <HAL_UART_MspInit+0xc8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114c:	6074      	str	r4, [r6, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001150:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001152:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001154:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001158:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800115c:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800115e:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001160:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001162:	f001 fd3d 	bl	8002be0 <HAL_DMA_Init>
 8001166:	b9b0      	cbnz	r0, 8001196 <HAL_UART_MspInit+0xb2>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001168:	4c11      	ldr	r4, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0xcc>)
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_UART_MspInit+0xd0>)
 800116c:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116e:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001170:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001174:	672e      	str	r6, [r5, #112]	; 0x70
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001176:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117c:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001184:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001186:	6061      	str	r1, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001188:	f001 fd2a 	bl	8002be0 <HAL_DMA_Init>
 800118c:	b930      	cbnz	r0, 800119c <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800118e:	66ec      	str	r4, [r5, #108]	; 0x6c
 8001190:	6265      	str	r5, [r4, #36]	; 0x24
}
 8001192:	b008      	add	sp, #32
 8001194:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001196:	f7ff fe4b 	bl	8000e30 <Error_Handler>
 800119a:	e7e5      	b.n	8001168 <HAL_UART_MspInit+0x84>
      Error_Handler();
 800119c:	f7ff fe48 	bl	8000e30 <Error_Handler>
 80011a0:	e7f5      	b.n	800118e <HAL_UART_MspInit+0xaa>
 80011a2:	bf00      	nop
 80011a4:	40004400 	.word	0x40004400
 80011a8:	20000134 	.word	0x20000134
 80011ac:	4002006c 	.word	0x4002006c
 80011b0:	200002f8 	.word	0x200002f8
 80011b4:	40020080 	.word	0x40020080

080011b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2120      	movs	r1, #32
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f001 fe95 	bl	8002ef0 <HAL_GPIO_WritePin>
	measureADC();
 80011c6:	f000 f945 	bl	8001454 <measureADC>
    SVPWM();
 80011ca:	f000 f95b 	bl	8001484 <SVPWM>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	2200      	movs	r2, #0
 80011d4:	2120      	movs	r1, #32
 80011d6:	f001 fe8b 	bl	8002ef0 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <TIM1_CC_IRQHandler+0x2c>)
 80011e0:	f003 b83a 	b.w	8004258 <HAL_TIM_IRQHandler>
 80011e4:	20000380 	.word	0x20000380

080011e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  executeSetAlgorithm();
 80011ea:	f000 fea9 	bl	8001f40 <executeSetAlgorithm>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 80011f2:	4801      	ldr	r0, [pc, #4]	; (80011f8 <TIM2_IRQHandler+0x10>)
 80011f4:	f003 b830 	b.w	8004258 <HAL_TIM_IRQHandler>
 80011f8:	200003cc 	.word	0x200003cc

080011fc <TIM3_IRQHandler>:
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011fc:	4801      	ldr	r0, [pc, #4]	; (8001204 <TIM3_IRQHandler+0x8>)
 80011fe:	f003 b82b 	b.w	8004258 <HAL_TIM_IRQHandler>
 8001202:	bf00      	nop
 8001204:	2000020c 	.word	0x2000020c

08001208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001208:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  startStop();
 800120a:	f000 fec3 	bl	8001f94 <startStop>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800120e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001212:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001216:	f001 be73 	b.w	8002f00 <HAL_GPIO_EXTI_IRQHandler>
 800121a:	bf00      	nop
 800121c:	0000      	movs	r0, r0
	...

08001220 <computePosition>:
 * @return uint8_t arcsin(x) range 0 to 90
 */
void computePosition(){

	// Compute abc BEMFs
	E1 = ((short)Eab[0]-1880)*81/100;
 8001220:	4977      	ldr	r1, [pc, #476]	; (8001400 <computePosition+0x1e0>)
	Xalbt->beta = (b-c)*250/433;
 8001222:	eddf 5a78 	vldr	s11, [pc, #480]	; 8001404 <computePosition+0x1e4>
	E1 = ((short)Eab[0]-1880)*81/100;
 8001226:	f9b1 2000 	ldrsh.w	r2, [r1]
	E2 =  (short)Eab[1]-1768;
 800122a:	6849      	ldr	r1, [r1, #4]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 800122c:	eddf 7a76 	vldr	s15, [pc, #472]	; 8001408 <computePosition+0x1e8>
 8001230:	ed9f 6a76 	vldr	s12, [pc, #472]	; 800140c <computePosition+0x1ec>
 8001234:	4876      	ldr	r0, [pc, #472]	; (8001410 <computePosition+0x1f0>)
	E1 = ((short)Eab[0]-1880)*81/100;
 8001236:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
void computePosition(){
 800123a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	E1 = ((short)Eab[0]-1880)*81/100;
 800123e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8001242:	4f74      	ldr	r7, [pc, #464]	; (8001414 <computePosition+0x1f4>)
 8001244:	4c74      	ldr	r4, [pc, #464]	; (8001418 <computePosition+0x1f8>)
	E3 = -(E1+E2);
 8001246:	4d75      	ldr	r5, [pc, #468]	; (800141c <computePosition+0x1fc>)
	E2 =  (short)Eab[1]-1768;
 8001248:	4e75      	ldr	r6, [pc, #468]	; (8001420 <computePosition+0x200>)
	E1 = ((short)Eab[0]-1880)*81/100;
 800124a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800124e:	fb87 3702 	smull	r3, r7, r7, r2
 8001252:	17d3      	asrs	r3, r2, #31
 8001254:	ebc3 1367 	rsb	r3, r3, r7, asr #5
	E2 =  (short)Eab[1]-1768;
 8001258:	f5a1 62dd 	sub.w	r2, r1, #1768	; 0x6e8
	E3 = -(E1+E2);
 800125c:	fa13 f182 	uxtah	r1, r3, r2
 8001260:	4249      	negs	r1, r1
 8001262:	b209      	sxth	r1, r1

	// Compute alpha-beta BEMFS
	clarkeTransform(E1,E2,E3, &Ealbt);
 8001264:	ee07 1a10 	vmov	s14, r1
	E2 =  (short)Eab[1]-1768;
 8001268:	b212      	sxth	r2, r2
	clarkeTransform(E1,E2,E3, &Ealbt);
 800126a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800126e:	ee07 2a10 	vmov	s14, r2
 8001272:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	E1 = ((short)Eab[0]-1880)*81/100;
 8001276:	b21b      	sxth	r3, r3
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001278:	ee37 5a26 	vadd.f32	s10, s14, s13
	Xalbt->beta = (b-c)*250/433;
 800127c:	ee37 7a66 	vsub.f32	s14, s14, s13
	clarkeTransform(E1,E2,E3, &Ealbt);
 8001280:	ee06 3a90 	vmov	s13, r3
	Xalbt->beta = (b-c)*250/433;
 8001284:	ee27 7a25 	vmul.f32	s14, s14, s11
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001288:	ee67 7ac5 	vnmul.f32	s15, s15, s10
	clarkeTransform(E1,E2,E3, &Ealbt);
 800128c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	Xalbt->beta = (b-c)*250/433;
 8001290:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001294:	eee6 7a86 	vfma.f32	s15, s13, s12
void computePosition(){
 8001298:	ed2d 8b02 	vpush	{d8}
	E1 = ((short)Eab[0]-1880)*81/100;
 800129c:	8023      	strh	r3, [r4, #0]
	Xalbt->beta = (b-c)*250/433;
 800129e:	ee17 3a10 	vmov	r3, s14
 80012a2:	b21c      	sxth	r4, r3
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80012a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15

	// Compute theta
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 80012a8:	ee07 4a10 	vmov	s14, r4
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80012ac:	ee17 3a90 	vmov	r3, s15
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 80012b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	E3 = -(E1+E2);
 80012b4:	8029      	strh	r1, [r5, #0]
   abs_y = mod(y)+0.0000001;
 80012b6:	eef0 7ac7 	vabs.f32	s15, s14
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80012ba:	b21d      	sxth	r5, r3
	E2 =  (short)Eab[1]-1768;
 80012bc:	8032      	strh	r2, [r6, #0]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80012be:	8005      	strh	r5, [r0, #0]
	Xalbt->beta = (b-c)*250/433;
 80012c0:	8044      	strh	r4, [r0, #2]
   abs_y = mod(y)+0.0000001;
 80012c2:	ee17 0a90 	vmov	r0, s15
 80012c6:	f7ff fa15 	bl	80006f4 <__aeabi_f2d>
 80012ca:	a347      	add	r3, pc, #284	; (adr r3, 80013e8 <computePosition+0x1c8>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f8b2 	bl	8000438 <__adddf3>
 80012d4:	f7ff fa86 	bl	80007e4 <__aeabi_d2f>
 80012d8:	4b52      	ldr	r3, [pc, #328]	; (8001424 <computePosition+0x204>)
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 80012da:	ee07 5a10 	vmov	s14, r5
   if (x>=0){
 80012de:	2d00      	cmp	r5, #0
   abs_y = mod(y)+0.0000001;
 80012e0:	ee07 0a90 	vmov	s15, r0
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 80012e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   abs_y = mod(y)+0.0000001;
 80012e8:	6018      	str	r0, [r3, #0]
   if (x>=0){
 80012ea:	db66      	blt.n	80013ba <computePosition+0x19a>
      r = (x - abs_y)/(x + abs_y);
 80012ec:	ee37 6a67 	vsub.f32	s12, s14, s15
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
      angle = (1-r)*c1;
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <computePosition+0x208>)
      r = (x - abs_y)/(x + abs_y);
 80012f6:	eec6 6a27 	vdiv.f32	s13, s12, s15
      angle = (1-r)*c1;
 80012fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <computePosition+0x20c>)
	   return((uint16_t)(180-(angle*57)));
 800130c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001430 <computePosition+0x210>
 8001310:	edc3 6a00 	vstr	s13, [r3]
 8001314:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001434 <computePosition+0x214>
 8001318:	4a47      	ldr	r2, [pc, #284]	; (8001438 <computePosition+0x218>)
   if (y < 0){
 800131a:	2c00      	cmp	r4, #0
	   return((uint16_t)(180-(angle*57)));
 800131c:	bfb4      	ite	lt
 800131e:	eee7 7a66 	vfmslt.f32	s15, s14, s13
	   return((uint16_t)(180+(angle*57)));
 8001322:	eee7 7a26 	vfmage.f32	s15, s14, s13
 8001326:	ed82 7a00 	vstr	s14, [r2]
 800132a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 800132e:	4a43      	ldr	r2, [pc, #268]	; (800143c <computePosition+0x21c>)
	   return((uint16_t)(180+(angle*57)));
 8001330:	ee17 3a90 	vmov	r3, s15
 8001334:	b29b      	uxth	r3, r3
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 8001336:	b21c      	sxth	r4, r3

	// Limit theta value
	if(theta < 0){
 8001338:	2c00      	cmp	r4, #0
	theta = arctan2(Ealbt.beta,Ealbt.alpha);
 800133a:	8014      	strh	r4, [r2, #0]
	if(theta < 0){
 800133c:	db4c      	blt.n	80013d8 <computePosition+0x1b8>
		theta += 360;
	}

	if(theta > 360){
		theta = thetaOld;
 800133e:	4d40      	ldr	r5, [pc, #256]	; (8001440 <computePosition+0x220>)
 8001340:	f9b5 3000 	ldrsh.w	r3, [r5]
	if(theta > 360){
 8001344:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
		theta = thetaOld;
 8001348:	bfc4      	itt	gt
 800134a:	8013      	strhgt	r3, [r2, #0]
 800134c:	461c      	movgt	r4, r3
	dTheta = theta - thetaOld;
 800134e:	1ae3      	subs	r3, r4, r3
 8001350:	ee08 3a10 	vmov	s16, r3
 8001354:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	if(dTheta < 100){
 8001358:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8001444 <computePosition+0x224>
	dTheta = mod(dTheta);
 800135c:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <computePosition+0x228>)
 800135e:	eeb0 8ac8 	vabs.f32	s16, s16
	if(dTheta < 100){
 8001362:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	dTheta = mod(dTheta);
 800136a:	ed83 8a00 	vstr	s16, [r3]
	if(dTheta < 100){
 800136e:	d51f      	bpl.n	80013b0 <computePosition+0x190>
		speed = 0.999*speed + (dTheta)*0.486;
 8001370:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001450 <computePosition+0x230>
 8001374:	f8b8 0000 	ldrh.w	r0, [r8]
 8001378:	f7ff f9aa 	bl	80006d0 <__aeabi_i2d>
 800137c:	a31c      	add	r3, pc, #112	; (adr r3, 80013f0 <computePosition+0x1d0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7fe ff29 	bl	80001d8 <__aeabi_dmul>
 8001386:	4606      	mov	r6, r0
 8001388:	ee18 0a10 	vmov	r0, s16
 800138c:	460f      	mov	r7, r1
 800138e:	f7ff f9b1 	bl	80006f4 <__aeabi_f2d>
 8001392:	a319      	add	r3, pc, #100	; (adr r3, 80013f8 <computePosition+0x1d8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7fe ff1e 	bl	80001d8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4630      	mov	r0, r6
 80013a2:	4639      	mov	r1, r7
 80013a4:	f7ff f848 	bl	8000438 <__adddf3>
 80013a8:	f7ff f9fc 	bl	80007a4 <__aeabi_d2uiz>
 80013ac:	f8a8 0000 	strh.w	r0, [r8]

	// Compute rotor speed
	computeSpeed();

	thetaOld = theta;
}
 80013b0:	ecbd 8b02 	vpop	{d8}
	thetaOld = theta;
 80013b4:	802c      	strh	r4, [r5, #0]
}
 80013b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = (x + abs_y) / (abs_y - x);
 80013ba:	ee77 5a27 	vadd.f32	s11, s14, s15
 80013be:	ee77 7ac7 	vsub.f32	s15, s15, s14
      angle = c2 - (r*c1);
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <computePosition+0x208>)
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <computePosition+0x22c>)
 80013c6:	ed92 6a00 	vldr	s12, [r2]
 80013ca:	ed93 7a00 	vldr	s14, [r3]
      r = (x + abs_y) / (abs_y - x);
 80013ce:	eec5 6aa7 	vdiv.f32	s13, s11, s15
      angle = c2 - (r*c1);
 80013d2:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80013d6:	e798      	b.n	800130a <computePosition+0xea>
		theta += 360;
 80013d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013dc:	4d18      	ldr	r5, [pc, #96]	; (8001440 <computePosition+0x220>)
 80013de:	b21c      	sxth	r4, r3
 80013e0:	8014      	strh	r4, [r2, #0]
	if(theta > 360){
 80013e2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80013e6:	e7b2      	b.n	800134e <computePosition+0x12e>
 80013e8:	9abcaf48 	.word	0x9abcaf48
 80013ec:	3e7ad7f2 	.word	0x3e7ad7f2
 80013f0:	d916872b 	.word	0xd916872b
 80013f4:	3feff7ce 	.word	0x3feff7ce
 80013f8:	be76c8b4 	.word	0xbe76c8b4
 80013fc:	3fdf1a9f 	.word	0x3fdf1a9f
 8001400:	20000530 	.word	0x20000530
 8001404:	3f13ce56 	.word	0x3f13ce56
 8001408:	3eaaaaab 	.word	0x3eaaaaab
 800140c:	3f2aaaab 	.word	0x3f2aaaab
 8001410:	20000548 	.word	0x20000548
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	2000051c 	.word	0x2000051c
 800141c:	2000054c 	.word	0x2000054c
 8001420:	200004fc 	.word	0x200004fc
 8001424:	20000120 	.word	0x20000120
 8001428:	20000008 	.word	0x20000008
 800142c:	2000012c 	.word	0x2000012c
 8001430:	43340000 	.word	0x43340000
 8001434:	42640000 	.word	0x42640000
 8001438:	20000124 	.word	0x20000124
 800143c:	200004fe 	.word	0x200004fe
 8001440:	20000520 	.word	0x20000520
 8001444:	42c80000 	.word	0x42c80000
 8001448:	200004f4 	.word	0x200004f4
 800144c:	2000000c 	.word	0x2000000c
 8001450:	2000052c 	.word	0x2000052c

08001454 <measureADC>:

/**
 * This function computes 2 phase currents and 2 BEMFs
 *
 */
void measureADC(){
 8001454:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA(&hadc2, Eab, 2);
 8001456:	4907      	ldr	r1, [pc, #28]	; (8001474 <measureADC+0x20>)
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <measureADC+0x24>)
 800145a:	2202      	movs	r2, #2
 800145c:	f001 f80a 	bl	8002474 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, Iab, 2);
 8001460:	4906      	ldr	r1, [pc, #24]	; (800147c <measureADC+0x28>)
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <measureADC+0x2c>)
 8001464:	2202      	movs	r2, #2
 8001466:	f001 f805 	bl	8002474 <HAL_ADC_Start_DMA>

	// Compute rotor position
	computePosition();
}
 800146a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	computePosition();
 800146e:	f7ff bed7 	b.w	8001220 <computePosition>
 8001472:	bf00      	nop
 8001474:	20000530 	.word	0x20000530
 8001478:	20000178 	.word	0x20000178
 800147c:	20000504 	.word	0x20000504
 8001480:	20000258 	.word	0x20000258

08001484 <SVPWM>:

/**
 * This function computes SVPWM timings for TIM1
 *
 */
void SVPWM(){
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	if(run == 1){
 8001486:	4bad      	ldr	r3, [pc, #692]	; (800173c <SVPWM+0x2b8>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d005      	beq.n	800149a <SVPWM+0x16>
		}
		TIM1->CCR1 = Ta;
		TIM1->CCR2 = Tb;
		TIM1->CCR3 = Tc;
	} else {
		TIM1->CCR1 = 0;
 800148e:	4bac      	ldr	r3, [pc, #688]	; (8001740 <SVPWM+0x2bc>)
 8001490:	2200      	movs	r2, #0
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
}
 8001498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		n = floor(wt/60)+1;
 800149a:	4baa      	ldr	r3, [pc, #680]	; (8001744 <SVPWM+0x2c0>)
 800149c:	48aa      	ldr	r0, [pc, #680]	; (8001748 <SVPWM+0x2c4>)
 800149e:	881c      	ldrh	r4, [r3, #0]
 80014a0:	fba0 3004 	umull	r3, r0, r0, r4
 80014a4:	0940      	lsrs	r0, r0, #5
 80014a6:	f7ff f913 	bl	80006d0 <__aeabi_i2d>
 80014aa:	4ba8      	ldr	r3, [pc, #672]	; (800174c <SVPWM+0x2c8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f7fe ffc3 	bl	8000438 <__adddf3>
 80014b2:	f7ff f977 	bl	80007a4 <__aeabi_d2uiz>
 80014b6:	b2c0      	uxtb	r0, r0
 80014b8:	49a5      	ldr	r1, [pc, #660]	; (8001750 <SVPWM+0x2cc>)
		T1 = V*sin2(n*60 - wt);
 80014ba:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80014be:	ebc4 0282 	rsb	r2, r4, r2, lsl #2
 80014c2:	b213      	sxth	r3, r2
		n = floor(wt/60)+1;
 80014c4:	7008      	strb	r0, [r1, #0]
		T1 = V*sin2(n*60 - wt);
 80014c6:	b291      	uxth	r1, r2
		return ((360+theta) - 360*(1+(theta/360)));
 80014c8:	4aa2      	ldr	r2, [pc, #648]	; (8001754 <SVPWM+0x2d0>)
	if(theta < 0){
 80014ca:	2b00      	cmp	r3, #0
		return ((360+theta) - 360*(1+(theta/360)));
 80014cc:	fb82 5203 	smull	r5, r2, r2, r3
	if(theta < 0){
 80014d0:	f2c0 80ab 	blt.w	800162a <SVPWM+0x1a6>
		return (theta - 360*(theta/360));
 80014d4:	441a      	add	r2, r3
 80014d6:	17db      	asrs	r3, r3, #31
 80014d8:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 80014dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014e0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80014e4:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80014e8:	b299      	uxth	r1, r3
 80014ea:	b21b      	sxth	r3, r3
  if(theta <= 90){
 80014ec:	2b5a      	cmp	r3, #90	; 0x5a
 80014ee:	dd79      	ble.n	80015e4 <SVPWM+0x160>
  } else if(theta > 90 && theta <=180){
 80014f0:	f1a1 025b 	sub.w	r2, r1, #91	; 0x5b
 80014f4:	2a59      	cmp	r2, #89	; 0x59
 80014f6:	d973      	bls.n	80015e0 <SVPWM+0x15c>
  } else if(theta > 180 && theta <= 270){
 80014f8:	39b5      	subs	r1, #181	; 0xb5
 80014fa:	2959      	cmp	r1, #89	; 0x59
    return -sinTable[theta - 180];
 80014fc:	bf98      	it	ls
 80014fe:	3bb4      	subls	r3, #180	; 0xb4
    return -sinTable[360 - theta];
 8001500:	4995      	ldr	r1, [pc, #596]	; (8001758 <SVPWM+0x2d4>)
 8001502:	bf88      	it	hi
 8001504:	f5c3 73b4 	rsbhi	r3, r3, #360	; 0x168
 8001508:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800150c:	425b      	negs	r3, r3
 800150e:	b21b      	sxth	r3, r3
 8001510:	ee07 3a10 	vmov	s14, r3
		T1 = V*sin2(n*60 - wt);
 8001514:	4b91      	ldr	r3, [pc, #580]	; (800175c <SVPWM+0x2d8>)
 8001516:	4a92      	ldr	r2, [pc, #584]	; (8001760 <SVPWM+0x2dc>)
 8001518:	edd3 6a00 	vldr	s13, [r3]
 800151c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		T2 = V*sin2(wt - ((n-1)*60));
 8001520:	3801      	subs	r0, #1
		T1 = V*sin2(n*60 - wt);
 8001522:	ee27 7a26 	vmul.f32	s14, s14, s13
		T2 = V*sin2(wt - ((n-1)*60));
 8001526:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
		T1 = V*sin2(n*60 - wt);
 800152a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
		T2 = V*sin2(wt - ((n-1)*60));
 800152e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001532:	b203      	sxth	r3, r0
		T1 = V*sin2(n*60 - wt);
 8001534:	edc2 7a00 	vstr	s15, [r2]
		return ((360+theta) - 360*(1+(theta/360)));
 8001538:	4a86      	ldr	r2, [pc, #536]	; (8001754 <SVPWM+0x2d0>)
	if(theta < 0){
 800153a:	2b00      	cmp	r3, #0
		T1 = V*sin2(n*60 - wt);
 800153c:	ee17 5a90 	vmov	r5, s15
		T2 = V*sin2(wt - ((n-1)*60));
 8001540:	b280      	uxth	r0, r0
		return ((360+theta) - 360*(1+(theta/360)));
 8001542:	fb82 6203 	smull	r6, r2, r2, r3
	if(theta < 0){
 8001546:	f2c0 8081 	blt.w	800164c <SVPWM+0x1c8>
		return (theta - 360*(theta/360));
 800154a:	441a      	add	r2, r3
 800154c:	17db      	asrs	r3, r3, #31
 800154e:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 8001552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001556:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800155a:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 800155e:	b298      	uxth	r0, r3
 8001560:	b21b      	sxth	r3, r3
  if(theta <= 90){
 8001562:	2b5a      	cmp	r3, #90	; 0x5a
 8001564:	dd46      	ble.n	80015f4 <SVPWM+0x170>
  } else if(theta > 90 && theta <=180){
 8001566:	f1a0 025b 	sub.w	r2, r0, #91	; 0x5b
 800156a:	2a59      	cmp	r2, #89	; 0x59
 800156c:	d940      	bls.n	80015f0 <SVPWM+0x16c>
  } else if(theta > 180 && theta <= 270){
 800156e:	38b5      	subs	r0, #181	; 0xb5
 8001570:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[theta - 180];
 8001572:	bf94      	ite	ls
 8001574:	3bb4      	subls	r3, #180	; 0xb4
    return -sinTable[360 - theta];
 8001576:	f5c3 73b4 	rsbhi	r3, r3, #360	; 0x168
 800157a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800157e:	425b      	negs	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	ee07 3a90 	vmov	s15, r3
		T2 = V*sin2(wt - ((n-1)*60));
 8001586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		T0 = Ts - (T1+T2) + 5;
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <SVPWM+0x2e0>)
		T2 = V*sin2(wt - ((n-1)*60));
 800158c:	4876      	ldr	r0, [pc, #472]	; (8001768 <SVPWM+0x2e4>)
		T0 = Ts - (T1+T2) + 5;
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	4976      	ldr	r1, [pc, #472]	; (800176c <SVPWM+0x2e8>)
		T2 = V*sin2(wt - ((n-1)*60));
 8001592:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if(wt >= 0 && wt < 60) {
 8001596:	2c3b      	cmp	r4, #59	; 0x3b
		T2 = V*sin2(wt - ((n-1)*60));
 8001598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159c:	ee17 3a90 	vmov	r3, s15
		T0 = Ts - (T1+T2) + 5;
 80015a0:	eb05 0603 	add.w	r6, r5, r3
 80015a4:	eba2 0206 	sub.w	r2, r2, r6
 80015a8:	f102 0205 	add.w	r2, r2, #5
		T2 = V*sin2(wt - ((n-1)*60));
 80015ac:	edc0 7a00 	vstr	s15, [r0]
		T0 = Ts - (T1+T2) + 5;
 80015b0:	600a      	str	r2, [r1, #0]
		if(wt >= 0 && wt < 60) {
 80015b2:	d824      	bhi.n	80015fe <SVPWM+0x17a>
			Ta = T1 + T2 + (T0/2);
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80015ba:	f3c2 044f 	ubfx	r4, r2, #1, #16
 80015be:	1959      	adds	r1, r3, r5
			Tb = T2 + (T0/2);
 80015c0:	4f6b      	ldr	r7, [pc, #428]	; (8001770 <SVPWM+0x2ec>)
			Ta = T1 + T2 + (T0/2);
 80015c2:	4d6c      	ldr	r5, [pc, #432]	; (8001774 <SVPWM+0x2f0>)
			Tc = (T0/2);
 80015c4:	4e6c      	ldr	r6, [pc, #432]	; (8001778 <SVPWM+0x2f4>)
			Ta = T1 + T2 + (T0/2);
 80015c6:	4421      	add	r1, r4
			Tb = T2 + (T0/2);
 80015c8:	1918      	adds	r0, r3, r4
			Ta = T1 + T2 + (T0/2);
 80015ca:	b289      	uxth	r1, r1
			Tb = T2 + (T0/2);
 80015cc:	b280      	uxth	r0, r0
			Ta = T1 + T2 + (T0/2);
 80015ce:	8029      	strh	r1, [r5, #0]
			Tb = T2 + (T0/2);
 80015d0:	8038      	strh	r0, [r7, #0]
			Tc = (T0/2);
 80015d2:	4622      	mov	r2, r4
 80015d4:	8034      	strh	r4, [r6, #0]
		TIM1->CCR1 = Ta;
 80015d6:	4c5a      	ldr	r4, [pc, #360]	; (8001740 <SVPWM+0x2bc>)
 80015d8:	6361      	str	r1, [r4, #52]	; 0x34
		TIM1->CCR2 = Tb;
 80015da:	63a0      	str	r0, [r4, #56]	; 0x38
		TIM1->CCR3 = Tc;
 80015dc:	63e2      	str	r2, [r4, #60]	; 0x3c
}
 80015de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return sinTable[180 - theta];
 80015e0:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80015e4:	495c      	ldr	r1, [pc, #368]	; (8001758 <SVPWM+0x2d4>)
 80015e6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80015ea:	ee07 3a10 	vmov	s14, r3
 80015ee:	e791      	b.n	8001514 <SVPWM+0x90>
 80015f0:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80015f4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	e7c3      	b.n	8001586 <SVPWM+0x102>
		} else if(wt >= 60 && wt < 120) {
 80015fe:	f1a4 013c 	sub.w	r1, r4, #60	; 0x3c
 8001602:	293b      	cmp	r1, #59	; 0x3b
 8001604:	d833      	bhi.n	800166e <SVPWM+0x1ea>
			Ta = T1 + (T0/2);
 8001606:	b2ad      	uxth	r5, r5
 8001608:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800160c:	f3c2 044f 	ubfx	r4, r2, #1, #16
			Tb = T1 + T2 + (T0/2);
 8001610:	18e8      	adds	r0, r5, r3
			Ta = T1 + (T0/2);
 8001612:	1961      	adds	r1, r4, r5
 8001614:	4e57      	ldr	r6, [pc, #348]	; (8001774 <SVPWM+0x2f0>)
			Tb = T1 + T2 + (T0/2);
 8001616:	4d56      	ldr	r5, [pc, #344]	; (8001770 <SVPWM+0x2ec>)
			Tc = (T0/2);
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <SVPWM+0x2f4>)
			Tb = T1 + T2 + (T0/2);
 800161a:	4420      	add	r0, r4
 800161c:	b280      	uxth	r0, r0
			Ta = T1 + (T0/2);
 800161e:	b289      	uxth	r1, r1
 8001620:	8031      	strh	r1, [r6, #0]
			Tb = T1 + T2 + (T0/2);
 8001622:	8028      	strh	r0, [r5, #0]
			Tc = (T0/2);
 8001624:	4622      	mov	r2, r4
 8001626:	801c      	strh	r4, [r3, #0]
 8001628:	e7d5      	b.n	80015d6 <SVPWM+0x152>
		return ((360+theta) - 360*(1+(theta/360)));
 800162a:	18d5      	adds	r5, r2, r3
 800162c:	17da      	asrs	r2, r3, #31
 800162e:	ebc2 2225 	rsb	r2, r2, r5, asr #8
 8001632:	b212      	sxth	r2, r2
 8001634:	3201      	adds	r2, #1
 8001636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800163a:	f501 73b4 	add.w	r3, r1, #360	; 0x168
 800163e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001642:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 8001646:	b291      	uxth	r1, r2
 8001648:	b213      	sxth	r3, r2
 800164a:	e74f      	b.n	80014ec <SVPWM+0x68>
 800164c:	18d6      	adds	r6, r2, r3
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	ebc2 2226 	rsb	r2, r2, r6, asr #8
 8001654:	b212      	sxth	r2, r2
 8001656:	3201      	adds	r2, #1
 8001658:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800165c:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8001660:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001664:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8001668:	b290      	uxth	r0, r2
 800166a:	b213      	sxth	r3, r2
 800166c:	e779      	b.n	8001562 <SVPWM+0xde>
		} else if(wt >= 120 && wt < 180) {
 800166e:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
 8001672:	293b      	cmp	r1, #59	; 0x3b
 8001674:	d915      	bls.n	80016a2 <SVPWM+0x21e>
		} else if(wt >= 180 && wt < 240) {
 8001676:	f1a4 01b4 	sub.w	r1, r4, #180	; 0xb4
 800167a:	293b      	cmp	r1, #59	; 0x3b
 800167c:	d824      	bhi.n	80016c8 <SVPWM+0x244>
			Ta = (T0/2);
 800167e:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
			Tb = T1 + (T0/2);
 8001682:	b2ad      	uxth	r5, r5
			Tc = T1 + T2 + (T0/2);
 8001684:	18ea      	adds	r2, r5, r3
			Ta = (T0/2);
 8001686:	f3c1 034f 	ubfx	r3, r1, #1, #16
			Tb = T1 + (T0/2);
 800168a:	1958      	adds	r0, r3, r5
 800168c:	4e38      	ldr	r6, [pc, #224]	; (8001770 <SVPWM+0x2ec>)
			Tc = T1 + T2 + (T0/2);
 800168e:	4d3a      	ldr	r5, [pc, #232]	; (8001778 <SVPWM+0x2f4>)
			Ta = (T0/2);
 8001690:	4c38      	ldr	r4, [pc, #224]	; (8001774 <SVPWM+0x2f0>)
			Tc = T1 + T2 + (T0/2);
 8001692:	441a      	add	r2, r3
 8001694:	b292      	uxth	r2, r2
			Tb = T1 + (T0/2);
 8001696:	b280      	uxth	r0, r0
 8001698:	4619      	mov	r1, r3
 800169a:	8030      	strh	r0, [r6, #0]
			Tc = T1 + T2 + (T0/2);
 800169c:	802a      	strh	r2, [r5, #0]
			Ta = (T0/2);
 800169e:	8023      	strh	r3, [r4, #0]
			Tc = T1 + T2 + (T0/2);
 80016a0:	e799      	b.n	80015d6 <SVPWM+0x152>
			Ta = (T0/2);
 80016a2:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
			Tb = T1 + T2 + (T0/2);
 80016a6:	b29b      	uxth	r3, r3
			Ta = (T0/2);
 80016a8:	f3c1 044f 	ubfx	r4, r1, #1, #16
			Tb = T1 + T2 + (T0/2);
 80016ac:	1958      	adds	r0, r3, r5
			Tc = T2 + (T0/2);
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <SVPWM+0x2f4>)
			Tb = T1 + T2 + (T0/2);
 80016b0:	4e2f      	ldr	r6, [pc, #188]	; (8001770 <SVPWM+0x2ec>)
			Ta = (T0/2);
 80016b2:	4d30      	ldr	r5, [pc, #192]	; (8001774 <SVPWM+0x2f0>)
			Tb = T1 + T2 + (T0/2);
 80016b4:	4420      	add	r0, r4
			Tc = T2 + (T0/2);
 80016b6:	4423      	add	r3, r4
 80016b8:	b29b      	uxth	r3, r3
			Tb = T1 + T2 + (T0/2);
 80016ba:	b280      	uxth	r0, r0
			Tc = T2 + (T0/2);
 80016bc:	8013      	strh	r3, [r2, #0]
 80016be:	4621      	mov	r1, r4
			Tb = T1 + T2 + (T0/2);
 80016c0:	8030      	strh	r0, [r6, #0]
 80016c2:	461a      	mov	r2, r3
			Ta = (T0/2);
 80016c4:	802c      	strh	r4, [r5, #0]
			Tc = T2 + (T0/2);
 80016c6:	e786      	b.n	80015d6 <SVPWM+0x152>
		} else if(wt >= 240 && wt < 300) {
 80016c8:	f1a4 01f0 	sub.w	r1, r4, #240	; 0xf0
 80016cc:	293b      	cmp	r1, #59	; 0x3b
 80016ce:	d811      	bhi.n	80016f4 <SVPWM+0x270>
			Ta = T2 + (T0/2);
 80016d0:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f3c0 044f 	ubfx	r4, r0, #1, #16
			Tc = T1 + T2 + (T0/2);
 80016da:	195a      	adds	r2, r3, r5
			Ta = T2 + (T0/2);
 80016dc:	18e1      	adds	r1, r4, r3
 80016de:	4e25      	ldr	r6, [pc, #148]	; (8001774 <SVPWM+0x2f0>)
			Tc = T1 + T2 + (T0/2);
 80016e0:	4d25      	ldr	r5, [pc, #148]	; (8001778 <SVPWM+0x2f4>)
			Tb = (T0/2);
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <SVPWM+0x2ec>)
			Tc = T1 + T2 + (T0/2);
 80016e4:	4422      	add	r2, r4
 80016e6:	b292      	uxth	r2, r2
			Ta = T2 + (T0/2);
 80016e8:	b289      	uxth	r1, r1
 80016ea:	8031      	strh	r1, [r6, #0]
			Tc = T1 + T2 + (T0/2);
 80016ec:	802a      	strh	r2, [r5, #0]
 80016ee:	4620      	mov	r0, r4
			Tb = (T0/2);
 80016f0:	801c      	strh	r4, [r3, #0]
			Tc = T1 + T2 + (T0/2);
 80016f2:	e770      	b.n	80015d6 <SVPWM+0x152>
		} else if(wt >= 300 && wt < 360) {
 80016f4:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 80016f8:	2c3b      	cmp	r4, #59	; 0x3b
 80016fa:	d814      	bhi.n	8001726 <SVPWM+0x2a2>
			Ta = T1 + T2 + (T0/2);
 80016fc:	b2ad      	uxth	r5, r5
 80016fe:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001702:	f3c2 044f 	ubfx	r4, r2, #1, #16
 8001706:	18e9      	adds	r1, r5, r3
 8001708:	f8df c068 	ldr.w	ip, [pc, #104]	; 8001774 <SVPWM+0x2f0>
			Tc = T1 + (T0/2);
 800170c:	4f1a      	ldr	r7, [pc, #104]	; (8001778 <SVPWM+0x2f4>)
			Tb = (T0/2);
 800170e:	4e18      	ldr	r6, [pc, #96]	; (8001770 <SVPWM+0x2ec>)
			Ta = T1 + T2 + (T0/2);
 8001710:	4421      	add	r1, r4
			Tc = T1 + (T0/2);
 8001712:	4425      	add	r5, r4
 8001714:	b2ab      	uxth	r3, r5
			Ta = T1 + T2 + (T0/2);
 8001716:	b289      	uxth	r1, r1
 8001718:	f8ac 1000 	strh.w	r1, [ip]
			Tc = T1 + (T0/2);
 800171c:	803b      	strh	r3, [r7, #0]
 800171e:	4620      	mov	r0, r4
 8001720:	461a      	mov	r2, r3
			Tb = (T0/2);
 8001722:	8034      	strh	r4, [r6, #0]
			Tc = T1 + (T0/2);
 8001724:	e757      	b.n	80015d6 <SVPWM+0x152>
			Ta = 0;
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <SVPWM+0x2f0>)
			Tb = 0;
 8001728:	4811      	ldr	r0, [pc, #68]	; (8001770 <SVPWM+0x2ec>)
			Tc = 0;
 800172a:	4913      	ldr	r1, [pc, #76]	; (8001778 <SVPWM+0x2f4>)
			Ta = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	8013      	strh	r3, [r2, #0]
			Tb = 0;
 8001730:	8003      	strh	r3, [r0, #0]
			Tc = 0;
 8001732:	800b      	strh	r3, [r1, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	4619      	mov	r1, r3
 800173a:	e74c      	b.n	80015d6 <SVPWM+0x152>
 800173c:	20000012 	.word	0x20000012
 8001740:	40012c00 	.word	0x40012c00
 8001744:	20000130 	.word	0x20000130
 8001748:	88888889 	.word	0x88888889
 800174c:	3ff00000 	.word	0x3ff00000
 8001750:	20000129 	.word	0x20000129
 8001754:	b60b60b7 	.word	0xb60b60b7
 8001758:	20000014 	.word	0x20000014
 800175c:	20000004 	.word	0x20000004
 8001760:	20000110 	.word	0x20000110
 8001764:	20000000 	.word	0x20000000
 8001768:	20000114 	.word	0x20000114
 800176c:	2000010c 	.word	0x2000010c
 8001770:	2000011a 	.word	0x2000011a
 8001774:	20000118 	.word	0x20000118
 8001778:	2000011c 	.word	0x2000011c

0800177c <modelPredictiveControl>:
	sin000 = sin2(theta);
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <modelPredictiveControl+0xc0>)
 800177e:	f9b3 1000 	ldrsh.w	r1, [r3]
		return ((360+theta) - 360*(1+(theta/360)));
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <modelPredictiveControl+0xc4>)
 8001784:	fb83 2301 	smull	r2, r3, r3, r1
 8001788:	185a      	adds	r2, r3, r1
	if(theta < 0){
 800178a:	2900      	cmp	r1, #0
		return ((360+theta) - 360*(1+(theta/360)));
 800178c:	ea4f 73e1 	mov.w	r3, r1, asr #31
short IalphaPred,IbetaPred,costTemp;
short cost = 65535;
float Ia,Ib,Ic;
uint8_t optimalVector = 0;

void modelPredictiveControl(){
 8001790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return ((360+theta) - 360*(1+(theta/360)));
 8001794:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	if(theta < 0){
 8001798:	f2c0 83a3 	blt.w	8001ee2 <modelPredictiveControl+0x766>
		return (theta - 360*(theta/360));
 800179c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017a0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80017a4:	b289      	uxth	r1, r1
 80017a6:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	b21b      	sxth	r3, r3
  if(theta <= 90){
 80017ae:	2b5a      	cmp	r3, #90	; 0x5a
 80017b0:	dd14      	ble.n	80017dc <modelPredictiveControl+0x60>
  } else if(theta > 90 && theta <=180){
 80017b2:	f1a2 005b 	sub.w	r0, r2, #91	; 0x5b
 80017b6:	2859      	cmp	r0, #89	; 0x59
 80017b8:	d90e      	bls.n	80017d8 <modelPredictiveControl+0x5c>
  } else if(theta > 180 && theta <= 270){
 80017ba:	3ab5      	subs	r2, #181	; 0xb5
 80017bc:	2a59      	cmp	r2, #89	; 0x59
    return -sinTable[theta - 180];
 80017be:	bf98      	it	ls
 80017c0:	3bb4      	subls	r3, #180	; 0xb4
    return -sinTable[360 - theta];
 80017c2:	4a20      	ldr	r2, [pc, #128]	; (8001844 <modelPredictiveControl+0xc8>)
 80017c4:	bf88      	it	hi
 80017c6:	f5c3 73b4 	rsbhi	r3, r3, #360	; 0x168
 80017ca:	f832 a013 	ldrh.w	sl, [r2, r3, lsl #1]
 80017ce:	f1ca 0a00 	rsb	sl, sl, #0
 80017d2:	fa0f fa8a 	sxth.w	sl, sl
 80017d6:	e004      	b.n	80017e2 <modelPredictiveControl+0x66>
    return sinTable[180 - theta];
 80017d8:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <modelPredictiveControl+0xc8>)
 80017de:	f932 a013 	ldrsh.w	sl, [r2, r3, lsl #1]
	sin000 = sin2(theta);
 80017e2:	4c19      	ldr	r4, [pc, #100]	; (8001848 <modelPredictiveControl+0xcc>)
  return sin2(theta+90);
 80017e4:	f101 005a 	add.w	r0, r1, #90	; 0x5a
 80017e8:	b203      	sxth	r3, r0
	if(theta < 0){
 80017ea:	2b00      	cmp	r3, #0
	sin000 = sin2(theta);
 80017ec:	f8a4 a000 	strh.w	sl, [r4]
  return sin2(theta+90);
 80017f0:	b280      	uxth	r0, r0
	if(theta < 0){
 80017f2:	f2c0 8362 	blt.w	8001eba <modelPredictiveControl+0x73e>
		return (theta - 360*(theta/360));
 80017f6:	4912      	ldr	r1, [pc, #72]	; (8001840 <modelPredictiveControl+0xc4>)
 80017f8:	fb81 4103 	smull	r4, r1, r1, r3
 80017fc:	4419      	add	r1, r3
 80017fe:	17db      	asrs	r3, r3, #31
 8001800:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8001804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001808:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800180c:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8001810:	b299      	uxth	r1, r3
 8001812:	b21b      	sxth	r3, r3
  if(theta <= 90){
 8001814:	2b5a      	cmp	r3, #90	; 0x5a
 8001816:	dd1b      	ble.n	8001850 <modelPredictiveControl+0xd4>
  } else if(theta > 90 && theta <=180){
 8001818:	f1a1 005b 	sub.w	r0, r1, #91	; 0x5b
 800181c:	2859      	cmp	r0, #89	; 0x59
 800181e:	d915      	bls.n	800184c <modelPredictiveControl+0xd0>
  } else if(theta > 180 && theta <= 270){
 8001820:	39b5      	subs	r1, #181	; 0xb5
 8001822:	2959      	cmp	r1, #89	; 0x59
    return -sinTable[theta - 180];
 8001824:	bf94      	ite	ls
 8001826:	3bb4      	subls	r3, #180	; 0xb4
    return -sinTable[360 - theta];
 8001828:	f5c3 73b4 	rsbhi	r3, r3, #360	; 0x168
 800182c:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
 8001830:	f1cb 0b00 	rsb	fp, fp, #0
 8001834:	fa0f fb8b 	sxth.w	fp, fp
 8001838:	e00c      	b.n	8001854 <modelPredictiveControl+0xd8>
 800183a:	bf00      	nop
 800183c:	200004fe 	.word	0x200004fe
 8001840:	b60b60b7 	.word	0xb60b60b7
 8001844:	20000014 	.word	0x20000014
 8001848:	20000510 	.word	0x20000510
    return sinTable[180 - theta];
 800184c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001850:	f932 b013 	ldrsh.w	fp, [r2, r3, lsl #1]
	computeSinCos();
	Ia = (float)Iab[0]/4096;
 8001854:	4beb      	ldr	r3, [pc, #940]	; (8001c04 <modelPredictiveControl+0x488>)
	Ic = -(Ia+Ib)/4096;
	clarkeTransform(Ia,Ib,Ic,&Ialbt);
	inverseParkTransform(0,0.3,&IalbtReq);

	for(i=0;i<7;i++){
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001856:	4cec      	ldr	r4, [pc, #944]	; (8001c08 <modelPredictiveControl+0x48c>)
	Ia = (float)Iab[0]/4096;
 8001858:	ed93 6a00 	vldr	s12, [r3]
	Ib = (float)Iab[1]/4096;
 800185c:	ed93 5a01 	vldr	s10, [r3, #4]
	Ia = (float)Iab[0]/4096;
 8001860:	ed9f 7aea 	vldr	s14, [pc, #936]	; 8001c0c <modelPredictiveControl+0x490>
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001864:	7863      	ldrb	r3, [r4, #1]
	Ic = -(Ia+Ib)/4096;
 8001866:	eddf 5aea 	vldr	s11, [pc, #936]	; 8001c10 <modelPredictiveControl+0x494>
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 800186a:	eddf 6aea 	vldr	s13, [pc, #936]	; 8001c14 <modelPredictiveControl+0x498>
 800186e:	eddf 2aea 	vldr	s5, [pc, #936]	; 8001c18 <modelPredictiveControl+0x49c>
	Xalbt->beta = (b-c)*250/433;
 8001872:	ed9f 3aea 	vldr	s6, [pc, #936]	; 8001c1c <modelPredictiveControl+0x4a0>
	Xalbt->alpha = d*cos000 - q*sin000;
 8001876:	eddf 3aea 	vldr	s7, [pc, #936]	; 8001c20 <modelPredictiveControl+0x4a4>

		for(j=0;j<2;j++){
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 800187a:	4eea      	ldr	r6, [pc, #936]	; (8001c24 <modelPredictiveControl+0x4a8>)
	Ib = (float)Iab[1]/4096;
 800187c:	4dea      	ldr	r5, [pc, #936]	; (8001c28 <modelPredictiveControl+0x4ac>)
	Ic = -(Ia+Ib)/4096;
 800187e:	4aeb      	ldr	r2, [pc, #940]	; (8001c2c <modelPredictiveControl+0x4b0>)
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001880:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 8001c40 <modelPredictiveControl+0x4c4>
	Ia = (float)Iab[0]/4096;
 8001884:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	Ib = (float)Iab[1]/4096;
 8001888:	eeb8 5a45 	vcvt.f32.u32	s10, s10
	Ia = (float)Iab[0]/4096;
 800188c:	ee26 6a07 	vmul.f32	s12, s12, s14
	Ib = (float)Iab[1]/4096;
 8001890:	ee25 5a07 	vmul.f32	s10, s10, s14
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	78a3      	ldrb	r3, [r4, #2]
	Ib = (float)Iab[1]/4096;
 800189a:	ed85 5a00 	vstr	s10, [r5]
	Ic = -(Ia+Ib)/4096;
 800189e:	ee36 7a05 	vadd.f32	s14, s12, s10
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80018a2:	ee04 3a90 	vmov	s9, r3
	Ic = -(Ia+Ib)/4096;
 80018a6:	ee67 5a25 	vmul.f32	s11, s14, s11
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80018aa:	eef8 4a64 	vcvt.f32.u32	s9, s9
 80018ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b2:	7823      	ldrb	r3, [r4, #0]
	Ic = -(Ia+Ib)/4096;
 80018b4:	edc2 5a00 	vstr	s11, [r2]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80018b8:	ee37 7aa4 	vadd.f32	s14, s15, s9
 80018bc:	ee35 2a25 	vadd.f32	s4, s10, s11
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80018c0:	ee04 3a10 	vmov	s8, r3
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80018c4:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 80018c8:	ee66 6ac2 	vnmul.f32	s13, s13, s4
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 80018cc:	4bd8      	ldr	r3, [pc, #864]	; (8001c30 <modelPredictiveControl+0x4b4>)
 80018ce:	4ad9      	ldr	r2, [pc, #868]	; (8001c34 <modelPredictiveControl+0x4b8>)
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 80018d0:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 80018d4:	f9b3 c000 	ldrsh.w	ip, [r3]
	Ia = (float)Iab[0]/4096;
 80018d8:	4bd7      	ldr	r3, [pc, #860]	; (8001c38 <modelPredictiveControl+0x4bc>)
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80018da:	eee6 6a22 	vfma.f32	s13, s12, s5
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 80018de:	f240 19a5 	movw	r9, #421	; 0x1a5
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80018e2:	eeb8 4a44 	vcvt.f32.u32	s8, s8
	Ia = (float)Iab[0]/4096;
 80018e6:	ed83 6a00 	vstr	s12, [r3]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80018ea:	eea4 7a22 	vfma.f32	s14, s8, s5
	Xalbt->beta = (b-c)*250/433;
 80018ee:	ee35 6a65 	vsub.f32	s12, s10, s11
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80018f2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	Xalbt->beta = (b-c)*250/433;
 80018f6:	ee77 7ae4 	vsub.f32	s15, s15, s9
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80018fa:	ee16 3a90 	vmov	r3, s13
 80018fe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	Xalbt->beta = (b-c)*250/433;
 8001902:	ee26 6a03 	vmul.f32	s12, s12, s6
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001906:	b219      	sxth	r1, r3
	Xalbt->beta = (b-c)*250/433;
 8001908:	eebd 6ac6 	vcvt.s32.f32	s12, s12
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 800190c:	ee17 3a10 	vmov	r3, s14
	Xalbt->beta = (b-c)*250/433;
 8001910:	ee67 7a83 	vmul.f32	s15, s15, s6
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001914:	fa0f fe83 	sxth.w	lr, r3
	Xalbt->beta = (b-c)*250/433;
 8001918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191c:	ee16 3a10 	vmov	r3, s12
	Xalbt->alpha = d*cos000 - q*sin000;
 8001920:	ee07 aa10 	vmov	s14, sl
	Xalbt->beta = (b-c)*250/433;
 8001924:	b218      	sxth	r0, r3
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001926:	ee17 3a90 	vmov	r3, s15
	Xalbt->alpha = d*cos000 - q*sin000;
 800192a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 800192e:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001932:	b21b      	sxth	r3, r3
	Xalbt->alpha = d*cos000 - q*sin000;
 8001934:	ee63 7ac7 	vnmul.f32	s15, s7, s14
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001938:	ebae 0e0c 	sub.w	lr, lr, ip
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 800193c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001940:	1bdb      	subs	r3, r3, r7
	Xalbt->alpha = d*cos000 - q*sin000;
 8001942:	ee07 ba10 	vmov	s14, fp
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001946:	fb09 fe0e 	mul.w	lr, r9, lr
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 800194a:	fb09 f303 	mul.w	r3, r9, r3
	Xalbt->alpha = d*cos000 - q*sin000;
 800194e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001952:	fb86 a90e 	smull	sl, r9, r6, lr
 8001956:	ea4f 7eee 	mov.w	lr, lr, asr #31
 800195a:	ebce 19a9 	rsb	r9, lr, r9, asr #6
	Xalbt->alpha = d*cos000 - q*sin000;
 800195e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001962:	fb86 e603 	smull	lr, r6, r6, r3
 8001966:	17db      	asrs	r3, r3, #31
 8001968:	ebc3 13a6 	rsb	r3, r3, r6, asr #6
	Xalbt->alpha = d*cos000 - q*sin000;
 800196c:	ee17 6a90 	vmov	r6, s15
	Xalbt->beta = d*sin000 + q*cos000;
 8001970:	ee27 7a23 	vmul.f32	s14, s14, s7
	Xalbt->alpha = d*cos000 - q*sin000;
 8001974:	fa0f fe86 	sxth.w	lr, r6
		}

		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001978:	fa1f f989 	uxth.w	r9, r9
 800197c:	fa1f f68e 	uxth.w	r6, lr
	Xalbt->beta = d*sin000 + q*cos000;
 8001980:	eefd 7ac7 	vcvt.s32.f32	s15, s14
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001984:	b29b      	uxth	r3, r3
 8001986:	f1c9 0a01 	rsb	sl, r9, #1
 800198a:	fb1a fa06 	smulbb	sl, sl, r6
 800198e:	4499      	add	r9, r3
 8001990:	ebaa 0a09 	sub.w	sl, sl, r9
	Xalbt->beta = d*sin000 + q*cos000;
 8001994:	ee17 9a90 	vmov	r9, s15
 8001998:	fa0f f989 	sxth.w	r9, r9
 800199c:	fa1f f589 	uxth.w	r5, r9
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 80019a0:	f1c3 0301 	rsb	r3, r3, #1
 80019a4:	fb13 a305 	smlabb	r3, r3, r5, sl
	Xalbt->alpha = d*cos000 - q*sin000;
 80019a8:	f8df a298 	ldr.w	sl, [pc, #664]	; 8001c44 <modelPredictiveControl+0x4c8>
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80019ac:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001c14 <modelPredictiveControl+0x498>
	Xalbt->alpha = d*cos000 - q*sin000;
 80019b0:	f8aa e000 	strh.w	lr, [sl]
	Xalbt->beta = d*sin000 + q*cos000;
 80019b4:	f8aa 9002 	strh.w	r9, [sl, #2]
	cos000 = cos2(theta);
 80019b8:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8001c48 <modelPredictiveControl+0x4cc>
 80019bc:	f9b2 9000 	ldrsh.w	r9, [r2]
 80019c0:	4a9e      	ldr	r2, [pc, #632]	; (8001c3c <modelPredictiveControl+0x4c0>)
 80019c2:	f8ae b000 	strh.w	fp, [lr]
 80019c6:	f892 e000 	ldrb.w	lr, [r2]
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80019ca:	7922      	ldrb	r2, [r4, #4]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80019cc:	eddf 5a92 	vldr	s11, [pc, #584]	; 8001c18 <modelPredictiveControl+0x49c>
	Xalbt->beta = (b-c)*250/433;
 80019d0:	ed9f 5a92 	vldr	s10, [pc, #584]	; 8001c1c <modelPredictiveControl+0x4a0>
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 80019d4:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8001c24 <modelPredictiveControl+0x4a8>
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80019d8:	f8a8 1000 	strh.w	r1, [r8]
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80019dc:	ee07 2a90 	vmov	s15, r2
 80019e0:	7962      	ldrb	r2, [r4, #5]
	Xalbt->beta = (b-c)*250/433;
 80019e2:	f8a8 0002 	strh.w	r0, [r8, #2]
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80019e6:	ee06 2a90 	vmov	s13, r2
 80019ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ee:	78e2      	ldrb	r2, [r4, #3]
 80019f0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80019f4:	ee06 2a10 	vmov	s12, r2
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 80019f8:	ee77 4aa6 	vadd.f32	s9, s15, s13
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 80019fc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001a00:	ee27 7a64 	vnmul.f32	s14, s14, s9
	Xalbt->beta = (b-c)*250/433;
 8001a04:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001a08:	eea6 7a25 	vfma.f32	s14, s12, s11
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001a0c:	b21b      	sxth	r3, r3

		if(costTemp < cost){
 8001a0e:	454b      	cmp	r3, r9
	Xalbt->beta = (b-c)*250/433;
 8001a10:	ee67 7a85 	vmul.f32	s15, s15, s10
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001a14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	Xalbt->beta = (b-c)*250/433;
 8001a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		if(costTemp < cost){
 8001a1c:	bfa8      	it	ge
 8001a1e:	464b      	movge	r3, r9
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001a20:	ee17 9a10 	vmov	r9, s14
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001a24:	ee17 2a90 	vmov	r2, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001a28:	fa0f f989 	sxth.w	r9, r9
 8001a2c:	eb09 0941 	add.w	r9, r9, r1, lsl #1
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001a30:	b212      	sxth	r2, r2
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001a32:	f240 1ba5 	movw	fp, #421	; 0x1a5
 8001a36:	eba9 090c 	sub.w	r9, r9, ip
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001a3a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8001a3e:	eba2 0207 	sub.w	r2, r2, r7
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001a42:	fb0b f909 	mul.w	r9, fp, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001a46:	fb0b f202 	mul.w	r2, fp, r2
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001a4a:	fb8a 8b09 	smull	r8, fp, sl, r9
 8001a4e:	ea4f 79e9 	mov.w	r9, r9, asr #31
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001a52:	fb8a 8a02 	smull	r8, sl, sl, r2
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001a56:	ebc9 19ab 	rsb	r9, r9, fp, asr #6
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001a5a:	ea4f 72e2 	mov.w	r2, r2, asr #31
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001a5e:	fa1f f989 	uxth.w	r9, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001a62:	ebc2 12aa 	rsb	r2, r2, sl, asr #6
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001a66:	b292      	uxth	r2, r2
 8001a68:	f1c9 0a01 	rsb	sl, r9, #1
 8001a6c:	fb1a fa06 	smulbb	sl, sl, r6
 8001a70:	4491      	add	r9, r2
 8001a72:	ebaa 0909 	sub.w	r9, sl, r9
 8001a76:	f1c2 0201 	rsb	r2, r2, #1
 8001a7a:	fb12 9205 	smlabb	r2, r2, r5, r9
 8001a7e:	b212      	sxth	r2, r2
	for(i=0;i<7;i++){
 8001a80:	bfb8      	it	lt
 8001a82:	f04f 0e00 	movlt.w	lr, #0
		if(costTemp < cost){
 8001a86:	4293      	cmp	r3, r2
 8001a88:	bfd8      	it	le
 8001a8a:	461a      	movle	r2, r3
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001a8c:	79e3      	ldrb	r3, [r4, #7]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001a8e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001c14 <modelPredictiveControl+0x498>
 8001a92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001c18 <modelPredictiveControl+0x49c>
	Xalbt->beta = (b-c)*250/433;
 8001a96:	ed9f 5a61 	vldr	s10, [pc, #388]	; 8001c1c <modelPredictiveControl+0x4a0>
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001a9a:	f8df a188 	ldr.w	sl, [pc, #392]	; 8001c24 <modelPredictiveControl+0x4a8>
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	7a23      	ldrb	r3, [r4, #8]
 8001aa4:	ee06 3a90 	vmov	s13, r3
 8001aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aac:	79a3      	ldrb	r3, [r4, #6]
 8001aae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001ab2:	ee06 3a10 	vmov	s12, r3
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001ab6:	ee76 4aa7 	vadd.f32	s9, s13, s15
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001aba:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001abe:	ee27 7a64 	vnmul.f32	s14, s14, s9
	Xalbt->beta = (b-c)*250/433;
 8001ac2:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001ac6:	eea6 7a25 	vfma.f32	s14, s12, s11
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001aca:	f240 1ba5 	movw	fp, #421	; 0x1a5
	for(i=0;i<7;i++){
 8001ace:	bfc8      	it	gt
 8001ad0:	f04f 0e01 	movgt.w	lr, #1
	Xalbt->beta = (b-c)*250/433;
 8001ad4:	ee67 7a85 	vmul.f32	s15, s15, s10
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001ad8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	Xalbt->beta = (b-c)*250/433;
 8001adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001ae0:	ee17 9a10 	vmov	r9, s14
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001ae4:	ee17 3a90 	vmov	r3, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001ae8:	fa0f f989 	sxth.w	r9, r9
 8001aec:	eb09 0941 	add.w	r9, r9, r1, lsl #1
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001af0:	b21b      	sxth	r3, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001af2:	eba9 090c 	sub.w	r9, r9, ip
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001af6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001afa:	1bdb      	subs	r3, r3, r7
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001afc:	fb0b f909 	mul.w	r9, fp, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001b00:	fb0b f303 	mul.w	r3, fp, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001b04:	fb8a 8b09 	smull	r8, fp, sl, r9
 8001b08:	ea4f 79e9 	mov.w	r9, r9, asr #31
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001b0c:	fb8a 8a03 	smull	r8, sl, sl, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001b10:	ebc9 19ab 	rsb	r9, r9, fp, asr #6
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001b14:	17db      	asrs	r3, r3, #31
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001b16:	fa1f f989 	uxth.w	r9, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001b1a:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f1c9 0a01 	rsb	sl, r9, #1
 8001b24:	fb1a fa06 	smulbb	sl, sl, r6
 8001b28:	4499      	add	r9, r3
 8001b2a:	ebaa 0909 	sub.w	r9, sl, r9
 8001b2e:	f1c3 0301 	rsb	r3, r3, #1
 8001b32:	fb13 9305 	smlabb	r3, r3, r5, r9
 8001b36:	b21b      	sxth	r3, r3
		if(costTemp < cost){
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bfa8      	it	ge
 8001b3c:	4613      	movge	r3, r2
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001b3e:	7aa2      	ldrb	r2, [r4, #10]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001b40:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001c14 <modelPredictiveControl+0x498>
 8001b44:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001c18 <modelPredictiveControl+0x49c>
	Xalbt->beta = (b-c)*250/433;
 8001b48:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8001c1c <modelPredictiveControl+0x4a0>
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001b4c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001c24 <modelPredictiveControl+0x4a8>
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001b50:	ee07 2a90 	vmov	s15, r2
 8001b54:	7ae2      	ldrb	r2, [r4, #11]
 8001b56:	ee06 2a90 	vmov	s13, r2
 8001b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5e:	7a62      	ldrb	r2, [r4, #9]
 8001b60:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001b64:	ee06 2a10 	vmov	s12, r2
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001b68:	ee76 4aa7 	vadd.f32	s9, s13, s15
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001b6c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001b70:	ee27 7a64 	vnmul.f32	s14, s14, s9
	Xalbt->beta = (b-c)*250/433;
 8001b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001b78:	eea6 7a25 	vfma.f32	s14, s12, s11
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001b7c:	f240 1ba5 	movw	fp, #421	; 0x1a5
	for(i=0;i<7;i++){
 8001b80:	bfb8      	it	lt
 8001b82:	f04f 0e02 	movlt.w	lr, #2
	Xalbt->beta = (b-c)*250/433;
 8001b86:	ee67 7a85 	vmul.f32	s15, s15, s10
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001b8a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	Xalbt->beta = (b-c)*250/433;
 8001b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001b92:	ee17 9a10 	vmov	r9, s14
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001b96:	ee17 2a90 	vmov	r2, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001b9a:	fa0f f989 	sxth.w	r9, r9
 8001b9e:	eb09 0941 	add.w	r9, r9, r1, lsl #1
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001ba2:	b212      	sxth	r2, r2
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001ba4:	eba9 090c 	sub.w	r9, r9, ip
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001ba8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8001bac:	1bd2      	subs	r2, r2, r7
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001bae:	fb0b f909 	mul.w	r9, fp, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001bb2:	fb0b f202 	mul.w	r2, fp, r2
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001bb6:	fb8a 8b09 	smull	r8, fp, sl, r9
 8001bba:	ea4f 79e9 	mov.w	r9, r9, asr #31
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001bbe:	fb8a 8a02 	smull	r8, sl, sl, r2
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001bc2:	ebc9 19ab 	rsb	r9, r9, fp, asr #6
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001bc6:	17d2      	asrs	r2, r2, #31
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001bc8:	fa1f fb89 	uxth.w	fp, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001bcc:	ebc2 12aa 	rsb	r2, r2, sl, asr #6
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001bd0:	fa1f f982 	uxth.w	r9, r2
 8001bd4:	f1cb 0201 	rsb	r2, fp, #1
 8001bd8:	fb12 f206 	smulbb	r2, r2, r6
 8001bdc:	44cb      	add	fp, r9
 8001bde:	eba2 0b0b 	sub.w	fp, r2, fp
 8001be2:	f1c9 0901 	rsb	r9, r9, #1
 8001be6:	fb19 b905 	smlabb	r9, r9, r5, fp
 8001bea:	fa0f f989 	sxth.w	r9, r9
		if(costTemp < cost){
 8001bee:	4599      	cmp	r9, r3
 8001bf0:	bfa8      	it	ge
 8001bf2:	4699      	movge	r9, r3
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001bf4:	7b63      	ldrb	r3, [r4, #13]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001bf6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c14 <modelPredictiveControl+0x498>
 8001bfa:	eddf 5a07 	vldr	s11, [pc, #28]	; 8001c18 <modelPredictiveControl+0x49c>
	Xalbt->beta = (b-c)*250/433;
 8001bfe:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8001c1c <modelPredictiveControl+0x4a0>
 8001c02:	e023      	b.n	8001c4c <modelPredictiveControl+0x4d0>
 8001c04:	20000504 	.word	0x20000504
 8001c08:	200000c8 	.word	0x200000c8
 8001c0c:	39800000 	.word	0x39800000
 8001c10:	b9800000 	.word	0xb9800000
 8001c14:	3eaaaaab 	.word	0x3eaaaaab
 8001c18:	3f2aaaab 	.word	0x3f2aaaab
 8001c1c:	3f13ce56 	.word	0x3f13ce56
 8001c20:	3e99999a 	.word	0x3e99999a
 8001c24:	10624dd3 	.word	0x10624dd3
 8001c28:	2000050c 	.word	0x2000050c
 8001c2c:	20000524 	.word	0x20000524
 8001c30:	20000548 	.word	0x20000548
 8001c34:	20000010 	.word	0x20000010
 8001c38:	200004e4 	.word	0x200004e4
 8001c3c:	2000012a 	.word	0x2000012a
 8001c40:	20000550 	.word	0x20000550
 8001c44:	20000540 	.word	0x20000540
 8001c48:	20000528 	.word	0x20000528
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001c4c:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8001f0c <modelPredictiveControl+0x790>
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	7ba3      	ldrb	r3, [r4, #14]
 8001c56:	ee06 3a90 	vmov	s13, r3
 8001c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5e:	7b23      	ldrb	r3, [r4, #12]
 8001c60:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001c64:	ee06 3a10 	vmov	s12, r3
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001c68:	ee76 4aa7 	vadd.f32	s9, s13, s15
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001c6c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001c70:	ee27 7a64 	vnmul.f32	s14, s14, s9
	Xalbt->beta = (b-c)*250/433;
 8001c74:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001c78:	eea6 7a25 	vfma.f32	s14, s12, s11
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001c7c:	f240 1ba5 	movw	fp, #421	; 0x1a5
	for(i=0;i<7;i++){
 8001c80:	bfb8      	it	lt
 8001c82:	f04f 0e03 	movlt.w	lr, #3
	Xalbt->beta = (b-c)*250/433;
 8001c86:	ee67 7a85 	vmul.f32	s15, s15, s10
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001c8a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	Xalbt->beta = (b-c)*250/433;
 8001c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001c92:	ee17 2a10 	vmov	r2, s14
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001c96:	ee17 3a90 	vmov	r3, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001c9a:	b212      	sxth	r2, r2
 8001c9c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001ca0:	b21b      	sxth	r3, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001ca2:	eba2 020c 	sub.w	r2, r2, ip
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001ca6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001caa:	1bdb      	subs	r3, r3, r7
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001cac:	fb0b f202 	mul.w	r2, fp, r2
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001cb0:	fb0b f303 	mul.w	r3, fp, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001cb4:	fb8a 8b02 	smull	r8, fp, sl, r2
 8001cb8:	17d2      	asrs	r2, r2, #31
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001cba:	fb8a 8a03 	smull	r8, sl, sl, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001cbe:	ebc2 12ab 	rsb	r2, r2, fp, asr #6
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001cc2:	17db      	asrs	r3, r3, #31
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001cc4:	fa1f fb82 	uxth.w	fp, r2
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001cc8:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	f1cb 0301 	rsb	r3, fp, #1
 8001cd2:	fb13 f306 	smulbb	r3, r3, r6
 8001cd6:	4493      	add	fp, r2
 8001cd8:	eba3 0b0b 	sub.w	fp, r3, fp
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001cdc:	7c23      	ldrb	r3, [r4, #16]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001cde:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001f00 <modelPredictiveControl+0x784>
 8001ce2:	eddf 5a88 	vldr	s11, [pc, #544]	; 8001f04 <modelPredictiveControl+0x788>
	Xalbt->beta = (b-c)*250/433;
 8001ce6:	ed9f 5a88 	vldr	s10, [pc, #544]	; 8001f08 <modelPredictiveControl+0x78c>
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001cea:	f8df a220 	ldr.w	sl, [pc, #544]	; 8001f0c <modelPredictiveControl+0x790>
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	7c63      	ldrb	r3, [r4, #17]
 8001cf4:	ee06 3a90 	vmov	s13, r3
 8001cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfc:	7be3      	ldrb	r3, [r4, #15]
 8001cfe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001d02:	ee06 3a10 	vmov	s12, r3
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001d06:	ee77 4aa6 	vadd.f32	s9, s15, s13
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001d0a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001d0e:	ee27 7a64 	vnmul.f32	s14, s14, s9
	Xalbt->beta = (b-c)*250/433;
 8001d12:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001d16:	eea6 7a25 	vfma.f32	s14, s12, s11
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001d1a:	f1c2 0201 	rsb	r2, r2, #1
 8001d1e:	fb12 b205 	smlabb	r2, r2, r5, fp
	Xalbt->beta = (b-c)*250/433;
 8001d22:	ee67 7a85 	vmul.f32	s15, s15, s10
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001d26:	b212      	sxth	r2, r2
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001d28:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		if(costTemp < cost){
 8001d2c:	454a      	cmp	r2, r9
	Xalbt->beta = (b-c)*250/433;
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		if(costTemp < cost){
 8001d32:	bfa8      	it	ge
 8001d34:	464a      	movge	r2, r9
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001d36:	ee17 9a10 	vmov	r9, s14
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001d3a:	ee17 3a90 	vmov	r3, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001d3e:	fa0f f989 	sxth.w	r9, r9
 8001d42:	eb09 0941 	add.w	r9, r9, r1, lsl #1
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001d46:	b21b      	sxth	r3, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001d48:	f240 1ba5 	movw	fp, #421	; 0x1a5
 8001d4c:	eba9 090c 	sub.w	r9, r9, ip
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001d50:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001d54:	eba3 0307 	sub.w	r3, r3, r7
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001d58:	fb0b f909 	mul.w	r9, fp, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001d5c:	fb0b f303 	mul.w	r3, fp, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001d60:	fb8a 8b09 	smull	r8, fp, sl, r9
 8001d64:	ea4f 79e9 	mov.w	r9, r9, asr #31
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001d68:	fb8a 8a03 	smull	r8, sl, sl, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001d6c:	ebc9 19ab 	rsb	r9, r9, fp, asr #6
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001d70:	ea4f 73e3 	mov.w	r3, r3, asr #31
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001d74:	fa1f fb89 	uxth.w	fp, r9
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001d78:	ebc3 13aa 	rsb	r3, r3, sl, asr #6
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001d7c:	fa1f f983 	uxth.w	r9, r3
 8001d80:	f1cb 0301 	rsb	r3, fp, #1
 8001d84:	fb13 f306 	smulbb	r3, r3, r6
 8001d88:	44cb      	add	fp, r9
 8001d8a:	eba3 0b0b 	sub.w	fp, r3, fp
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001d8e:	7ce3      	ldrb	r3, [r4, #19]
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001d90:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001f00 <modelPredictiveControl+0x784>
 8001d94:	eddf 5a5b 	vldr	s11, [pc, #364]	; 8001f04 <modelPredictiveControl+0x788>
	Xalbt->beta = (b-c)*250/433;
 8001d98:	ed9f 5a5b 	vldr	s10, [pc, #364]	; 8001f08 <modelPredictiveControl+0x78c>
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	7d23      	ldrb	r3, [r4, #20]
 8001da2:	ee06 3a90 	vmov	s13, r3
 8001da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001daa:	7ca3      	ldrb	r3, [r4, #18]
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001dac:	4c57      	ldr	r4, [pc, #348]	; (8001f0c <modelPredictiveControl+0x790>)
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001dae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001db2:	ee06 3a10 	vmov	s12, r3
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001db6:	ee76 4aa7 	vadd.f32	s9, s13, s15
		clarkeTransform(states[i][0],states[i][1],states[i][2],&Valbt);
 8001dba:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001dbe:	ee27 7a64 	vnmul.f32	s14, s14, s9
	Xalbt->beta = (b-c)*250/433;
 8001dc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001dc6:	eea6 7a25 	vfma.f32	s14, s12, s11
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001dca:	f1c9 0901 	rsb	r9, r9, #1
 8001dce:	fb19 b905 	smlabb	r9, r9, r5, fp
	Xalbt->beta = (b-c)*250/433;
 8001dd2:	ee67 7a85 	vmul.f32	s15, s15, s10
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001dd6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001dda:	fa0f f989 	sxth.w	r9, r9
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001dde:	ee17 3a10 	vmov	r3, s14
	Xalbt->beta = (b-c)*250/433;
 8001de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	for(i=0;i<7;i++){
 8001de6:	bfb8      	it	lt
 8001de8:	f04f 0e04 	movlt.w	lr, #4
		if(costTemp < cost){
 8001dec:	454a      	cmp	r2, r9
 8001dee:	bfd8      	it	le
 8001df0:	4691      	movle	r9, r2
	Xalbt->alpha = (a*2/3) - ((b+c)/3);
 8001df2:	b21a      	sxth	r2, r3
	Xalbt->beta = (b-c)*250/433;
 8001df4:	ee17 3a90 	vmov	r3, s15
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001df8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001dfc:	eba1 0c0c 	sub.w	ip, r1, ip
	Xalbt->beta = (b-c)*250/433;
 8001e00:	b219      	sxth	r1, r3
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001e02:	eb01 0340 	add.w	r3, r1, r0, lsl #1
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001e06:	f240 1aa5 	movw	sl, #421	; 0x1a5
 8001e0a:	fb0a fc0c 	mul.w	ip, sl, ip
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001e0e:	eba3 0307 	sub.w	r3, r3, r7
 8001e12:	fb0a f303 	mul.w	r3, sl, r3
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001e16:	fb84 700c 	smull	r7, r0, r4, ip
 8001e1a:	ea4f 77ec 	mov.w	r7, ip, asr #31
 8001e1e:	ebc7 17a0 	rsb	r7, r7, r0, asr #6
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001e22:	fb84 4003 	smull	r4, r0, r4, r3
 8001e26:	ea4f 73e3 	mov.w	r3, r3, asr #31
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001e2a:	fa1f fc87 	uxth.w	ip, r7
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001e2e:	ebc3 10a0 	rsb	r0, r3, r0, asr #6
		costTemp = square(IalbtReq.alpha - IalphaPred) + square(IalbtReq.beta - IbetaPred);
 8001e32:	b283      	uxth	r3, r0
 8001e34:	f1cc 0401 	rsb	r4, ip, #1
 8001e38:	fb14 f406 	smulbb	r4, r4, r6
 8001e3c:	449c      	add	ip, r3
 8001e3e:	eba4 040c 	sub.w	r4, r4, ip
 8001e42:	f1c3 0301 	rsb	r3, r3, #1
 8001e46:	fb13 4505 	smlabb	r5, r3, r5, r4
 8001e4a:	b22d      	sxth	r5, r5
	for(i=0;i<7;i++){
 8001e4c:	bfc8      	it	gt
 8001e4e:	f04f 0e05 	movgt.w	lr, #5
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <modelPredictiveControl+0x794>)
 8001e54:	4e2f      	ldr	r6, [pc, #188]	; (8001f14 <modelPredictiveControl+0x798>)
 8001e56:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8001f38 <modelPredictiveControl+0x7bc>
 8001e5a:	4c2f      	ldr	r4, [pc, #188]	; (8001f18 <modelPredictiveControl+0x79c>)
		if(costTemp < cost){
 8001e5c:	454d      	cmp	r5, r9
 8001e5e:	bfb8      	it	lt
 8001e60:	46a9      	movlt	r9, r5
 8001e62:	f8a3 9000 	strh.w	r9, [r3]
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <modelPredictiveControl+0x7a0>)
	for(i=0;i<7;i++){
 8001e68:	bfb8      	it	lt
 8001e6a:	f04f 0e06 	movlt.w	lr, #6
 8001e6e:	f883 e000 	strb.w	lr, [r3]
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <modelPredictiveControl+0x7a4>)
 8001e74:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8001f3c <modelPredictiveControl+0x7c0>
 8001e78:	801a      	strh	r2, [r3, #0]
			IalphaPred = (Valbt.alpha + 2*Ialbt.alpha - Ealbt.alpha)*421/1000;
 8001e7a:	b23f      	sxth	r7, r7
 8001e7c:	8037      	strh	r7, [r6, #0]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4f28      	ldr	r7, [pc, #160]	; (8001f24 <modelPredictiveControl+0x7a8>)
 8001e82:	f88c 2000 	strb.w	r2, [ip]
 8001e86:	8059      	strh	r1, [r3, #2]
			optimalVector = i;
			cost = costTemp;
		}
	}

	wt = i*60;
 8001e88:	4e27      	ldr	r6, [pc, #156]	; (8001f28 <modelPredictiveControl+0x7ac>)
 8001e8a:	f8ae 5000 	strh.w	r5, [lr]
	if(TIM2->ARR < TIM2->CNT){
 8001e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e92:	f04f 0c07 	mov.w	ip, #7
 8001e96:	f887 c000 	strb.w	ip, [r7]
	wt = i*60;
 8001e9a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
	if(TIM2->ARR < TIM2->CNT){
 8001e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	wt = i*60;
 8001ea0:	8032      	strh	r2, [r6, #0]
	if(TIM2->ARR < TIM2->CNT){
 8001ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			IbetaPred = (Valbt.beta + 2*Ialbt.beta - Ealbt.beta)*421/1000;
 8001ea4:	b200      	sxth	r0, r0

	if(i == 0){
		V = 0;
	} else {
		V = 0.7;
 8001ea6:	8020      	strh	r0, [r4, #0]
	if(TIM2->ARR < TIM2->CNT){
 8001ea8:	4291      	cmp	r1, r2
		V = 0.7;
 8001eaa:	4820      	ldr	r0, [pc, #128]	; (8001f2c <modelPredictiveControl+0x7b0>)
 8001eac:	4c20      	ldr	r4, [pc, #128]	; (8001f30 <modelPredictiveControl+0x7b4>)
 8001eae:	6004      	str	r4, [r0, #0]
		TIM2->CNT = 0;
 8001eb0:	bf3c      	itt	cc
 8001eb2:	2200      	movcc	r2, #0
 8001eb4:	625a      	strcc	r2, [r3, #36]	; 0x24
	}

	checkTimer();
}
 8001eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ((360+theta) - 360*(1+(theta/360)));
 8001eba:	481e      	ldr	r0, [pc, #120]	; (8001f34 <modelPredictiveControl+0x7b8>)
 8001ebc:	fb80 4003 	smull	r4, r0, r0, r3
 8001ec0:	4418      	add	r0, r3
 8001ec2:	17db      	asrs	r3, r3, #31
 8001ec4:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ed0:	f501 71e1 	add.w	r1, r1, #450	; 0x1c2
 8001ed4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001ed8:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8001edc:	b299      	uxth	r1, r3
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	e498      	b.n	8001814 <modelPredictiveControl+0x98>
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001eea:	b289      	uxth	r1, r1
 8001eec:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8001ef0:	f501 73b4 	add.w	r3, r1, #360	; 0x168
 8001ef4:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	e457      	b.n	80017ae <modelPredictiveControl+0x32>
 8001efe:	bf00      	nop
 8001f00:	3eaaaaab 	.word	0x3eaaaaab
 8001f04:	3f2aaaab 	.word	0x3f2aaaab
 8001f08:	3f13ce56 	.word	0x3f13ce56
 8001f0c:	10624dd3 	.word	0x10624dd3
 8001f10:	20000010 	.word	0x20000010
 8001f14:	20000538 	.word	0x20000538
 8001f18:	20000544 	.word	0x20000544
 8001f1c:	2000012a 	.word	0x2000012a
 8001f20:	20000518 	.word	0x20000518
 8001f24:	20000502 	.word	0x20000502
 8001f28:	20000130 	.word	0x20000130
 8001f2c:	20000004 	.word	0x20000004
 8001f30:	3f333333 	.word	0x3f333333
 8001f34:	b60b60b7 	.word	0xb60b60b7
 8001f38:	200004e2 	.word	0x200004e2
 8001f3c:	200004e8 	.word	0x200004e8

08001f40 <executeSetAlgorithm>:
 * This function executes set algorithms at regular interval
 * determined by TIM2
 *
 */
void executeSetAlgorithm(){
	if(isOpenLoopComplete){
 8001f40:	4912      	ldr	r1, [pc, #72]	; (8001f8c <executeSetAlgorithm+0x4c>)
 8001f42:	780a      	ldrb	r2, [r1, #0]
 8001f44:	b10a      	cbz	r2, 8001f4a <executeSetAlgorithm+0xa>
//		sixStepControl();
		modelPredictiveControl();
 8001f46:	f7ff bc19 	b.w	800177c <modelPredictiveControl>
	wt+=60;
 8001f4a:	4811      	ldr	r0, [pc, #68]	; (8001f90 <executeSetAlgorithm+0x50>)
 8001f4c:	8803      	ldrh	r3, [r0, #0]
 8001f4e:	333c      	adds	r3, #60	; 0x3c
 8001f50:	b29b      	uxth	r3, r3
	if(wt >= 360){
 8001f52:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001f56:	d209      	bcs.n	8001f6c <executeSetAlgorithm+0x2c>
	wt+=60;
 8001f58:	8003      	strh	r3, [r0, #0]
	if(TIM2->ARR < TIM2->CNT){
 8001f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f62:	4291      	cmp	r1, r2
		TIM2->CNT = 0;
 8001f64:	bf3c      	itt	cc
 8001f66:	2200      	movcc	r2, #0
 8001f68:	625a      	strcc	r2, [r3, #36]	; 0x24
	} else {
		openLoopControl();
	}
}
 8001f6a:	4770      	bx	lr
		if(TIM2->ARR > 9000){
 8001f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		wt = 0;
 8001f70:	8002      	strh	r2, [r0, #0]
		if(TIM2->ARR > 9000){
 8001f72:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f74:	f242 3228 	movw	r2, #9000	; 0x2328
 8001f78:	4290      	cmp	r0, r2
 8001f7a:	d903      	bls.n	8001f84 <executeSetAlgorithm+0x44>
			TIM2->ARR -= 10;
 8001f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7e:	3a0a      	subs	r2, #10
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f82:	e7ea      	b.n	8001f5a <executeSetAlgorithm+0x1a>
			isOpenLoopComplete = 1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	700b      	strb	r3, [r1, #0]
 8001f88:	e7e7      	b.n	8001f5a <executeSetAlgorithm+0x1a>
 8001f8a:	bf00      	nop
 8001f8c:	20000128 	.word	0x20000128
 8001f90:	20000130 	.word	0x20000130

08001f94 <startStop>:
/**
 * This function controls start/stop of motor with Blue button
 *
 */
void startStop(){
	if(!run){
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <startStop+0x10>)
 8001f96:	7813      	ldrb	r3, [r2, #0]
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	7013      	strb	r3, [r2, #0]
		run = 1;
	} else {
		run = 0;
	}
}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000012 	.word	0x20000012

08001fa8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa8:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <SystemInit+0x10>)
 8001faa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fc2:	490e      	ldr	r1, [pc, #56]	; (8001ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <LoopForever+0xe>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd8:	4c0b      	ldr	r4, [pc, #44]	; (8002008 <LoopForever+0x16>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fe6:	f7ff ffdf 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fea:	f002 fe33 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fee:	f7fe fc9f 	bl	8000930 <main>

08001ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ff2:	e7fe      	b.n	8001ff2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ff4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002000:	08004d08 	.word	0x08004d08
  ldr r2, =_sbss
 8002004:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002008:	20000558 	.word	0x20000558

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_InitTick+0x3c>)
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_InitTick+0x40>)
 8002016:	7812      	ldrb	r2, [r2, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
{
 800201a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002020:	fbb0 f0f2 	udiv	r0, r0, r2
 8002024:	fbb3 f0f0 	udiv	r0, r3, r0
 8002028:	f000 fdc0 	bl	8002bac <HAL_SYSTICK_Config>
 800202c:	b908      	cbnz	r0, 8002032 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	2d0f      	cmp	r5, #15
 8002030:	d901      	bls.n	8002036 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8002034:	bd38      	pop	{r3, r4, r5, pc}
 8002036:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002038:	4602      	mov	r2, r0
 800203a:	4629      	mov	r1, r5
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f000 fd6e 	bl	8002b20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_InitTick+0x44>)
 8002046:	4620      	mov	r0, r4
 8002048:	601d      	str	r5, [r3, #0]
}
 800204a:	bd38      	pop	{r3, r4, r5, pc}
 800204c:	200000e4 	.word	0x200000e4
 8002050:	200000e0 	.word	0x200000e0
 8002054:	200000e8 	.word	0x200000e8

08002058 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_Init+0x20>)
{
 800205a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 fd47 	bl	8002af8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	2004      	movs	r0, #4
 800206c:	f7ff ffd0 	bl	8002010 <HAL_InitTick>
  HAL_MspInit();
 8002070:	f7fe fee0 	bl	8000e34 <HAL_MspInit>
}
 8002074:	2000      	movs	r0, #0
 8002076:	bd08      	pop	{r3, pc}
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800207c:	4b01      	ldr	r3, [pc, #4]	; (8002084 <HAL_GetTick+0x8>)
 800207e:	6818      	ldr	r0, [r3, #0]
}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000554 	.word	0x20000554

08002088 <HAL_ADC_ConvCpltCallback>:
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <HAL_ADC_ConvHalfCpltCallback>:
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <HAL_ADC_ErrorCallback>:
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop

08002094 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002094:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002096:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800209e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020a6:	f7ff bff3 	b.w	8002090 <HAL_ADC_ErrorCallback>
 80020aa:	bf00      	nop

080020ac <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80020ae:	f7ff bfed 	b.w	800208c <HAL_ADC_ConvHalfCpltCallback>
 80020b2:	bf00      	nop

080020b4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80020bc:	d118      	bne.n	80020f0 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020c0:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020c8:	68ca      	ldr	r2, [r1, #12]
 80020ca:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80020ce:	d10c      	bne.n	80020ea <ADC_DMAConvCplt+0x36>
 80020d0:	7e5a      	ldrb	r2, [r3, #25]
 80020d2:	b952      	cbnz	r2, 80020ea <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020de:	04d2      	lsls	r2, r2, #19
 80020e0:	d403      	bmi.n	80020ea <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff bfcc 	b.w	8002088 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4718      	bx	r3
 80020f6:	bf00      	nop

080020f8 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020f8:	6802      	ldr	r2, [r0, #0]
{
 80020fa:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020fc:	6893      	ldr	r3, [r2, #8]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002106:	2000      	movs	r0, #0
}
 8002108:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800210a:	6811      	ldr	r1, [r2, #0]
 800210c:	07c9      	lsls	r1, r1, #31
 800210e:	d5fa      	bpl.n	8002106 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002110:	6891      	ldr	r1, [r2, #8]
 8002112:	f001 010d 	and.w	r1, r1, #13
 8002116:	2901      	cmp	r1, #1
 8002118:	4604      	mov	r4, r0
 800211a:	d009      	beq.n	8002130 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800211e:	f042 0210 	orr.w	r2, r2, #16
 8002122:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002126:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 800212a:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212c:	6462      	str	r2, [r4, #68]	; 0x44
}
 800212e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8002130:	6893      	ldr	r3, [r2, #8]
 8002132:	2103      	movs	r1, #3
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6093      	str	r3, [r2, #8]
 800213a:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 800213c:	f7ff ff9e 	bl	800207c <HAL_GetTick>
 8002140:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	07db      	lsls	r3, r3, #31
 8002148:	d5dd      	bpl.n	8002106 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800214a:	f7ff ff97 	bl	800207c <HAL_GetTick>
 800214e:	1b40      	subs	r0, r0, r5
 8002150:	2802      	cmp	r0, #2
 8002152:	d9f6      	bls.n	8002142 <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6463      	str	r3, [r4, #68]	; 0x44
 8002164:	2001      	movs	r0, #1
}
 8002166:	bd38      	pop	{r3, r4, r5, pc}

08002168 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002168:	6802      	ldr	r2, [r0, #0]
{
 800216a:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800216c:	6893      	ldr	r3, [r2, #8]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
{
 8002174:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002176:	d020      	beq.n	80021ba <ADC_Enable+0x52>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002178:	6891      	ldr	r1, [r2, #8]
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <ADC_Enable+0x5c>)
 800217c:	4219      	tst	r1, r3
 800217e:	d009      	beq.n	8002194 <ADC_Enable+0x2c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6463      	str	r3, [r4, #68]	; 0x44
 8002190:	2001      	movs	r0, #1
}
 8002192:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002194:	6893      	ldr	r3, [r2, #8]
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800219c:	f7ff ff6e 	bl	800207c <HAL_GetTick>
 80021a0:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021a2:	e004      	b.n	80021ae <ADC_Enable+0x46>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021a4:	f7ff ff6a 	bl	800207c <HAL_GetTick>
 80021a8:	1b43      	subs	r3, r0, r5
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d8e8      	bhi.n	8002180 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	07db      	lsls	r3, r3, #31
 80021b4:	d5f6      	bpl.n	80021a4 <ADC_Enable+0x3c>
  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
}
 80021b8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	07d9      	lsls	r1, r3, #31
 80021be:	d5db      	bpl.n	8002178 <ADC_Enable+0x10>
  return HAL_OK;
 80021c0:	2000      	movs	r0, #0
 80021c2:	e7f9      	b.n	80021b8 <ADC_Enable+0x50>
 80021c4:	8000003f 	.word	0x8000003f

080021c8 <HAL_ADC_Init>:
{
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80021d0:	2800      	cmp	r0, #0
 80021d2:	f000 809d 	beq.w	8002310 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021d8:	f013 0310 	ands.w	r3, r3, #16
 80021dc:	4604      	mov	r4, r0
 80021de:	d118      	bne.n	8002212 <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80021e0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	f000 8097 	beq.w	8002316 <HAL_ADC_Init+0x14e>
 80021e8:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021ea:	6891      	ldr	r1, [r2, #8]
 80021ec:	00cd      	lsls	r5, r1, #3
 80021ee:	f140 8083 	bpl.w	80022f8 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021f2:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021f4:	0088      	lsls	r0, r1, #2
 80021f6:	d47f      	bmi.n	80022f8 <HAL_ADC_Init+0x130>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80021fa:	06c9      	lsls	r1, r1, #27
 80021fc:	d400      	bmi.n	8002200 <HAL_ADC_Init+0x38>
 80021fe:	b163      	cbz	r3, 800221a <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8002200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002202:	f023 0312 	bic.w	r3, r3, #18
 8002206:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 800220a:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800220e:	b002      	add	sp, #8
 8002210:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002212:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002214:	06da      	lsls	r2, r3, #27
 8002216:	d4f3      	bmi.n	8002200 <HAL_ADC_Init+0x38>
 8002218:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800221a:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800221c:	f010 0004 	ands.w	r0, r0, #4
 8002220:	d1ee      	bne.n	8002200 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8002222:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002224:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002228:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8002230:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002232:	f000 80e3 	beq.w	80023fc <HAL_ADC_Init+0x234>
 8002236:	4b87      	ldr	r3, [pc, #540]	; (8002454 <HAL_ADC_Init+0x28c>)
 8002238:	429a      	cmp	r2, r3
 800223a:	f000 80e7 	beq.w	800240c <HAL_ADC_Init+0x244>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800223e:	4986      	ldr	r1, [pc, #536]	; (8002458 <HAL_ADC_Init+0x290>)
 8002240:	428a      	cmp	r2, r1
 8002242:	d075      	beq.n	8002330 <HAL_ADC_Init+0x168>
 8002244:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_ADC_Init+0x294>)
 8002246:	429a      	cmp	r2, r3
 8002248:	d073      	beq.n	8002332 <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800224a:	6893      	ldr	r3, [r2, #8]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b01      	cmp	r3, #1
 8002252:	f000 80ed 	beq.w	8002430 <HAL_ADC_Init+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002256:	4d82      	ldr	r5, [pc, #520]	; (8002460 <HAL_ADC_Init+0x298>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002258:	68ab      	ldr	r3, [r5, #8]
 800225a:	6861      	ldr	r1, [r4, #4]
 800225c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002260:	430b      	orrs	r3, r1
 8002262:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002264:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8002268:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800226a:	7e65      	ldrb	r5, [r4, #25]
 800226c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800226e:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002272:	2e01      	cmp	r6, #1
 8002274:	bf18      	it	ne
 8002276:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800227a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800227e:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002280:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002284:	f000 8095 	beq.w	80023b2 <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002288:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800228a:	2901      	cmp	r1, #1
 800228c:	d00d      	beq.n	80022aa <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800228e:	4872      	ldr	r0, [pc, #456]	; (8002458 <HAL_ADC_Init+0x290>)
 8002290:	4282      	cmp	r2, r0
 8002292:	f000 809e 	beq.w	80023d2 <HAL_ADC_Init+0x20a>
 8002296:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800229a:	4282      	cmp	r2, r0
 800229c:	f000 8099 	beq.w	80023d2 <HAL_ADC_Init+0x20a>
 80022a0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80022a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80022a6:	4303      	orrs	r3, r0
 80022a8:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022aa:	6891      	ldr	r1, [r2, #8]
 80022ac:	f011 0f0c 	tst.w	r1, #12
 80022b0:	d10c      	bne.n	80022cc <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022b2:	68d1      	ldr	r1, [r2, #12]
 80022b4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80022b8:	f021 0102 	bic.w	r1, r1, #2
 80022bc:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022be:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80022c2:	7e20      	ldrb	r0, [r4, #24]
 80022c4:	0049      	lsls	r1, r1, #1
 80022c6:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80022ca:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80022cc:	68d5      	ldr	r5, [r2, #12]
 80022ce:	4965      	ldr	r1, [pc, #404]	; (8002464 <HAL_ADC_Init+0x29c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d0:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80022d2:	4029      	ands	r1, r5
 80022d4:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d6:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80022d8:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022da:	d072      	beq.n	80023c2 <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022de:	f023 030f 	bic.w	r3, r3, #15
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	2000      	movs	r0, #0
 80022e6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80022e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6423      	str	r3, [r4, #64]	; 0x40
}
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80022f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022fa:	f023 0312 	bic.w	r3, r3, #18
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800230c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800230e:	e777      	b.n	8002200 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8002310:	2001      	movs	r0, #1
}
 8002312:	b002      	add	sp, #8
 8002314:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8002316:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 800231a:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 800231c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8002320:	f7fe fda2 	bl	8000e68 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002324:	6822      	ldr	r2, [r4, #0]
 8002326:	6893      	ldr	r3, [r2, #8]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	d511      	bpl.n	8002350 <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	462b      	mov	r3, r5
 800232e:	e75c      	b.n	80021ea <HAL_ADC_Init+0x22>
 8002330:	494a      	ldr	r1, [pc, #296]	; (800245c <HAL_ADC_Init+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002332:	4d4b      	ldr	r5, [pc, #300]	; (8002460 <HAL_ADC_Init+0x298>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002334:	6893      	ldr	r3, [r2, #8]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d061      	beq.n	8002402 <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800233e:	688b      	ldr	r3, [r1, #8]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d187      	bne.n	8002258 <HAL_ADC_Init+0x90>
 8002348:	680b      	ldr	r3, [r1, #0]
 800234a:	07db      	lsls	r3, r3, #31
 800234c:	d48a      	bmi.n	8002264 <HAL_ADC_Init+0x9c>
 800234e:	e783      	b.n	8002258 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff fed1 	bl	80020f8 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002356:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002358:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 800235a:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800235c:	f53f af44 	bmi.w	80021e8 <HAL_ADC_Init+0x20>
 8002360:	2800      	cmp	r0, #0
 8002362:	f47f af41 	bne.w	80021e8 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8002366:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002368:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	493f      	ldr	r1, [pc, #252]	; (8002468 <HAL_ADC_Init+0x2a0>)
 800236c:	4d3f      	ldr	r5, [pc, #252]	; (800246c <HAL_ADC_Init+0x2a4>)
 800236e:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002370:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8002374:	f020 0002 	bic.w	r0, r0, #2
 8002378:	f040 0002 	orr.w	r0, r0, #2
 800237c:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800237e:	6890      	ldr	r0, [r2, #8]
 8002380:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8002384:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002386:	fba5 0101 	umull	r0, r1, r5, r1
 800238a:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800238c:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800238e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002392:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002394:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002398:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800239a:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800239c:	9901      	ldr	r1, [sp, #4]
 800239e:	2900      	cmp	r1, #0
 80023a0:	f43f af23 	beq.w	80021ea <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80023a4:	9901      	ldr	r1, [sp, #4]
 80023a6:	3901      	subs	r1, #1
 80023a8:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80023aa:	9901      	ldr	r1, [sp, #4]
 80023ac:	2900      	cmp	r1, #0
 80023ae:	d1f9      	bne.n	80023a4 <HAL_ADC_Init+0x1dc>
 80023b0:	e71b      	b.n	80021ea <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023b2:	bb7d      	cbnz	r5, 8002414 <HAL_ADC_Init+0x24c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023b6:	3901      	subs	r1, #1
 80023b8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	e762      	b.n	8002288 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80023c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023c4:	69e3      	ldr	r3, [r4, #28]
 80023c6:	f021 010f 	bic.w	r1, r1, #15
 80023ca:	3b01      	subs	r3, #1
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6313      	str	r3, [r2, #48]	; 0x30
 80023d0:	e788      	b.n	80022e4 <HAL_ADC_Init+0x11c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023d2:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 80023d6:	d028      	beq.n	800242a <HAL_ADC_Init+0x262>
 80023d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80023dc:	d02d      	beq.n	800243a <HAL_ADC_Init+0x272>
 80023de:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 80023e2:	d02d      	beq.n	8002440 <HAL_ADC_Init+0x278>
 80023e4:	f5b1 5f8a 	cmp.w	r1, #4416	; 0x1140
 80023e8:	d02d      	beq.n	8002446 <HAL_ADC_Init+0x27e>
 80023ea:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 80023ee:	d02d      	beq.n	800244c <HAL_ADC_Init+0x284>
 80023f0:	f5b1 5f86 	cmp.w	r1, #4288	; 0x10c0
 80023f4:	bf08      	it	eq
 80023f6:	f44f 71c0 	moveq.w	r1, #384	; 0x180
 80023fa:	e753      	b.n	80022a4 <HAL_ADC_Init+0xdc>
 80023fc:	4915      	ldr	r1, [pc, #84]	; (8002454 <HAL_ADC_Init+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fe:	4d1c      	ldr	r5, [pc, #112]	; (8002470 <HAL_ADC_Init+0x2a8>)
 8002400:	e798      	b.n	8002334 <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002402:	6813      	ldr	r3, [r2, #0]
 8002404:	07de      	lsls	r6, r3, #31
 8002406:	f53f af2d 	bmi.w	8002264 <HAL_ADC_Init+0x9c>
 800240a:	e798      	b.n	800233e <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240c:	4d18      	ldr	r5, [pc, #96]	; (8002470 <HAL_ADC_Init+0x2a8>)
 800240e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002412:	e78f      	b.n	8002334 <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 8002414:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002416:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800241a:	f041 0120 	orr.w	r1, r1, #32
 800241e:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002420:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002422:	f041 0101 	orr.w	r1, r1, #1
 8002426:	6461      	str	r1, [r4, #68]	; 0x44
 8002428:	e72e      	b.n	8002288 <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800242a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800242e:	e739      	b.n	80022a4 <HAL_ADC_Init+0xdc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002430:	6813      	ldr	r3, [r2, #0]
 8002432:	07db      	lsls	r3, r3, #31
 8002434:	f53f af16 	bmi.w	8002264 <HAL_ADC_Init+0x9c>
 8002438:	e70d      	b.n	8002256 <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800243a:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800243e:	e731      	b.n	80022a4 <HAL_ADC_Init+0xdc>
 8002440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002444:	e72e      	b.n	80022a4 <HAL_ADC_Init+0xdc>
 8002446:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800244a:	e72b      	b.n	80022a4 <HAL_ADC_Init+0xdc>
 800244c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002450:	e728      	b.n	80022a4 <HAL_ADC_Init+0xdc>
 8002452:	bf00      	nop
 8002454:	50000100 	.word	0x50000100
 8002458:	50000400 	.word	0x50000400
 800245c:	50000500 	.word	0x50000500
 8002460:	50000700 	.word	0x50000700
 8002464:	fff0c007 	.word	0xfff0c007
 8002468:	200000e0 	.word	0x200000e0
 800246c:	431bde83 	.word	0x431bde83
 8002470:	50000300 	.word	0x50000300

08002474 <HAL_ADC_Start_DMA>:
{
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002478:	6800      	ldr	r0, [r0, #0]
 800247a:	6885      	ldr	r5, [r0, #8]
 800247c:	076d      	lsls	r5, r5, #29
 800247e:	d478      	bmi.n	8002572 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002480:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d074      	beq.n	8002572 <HAL_ADC_Start_DMA+0xfe>
 8002488:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800248a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800248e:	460f      	mov	r7, r1
 8002490:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 8002492:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002496:	d00f      	beq.n	80024b8 <HAL_ADC_Start_DMA+0x44>
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <HAL_ADC_Start_DMA+0x13c>)
 800249a:	4298      	cmp	r0, r3
 800249c:	d00c      	beq.n	80024b8 <HAL_ADC_Start_DMA+0x44>
 800249e:	4b45      	ldr	r3, [pc, #276]	; (80025b4 <HAL_ADC_Start_DMA+0x140>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f013 0f1f 	tst.w	r3, #31
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b96b      	cbnz	r3, 80024ca <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 80024ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 80024b2:	2501      	movs	r5, #1
}
 80024b4:	4628      	mov	r0, r5
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80024b8:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_ADC_Start_DMA+0x144>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f013 0f1f 	tst.w	r3, #31
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f1      	beq.n	80024ae <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 80024ca:	4620      	mov	r0, r4
 80024cc:	f7ff fe4c 	bl	8002168 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80024d0:	4605      	mov	r5, r0
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d150      	bne.n	8002578 <HAL_ADC_Start_DMA+0x104>
        ADC_STATE_CLR_SET(hadc->State,
 80024d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024d8:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80024da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024e6:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 80024ea:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024ec:	d056      	beq.n	800259c <HAL_ADC_Start_DMA+0x128>
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_ADC_Start_DMA+0x13c>)
 80024f0:	4299      	cmp	r1, r3
 80024f2:	d045      	beq.n	8002580 <HAL_ADC_Start_DMA+0x10c>
 80024f4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	06d8      	lsls	r0, r3, #27
 80024fc:	d050      	beq.n	80025a0 <HAL_ADC_Start_DMA+0x12c>
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_ADC_Start_DMA+0x148>)
 8002500:	4291      	cmp	r1, r2
 8002502:	d04d      	beq.n	80025a0 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250a:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800250c:	68d3      	ldr	r3, [r2, #12]
 800250e:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8002512:	b12b      	cbz	r3, 8002520 <HAL_ADC_Start_DMA+0xac>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002516:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800251a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800251e:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002520:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002522:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002524:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <HAL_ADC_Start_DMA+0x14c>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002526:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800252a:	bf1c      	itt	ne
 800252c:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 800252e:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002532:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8002534:	f04f 0c00 	mov.w	ip, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 800253a:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800253e:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002540:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <HAL_ADC_Start_DMA+0x154>)
 8002544:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002546:	231c      	movs	r3, #28
 8002548:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800254a:	684b      	ldr	r3, [r1, #4]
 800254c:	f043 0310 	orr.w	r3, r3, #16
 8002550:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002552:	68cb      	ldr	r3, [r1, #12]
 8002554:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002558:	463a      	mov	r2, r7
 800255a:	4633      	mov	r3, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800255c:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002560:	3140      	adds	r1, #64	; 0x40
 8002562:	f000 fb81 	bl	8002c68 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002566:	6822      	ldr	r2, [r4, #0]
 8002568:	6893      	ldr	r3, [r2, #8]
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6093      	str	r3, [r2, #8]
 8002570:	e7a0      	b.n	80024b4 <HAL_ADC_Start_DMA+0x40>
    tmp_hal_status = HAL_BUSY;
 8002572:	2502      	movs	r5, #2
}
 8002574:	4628      	mov	r0, r5
 8002576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8002578:	2300      	movs	r3, #0
 800257a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800257e:	e799      	b.n	80024b4 <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_ADC_Start_DMA+0x144>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	06db      	lsls	r3, r3, #27
 8002586:	d00b      	beq.n	80025a0 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002588:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800258a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002592:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002594:	68d3      	ldr	r3, [r2, #12]
 8002596:	f3c3 6340 	ubfx	r3, r3, #25, #1
 800259a:	e7ba      	b.n	8002512 <HAL_ADC_Start_DMA+0x9e>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_ADC_Start_DMA+0x144>)
 800259e:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025a6:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025a8:	68cb      	ldr	r3, [r1, #12]
 80025aa:	019a      	lsls	r2, r3, #6
 80025ac:	d5b8      	bpl.n	8002520 <HAL_ADC_Start_DMA+0xac>
 80025ae:	e7b1      	b.n	8002514 <HAL_ADC_Start_DMA+0xa0>
 80025b0:	50000100 	.word	0x50000100
 80025b4:	50000700 	.word	0x50000700
 80025b8:	50000300 	.word	0x50000300
 80025bc:	50000400 	.word	0x50000400
 80025c0:	080020b5 	.word	0x080020b5
 80025c4:	080020ad 	.word	0x080020ad
 80025c8:	08002095 	.word	0x08002095

080025cc <HAL_ADCEx_Calibration_Start>:
{
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80025ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d030      	beq.n	8002638 <HAL_ADCEx_Calibration_Start+0x6c>
 80025d6:	2701      	movs	r7, #1
 80025d8:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 80025dc:	4604      	mov	r4, r0
 80025de:	460d      	mov	r5, r1
 80025e0:	f7ff fd8a 	bl	80020f8 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80025e4:	4606      	mov	r6, r0
 80025e6:	bb10      	cbnz	r0, 800262e <HAL_ADCEx_Calibration_Start+0x62>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80025e8:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80025ea:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80025ec:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ee:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80025f0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80025f4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025f6:	d103      	bne.n	8002600 <HAL_ADCEx_Calibration_Start+0x34>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002606:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002608:	f7ff fd38 	bl	800207c <HAL_GetTick>
 800260c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800260e:	e004      	b.n	800261a <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002610:	f7ff fd34 	bl	800207c <HAL_GetTick>
 8002614:	1b43      	subs	r3, r0, r5
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d811      	bhi.n	800263e <HAL_ADCEx_Calibration_Start+0x72>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	dbf6      	blt.n	8002610 <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002624:	f023 0303 	bic.w	r3, r3, #3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800262e:	2300      	movs	r3, #0
 8002630:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002634:	4630      	mov	r0, r6
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8002638:	2602      	movs	r6, #2
}
 800263a:	4630      	mov	r0, r6
 800263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 800263e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8002640:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8002642:	f023 0312 	bic.w	r3, r3, #18
 8002646:	f043 0310 	orr.w	r3, r3, #16
        return HAL_ERROR;
 800264a:	2601      	movs	r6, #1
        __HAL_UNLOCK(hadc);
 800264c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        ADC_STATE_CLR_SET(hadc->State,
 8002650:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002652:	4630      	mov	r0, r6
 8002654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002656:	bf00      	nop

08002658 <HAL_ADC_ConfigChannel>:
{
 8002658:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800265a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800265e:	68cc      	ldr	r4, [r1, #12]
{
 8002660:	b082      	sub	sp, #8
 8002662:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002664:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8002666:	f04f 0000 	mov.w	r0, #0
 800266a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800266c:	f000 80fe 	beq.w	800286c <HAL_ADC_ConfigChannel+0x214>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002670:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002672:	2001      	movs	r0, #1
 8002674:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002678:	6895      	ldr	r5, [r2, #8]
 800267a:	076d      	lsls	r5, r5, #29
 800267c:	d436      	bmi.n	80026ec <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 800267e:	6848      	ldr	r0, [r1, #4]
 8002680:	2804      	cmp	r0, #4
 8002682:	f200 8088 	bhi.w	8002796 <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->SQR1,
 8002686:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800268a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800268c:	680d      	ldr	r5, [r1, #0]
 800268e:	0040      	lsls	r0, r0, #1
 8002690:	271f      	movs	r7, #31
 8002692:	4087      	lsls	r7, r0
 8002694:	ea26 0607 	bic.w	r6, r6, r7
 8002698:	fa05 f000 	lsl.w	r0, r5, r0
 800269c:	4330      	orrs	r0, r6
 800269e:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026a0:	6890      	ldr	r0, [r2, #8]
 80026a2:	f010 0f0c 	tst.w	r0, #12
 80026a6:	d134      	bne.n	8002712 <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026a8:	2d09      	cmp	r5, #9
 80026aa:	f200 8089 	bhi.w	80027c0 <HAL_ADC_ConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026ae:	6950      	ldr	r0, [r2, #20]
 80026b0:	688e      	ldr	r6, [r1, #8]
 80026b2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80026b6:	2707      	movs	r7, #7
 80026b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80026bc:	ea20 0007 	bic.w	r0, r0, r7
 80026c0:	fa06 f60c 	lsl.w	r6, r6, ip
 80026c4:	4330      	orrs	r0, r6
 80026c6:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026c8:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 80026cc:	68d0      	ldr	r0, [r2, #12]
 80026ce:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80026d2:	0040      	lsls	r0, r0, #1
 80026d4:	3e01      	subs	r6, #1
 80026d6:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80026da:	2e03      	cmp	r6, #3
 80026dc:	f200 8142 	bhi.w	8002964 <HAL_ADC_ConfigChannel+0x30c>
 80026e0:	e8df f016 	tbh	[pc, r6, lsl #1]
 80026e4:	0105000e 	.word	0x0105000e
 80026e8:	00f100fb 	.word	0x00f100fb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ee:	f042 0220 	orr.w	r2, r2, #32
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80026fa:	b002      	add	sp, #8
 80026fc:	bcf0      	pop	{r4, r5, r6, r7}
 80026fe:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002700:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8002702:	4eae      	ldr	r6, [pc, #696]	; (80029bc <HAL_ADC_ConfigChannel+0x364>)
 8002704:	403e      	ands	r6, r7
 8002706:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800270a:	4330      	orrs	r0, r6
 800270c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002710:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002712:	6890      	ldr	r0, [r2, #8]
 8002714:	f000 0003 	and.w	r0, r0, #3
 8002718:	2801      	cmp	r0, #1
 800271a:	f000 80a2 	beq.w	8002862 <HAL_ADC_ConfigChannel+0x20a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800271e:	2c01      	cmp	r4, #1
 8002720:	f000 80a8 	beq.w	8002874 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002724:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8002728:	2001      	movs	r0, #1
 800272a:	40a8      	lsls	r0, r5
 800272c:	ea21 0100 	bic.w	r1, r1, r0
 8002730:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002734:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002738:	d073      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x1ca>
 800273a:	49a1      	ldr	r1, [pc, #644]	; (80029c0 <HAL_ADC_ConfigChannel+0x368>)
 800273c:	428a      	cmp	r2, r1
 800273e:	d070      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x1ca>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002740:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002742:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002746:	d06f      	beq.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002748:	2d11      	cmp	r5, #17
 800274a:	f040 80aa 	bne.w	80028a2 <HAL_ADC_ConfigChannel+0x24a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800274e:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002750:	01c4      	lsls	r4, r0, #7
 8002752:	d46c      	bmi.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002754:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002758:	f000 80d3 	beq.w	8002902 <HAL_ADC_ConfigChannel+0x2aa>
 800275c:	4898      	ldr	r0, [pc, #608]	; (80029c0 <HAL_ADC_ConfigChannel+0x368>)
 800275e:	4282      	cmp	r2, r0
 8002760:	d067      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x1da>
 8002762:	4c98      	ldr	r4, [pc, #608]	; (80029c4 <HAL_ADC_ConfigChannel+0x36c>)
 8002764:	42a2      	cmp	r2, r4
 8002766:	f000 80f7 	beq.w	8002958 <HAL_ADC_ConfigChannel+0x300>
 800276a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800276e:	4282      	cmp	r2, r0
 8002770:	d061      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002772:	6890      	ldr	r0, [r2, #8]
 8002774:	f000 0003 	and.w	r0, r0, #3
 8002778:	2801      	cmp	r0, #1
 800277a:	f000 80ef 	beq.w	800295c <HAL_ADC_ConfigChannel+0x304>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800277e:	2d10      	cmp	r5, #16
 8002780:	d055      	beq.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002782:	2d11      	cmp	r5, #17
 8002784:	d053      	beq.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002786:	2d12      	cmp	r5, #18
 8002788:	d151      	bne.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800278a:	688a      	ldr	r2, [r1, #8]
 800278c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002790:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002792:	2000      	movs	r0, #0
 8002794:	e7ae      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 8002796:	2809      	cmp	r0, #9
 8002798:	d921      	bls.n	80027de <HAL_ADC_ConfigChannel+0x186>
    else if (sConfig->Rank < 15U)
 800279a:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800279c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80027a0:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80027a4:	f200 8083 	bhi.w	80028ae <HAL_ADC_ConfigChannel+0x256>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80027a8:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80027aa:	680d      	ldr	r5, [r1, #0]
 80027ac:	383c      	subs	r0, #60	; 0x3c
 80027ae:	271f      	movs	r7, #31
 80027b0:	4087      	lsls	r7, r0
 80027b2:	ea26 0607 	bic.w	r6, r6, r7
 80027b6:	fa05 f000 	lsl.w	r0, r5, r0
 80027ba:	4330      	orrs	r0, r6
 80027bc:	6390      	str	r0, [r2, #56]	; 0x38
 80027be:	e76f      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027c0:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80027c4:	6990      	ldr	r0, [r2, #24]
 80027c6:	688e      	ldr	r6, [r1, #8]
 80027c8:	3f1e      	subs	r7, #30
 80027ca:	f04f 0c07 	mov.w	ip, #7
 80027ce:	fa0c fc07 	lsl.w	ip, ip, r7
 80027d2:	ea20 000c 	bic.w	r0, r0, ip
 80027d6:	40be      	lsls	r6, r7
 80027d8:	4330      	orrs	r0, r6
 80027da:	6190      	str	r0, [r2, #24]
 80027dc:	e774      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 80027de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80027e2:	0040      	lsls	r0, r0, #1
 80027e4:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80027e6:	680d      	ldr	r5, [r1, #0]
 80027e8:	381e      	subs	r0, #30
 80027ea:	271f      	movs	r7, #31
 80027ec:	4087      	lsls	r7, r0
 80027ee:	ea26 0607 	bic.w	r6, r6, r7
 80027f2:	fa05 f000 	lsl.w	r0, r5, r0
 80027f6:	4330      	orrs	r0, r6
 80027f8:	6350      	str	r0, [r2, #52]	; 0x34
 80027fa:	e751      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x48>
        MODIFY_REG(hadc->Instance->SMPR1,
 80027fc:	1c68      	adds	r0, r5, #1
 80027fe:	688e      	ldr	r6, [r1, #8]
 8002800:	6954      	ldr	r4, [r2, #20]
 8002802:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002806:	2707      	movs	r7, #7
 8002808:	408f      	lsls	r7, r1
 800280a:	fa06 f001 	lsl.w	r0, r6, r1
 800280e:	ea24 0107 	bic.w	r1, r4, r7
 8002812:	4301      	orrs	r1, r0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002814:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002818:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281a:	d008      	beq.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
 800281c:	4968      	ldr	r1, [pc, #416]	; (80029c0 <HAL_ADC_ConfigChannel+0x368>)
 800281e:	428a      	cmp	r2, r1
 8002820:	d105      	bne.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002822:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002824:	4968      	ldr	r1, [pc, #416]	; (80029c8 <HAL_ADC_ConfigChannel+0x370>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002826:	d18f      	bne.n	8002748 <HAL_ADC_ConfigChannel+0xf0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002828:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800282a:	0206      	lsls	r6, r0, #8
 800282c:	d592      	bpl.n	8002754 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002830:	e760      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x9c>
 8002832:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002836:	6890      	ldr	r0, [r2, #8]
 8002838:	f000 0003 	and.w	r0, r0, #3
 800283c:	2801      	cmp	r0, #1
 800283e:	d062      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x2ae>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002840:	68a0      	ldr	r0, [r4, #8]
 8002842:	f000 0003 	and.w	r0, r0, #3
 8002846:	2801      	cmp	r0, #1
 8002848:	d066      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x2c0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800284a:	2d10      	cmp	r5, #16
 800284c:	d068      	beq.n	8002920 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800284e:	2d11      	cmp	r5, #17
 8002850:	d199      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x12e>
 8002852:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002856:	d1ea      	bne.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002858:	688a      	ldr	r2, [r1, #8]
 800285a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800285e:	608a      	str	r2, [r1, #8]
 8002860:	e7e5      	b.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002862:	6810      	ldr	r0, [r2, #0]
 8002864:	07c7      	lsls	r7, r0, #31
 8002866:	f57f af5a 	bpl.w	800271e <HAL_ADC_ConfigChannel+0xc6>
 800286a:	e7e0      	b.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
  __HAL_LOCK(hadc);
 800286c:	2002      	movs	r0, #2
}
 800286e:	b002      	add	sp, #8
 8002870:	bcf0      	pop	{r4, r5, r6, r7}
 8002872:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002874:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8002878:	40ac      	lsls	r4, r5
 800287a:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800287c:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800287e:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002882:	d9bb      	bls.n	80027fc <HAL_ADC_ConfigChannel+0x1a4>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002884:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8002888:	688e      	ldr	r6, [r1, #8]
 800288a:	6994      	ldr	r4, [r2, #24]
 800288c:	f1a0 011b 	sub.w	r1, r0, #27
 8002890:	2707      	movs	r7, #7
 8002892:	408f      	lsls	r7, r1
 8002894:	fa06 f001 	lsl.w	r0, r6, r1
 8002898:	ea24 0107 	bic.w	r1, r4, r7
 800289c:	4301      	orrs	r1, r0
 800289e:	6191      	str	r1, [r2, #24]
 80028a0:	e748      	b.n	8002734 <HAL_ADC_ConfigChannel+0xdc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028a2:	2d12      	cmp	r5, #18
 80028a4:	d1c3      	bne.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028a6:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028a8:	0240      	lsls	r0, r0, #9
 80028aa:	d4c0      	bmi.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
 80028ac:	e752      	b.n	8002754 <HAL_ADC_ConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028ae:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80028b0:	680d      	ldr	r5, [r1, #0]
 80028b2:	385a      	subs	r0, #90	; 0x5a
 80028b4:	271f      	movs	r7, #31
 80028b6:	4087      	lsls	r7, r0
 80028b8:	ea26 0607 	bic.w	r6, r6, r7
 80028bc:	fa05 f000 	lsl.w	r0, r5, r0
 80028c0:	4330      	orrs	r0, r6
 80028c2:	63d0      	str	r0, [r2, #60]	; 0x3c
 80028c4:	e6ec      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80028c6:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 80028c8:	4e3c      	ldr	r6, [pc, #240]	; (80029bc <HAL_ADC_ConfigChannel+0x364>)
 80028ca:	403e      	ands	r6, r7
 80028cc:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80028d0:	4330      	orrs	r0, r6
 80028d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80028d6:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80028d8:	e71b      	b.n	8002712 <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80028da:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80028dc:	4e37      	ldr	r6, [pc, #220]	; (80029bc <HAL_ADC_ConfigChannel+0x364>)
 80028de:	403e      	ands	r6, r7
 80028e0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80028e4:	4330      	orrs	r0, r6
 80028e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80028ea:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80028ec:	e711      	b.n	8002712 <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80028ee:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80028f0:	4e32      	ldr	r6, [pc, #200]	; (80029bc <HAL_ADC_ConfigChannel+0x364>)
 80028f2:	403e      	ands	r6, r7
 80028f4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80028f8:	4330      	orrs	r0, r6
 80028fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80028fe:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8002900:	e707      	b.n	8002712 <HAL_ADC_ConfigChannel+0xba>
 8002902:	4c2f      	ldr	r4, [pc, #188]	; (80029c0 <HAL_ADC_ConfigChannel+0x368>)
 8002904:	e797      	b.n	8002836 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002906:	6810      	ldr	r0, [r2, #0]
 8002908:	07c6      	lsls	r6, r0, #31
 800290a:	d599      	bpl.n	8002840 <HAL_ADC_ConfigChannel+0x1e8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800290e:	f042 0220 	orr.w	r2, r2, #32
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002914:	2001      	movs	r0, #1
 8002916:	e6ed      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x9c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002918:	6820      	ldr	r0, [r4, #0]
 800291a:	07c0      	lsls	r0, r0, #31
 800291c:	d4f6      	bmi.n	800290c <HAL_ADC_ConfigChannel+0x2b4>
 800291e:	e794      	b.n	800284a <HAL_ADC_ConfigChannel+0x1f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002920:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002924:	d183      	bne.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002926:	4a29      	ldr	r2, [pc, #164]	; (80029cc <HAL_ADC_ConfigChannel+0x374>)
 8002928:	4c29      	ldr	r4, [pc, #164]	; (80029d0 <HAL_ADC_ConfigChannel+0x378>)
 800292a:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800292c:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800292e:	fba4 4202 	umull	r4, r2, r4, r2
 8002932:	0c92      	lsrs	r2, r2, #18
 8002934:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002938:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800293a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800293e:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002940:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002942:	9a01      	ldr	r2, [sp, #4]
 8002944:	2a00      	cmp	r2, #0
 8002946:	f43f af72 	beq.w	800282e <HAL_ADC_ConfigChannel+0x1d6>
            wait_loop_index--;
 800294a:	9a01      	ldr	r2, [sp, #4]
 800294c:	3a01      	subs	r2, #1
 800294e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002950:	9a01      	ldr	r2, [sp, #4]
 8002952:	2a00      	cmp	r2, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_ConfigChannel+0x2f2>
 8002956:	e76a      	b.n	800282e <HAL_ADC_ConfigChannel+0x1d6>
 8002958:	4c1e      	ldr	r4, [pc, #120]	; (80029d4 <HAL_ADC_ConfigChannel+0x37c>)
 800295a:	e76c      	b.n	8002836 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	07d7      	lsls	r7, r2, #31
 8002960:	d4d4      	bmi.n	800290c <HAL_ADC_ConfigChannel+0x2b4>
 8002962:	e70c      	b.n	800277e <HAL_ADC_ConfigChannel+0x126>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002964:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002966:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800296a:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 800296e:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8002972:	d014      	beq.n	800299e <HAL_ADC_ConfigChannel+0x346>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002974:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002976:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800297a:	4286      	cmp	r6, r0
 800297c:	d014      	beq.n	80029a8 <HAL_ADC_ConfigChannel+0x350>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800297e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002980:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002984:	4286      	cmp	r6, r0
 8002986:	d014      	beq.n	80029b2 <HAL_ADC_ConfigChannel+0x35a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002988:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800298a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800298e:	4286      	cmp	r6, r0
 8002990:	f47f aebf 	bne.w	8002712 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002994:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002996:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800299a:	66d0      	str	r0, [r2, #108]	; 0x6c
 800299c:	e6b9      	b.n	8002712 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800299e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80029a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80029a4:	6610      	str	r0, [r2, #96]	; 0x60
 80029a6:	e7e5      	b.n	8002974 <HAL_ADC_ConfigChannel+0x31c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80029a8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80029aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80029ae:	6650      	str	r0, [r2, #100]	; 0x64
 80029b0:	e7e5      	b.n	800297e <HAL_ADC_ConfigChannel+0x326>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029b2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80029b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80029b8:	6690      	str	r0, [r2, #104]	; 0x68
 80029ba:	e7e5      	b.n	8002988 <HAL_ADC_ConfigChannel+0x330>
 80029bc:	83fff000 	.word	0x83fff000
 80029c0:	50000100 	.word	0x50000100
 80029c4:	50000400 	.word	0x50000400
 80029c8:	50000300 	.word	0x50000300
 80029cc:	200000e0 	.word	0x200000e0
 80029d0:	431bde83 	.word	0x431bde83
 80029d4:	50000500 	.word	0x50000500

080029d8 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029d8:	6803      	ldr	r3, [r0, #0]
 80029da:	4a43      	ldr	r2, [pc, #268]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80029e0:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e2:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029e4:	d00e      	beq.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00a      	beq.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 80029ea:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d049      	beq.n	8002a86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029f2:	4c3e      	ldr	r4, [pc, #248]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	d005      	beq.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
} 
 80029fa:	4618      	mov	r0, r3
 80029fc:	bcf0      	pop	{r4, r5, r6, r7}
 80029fe:	4770      	bx	lr
 8002a00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8002a04:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002a08:	2c01      	cmp	r4, #1
 8002a0a:	d041      	beq.n	8002a90 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8002a0c:	2401      	movs	r4, #1
 8002a0e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002a12:	689c      	ldr	r4, [r3, #8]
 8002a14:	0766      	lsls	r6, r4, #29
 8002a16:	d50a      	bpl.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a1a:	f043 0320 	orr.w	r3, r3, #32
 8002a1e:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 8002a28:	bcf0      	pop	{r4, r5, r6, r7}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002a2e:	6894      	ldr	r4, [r2, #8]
 8002a30:	0764      	lsls	r4, r4, #29
 8002a32:	d4f1      	bmi.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a38:	d044      	beq.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8002a3a:	4f2b      	ldr	r7, [pc, #172]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002a3c:	4c2c      	ldr	r4, [pc, #176]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002a3e:	4e2d      	ldr	r6, [pc, #180]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002a40:	42bb      	cmp	r3, r7
 8002a42:	bf18      	it	ne
 8002a44:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a46:	b33d      	cbz	r5, 8002a98 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a48:	68a7      	ldr	r7, [r4, #8]
 8002a4a:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 8002a4e:	684e      	ldr	r6, [r1, #4]
 8002a50:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 8002a54:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8002a58:	433e      	orrs	r6, r7
 8002a5a:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a5c:	689e      	ldr	r6, [r3, #8]
 8002a5e:	f006 0603 	and.w	r6, r6, #3
 8002a62:	2e01      	cmp	r6, #1
 8002a64:	d03c      	beq.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a66:	6893      	ldr	r3, [r2, #8]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d02f      	beq.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a70:	68a2      	ldr	r2, [r4, #8]
 8002a72:	688b      	ldr	r3, [r1, #8]
 8002a74:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002a78:	431d      	orrs	r5, r3
 8002a7a:	f022 020f 	bic.w	r2, r2, #15
 8002a7e:	4315      	orrs	r5, r2
 8002a80:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e7cd      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8002a86:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002a8c:	2c01      	cmp	r4, #1
 8002a8e:	d1bd      	bne.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x34>
 8002a90:	2302      	movs	r3, #2
} 
 8002a92:	4618      	mov	r0, r3
 8002a94:	bcf0      	pop	{r4, r5, r6, r7}
 8002a96:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a98:	68a1      	ldr	r1, [r4, #8]
 8002a9a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8002a9e:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	f001 0103 	and.w	r1, r1, #3
 8002aa6:	2901      	cmp	r1, #1
 8002aa8:	d016      	beq.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002aaa:	6893      	ldr	r3, [r2, #8]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d009      	beq.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002ab4:	68a3      	ldr	r3, [r4, #8]
 8002ab6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aba:	f023 030f 	bic.w	r3, r3, #15
 8002abe:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e7ae      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac4:	4c0a      	ldr	r4, [pc, #40]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002ac6:	e7be      	b.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	07db      	lsls	r3, r3, #31
 8002acc:	d4d9      	bmi.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002ace:	e7f1      	b.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ad0:	6813      	ldr	r3, [r2, #0]
 8002ad2:	07de      	lsls	r6, r3, #31
 8002ad4:	d4d5      	bmi.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002ad6:	e7cb      	b.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	07d9      	lsls	r1, r3, #31
 8002adc:	d4d1      	bmi.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002ade:	e7e4      	b.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	07df      	lsls	r7, r3, #31
 8002ae4:	d5bf      	bpl.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8002ae6:	e7cc      	b.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002ae8:	50000100 	.word	0x50000100
 8002aec:	50000500 	.word	0x50000500
 8002af0:	50000300 	.word	0x50000300
 8002af4:	50000700 	.word	0x50000700

08002af8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4908      	ldr	r1, [pc, #32]	; (8002b1c <HAL_NVIC_SetPriorityGrouping+0x24>)
 8002afa:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afe:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b00:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002b04:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b06:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b14:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8002b18:	60cb      	str	r3, [r1, #12]
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_NVIC_SetPriority+0x68>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2a:	f1c3 0507 	rsb	r5, r3, #7
 8002b2e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b30:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	bf28      	it	cs
 8002b36:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b38:	2c06      	cmp	r4, #6
 8002b3a:	d919      	bls.n	8002b70 <HAL_NVIC_SetPriority+0x50>
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b42:	409c      	lsls	r4, r3
 8002b44:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 34ff 	mov.w	r4, #4294967295
 8002b4c:	40ac      	lsls	r4, r5
 8002b4e:	ea21 0104 	bic.w	r1, r1, r4
 8002b52:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002b54:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b56:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	db0c      	blt.n	8002b76 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b60:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b64:	0109      	lsls	r1, r1, #4
 8002b66:	b2c9      	uxtb	r1, r1
 8002b68:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b6c:	bc30      	pop	{r4, r5}
 8002b6e:	4770      	bx	lr
 8002b70:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	4613      	mov	r3, r2
 8002b74:	e7e8      	b.n	8002b48 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_NVIC_SetPriority+0x6c>)
 8002b78:	f000 000f 	and.w	r0, r0, #15
 8002b7c:	0109      	lsls	r1, r1, #4
 8002b7e:	4403      	add	r3, r0
 8002b80:	b2c9      	uxtb	r1, r1
 8002b82:	7619      	strb	r1, [r3, #24]
 8002b84:	bc30      	pop	{r4, r5}
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00
 8002b8c:	e000ecfc 	.word	0xe000ecfc

08002b90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b90:	2800      	cmp	r0, #0
 8002b92:	db07      	blt.n	8002ba4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b94:	f000 011f 	and.w	r1, r0, #31
 8002b98:	4a03      	ldr	r2, [pc, #12]	; (8002ba8 <HAL_NVIC_EnableIRQ+0x18>)
 8002b9a:	0940      	lsrs	r0, r0, #5
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	408b      	lsls	r3, r1
 8002ba0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	3801      	subs	r0, #1
 8002bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bb2:	d20e      	bcs.n	8002bd2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	4c08      	ldr	r4, [pc, #32]	; (8002bdc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbc:	20f0      	movs	r0, #240	; 0xf0
 8002bbe:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8002bca:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	6019      	str	r1, [r3, #0]
 8002bd0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d034      	beq.n	8002c4e <HAL_DMA_Init+0x6e>
{ 
 8002be4:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002be6:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bea:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 8002bee:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002bf0:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf4:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 8002bf8:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfc:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 8002bfe:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c00:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c02:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c04:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c06:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c0a:	4c12      	ldr	r4, [pc, #72]	; (8002c54 <HAL_DMA_Init+0x74>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c0c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002c10:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c12:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 8002c14:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c16:	d910      	bls.n	8002c3a <HAL_DMA_Init+0x5a>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c18:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <HAL_DMA_Init+0x78>)
 8002c1a:	4910      	ldr	r1, [pc, #64]	; (8002c5c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8002c1c:	4c10      	ldr	r4, [pc, #64]	; (8002c60 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c1e:	4402      	add	r2, r0
 8002c20:	fba1 1202 	umull	r1, r2, r1, r2
 8002c24:	0912      	lsrs	r2, r2, #4
 8002c26:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 8002c28:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8002c2e:	8419      	strh	r1, [r3, #32]
 8002c30:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
}  
 8002c34:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c36:	6398      	str	r0, [r3, #56]	; 0x38
}  
 8002c38:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_DMA_Init+0x84>)
 8002c3c:	4907      	ldr	r1, [pc, #28]	; (8002c5c <HAL_DMA_Init+0x7c>)
 8002c3e:	4402      	add	r2, r0
 8002c40:	fba1 1202 	umull	r1, r2, r1, r2
 8002c44:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8002c46:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c4a:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8002c4c:	e7ec      	b.n	8002c28 <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 8002c4e:	2001      	movs	r0, #1
}  
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40020407 	.word	0x40020407
 8002c58:	bffdfbf8 	.word	0xbffdfbf8
 8002c5c:	cccccccd 	.word	0xcccccccd
 8002c60:	40020400 	.word	0x40020400
 8002c64:	bffdfff8 	.word	0xbffdfff8

08002c68 <HAL_DMA_Start_IT>:
{
 8002c68:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8002c6a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002c6e:	2c01      	cmp	r4, #1
 8002c70:	d039      	beq.n	8002ce6 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c72:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002c76:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c78:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8002c7a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c7e:	d005      	beq.n	8002c8c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8002c80:	2300      	movs	r3, #0
 8002c82:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8002c86:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8002c88:	2002      	movs	r0, #2
} 
 8002c8a:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c8c:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c8e:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c90:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c92:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c96:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c98:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c9a:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c9c:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ca0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ca2:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ca6:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ca8:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002caa:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002cac:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8002cae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb0:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 8002cb2:	bf0b      	itete	eq
 8002cb4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002cb6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002cb8:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002cba:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002cbc:	b153      	cbz	r3, 8002cd4 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	f043 030e 	orr.w	r3, r3, #14
 8002cc4:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2000      	movs	r0, #0
} 
 8002cd0:	bcf0      	pop	{r4, r5, r6, r7}
 8002cd2:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	f043 030a 	orr.w	r3, r3, #10
 8002cda:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	f023 0304 	bic.w	r3, r3, #4
 8002ce2:	6023      	str	r3, [r4, #0]
 8002ce4:	e7ef      	b.n	8002cc6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8002ce6:	2002      	movs	r0, #2
} 
 8002ce8:	bcf0      	pop	{r4, r5, r6, r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf0:	680e      	ldr	r6, [r1, #0]
{
 8002cf2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf4:	2e00      	cmp	r6, #0
 8002cf6:	f000 8091 	beq.w	8002e1c <HAL_GPIO_Init+0x130>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfa:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002eec <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8002cfe:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d00:	2201      	movs	r2, #1
 8002d02:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8002d06:	ea14 0c06 	ands.w	ip, r4, r6
 8002d0a:	f000 8082 	beq.w	8002e12 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d0e:	684d      	ldr	r5, [r1, #4]
 8002d10:	f025 0a10 	bic.w	sl, r5, #16
 8002d14:	f10a 32ff 	add.w	r2, sl, #4294967295
 8002d18:	2a01      	cmp	r2, #1
 8002d1a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d1e:	f04f 0203 	mov.w	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d22:	d97e      	bls.n	8002e22 <HAL_GPIO_Init+0x136>
      temp = GPIOx->PUPDR;
 8002d24:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d26:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d28:	fa02 f208 	lsl.w	r2, r2, r8
 8002d2c:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d30:	fa04 f408 	lsl.w	r4, r4, r8
 8002d34:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8002d36:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d38:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8002d3a:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d3c:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d40:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d42:	fa02 f208 	lsl.w	r2, r2, r8
 8002d46:	433a      	orrs	r2, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d48:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8002d4a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d4c:	d561      	bpl.n	8002e12 <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	4c60      	ldr	r4, [pc, #384]	; (8002ed0 <HAL_GPIO_Init+0x1e4>)
 8002d50:	69a2      	ldr	r2, [r4, #24]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	61a2      	str	r2, [r4, #24]
 8002d58:	69a2      	ldr	r2, [r4, #24]
 8002d5a:	f023 0703 	bic.w	r7, r3, #3
 8002d5e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002d62:	f002 0201 	and.w	r2, r2, #1
 8002d66:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002d6a:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d6c:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d70:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002d72:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d76:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8002d7a:	240f      	movs	r4, #15
 8002d7c:	fa04 f409 	lsl.w	r4, r4, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d80:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d84:	ea28 0404 	bic.w	r4, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d88:	d01c      	beq.n	8002dc4 <HAL_GPIO_Init+0xd8>
 8002d8a:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_GPIO_Init+0x1e8>)
 8002d8c:	4290      	cmp	r0, r2
 8002d8e:	f000 8088 	beq.w	8002ea2 <HAL_GPIO_Init+0x1b6>
 8002d92:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_GPIO_Init+0x1ec>)
 8002d94:	4290      	cmp	r0, r2
 8002d96:	f000 8089 	beq.w	8002eac <HAL_GPIO_Init+0x1c0>
 8002d9a:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_GPIO_Init+0x1f0>)
 8002d9c:	4290      	cmp	r0, r2
 8002d9e:	d07a      	beq.n	8002e96 <HAL_GPIO_Init+0x1aa>
 8002da0:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <HAL_GPIO_Init+0x1f4>)
 8002da2:	4290      	cmp	r0, r2
 8002da4:	f000 8088 	beq.w	8002eb8 <HAL_GPIO_Init+0x1cc>
 8002da8:	4a4e      	ldr	r2, [pc, #312]	; (8002ee4 <HAL_GPIO_Init+0x1f8>)
 8002daa:	4290      	cmp	r0, r2
 8002dac:	f000 808a 	beq.w	8002ec4 <HAL_GPIO_Init+0x1d8>
 8002db0:	4a4d      	ldr	r2, [pc, #308]	; (8002ee8 <HAL_GPIO_Init+0x1fc>)
 8002db2:	4290      	cmp	r0, r2
 8002db4:	bf0c      	ite	eq
 8002db6:	f04f 0806 	moveq.w	r8, #6
 8002dba:	f04f 0807 	movne.w	r8, #7
 8002dbe:	fa08 f209 	lsl.w	r2, r8, r9
 8002dc2:	4314      	orrs	r4, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dc4:	60bc      	str	r4, [r7, #8]
        temp = EXTI->IMR;
 8002dc6:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8002dca:	ea6f 070c 	mvn.w	r7, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dce:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8002dd0:	bf54      	ite	pl
 8002dd2:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8002dd4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002dd8:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR;
 8002ddc:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de0:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8002de2:	bf54      	ite	pl
 8002de4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8002de6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002dea:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df2:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8002df4:	bf54      	ite	pl
 8002df6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8002df8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002dfc:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR;
 8002e00:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e04:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8002e06:	bf54      	ite	pl
 8002e08:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8002e0a:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR = temp;
 8002e0e:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8002e12:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e14:	fa36 f203 	lsrs.w	r2, r6, r3
 8002e18:	f47f af72 	bne.w	8002d00 <HAL_GPIO_Init+0x14>
  }
}
 8002e1c:	b003      	add	sp, #12
 8002e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002e22:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e24:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e28:	fa02 f208 	lsl.w	r2, r2, r8
 8002e2c:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e30:	68cf      	ldr	r7, [r1, #12]
 8002e32:	fa07 f708 	lsl.w	r7, r7, r8
 8002e36:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8002e3a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e3c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e3e:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e42:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e46:	465c      	mov	r4, fp
 8002e48:	409c      	lsls	r4, r3
 8002e4a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8002e4c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002e4e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e50:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e54:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e58:	ea49 0404 	orr.w	r4, r9, r4
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5c:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e60:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8002e64:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e66:	f47f af68 	bne.w	8002d3a <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3u];
 8002e6a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002e6e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e72:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002e76:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	f04f 0b0f 	mov.w	fp, #15
 8002e80:	fa0b fb02 	lsl.w	fp, fp, r2
 8002e84:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e88:	690c      	ldr	r4, [r1, #16]
 8002e8a:	4094      	lsls	r4, r2
 8002e8c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3u] = temp;
 8002e90:	f8c9 4020 	str.w	r4, [r9, #32]
 8002e94:	e751      	b.n	8002d3a <HAL_GPIO_Init+0x4e>
 8002e96:	f04f 0803 	mov.w	r8, #3
 8002e9a:	fa08 f209 	lsl.w	r2, r8, r9
 8002e9e:	4314      	orrs	r4, r2
 8002ea0:	e790      	b.n	8002dc4 <HAL_GPIO_Init+0xd8>
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	fa02 f209 	lsl.w	r2, r2, r9
 8002ea8:	4314      	orrs	r4, r2
 8002eaa:	e78b      	b.n	8002dc4 <HAL_GPIO_Init+0xd8>
 8002eac:	f04f 0802 	mov.w	r8, #2
 8002eb0:	fa08 f209 	lsl.w	r2, r8, r9
 8002eb4:	4314      	orrs	r4, r2
 8002eb6:	e785      	b.n	8002dc4 <HAL_GPIO_Init+0xd8>
 8002eb8:	f04f 0804 	mov.w	r8, #4
 8002ebc:	fa08 f209 	lsl.w	r2, r8, r9
 8002ec0:	4314      	orrs	r4, r2
 8002ec2:	e77f      	b.n	8002dc4 <HAL_GPIO_Init+0xd8>
 8002ec4:	f04f 0805 	mov.w	r8, #5
 8002ec8:	fa08 f209 	lsl.w	r2, r8, r9
 8002ecc:	4314      	orrs	r4, r2
 8002ece:	e779      	b.n	8002dc4 <HAL_GPIO_Init+0xd8>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	48000800 	.word	0x48000800
 8002edc:	48000c00 	.word	0x48000c00
 8002ee0:	48001000 	.word	0x48001000
 8002ee4:	48001400 	.word	0x48001400
 8002ee8:	48001800 	.word	0x48001800
 8002eec:	40010400 	.word	0x40010400

08002ef0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef0:	b10a      	cbz	r2, 8002ef6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ef2:	6181      	str	r1, [r0, #24]
 8002ef4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop

08002efc <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002f02:	6951      	ldr	r1, [r2, #20]
 8002f04:	4201      	tst	r1, r0
 8002f06:	d100      	bne.n	8002f0a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002f08:	4770      	bx	lr
{
 8002f0a:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f0c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f0e:	f7ff fff5 	bl	8002efc <HAL_GPIO_EXTI_Callback>
}
 8002f12:	bd08      	pop	{r3, pc}
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	f000 827f 	beq.w	800341c <HAL_RCC_OscConfig+0x504>
{
 8002f1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f22:	6803      	ldr	r3, [r0, #0]
 8002f24:	07df      	lsls	r7, r3, #31
{
 8002f26:	b083      	sub	sp, #12
 8002f28:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	d53d      	bpl.n	8002fa8 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f2c:	49c1      	ldr	r1, [pc, #772]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 8002f2e:	684a      	ldr	r2, [r1, #4]
 8002f30:	f002 020c 	and.w	r2, r2, #12
 8002f34:	2a04      	cmp	r2, #4
 8002f36:	f000 815f 	beq.w	80031f8 <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f3a:	684a      	ldr	r2, [r1, #4]
 8002f3c:	f002 020c 	and.w	r2, r2, #12
 8002f40:	2a08      	cmp	r2, #8
 8002f42:	f000 8152 	beq.w	80031ea <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f46:	6863      	ldr	r3, [r4, #4]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	f000 816b 	beq.w	8003226 <HAL_RCC_OscConfig+0x30e>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 819a 	beq.w	800328a <HAL_RCC_OscConfig+0x372>
 8002f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5a:	f000 82bc 	beq.w	80034d6 <HAL_RCC_OscConfig+0x5be>
 8002f5e:	4bb5      	ldr	r3, [pc, #724]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f6e:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7ff f884 	bl	800207c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f74:	4faf      	ldr	r7, [pc, #700]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8002f76:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7c:	2601      	movs	r6, #1
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7ff f87c 	bl	800207c <HAL_GetTick>
 8002f84:	1b40      	subs	r0, r0, r5
 8002f86:	2864      	cmp	r0, #100	; 0x64
 8002f88:	f200 817b 	bhi.w	8003282 <HAL_RCC_OscConfig+0x36a>
 8002f8c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	fa98 f3a8 	rbit	r3, r8
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	fa06 f303 	lsl.w	r3, r6, r3
 8002fa2:	4213      	tst	r3, r2
 8002fa4:	d0ec      	beq.n	8002f80 <HAL_RCC_OscConfig+0x68>
 8002fa6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa8:	079e      	lsls	r6, r3, #30
 8002faa:	d542      	bpl.n	8003032 <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fac:	4aa1      	ldr	r2, [pc, #644]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 8002fae:	6851      	ldr	r1, [r2, #4]
 8002fb0:	f011 0f0c 	tst.w	r1, #12
 8002fb4:	f000 80cf 	beq.w	8003156 <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fb8:	6851      	ldr	r1, [r2, #4]
 8002fba:	f001 010c 	and.w	r1, r1, #12
 8002fbe:	2908      	cmp	r1, #8
 8002fc0:	f000 80c2 	beq.w	8003148 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc4:	68e2      	ldr	r2, [r4, #12]
 8002fc6:	2a00      	cmp	r2, #0
 8002fc8:	f000 81b8 	beq.w	800333c <HAL_RCC_OscConfig+0x424>
 8002fcc:	2201      	movs	r2, #1
 8002fce:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fde:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 8002fe2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fe4:	f7ff f84a 	bl	800207c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4e92      	ldr	r6, [pc, #584]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8002fea:	4605      	mov	r5, r0
 8002fec:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	e005      	b.n	8002ffe <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7ff f843 	bl	800207c <HAL_GetTick>
 8002ff6:	1b40      	subs	r0, r0, r5
 8002ff8:	2802      	cmp	r0, #2
 8002ffa:	f200 8142 	bhi.w	8003282 <HAL_RCC_OscConfig+0x36a>
 8002ffe:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	6832      	ldr	r2, [r6, #0]
 8003004:	fa98 f3a8 	rbit	r3, r8
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	fa07 f303 	lsl.w	r3, r7, r3
 8003014:	4213      	tst	r3, r2
 8003016:	d0ec      	beq.n	8002ff2 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	6831      	ldr	r1, [r6, #0]
 800301a:	22f8      	movs	r2, #248	; 0xf8
 800301c:	fa92 f2a2 	rbit	r2, r2
 8003020:	6923      	ldr	r3, [r4, #16]
 8003022:	fab2 f282 	clz	r2, r2
 8003026:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800302a:	4093      	lsls	r3, r2
 800302c:	430b      	orrs	r3, r1
 800302e:	6033      	str	r3, [r6, #0]
 8003030:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	071d      	lsls	r5, r3, #28
 8003034:	d421      	bmi.n	800307a <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003036:	0758      	lsls	r0, r3, #29
 8003038:	d54e      	bpl.n	80030d8 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b7e      	ldr	r3, [pc, #504]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	00d1      	lsls	r1, r2, #3
 8003040:	f140 80c7 	bpl.w	80031d2 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8003044:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4d7b      	ldr	r5, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x320>)
 800304a:	682b      	ldr	r3, [r5, #0]
 800304c:	05da      	lsls	r2, r3, #23
 800304e:	f140 8108 	bpl.w	8003262 <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003052:	68a3      	ldr	r3, [r4, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	f000 8197 	beq.w	8003388 <HAL_RCC_OscConfig+0x470>
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8138 	beq.w	80032d0 <HAL_RCC_OscConfig+0x3b8>
 8003060:	2b05      	cmp	r3, #5
 8003062:	4b74      	ldr	r3, [pc, #464]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	f000 81d1 	beq.w	800340c <HAL_RCC_OscConfig+0x4f4>
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	621a      	str	r2, [r3, #32]
 8003070:	6a1a      	ldr	r2, [r3, #32]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	621a      	str	r2, [r3, #32]
 8003078:	e18b      	b.n	8003392 <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307a:	6962      	ldr	r2, [r4, #20]
 800307c:	2a00      	cmp	r2, #0
 800307e:	f000 8081 	beq.w	8003184 <HAL_RCC_OscConfig+0x26c>
 8003082:	2201      	movs	r2, #1
 8003084:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8003088:	4b6c      	ldr	r3, [pc, #432]	; (800323c <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	4f6a      	ldr	r7, [pc, #424]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 800308c:	fab1 f181 	clz	r1, r1
 8003090:	440b      	add	r3, r1
 8003092:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 8003096:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003098:	f7fe fff0 	bl	800207c <HAL_GetTick>
 800309c:	f04f 0802 	mov.w	r8, #2
 80030a0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	e005      	b.n	80030b0 <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fe ffea 	bl	800207c <HAL_GetTick>
 80030a8:	1b40      	subs	r0, r0, r5
 80030aa:	2802      	cmp	r0, #2
 80030ac:	f200 80e9 	bhi.w	8003282 <HAL_RCC_OscConfig+0x36a>
 80030b0:	fa98 f3a8 	rbit	r3, r8
 80030b4:	fa98 f3a8 	rbit	r3, r8
 80030b8:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	fa98 f3a8 	rbit	r3, r8
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	fa06 f303 	lsl.w	r3, r6, r3
 80030ce:	4213      	tst	r3, r2
 80030d0:	d0e8      	beq.n	80030a4 <HAL_RCC_OscConfig+0x18c>
 80030d2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	0758      	lsls	r0, r3, #29
 80030d6:	d4b0      	bmi.n	800303a <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d8:	69a0      	ldr	r0, [r4, #24]
 80030da:	b388      	cbz	r0, 8003140 <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030dc:	4d55      	ldr	r5, [pc, #340]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 80030de:	686b      	ldr	r3, [r5, #4]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f000 8179 	beq.w	80033dc <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ea:	2802      	cmp	r0, #2
 80030ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f0:	f000 8196 	beq.w	8003420 <HAL_RCC_OscConfig+0x508>
 80030f4:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe ffb7 	bl	800207c <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310e:	462c      	mov	r4, r5
 8003110:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8003114:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	2601      	movs	r6, #1
 8003118:	e005      	b.n	8003126 <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe ffaf 	bl	800207c <HAL_GetTick>
 800311e:	1b40      	subs	r0, r0, r5
 8003120:	2802      	cmp	r0, #2
 8003122:	f200 80ae 	bhi.w	8003282 <HAL_RCC_OscConfig+0x36a>
 8003126:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	fa97 f3a7 	rbit	r3, r7
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	fa06 f303 	lsl.w	r3, r6, r3
 800313c:	4213      	tst	r3, r2
 800313e:	d1ec      	bne.n	800311a <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 8003140:	2000      	movs	r0, #0
}
 8003142:	b003      	add	sp, #12
 8003144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003148:	6852      	ldr	r2, [r2, #4]
 800314a:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 800314e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003152:	f47f af37 	bne.w	8002fc4 <HAL_RCC_OscConfig+0xac>
 8003156:	2202      	movs	r2, #2
 8003158:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315c:	4935      	ldr	r1, [pc, #212]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 800315e:	6808      	ldr	r0, [r1, #0]
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	f002 021f 	and.w	r2, r2, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	4202      	tst	r2, r0
 8003174:	d064      	beq.n	8003240 <HAL_RCC_OscConfig+0x328>
 8003176:	68e2      	ldr	r2, [r4, #12]
 8003178:	428a      	cmp	r2, r1
 800317a:	d061      	beq.n	8003240 <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
}
 800317e:	b003      	add	sp, #12
 8003180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003184:	2501      	movs	r5, #1
 8003186:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 800318a:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	4f29      	ldr	r7, [pc, #164]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 800318e:	fab1 f181 	clz	r1, r1
 8003192:	440b      	add	r3, r1
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	f04f 0802 	mov.w	r8, #2
 800319a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800319c:	f7fe ff6e 	bl	800207c <HAL_GetTick>
 80031a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a2:	e004      	b.n	80031ae <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe ff6a 	bl	800207c <HAL_GetTick>
 80031a8:	1b80      	subs	r0, r0, r6
 80031aa:	2802      	cmp	r0, #2
 80031ac:	d869      	bhi.n	8003282 <HAL_RCC_OscConfig+0x36a>
 80031ae:	fa98 f3a8 	rbit	r3, r8
 80031b2:	fa98 f3a8 	rbit	r3, r8
 80031b6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	fa98 f3a8 	rbit	r3, r8
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa05 f303 	lsl.w	r3, r5, r3
 80031cc:	4213      	tst	r3, r2
 80031ce:	d1e9      	bne.n	80031a4 <HAL_RCC_OscConfig+0x28c>
 80031d0:	e77f      	b.n	80030d2 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031d8:	61da      	str	r2, [r3, #28]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031e4:	f04f 0801 	mov.w	r8, #1
 80031e8:	e72e      	b.n	8003048 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031ea:	684a      	ldr	r2, [r1, #4]
 80031ec:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 80031f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80031f4:	f47f aea7 	bne.w	8002f46 <HAL_RCC_OscConfig+0x2e>
 80031f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031fc:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	490c      	ldr	r1, [pc, #48]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 8003202:	6808      	ldr	r0, [r1, #0]
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	f002 021f 	and.w	r2, r2, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	4202      	tst	r2, r0
 8003218:	f43f aec6 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x90>
 800321c:	6862      	ldr	r2, [r4, #4]
 800321e:	2a00      	cmp	r2, #0
 8003220:	f47f aec2 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x90>
 8003224:	e7aa      	b.n	800317c <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003226:	4a03      	ldr	r2, [pc, #12]	; (8003234 <HAL_RCC_OscConfig+0x31c>)
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003230:	e69e      	b.n	8002f70 <HAL_RCC_OscConfig+0x58>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
 800323c:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4dab      	ldr	r5, [pc, #684]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
 8003242:	21f8      	movs	r1, #248	; 0xf8
 8003244:	6828      	ldr	r0, [r5, #0]
 8003246:	fa91 f1a1 	rbit	r1, r1
 800324a:	6922      	ldr	r2, [r4, #16]
 800324c:	fab1 f181 	clz	r1, r1
 8003250:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003254:	408a      	lsls	r2, r1
 8003256:	4302      	orrs	r2, r0
 8003258:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325a:	071d      	lsls	r5, r3, #28
 800325c:	f57f aeeb 	bpl.w	8003036 <HAL_RCC_OscConfig+0x11e>
 8003260:	e70b      	b.n	800307a <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800326a:	f7fe ff07 	bl	800207c <HAL_GetTick>
 800326e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	05db      	lsls	r3, r3, #23
 8003274:	f53f aeed 	bmi.w	8003052 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003278:	f7fe ff00 	bl	800207c <HAL_GetTick>
 800327c:	1b80      	subs	r0, r0, r6
 800327e:	2864      	cmp	r0, #100	; 0x64
 8003280:	d9f6      	bls.n	8003270 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8003282:	2003      	movs	r0, #3
}
 8003284:	b003      	add	sp, #12
 8003286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328a:	4d99      	ldr	r5, [pc, #612]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	602b      	str	r3, [r5, #0]
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800329c:	f7fe feee 	bl	800207c <HAL_GetTick>
 80032a0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80032a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	2701      	movs	r7, #1
 80032a8:	e004      	b.n	80032b4 <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032aa:	f7fe fee7 	bl	800207c <HAL_GetTick>
 80032ae:	1b80      	subs	r0, r0, r6
 80032b0:	2864      	cmp	r0, #100	; 0x64
 80032b2:	d8e6      	bhi.n	8003282 <HAL_RCC_OscConfig+0x36a>
 80032b4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b8:	682a      	ldr	r2, [r5, #0]
 80032ba:	fa98 f3a8 	rbit	r3, r8
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	fa07 f303 	lsl.w	r3, r7, r3
 80032ca:	4213      	tst	r3, r2
 80032cc:	d1ed      	bne.n	80032aa <HAL_RCC_OscConfig+0x392>
 80032ce:	e66a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d0:	4d87      	ldr	r5, [pc, #540]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
 80032d2:	6a2b      	ldr	r3, [r5, #32]
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	622b      	str	r3, [r5, #32]
 80032da:	6a2b      	ldr	r3, [r5, #32]
 80032dc:	f023 0304 	bic.w	r3, r3, #4
 80032e0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80032e2:	f7fe fecb 	bl	800207c <HAL_GetTick>
 80032e6:	f04f 0902 	mov.w	r9, #2
 80032ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	2701      	movs	r7, #1
 80032ee:	e013      	b.n	8003318 <HAL_RCC_OscConfig+0x400>
 80032f0:	fa99 f3a9 	rbit	r3, r9
 80032f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80032f6:	fa99 f3a9 	rbit	r3, r9
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	fa07 f303 	lsl.w	r3, r7, r3
 8003306:	4213      	tst	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe feb7 	bl	800207c <HAL_GetTick>
 800330e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003312:	1b80      	subs	r0, r0, r6
 8003314:	4298      	cmp	r0, r3
 8003316:	d8b4      	bhi.n	8003282 <HAL_RCC_OscConfig+0x36a>
 8003318:	fa99 f3a9 	rbit	r3, r9
 800331c:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0e5      	beq.n	80032f0 <HAL_RCC_OscConfig+0x3d8>
 8003324:	6a2a      	ldr	r2, [r5, #32]
 8003326:	e7e6      	b.n	80032f6 <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 8003328:	f1b8 0f00 	cmp.w	r8, #0
 800332c:	f43f aed4 	beq.w	80030d8 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003330:	4a6f      	ldr	r2, [pc, #444]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
 8003332:	69d3      	ldr	r3, [r2, #28]
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	61d3      	str	r3, [r2, #28]
 800333a:	e6cd      	b.n	80030d8 <HAL_RCC_OscConfig+0x1c0>
 800333c:	2501      	movs	r5, #1
 800333e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800334a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800334e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003350:	4f67      	ldr	r7, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 8003352:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003354:	f7fe fe92 	bl	800207c <HAL_GetTick>
 8003358:	f04f 0802 	mov.w	r8, #2
 800335c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e004      	b.n	800336a <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003360:	f7fe fe8c 	bl	800207c <HAL_GetTick>
 8003364:	1b80      	subs	r0, r0, r6
 8003366:	2802      	cmp	r0, #2
 8003368:	d88b      	bhi.n	8003282 <HAL_RCC_OscConfig+0x36a>
 800336a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	fa98 f3a8 	rbit	r3, r8
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	fa05 f303 	lsl.w	r3, r5, r3
 8003380:	4213      	tst	r3, r2
 8003382:	d1ed      	bne.n	8003360 <HAL_RCC_OscConfig+0x448>
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	e654      	b.n	8003032 <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	4a59      	ldr	r2, [pc, #356]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
 800338a:	6a13      	ldr	r3, [r2, #32]
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003392:	f7fe fe73 	bl	800207c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003396:	4f56      	ldr	r7, [pc, #344]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8003398:	4605      	mov	r5, r0
 800339a:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	2601      	movs	r6, #1
 80033a0:	e014      	b.n	80033cc <HAL_RCC_OscConfig+0x4b4>
 80033a2:	fa99 f3a9 	rbit	r3, r9
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	fa99 f3a9 	rbit	r3, r9
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa06 f303 	lsl.w	r3, r6, r3
 80033b8:	4213      	tst	r3, r2
 80033ba:	d1b5      	bne.n	8003328 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe fe5e 	bl	800207c <HAL_GetTick>
 80033c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80033c4:	1b40      	subs	r0, r0, r5
 80033c6:	4298      	cmp	r0, r3
 80033c8:	f63f af5b 	bhi.w	8003282 <HAL_RCC_OscConfig+0x36a>
 80033cc:	fa99 f3a9 	rbit	r3, r9
 80033d0:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0e4      	beq.n	80033a2 <HAL_RCC_OscConfig+0x48a>
 80033d8:	6a3a      	ldr	r2, [r7, #32]
 80033da:	e7e5      	b.n	80033a8 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	2801      	cmp	r0, #1
 80033de:	f43f aeb0 	beq.w	8003142 <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 80033e2:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033e4:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 80033e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033e8:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 80033ec:	4288      	cmp	r0, r1
 80033ee:	f47f aec5 	bne.w	800317c <HAL_RCC_OscConfig+0x264>
 80033f2:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033f4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033f8:	428a      	cmp	r2, r1
 80033fa:	f47f aebf 	bne.w	800317c <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003400:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 8003404:	1a18      	subs	r0, r3, r0
 8003406:	bf18      	it	ne
 8003408:	2001      	movne	r0, #1
 800340a:	e69a      	b.n	8003142 <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	f042 0204 	orr.w	r2, r2, #4
 8003410:	621a      	str	r2, [r3, #32]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	621a      	str	r2, [r3, #32]
 800341a:	e7ba      	b.n	8003392 <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
}
 800341e:	4770      	bx	lr
 8003420:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800342c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003436:	f7fe fe21 	bl	800207c <HAL_GetTick>
 800343a:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800343e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	2701      	movs	r7, #1
 8003442:	e005      	b.n	8003450 <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fe1a 	bl	800207c <HAL_GetTick>
 8003448:	1b80      	subs	r0, r0, r6
 800344a:	2802      	cmp	r0, #2
 800344c:	f63f af19 	bhi.w	8003282 <HAL_RCC_OscConfig+0x36a>
 8003450:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003454:	682a      	ldr	r2, [r5, #0]
 8003456:	fa98 f3a8 	rbit	r3, r8
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	fa07 f303 	lsl.w	r3, r7, r3
 8003466:	4213      	tst	r3, r2
 8003468:	d1ec      	bne.n	8003444 <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800346c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800346e:	f023 030f 	bic.w	r3, r3, #15
 8003472:	4313      	orrs	r3, r2
 8003474:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003476:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 800347a:	686a      	ldr	r2, [r5, #4]
 800347c:	430b      	orrs	r3, r1
 800347e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8003482:	4313      	orrs	r3, r2
 8003484:	606b      	str	r3, [r5, #4]
 8003486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800348a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003496:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800349a:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800349c:	4e14      	ldr	r6, [pc, #80]	; (80034f0 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 800349e:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 80034a0:	f7fe fdec 	bl	800207c <HAL_GetTick>
 80034a4:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80034a8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034aa:	2501      	movs	r5, #1
 80034ac:	e005      	b.n	80034ba <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fde5 	bl	800207c <HAL_GetTick>
 80034b2:	1b00      	subs	r0, r0, r4
 80034b4:	2802      	cmp	r0, #2
 80034b6:	f63f aee4 	bhi.w	8003282 <HAL_RCC_OscConfig+0x36a>
 80034ba:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034be:	6832      	ldr	r2, [r6, #0]
 80034c0:	fa98 f3a8 	rbit	r3, r8
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa05 f303 	lsl.w	r3, r5, r3
 80034d0:	4213      	tst	r3, r2
 80034d2:	d0ec      	beq.n	80034ae <HAL_RCC_OscConfig+0x596>
 80034d4:	e634      	b.n	8003140 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034da:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e53f      	b.n	8002f70 <HAL_RCC_OscConfig+0x58>
 80034f0:	40021000 	.word	0x40021000

080034f4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f4:	2800      	cmp	r0, #0
 80034f6:	f000 80c4 	beq.w	8003682 <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034fa:	4a6d      	ldr	r2, [pc, #436]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	6813      	ldr	r3, [r2, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	428b      	cmp	r3, r1
{
 8003504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003508:	460d      	mov	r5, r1
 800350a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	d20c      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	f023 0307 	bic.w	r3, r3, #7
 8003514:	430b      	orrs	r3, r1
 8003516:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003518:	6813      	ldr	r3, [r2, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	428b      	cmp	r3, r1
 8003520:	d002      	beq.n	8003528 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003522:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8003524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	0798      	lsls	r0, r3, #30
 800352c:	d506      	bpl.n	800353c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352e:	4961      	ldr	r1, [pc, #388]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	68a0      	ldr	r0, [r4, #8]
 8003532:	684a      	ldr	r2, [r1, #4]
 8003534:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003538:	4302      	orrs	r2, r0
 800353a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353c:	07d9      	lsls	r1, r3, #31
 800353e:	d52f      	bpl.n	80035a0 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	6861      	ldr	r1, [r4, #4]
 8003542:	2901      	cmp	r1, #1
 8003544:	f000 809f 	beq.w	8003686 <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003548:	2902      	cmp	r1, #2
 800354a:	f000 8087 	beq.w	800365c <HAL_RCC_ClockConfig+0x168>
 800354e:	2202      	movs	r2, #2
 8003550:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b57      	ldr	r3, [pc, #348]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	fa92 f2a2 	rbit	r2, r2
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2301      	movs	r3, #1
 8003566:	fa03 f202 	lsl.w	r2, r3, r2
 800356a:	4202      	tst	r2, r0
 800356c:	d0d9      	beq.n	8003522 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4e51      	ldr	r6, [pc, #324]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	6873      	ldr	r3, [r6, #4]
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	430b      	orrs	r3, r1
 8003578:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800357a:	f7fe fd7f 	bl	800207c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003582:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003584:	e005      	b.n	8003592 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003586:	f7fe fd79 	bl	800207c <HAL_GetTick>
 800358a:	1bc0      	subs	r0, r0, r7
 800358c:	4540      	cmp	r0, r8
 800358e:	f200 808c 	bhi.w	80036aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	6873      	ldr	r3, [r6, #4]
 8003594:	6862      	ldr	r2, [r4, #4]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800359e:	d1f2      	bne.n	8003586 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a0:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	d909      	bls.n	80035c0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	432b      	orrs	r3, r5
 80035b4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	42ab      	cmp	r3, r5
 80035be:	d1b0      	bne.n	8003522 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	075a      	lsls	r2, r3, #29
 80035c4:	d506      	bpl.n	80035d4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c6:	493b      	ldr	r1, [pc, #236]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	68e0      	ldr	r0, [r4, #12]
 80035ca:	684a      	ldr	r2, [r1, #4]
 80035cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035d0:	4302      	orrs	r2, r0
 80035d2:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	071b      	lsls	r3, r3, #28
 80035d6:	d507      	bpl.n	80035e8 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d8:	4a36      	ldr	r2, [pc, #216]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 80035da:	6921      	ldr	r1, [r4, #16]
 80035dc:	6853      	ldr	r3, [r2, #4]
 80035de:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80035e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035e6:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80035e8:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ea:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ec:	f003 010c 	and.w	r1, r3, #12
 80035f0:	2908      	cmp	r1, #8
 80035f2:	d017      	beq.n	8003624 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f4:	4930      	ldr	r1, [pc, #192]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035f6:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	22f0      	movs	r2, #240	; 0xf0
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	fa92 f2a2 	rbit	r2, r2
 8003600:	fab2 f282 	clz	r2, r2
 8003604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003608:	40d3      	lsrs	r3, r2
 800360a:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 800360c:	482c      	ldr	r0, [pc, #176]	; (80036c0 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8003612:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003614:	fa21 f303 	lsr.w	r3, r1, r3
 8003618:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800361a:	f7fe fcf9 	bl	8002010 <HAL_InitTick>
  return HAL_OK;
 800361e:	2000      	movs	r0, #0
}
 8003620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003624:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8003628:	fa91 f1a1 	rbit	r1, r1
 800362c:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800362e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003630:	fab1 f181 	clz	r1, r1
 8003634:	fa90 f0a0 	rbit	r0, r0
 8003638:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800363c:	40cb      	lsrs	r3, r1
 800363e:	4922      	ldr	r1, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003640:	4c22      	ldr	r4, [pc, #136]	; (80036cc <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003642:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003644:	491c      	ldr	r1, [pc, #112]	; (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003646:	fab0 f080 	clz	r0, r0
 800364a:	f002 020f 	and.w	r2, r2, #15
 800364e:	40c2      	lsrs	r2, r0
 8003650:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003652:	fbb1 f1f2 	udiv	r1, r1, r2
 8003656:	fb03 f101 	mul.w	r1, r3, r1
 800365a:	e7cc      	b.n	80035f6 <HAL_RCC_ClockConfig+0x102>
 800365c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003660:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003666:	6810      	ldr	r0, [r2, #0]
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2201      	movs	r2, #1
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	4203      	tst	r3, r0
 800367c:	f47f af77 	bne.w	800356e <HAL_RCC_ClockConfig+0x7a>
 8003680:	e74f      	b.n	8003522 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
}
 8003684:	4770      	bx	lr
 8003686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800368a:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	fab2 f282 	clz	r2, r2
 800369a:	f002 021f 	and.w	r2, r2, #31
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	421a      	tst	r2, r3
 80036a4:	f47f af63 	bne.w	800356e <HAL_RCC_ClockConfig+0x7a>
 80036a8:	e73b      	b.n	8003522 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80036aa:	2003      	movs	r0, #3
 80036ac:	e73a      	b.n	8003524 <HAL_RCC_ClockConfig+0x30>
 80036ae:	bf00      	nop
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	007a1200 	.word	0x007a1200
 80036bc:	08004cc4 	.word	0x08004cc4
 80036c0:	200000e8 	.word	0x200000e8
 80036c4:	200000e0 	.word	0x200000e0
 80036c8:	08004cdc 	.word	0x08004cdc
 80036cc:	08004cec 	.word	0x08004cec

080036d0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <HAL_RCC_GetSysClockFreq+0x4c>)
 80036d2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80036d4:	f003 010c 	and.w	r1, r3, #12
 80036d8:	2908      	cmp	r1, #8
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80036dc:	4810      	ldr	r0, [pc, #64]	; (8003720 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80036de:	4770      	bx	lr
{
 80036e0:	b430      	push	{r4, r5}
 80036e2:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 80036e6:	fa90 f0a0 	rbit	r0, r0
 80036ea:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036ee:	fab0 f080 	clz	r0, r0
 80036f2:	fa91 f1a1 	rbit	r1, r1
 80036f6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036fa:	40c3      	lsrs	r3, r0
 80036fc:	4809      	ldr	r0, [pc, #36]	; (8003724 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036fe:	4d0a      	ldr	r5, [pc, #40]	; (8003728 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003700:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003702:	4c07      	ldr	r4, [pc, #28]	; (8003720 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003704:	fab1 f181 	clz	r1, r1
 8003708:	f002 030f 	and.w	r3, r2, #15
 800370c:	40cb      	lsrs	r3, r1
 800370e:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003710:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003714:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003716:	fb00 f003 	mul.w	r0, r0, r3
}
 800371a:	4770      	bx	lr
 800371c:	40021000 	.word	0x40021000
 8003720:	007a1200 	.word	0x007a1200
 8003724:	08004cdc 	.word	0x08004cdc
 8003728:	08004cec 	.word	0x08004cec

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	fab2 f282 	clz	r2, r2
 800373c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003742:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	6810      	ldr	r0, [r2, #0]
}    
 800374a:	40d8      	lsrs	r0, r3
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	08004cd4 	.word	0x08004cd4
 8003758:	200000e0 	.word	0x200000e0

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 800375e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	fa92 f2a2 	rbit	r2, r2
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003772:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	6810      	ldr	r0, [r2, #0]
} 
 800377a:	40d8      	lsrs	r0, r3
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	08004cd4 	.word	0x08004cd4
 8003788:	200000e0 	.word	0x200000e0

0800378c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800378c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	03d9      	lsls	r1, r3, #15
{
 8003794:	b083      	sub	sp, #12
 8003796:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003798:	d53d      	bpl.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379a:	4ba1      	ldr	r3, [pc, #644]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	00d2      	lsls	r2, r2, #3
 80037a0:	f140 80f6 	bpl.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4d9f      	ldr	r5, [pc, #636]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80037a6:	682b      	ldr	r3, [r5, #0]
 80037a8:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80037aa:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	f140 80ff 	bpl.w	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b2:	4d9b      	ldr	r5, [pc, #620]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80037b4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80037ba:	d01f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x70>
 80037bc:	6861      	ldr	r1, [r4, #4]
 80037be:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d01b      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037c6:	6a29      	ldr	r1, [r5, #32]
 80037c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037cc:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80037d0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d4:	f8df c250 	ldr.w	ip, [pc, #592]	; 8003a28 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80037d8:	fab2 f282 	clz	r2, r2
 80037dc:	4462      	add	r2, ip
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	2701      	movs	r7, #1
 80037e2:	6017      	str	r7, [r2, #0]
 80037e4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	4463      	add	r3, ip
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037f2:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f4:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80037f6:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037f8:	f100 80ee 	bmi.w	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80037fc:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037fe:	4a88      	ldr	r2, [pc, #544]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003800:	6a13      	ldr	r3, [r2, #32]
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	430b      	orrs	r3, r1
 8003808:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800380a:	b11e      	cbz	r6, 8003814 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380c:	69d3      	ldr	r3, [r2, #28]
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003812:	61d3      	str	r3, [r2, #28]
 8003814:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003816:	07da      	lsls	r2, r3, #31
 8003818:	d506      	bpl.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800381a:	4981      	ldr	r1, [pc, #516]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800381c:	68a0      	ldr	r0, [r4, #8]
 800381e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003820:	f022 0203 	bic.w	r2, r2, #3
 8003824:	4302      	orrs	r2, r0
 8003826:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003828:	079f      	lsls	r7, r3, #30
 800382a:	d506      	bpl.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382c:	497c      	ldr	r1, [pc, #496]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800382e:	68e0      	ldr	r0, [r4, #12]
 8003830:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003832:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003836:	4302      	orrs	r2, r0
 8003838:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800383a:	075e      	lsls	r6, r3, #29
 800383c:	d506      	bpl.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800383e:	4978      	ldr	r1, [pc, #480]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003840:	6920      	ldr	r0, [r4, #16]
 8003842:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003844:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003848:	4302      	orrs	r2, r0
 800384a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800384c:	069d      	lsls	r5, r3, #26
 800384e:	d506      	bpl.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003850:	4973      	ldr	r1, [pc, #460]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003852:	69e0      	ldr	r0, [r4, #28]
 8003854:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003856:	f022 0210 	bic.w	r2, r2, #16
 800385a:	4302      	orrs	r2, r0
 800385c:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800385e:	0398      	lsls	r0, r3, #14
 8003860:	d506      	bpl.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003862:	496f      	ldr	r1, [pc, #444]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003864:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003866:	684a      	ldr	r2, [r1, #4]
 8003868:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800386c:	4302      	orrs	r2, r0
 800386e:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003870:	0659      	lsls	r1, r3, #25
 8003872:	d506      	bpl.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003874:	496a      	ldr	r1, [pc, #424]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003876:	6a20      	ldr	r0, [r4, #32]
 8003878:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800387a:	f022 0220 	bic.w	r2, r2, #32
 800387e:	4302      	orrs	r2, r0
 8003880:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003882:	035a      	lsls	r2, r3, #13
 8003884:	d506      	bpl.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003886:	4966      	ldr	r1, [pc, #408]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003888:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800388a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800388c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003890:	4302      	orrs	r2, r0
 8003892:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003894:	071f      	lsls	r7, r3, #28
 8003896:	d506      	bpl.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003898:	4961      	ldr	r1, [pc, #388]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800389a:	6960      	ldr	r0, [r4, #20]
 800389c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800389e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80038a2:	4302      	orrs	r2, r0
 80038a4:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038a6:	06de      	lsls	r6, r3, #27
 80038a8:	d506      	bpl.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038aa:	495d      	ldr	r1, [pc, #372]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80038ac:	69a0      	ldr	r0, [r4, #24]
 80038ae:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80038b0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80038b4:	4302      	orrs	r2, r0
 80038b6:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038b8:	059d      	lsls	r5, r3, #22
 80038ba:	d506      	bpl.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038bc:	4958      	ldr	r1, [pc, #352]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80038be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80038c0:	684a      	ldr	r2, [r1, #4]
 80038c2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80038c6:	4302      	orrs	r2, r0
 80038c8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038ca:	0618      	lsls	r0, r3, #24
 80038cc:	d506      	bpl.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038ce:	4954      	ldr	r1, [pc, #336]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80038d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80038d4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80038d8:	4302      	orrs	r2, r0
 80038da:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038dc:	05d9      	lsls	r1, r3, #23
 80038de:	d506      	bpl.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038e0:	494f      	ldr	r1, [pc, #316]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80038e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80038e4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80038e6:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80038ea:	4302      	orrs	r2, r0
 80038ec:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038ee:	04da      	lsls	r2, r3, #19
 80038f0:	d506      	bpl.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038f2:	494b      	ldr	r1, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80038f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80038f6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80038f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fc:	4302      	orrs	r2, r0
 80038fe:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003900:	049f      	lsls	r7, r3, #18
 8003902:	d506      	bpl.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003904:	4946      	ldr	r1, [pc, #280]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003906:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003908:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800390a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800390e:	4302      	orrs	r2, r0
 8003910:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003912:	02de      	lsls	r6, r3, #11
 8003914:	d506      	bpl.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003916:	4942      	ldr	r1, [pc, #264]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003918:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800391a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800391c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003920:	4302      	orrs	r2, r0
 8003922:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003924:	029d      	lsls	r5, r3, #10
 8003926:	d506      	bpl.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003928:	493d      	ldr	r1, [pc, #244]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800392a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800392c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800392e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003932:	4302      	orrs	r2, r0
 8003934:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003936:	0258      	lsls	r0, r3, #9
 8003938:	d506      	bpl.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800393a:	4939      	ldr	r1, [pc, #228]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800393c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800393e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003944:	4302      	orrs	r2, r0
 8003946:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003948:	0219      	lsls	r1, r3, #8
 800394a:	d506      	bpl.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800394c:	4934      	ldr	r1, [pc, #208]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800394e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003950:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	4302      	orrs	r2, r0
 8003958:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800395a:	01da      	lsls	r2, r3, #7
 800395c:	d506      	bpl.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800395e:	4930      	ldr	r1, [pc, #192]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003960:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003962:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003968:	4302      	orrs	r2, r0
 800396a:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800396c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003970:	d103      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003972:	4618      	mov	r0, r3
}
 8003974:	b003      	add	sp, #12
 8003976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800397a:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800397c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800397e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003984:	430b      	orrs	r3, r1
  return HAL_OK;
 8003986:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
}
 800398a:	b003      	add	sp, #12
 800398c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4d24      	ldr	r5, [pc, #144]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003998:	61da      	str	r2, [r3, #28]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 80039a8:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	f53f af01 	bmi.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80039b8:	f7fe fb60 	bl	800207c <HAL_GetTick>
 80039bc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	05d8      	lsls	r0, r3, #23
 80039c2:	f53f aef6 	bmi.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c6:	f7fe fb59 	bl	800207c <HAL_GetTick>
 80039ca:	1bc0      	subs	r0, r0, r7
 80039cc:	2864      	cmp	r0, #100	; 0x64
 80039ce:	d9f6      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 80039d0:	2003      	movs	r0, #3
}
 80039d2:	b003      	add	sp, #12
 80039d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80039d8:	f7fe fb50 	bl	800207c <HAL_GetTick>
 80039dc:	f04f 0902 	mov.w	r9, #2
 80039e0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	e015      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80039e4:	fa99 f3a9 	rbit	r3, r9
 80039e8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80039ea:	fa99 f3a9 	rbit	r3, r9
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	fa07 f303 	lsl.w	r3, r7, r3
 80039fa:	4213      	tst	r3, r2
 80039fc:	f47f aefe 	bne.w	80037fc <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a00:	f7fe fb3c 	bl	800207c <HAL_GetTick>
 8003a04:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a08:	eba0 0008 	sub.w	r0, r0, r8
 8003a0c:	4298      	cmp	r0, r3
 8003a0e:	d8df      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a10:	fa99 f3a9 	rbit	r3, r9
 8003a14:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0e3      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003a1c:	6a2a      	ldr	r2, [r5, #32]
 8003a1e:	e7e4      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40007000 	.word	0x40007000
 8003a28:	10908100 	.word	0x10908100

08003a2c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2c:	6a03      	ldr	r3, [r0, #32]
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	6203      	str	r3, [r0, #32]
{
 8003a34:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a3c:	4f1a      	ldr	r7, [pc, #104]	; (8003aa8 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 8003a3e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8003a46:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a4e:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8003a50:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a58:	d012      	beq.n	8003a80 <TIM_OC1_SetConfig+0x54>
 8003a5a:	4c14      	ldr	r4, [pc, #80]	; (8003aac <TIM_OC1_SetConfig+0x80>)
 8003a5c:	42a0      	cmp	r0, r4
 8003a5e:	d00f      	beq.n	8003a80 <TIM_OC1_SetConfig+0x54>
 8003a60:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003a64:	42a0      	cmp	r0, r4
 8003a66:	d00b      	beq.n	8003a80 <TIM_OC1_SetConfig+0x54>
 8003a68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a6c:	42a0      	cmp	r0, r4
 8003a6e:	d007      	beq.n	8003a80 <TIM_OC1_SetConfig+0x54>
 8003a70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a74:	42a0      	cmp	r0, r4
 8003a76:	d003      	beq.n	8003a80 <TIM_OC1_SetConfig+0x54>
 8003a78:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003a7c:	42a0      	cmp	r0, r4
 8003a7e:	d10b      	bne.n	8003a98 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a80:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a82:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003a86:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a88:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a8c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a90:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a92:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a96:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a98:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003a9a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a9c:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003a9e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8003aa0:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003aa2:	6203      	str	r3, [r0, #32]
}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40013400 	.word	0x40013400

08003ab0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ab0:	6a03      	ldr	r3, [r0, #32]
 8003ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab6:	6203      	str	r3, [r0, #32]
{
 8003ab8:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003abe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ac0:	4f21      	ldr	r7, [pc, #132]	; (8003b48 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ac6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8003aca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ace:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ad2:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003adc:	d016      	beq.n	8003b0c <TIM_OC3_SetConfig+0x5c>
 8003ade:	4c1b      	ldr	r4, [pc, #108]	; (8003b4c <TIM_OC3_SetConfig+0x9c>)
 8003ae0:	42a0      	cmp	r0, r4
 8003ae2:	d013      	beq.n	8003b0c <TIM_OC3_SetConfig+0x5c>
 8003ae4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003ae8:	42a0      	cmp	r0, r4
 8003aea:	d024      	beq.n	8003b36 <TIM_OC3_SetConfig+0x86>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aec:	4c18      	ldr	r4, [pc, #96]	; (8003b50 <TIM_OC3_SetConfig+0xa0>)
 8003aee:	42a0      	cmp	r0, r4
 8003af0:	d013      	beq.n	8003b1a <TIM_OC3_SetConfig+0x6a>
 8003af2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003af6:	42a0      	cmp	r0, r4
 8003af8:	d00f      	beq.n	8003b1a <TIM_OC3_SetConfig+0x6a>
 8003afa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003afe:	42a0      	cmp	r0, r4
 8003b00:	d00b      	beq.n	8003b1a <TIM_OC3_SetConfig+0x6a>
 8003b02:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003b06:	42a0      	cmp	r0, r4
 8003b08:	d10e      	bne.n	8003b28 <TIM_OC3_SetConfig+0x78>
 8003b0a:	e006      	b.n	8003b1a <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b0c:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b12:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1a:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1e:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b22:	432c      	orrs	r4, r5
 8003b24:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b28:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b2a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b2c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003b2e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8003b30:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003b32:	6203      	str	r3, [r0, #32]
}
 8003b34:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b36:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b3c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b44:	e7d2      	b.n	8003aec <TIM_OC3_SetConfig+0x3c>
 8003b46:	bf00      	nop
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40013400 	.word	0x40013400
 8003b50:	40014000 	.word	0x40014000

08003b54 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003b54:	2800      	cmp	r0, #0
 8003b56:	f000 8085 	beq.w	8003c64 <HAL_TIM_Base_Init+0x110>
{
 8003b5a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b60:	4604      	mov	r4, r0
 8003b62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d074      	beq.n	8003c54 <HAL_TIM_Base_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6c:	4941      	ldr	r1, [pc, #260]	; (8003c74 <HAL_TIM_Base_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b74:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003b76:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b78:	d058      	beq.n	8003c2c <HAL_TIM_Base_Init+0xd8>
 8003b7a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003b7e:	d028      	beq.n	8003bd2 <HAL_TIM_Base_Init+0x7e>
 8003b80:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003b84:	428a      	cmp	r2, r1
 8003b86:	d024      	beq.n	8003bd2 <HAL_TIM_Base_Init+0x7e>
 8003b88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003b8c:	428a      	cmp	r2, r1
 8003b8e:	d020      	beq.n	8003bd2 <HAL_TIM_Base_Init+0x7e>
 8003b90:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8003b94:	428a      	cmp	r2, r1
 8003b96:	d049      	beq.n	8003c2c <HAL_TIM_Base_Init+0xd8>
 8003b98:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8003b9c:	428a      	cmp	r2, r1
 8003b9e:	d063      	beq.n	8003c68 <HAL_TIM_Base_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba0:	4935      	ldr	r1, [pc, #212]	; (8003c78 <HAL_TIM_Base_Init+0x124>)
 8003ba2:	428a      	cmp	r2, r1
 8003ba4:	d05b      	beq.n	8003c5e <HAL_TIM_Base_Init+0x10a>
 8003ba6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003baa:	428a      	cmp	r2, r1
 8003bac:	d057      	beq.n	8003c5e <HAL_TIM_Base_Init+0x10a>
 8003bae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003bb2:	428a      	cmp	r2, r1
 8003bb4:	d053      	beq.n	8003c5e <HAL_TIM_Base_Init+0x10a>
 8003bb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bba:	428a      	cmp	r2, r1
 8003bbc:	d04f      	beq.n	8003c5e <HAL_TIM_Base_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbe:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003bc2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003bca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bce:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd0:	e010      	b.n	8003bf4 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8003bd2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd4:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd6:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bea:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003bec:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003bee:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bf2:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c00:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c1c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003c20:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003c28:	2000      	movs	r0, #0
}
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003c2c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c2e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c36:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c42:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003c44:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c4a:	6863      	ldr	r3, [r4, #4]
 8003c4c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003c4e:	6963      	ldr	r3, [r4, #20]
 8003c50:	6313      	str	r3, [r2, #48]	; 0x30
 8003c52:	e7cf      	b.n	8003bf4 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8003c54:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c58:	f7fd f9b8 	bl	8000fcc <HAL_TIM_Base_MspInit>
 8003c5c:	e785      	b.n	8003b6a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c60:	69a1      	ldr	r1, [r4, #24]
 8003c62:	e7e9      	b.n	8003c38 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 8003c64:	2001      	movs	r0, #1
}
 8003c66:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003c68:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c6e:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c70:	e796      	b.n	8003ba0 <HAL_TIM_Base_Init+0x4c>
 8003c72:	bf00      	nop
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40014000 	.word	0x40014000

08003c7c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c7c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d126      	bne.n	8003cd2 <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	4919      	ldr	r1, [pc, #100]	; (8003cec <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c8e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c90:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	d01d      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x5a>
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9e:	d01a      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x5a>
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <HAL_TIM_Base_Start_IT+0x74>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d017      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x5a>
 8003ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x5a>
 8003cae:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00f      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x5a>
 8003cb6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x5a>
 8003cbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x5a>
    __HAL_TIM_ENABLE(htim);
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cce:	2000      	movs	r0, #0
 8003cd0:	4770      	bx	lr
    return HAL_ERROR;
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd6:	6899      	ldr	r1, [r3, #8]
 8003cd8:	4a06      	ldr	r2, [pc, #24]	; (8003cf4 <HAL_TIM_Base_Start_IT+0x78>)
 8003cda:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	2a06      	cmp	r2, #6
 8003cde:	d002      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x6a>
 8003ce0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003ce4:	d1ef      	bne.n	8003cc6 <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 8003ce6:	2000      	movs	r0, #0
}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	00010007 	.word	0x00010007

08003cf8 <HAL_TIM_PWM_MspInit>:
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop

08003cfc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	f000 8085 	beq.w	8003e0c <HAL_TIM_PWM_Init+0x110>
{
 8003d02:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d08:	4604      	mov	r4, r0
 8003d0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d074      	beq.n	8003dfc <HAL_TIM_PWM_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d12:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d14:	4941      	ldr	r1, [pc, #260]	; (8003e1c <HAL_TIM_PWM_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003d16:	2302      	movs	r3, #2
 8003d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003d1e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	d058      	beq.n	8003dd4 <HAL_TIM_PWM_Init+0xd8>
 8003d22:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003d26:	d028      	beq.n	8003d7a <HAL_TIM_PWM_Init+0x7e>
 8003d28:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003d2c:	428a      	cmp	r2, r1
 8003d2e:	d024      	beq.n	8003d7a <HAL_TIM_PWM_Init+0x7e>
 8003d30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d34:	428a      	cmp	r2, r1
 8003d36:	d020      	beq.n	8003d7a <HAL_TIM_PWM_Init+0x7e>
 8003d38:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8003d3c:	428a      	cmp	r2, r1
 8003d3e:	d049      	beq.n	8003dd4 <HAL_TIM_PWM_Init+0xd8>
 8003d40:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8003d44:	428a      	cmp	r2, r1
 8003d46:	d063      	beq.n	8003e10 <HAL_TIM_PWM_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d48:	4935      	ldr	r1, [pc, #212]	; (8003e20 <HAL_TIM_PWM_Init+0x124>)
 8003d4a:	428a      	cmp	r2, r1
 8003d4c:	d05b      	beq.n	8003e06 <HAL_TIM_PWM_Init+0x10a>
 8003d4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d52:	428a      	cmp	r2, r1
 8003d54:	d057      	beq.n	8003e06 <HAL_TIM_PWM_Init+0x10a>
 8003d56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d5a:	428a      	cmp	r2, r1
 8003d5c:	d053      	beq.n	8003e06 <HAL_TIM_PWM_Init+0x10a>
 8003d5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d62:	428a      	cmp	r2, r1
 8003d64:	d04f      	beq.n	8003e06 <HAL_TIM_PWM_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d66:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003d6a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d70:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003d72:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d74:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d76:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	e010      	b.n	8003d9c <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8003d7a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d7e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d84:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d92:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003d94:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003d96:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d9a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003da8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003dac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003db0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003dc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dc4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003dc8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003dd0:	2000      	movs	r0, #0
}
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003dd4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003dde:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dea:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003dec:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003df6:	6963      	ldr	r3, [r4, #20]
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	e7cf      	b.n	8003d9c <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8003dfc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003e00:	f7ff ff7a 	bl	8003cf8 <HAL_TIM_PWM_MspInit>
 8003e04:	e785      	b.n	8003d12 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e08:	69a1      	ldr	r1, [r4, #24]
 8003e0a:	e7e9      	b.n	8003de0 <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 8003e0c:	2001      	movs	r0, #1
}
 8003e0e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003e10:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e16:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e18:	e796      	b.n	8003d48 <HAL_TIM_PWM_Init+0x4c>
 8003e1a:	bf00      	nop
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40014000 	.word	0x40014000

08003e24 <HAL_TIM_PWM_Start>:
 8003e24:	2900      	cmp	r1, #0
 8003e26:	d154      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xae>
 8003e28:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d15a      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xc2>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003e36:	6803      	ldr	r3, [r0, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	6a18      	ldr	r0, [r3, #32]
 8003e3c:	f001 011f 	and.w	r1, r1, #31
 8003e40:	fa02 f101 	lsl.w	r1, r2, r1
 8003e44:	ea20 0001 	bic.w	r0, r0, r1
 8003e48:	b410      	push	{r4}
 8003e4a:	6218      	str	r0, [r3, #32]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	4c3e      	ldr	r4, [pc, #248]	; (8003f48 <HAL_TIM_PWM_Start+0x124>)
 8003e50:	4311      	orrs	r1, r2
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	6219      	str	r1, [r3, #32]
 8003e56:	d056      	beq.n	8003f06 <HAL_TIM_PWM_Start+0xe2>
 8003e58:	4a3c      	ldr	r2, [pc, #240]	; (8003f4c <HAL_TIM_PWM_Start+0x128>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00f      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x5a>
 8003e5e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x5a>
 8003e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x5a>
 8003e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x5a>
 8003e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d103      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x62>
 8003e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d012      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x8e>
 8003e8c:	4a30      	ldr	r2, [pc, #192]	; (8003f50 <HAL_TIM_PWM_Start+0x12c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00f      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x8e>
 8003e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x8e>
 8003e9a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x8e>
 8003ea2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_PWM_Start+0x8e>
 8003eaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0x9e>
 8003eb2:	6899      	ldr	r1, [r3, #8]
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <HAL_TIM_PWM_Start+0x130>)
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	2a06      	cmp	r2, #6
 8003eba:	d016      	beq.n	8003eea <HAL_TIM_PWM_Start+0xc6>
 8003ebc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003ec0:	d013      	beq.n	8003eea <HAL_TIM_PWM_Start+0xc6>
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	2000      	movs	r0, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	4770      	bx	lr
 8003ed2:	2904      	cmp	r1, #4
 8003ed4:	d01c      	beq.n	8003f10 <HAL_TIM_PWM_Start+0xec>
 8003ed6:	2908      	cmp	r1, #8
 8003ed8:	d022      	beq.n	8003f20 <HAL_TIM_PWM_Start+0xfc>
 8003eda:	290c      	cmp	r1, #12
 8003edc:	d109      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0xce>
 8003ede:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d024      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x10c>
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	4770      	bx	lr
 8003eea:	2000      	movs	r0, #0
 8003eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	2910      	cmp	r1, #16
 8003ef4:	d020      	beq.n	8003f38 <HAL_TIM_PWM_Start+0x114>
 8003ef6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d1f3      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xc2>
 8003efe:	2302      	movs	r3, #2
 8003f00:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8003f04:	e797      	b.n	8003e36 <HAL_TIM_PWM_Start+0x12>
 8003f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f0e:	e7d0      	b.n	8003eb2 <HAL_TIM_PWM_Start+0x8e>
 8003f10:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d1e6      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xc2>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003f1e:	e78a      	b.n	8003e36 <HAL_TIM_PWM_Start+0x12>
 8003f20:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d1de      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xc2>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003f2e:	e782      	b.n	8003e36 <HAL_TIM_PWM_Start+0x12>
 8003f30:	2302      	movs	r3, #2
 8003f32:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003f36:	e77e      	b.n	8003e36 <HAL_TIM_PWM_Start+0x12>
 8003f38:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d1d2      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xc2>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003f46:	e776      	b.n	8003e36 <HAL_TIM_PWM_Start+0x12>
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40013400 	.word	0x40013400
 8003f50:	40000400 	.word	0x40000400
 8003f54:	00010007 	.word	0x00010007

08003f58 <HAL_TIM_PWM_Start_IT>:
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	d159      	bne.n	8004010 <HAL_TIM_PWM_Start_IT+0xb8>
 8003f5c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d15f      	bne.n	8004024 <HAL_TIM_PWM_Start_IT+0xcc>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003f6a:	6803      	ldr	r3, [r0, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	f042 0202 	orr.w	r2, r2, #2
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	6a18      	ldr	r0, [r3, #32]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f001 011f 	and.w	r1, r1, #31
 8003f7c:	fa02 f101 	lsl.w	r1, r2, r1
 8003f80:	ea20 0001 	bic.w	r0, r0, r1
 8003f84:	b410      	push	{r4}
 8003f86:	6218      	str	r0, [r3, #32]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	4c57      	ldr	r4, [pc, #348]	; (80040e8 <HAL_TIM_PWM_Start_IT+0x190>)
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	42a3      	cmp	r3, r4
 8003f90:	6219      	str	r1, [r3, #32]
 8003f92:	f000 809a 	beq.w	80040ca <HAL_TIM_PWM_Start_IT+0x172>
 8003f96:	4a55      	ldr	r2, [pc, #340]	; (80040ec <HAL_TIM_PWM_Start_IT+0x194>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00f      	beq.n	8003fbc <HAL_TIM_PWM_Start_IT+0x64>
 8003f9c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00b      	beq.n	8003fbc <HAL_TIM_PWM_Start_IT+0x64>
 8003fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <HAL_TIM_PWM_Start_IT+0x64>
 8003fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <HAL_TIM_PWM_Start_IT+0x64>
 8003fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d103      	bne.n	8003fc4 <HAL_TIM_PWM_Start_IT+0x6c>
 8003fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d012      	beq.n	8003ff0 <HAL_TIM_PWM_Start_IT+0x98>
 8003fca:	4a49      	ldr	r2, [pc, #292]	; (80040f0 <HAL_TIM_PWM_Start_IT+0x198>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00f      	beq.n	8003ff0 <HAL_TIM_PWM_Start_IT+0x98>
 8003fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_TIM_PWM_Start_IT+0x98>
 8003fd8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <HAL_TIM_PWM_Start_IT+0x98>
 8003fe0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <HAL_TIM_PWM_Start_IT+0x98>
 8003fe8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_PWM_Start_IT+0xa8>
 8003ff0:	6899      	ldr	r1, [r3, #8]
 8003ff2:	4a40      	ldr	r2, [pc, #256]	; (80040f4 <HAL_TIM_PWM_Start_IT+0x19c>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	2a06      	cmp	r2, #6
 8003ff8:	d016      	beq.n	8004028 <HAL_TIM_PWM_Start_IT+0xd0>
 8003ffa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003ffe:	d013      	beq.n	8004028 <HAL_TIM_PWM_Start_IT+0xd0>
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	2000      	movs	r0, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	4770      	bx	lr
 8004010:	2904      	cmp	r1, #4
 8004012:	d044      	beq.n	800409e <HAL_TIM_PWM_Start_IT+0x146>
 8004014:	2908      	cmp	r1, #8
 8004016:	d035      	beq.n	8004084 <HAL_TIM_PWM_Start_IT+0x12c>
 8004018:	290c      	cmp	r1, #12
 800401a:	d109      	bne.n	8004030 <HAL_TIM_PWM_Start_IT+0xd8>
 800401c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004020:	2b01      	cmp	r3, #1
 8004022:	d049      	beq.n	80040b8 <HAL_TIM_PWM_Start_IT+0x160>
 8004024:	2001      	movs	r0, #1
 8004026:	4770      	bx	lr
 8004028:	2000      	movs	r0, #0
 800402a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	2910      	cmp	r1, #16
 8004032:	d04f      	beq.n	80040d4 <HAL_TIM_PWM_Start_IT+0x17c>
 8004034:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8004038:	2b01      	cmp	r3, #1
 800403a:	d1f3      	bne.n	8004024 <HAL_TIM_PWM_Start_IT+0xcc>
 800403c:	2302      	movs	r3, #2
 800403e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8004042:	290c      	cmp	r1, #12
 8004044:	d81c      	bhi.n	8004080 <HAL_TIM_PWM_Start_IT+0x128>
 8004046:	a301      	add	r3, pc, #4	; (adr r3, 800404c <HAL_TIM_PWM_Start_IT+0xf4>)
 8004048:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800404c:	08003f6b 	.word	0x08003f6b
 8004050:	08004081 	.word	0x08004081
 8004054:	08004081 	.word	0x08004081
 8004058:	08004081 	.word	0x08004081
 800405c:	080040ad 	.word	0x080040ad
 8004060:	08004081 	.word	0x08004081
 8004064:	08004081 	.word	0x08004081
 8004068:	08004081 	.word	0x08004081
 800406c:	08004093 	.word	0x08004093
 8004070:	08004081 	.word	0x08004081
 8004074:	08004081 	.word	0x08004081
 8004078:	08004081 	.word	0x08004081
 800407c:	080040bf 	.word	0x080040bf
 8004080:	6803      	ldr	r3, [r0, #0]
 8004082:	e777      	b.n	8003f74 <HAL_TIM_PWM_Start_IT+0x1c>
 8004084:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004088:	2b01      	cmp	r3, #1
 800408a:	d1cb      	bne.n	8004024 <HAL_TIM_PWM_Start_IT+0xcc>
 800408c:	2302      	movs	r3, #2
 800408e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004092:	6803      	ldr	r3, [r0, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e76a      	b.n	8003f74 <HAL_TIM_PWM_Start_IT+0x1c>
 800409e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d1be      	bne.n	8004024 <HAL_TIM_PWM_Start_IT+0xcc>
 80040a6:	2302      	movs	r3, #2
 80040a8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80040ac:	6803      	ldr	r3, [r0, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	f042 0204 	orr.w	r2, r2, #4
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e75d      	b.n	8003f74 <HAL_TIM_PWM_Start_IT+0x1c>
 80040b8:	2302      	movs	r3, #2
 80040ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80040be:	6803      	ldr	r3, [r0, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	f042 0210 	orr.w	r2, r2, #16
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e754      	b.n	8003f74 <HAL_TIM_PWM_Start_IT+0x1c>
 80040ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
 80040d2:	e78d      	b.n	8003ff0 <HAL_TIM_PWM_Start_IT+0x98>
 80040d4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d1a3      	bne.n	8004024 <HAL_TIM_PWM_Start_IT+0xcc>
 80040dc:	2302      	movs	r3, #2
 80040de:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80040e2:	6803      	ldr	r3, [r0, #0]
 80040e4:	e746      	b.n	8003f74 <HAL_TIM_PWM_Start_IT+0x1c>
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40013400 	.word	0x40013400
 80040f0:	40000400 	.word	0x40000400
 80040f4:	00010007 	.word	0x00010007

080040f8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80040f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d073      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xf0>
{
 8004100:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8004102:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8004104:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004106:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004108:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004110:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004112:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004114:	4c4a      	ldr	r4, [pc, #296]	; (8004240 <HAL_TIM_ConfigClockSource+0x148>)
  switch (sClockSourceConfig->ClockSource)
 8004116:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004118:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 800411c:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800411e:	d065      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0xf4>
 8004120:	d831      	bhi.n	8004186 <HAL_TIM_ConfigClockSource+0x8e>
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d048      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0xc0>
 8004126:	d921      	bls.n	800416c <HAL_TIM_ConfigClockSource+0x74>
 8004128:	2b50      	cmp	r3, #80	; 0x50
 800412a:	d116      	bne.n	800415a <HAL_TIM_ConfigClockSource+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800412c:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412e:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004130:	684c      	ldr	r4, [r1, #4]
 8004132:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004134:	f026 0601 	bic.w	r6, r6, #1
 8004138:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413a:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800413c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004144:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004148:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414a:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800414c:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800414e:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004154:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004158:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 800415a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800415c:	2201      	movs	r2, #1
 800415e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004162:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004166:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004168:	4618      	mov	r0, r3
}
 800416a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800416c:	2b20      	cmp	r3, #32
 800416e:	d002      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x7e>
 8004170:	d91e      	bls.n	80041b0 <HAL_TIM_ConfigClockSource+0xb8>
 8004172:	2b30      	cmp	r3, #48	; 0x30
 8004174:	d1f1      	bne.n	800415a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8004176:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004178:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417c:	430b      	orrs	r3, r1
 800417e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004182:	6093      	str	r3, [r2, #8]
}
 8004184:	e7e9      	b.n	800415a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8004186:	2b70      	cmp	r3, #112	; 0x70
 8004188:	d049      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x126>
 800418a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418e:	d1e4      	bne.n	800415a <HAL_TIM_ConfigClockSource+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004190:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004194:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004196:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004198:	432b      	orrs	r3, r5
 800419a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a4:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a6:	6893      	ldr	r3, [r2, #8]
 80041a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ac:	6093      	str	r3, [r2, #8]
      break;
 80041ae:	e7d4      	b.n	800415a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80041b0:	f033 0110 	bics.w	r1, r3, #16
 80041b4:	d1d1      	bne.n	800415a <HAL_TIM_ConfigClockSource+0x62>
 80041b6:	e7de      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 80041b8:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ba:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041bc:	684c      	ldr	r4, [r1, #4]
 80041be:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c0:	f026 0601 	bic.w	r6, r6, #1
 80041c4:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d0:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80041d4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80041d6:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80041d8:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80041da:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80041e4:	6093      	str	r3, [r2, #8]
}
 80041e6:	e7b8      	b.n	800415a <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 80041e8:	2002      	movs	r0, #2
}
 80041ea:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ec:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ee:	684d      	ldr	r5, [r1, #4]
 80041f0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f2:	f024 0410 	bic.w	r4, r4, #16
 80041f6:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f8:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80041fa:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004200:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004204:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004208:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800420c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800420e:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004210:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004216:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800421a:	6093      	str	r3, [r2, #8]
}
 800421c:	e79d      	b.n	800415a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004222:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004224:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004226:	432b      	orrs	r3, r5
 8004228:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800422c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004230:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004232:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004234:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004236:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800423a:	6093      	str	r3, [r2, #8]
      break;
 800423c:	e78d      	b.n	800415a <HAL_TIM_ConfigClockSource+0x62>
 800423e:	bf00      	nop
 8004240:	fffe0088 	.word	0xfffe0088

08004244 <HAL_TIM_PeriodElapsedCallback>:
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop

08004248 <HAL_TIM_OC_DelayElapsedCallback>:
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop

0800424c <HAL_TIM_IC_CaptureCallback>:
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop

08004250 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop

08004254 <HAL_TIM_TriggerCallback>:
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004258:	6803      	ldr	r3, [r0, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	0791      	lsls	r1, r2, #30
{
 800425e:	b510      	push	{r4, lr}
 8004260:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004262:	d502      	bpl.n	800426a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	0792      	lsls	r2, r2, #30
 8004268:	d468      	bmi.n	800433c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	0752      	lsls	r2, r2, #29
 800426e:	d502      	bpl.n	8004276 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	0750      	lsls	r0, r2, #29
 8004274:	d44f      	bmi.n	8004316 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	0711      	lsls	r1, r2, #28
 800427a:	d502      	bpl.n	8004282 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	0712      	lsls	r2, r2, #28
 8004280:	d437      	bmi.n	80042f2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	06d0      	lsls	r0, r2, #27
 8004286:	d502      	bpl.n	800428e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	06d1      	lsls	r1, r2, #27
 800428c:	d41e      	bmi.n	80042cc <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	07d2      	lsls	r2, r2, #31
 8004292:	d502      	bpl.n	800429a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	07d0      	lsls	r0, r2, #31
 8004298:	d469      	bmi.n	800436e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	0611      	lsls	r1, r2, #24
 800429e:	d502      	bpl.n	80042a6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	0612      	lsls	r2, r2, #24
 80042a4:	d46b      	bmi.n	800437e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	05d0      	lsls	r0, r2, #23
 80042aa:	d502      	bpl.n	80042b2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	0611      	lsls	r1, r2, #24
 80042b0:	d46d      	bmi.n	800438e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	0652      	lsls	r2, r2, #25
 80042b6:	d502      	bpl.n	80042be <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	0650      	lsls	r0, r2, #25
 80042bc:	d46f      	bmi.n	800439e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	0691      	lsls	r1, r2, #26
 80042c2:	d502      	bpl.n	80042ca <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	0692      	lsls	r2, r2, #26
 80042c8:	d449      	bmi.n	800435e <HAL_TIM_IRQHandler+0x106>
}
 80042ca:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042cc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042d2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80042dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042de:	d16f      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e0:	f7ff ffb2 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff ffb3 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	2200      	movs	r2, #0
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	7722      	strb	r2, [r4, #28]
 80042f0:	e7cd      	b.n	800428e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042f2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f6:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042f8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004300:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004302:	d15a      	bne.n	80043ba <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004304:	f7ff ffa0 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff ffa1 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	2200      	movs	r2, #0
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	7722      	strb	r2, [r4, #28]
 8004314:	e7b5      	b.n	8004282 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004316:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800431c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004328:	d144      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	f7ff ff8d 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432e:	4620      	mov	r0, r4
 8004330:	f7ff ff8e 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004334:	2200      	movs	r2, #0
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	7722      	strb	r2, [r4, #28]
 800433a:	e79c      	b.n	8004276 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800433c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004340:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004342:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004344:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	0799      	lsls	r1, r3, #30
 800434a:	d130      	bne.n	80043ae <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434c:	f7ff ff7c 	bl	8004248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff ff7d 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	2200      	movs	r2, #0
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	7722      	strb	r2, [r4, #28]
 800435c:	e785      	b.n	800426a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800435e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004362:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004364:	611a      	str	r2, [r3, #16]
}
 8004366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800436a:	f000 ba5f 	b.w	800482c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800436e:	f06f 0201 	mvn.w	r2, #1
 8004372:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff ff65 	bl	8004244 <HAL_TIM_PeriodElapsedCallback>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	e78d      	b.n	800429a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800437e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004382:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004384:	4620      	mov	r0, r4
 8004386:	f000 fa53 	bl	8004830 <HAL_TIMEx_BreakCallback>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	e78b      	b.n	80042a6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800438e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004392:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004394:	4620      	mov	r0, r4
 8004396:	f000 fa4d 	bl	8004834 <HAL_TIMEx_Break2Callback>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	e789      	b.n	80042b2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800439e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff ff55 	bl	8004254 <HAL_TIM_TriggerCallback>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	e787      	b.n	80042be <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	f7ff ff4d 	bl	800424c <HAL_TIM_IC_CaptureCallback>
 80043b2:	e7d0      	b.n	8004356 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80043b4:	f7ff ff4a 	bl	800424c <HAL_TIM_IC_CaptureCallback>
 80043b8:	e7bc      	b.n	8004334 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	f7ff ff47 	bl	800424c <HAL_TIM_IC_CaptureCallback>
 80043be:	e7a6      	b.n	800430e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80043c0:	f7ff ff44 	bl	800424c <HAL_TIM_IC_CaptureCallback>
 80043c4:	e791      	b.n	80042ea <HAL_TIM_IRQHandler+0x92>
 80043c6:	bf00      	nop

080043c8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c8:	6a03      	ldr	r3, [r0, #32]
 80043ca:	f023 0310 	bic.w	r3, r3, #16
 80043ce:	6203      	str	r3, [r0, #32]
{
 80043d0:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 80043d2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80043d4:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043d6:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d8:	4f21      	ldr	r7, [pc, #132]	; (8004460 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043da:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043dc:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80043e2:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ea:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043f4:	d016      	beq.n	8004424 <TIM_OC2_SetConfig+0x5c>
 80043f6:	4c1b      	ldr	r4, [pc, #108]	; (8004464 <TIM_OC2_SetConfig+0x9c>)
 80043f8:	42a0      	cmp	r0, r4
 80043fa:	d013      	beq.n	8004424 <TIM_OC2_SetConfig+0x5c>
 80043fc:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8004400:	42a0      	cmp	r0, r4
 8004402:	d024      	beq.n	800444e <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004404:	4c18      	ldr	r4, [pc, #96]	; (8004468 <TIM_OC2_SetConfig+0xa0>)
 8004406:	42a0      	cmp	r0, r4
 8004408:	d013      	beq.n	8004432 <TIM_OC2_SetConfig+0x6a>
 800440a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800440e:	42a0      	cmp	r0, r4
 8004410:	d00f      	beq.n	8004432 <TIM_OC2_SetConfig+0x6a>
 8004412:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004416:	42a0      	cmp	r0, r4
 8004418:	d00b      	beq.n	8004432 <TIM_OC2_SetConfig+0x6a>
 800441a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800441e:	42a0      	cmp	r0, r4
 8004420:	d10e      	bne.n	8004440 <TIM_OC2_SetConfig+0x78>
 8004422:	e006      	b.n	8004432 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004424:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800442a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800442e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004432:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004436:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800443a:	432c      	orrs	r4, r5
 800443c:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004440:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004442:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004444:	6182      	str	r2, [r0, #24]
}
 8004446:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8004448:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800444a:	6203      	str	r3, [r0, #32]
}
 800444c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800444e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004454:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	e7d2      	b.n	8004404 <TIM_OC2_SetConfig+0x3c>
 800445e:	bf00      	nop
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40013400 	.word	0x40013400
 8004468:	40014000 	.word	0x40014000

0800446c <HAL_TIM_PWM_ConfigChannel>:
{
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800446e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	f000 8124 	beq.w	80046c0 <HAL_TIM_PWM_ConfigChannel+0x254>
 8004478:	2301      	movs	r3, #1
 800447a:	4604      	mov	r4, r0
 800447c:	460d      	mov	r5, r1
 800447e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004482:	2a14      	cmp	r2, #20
 8004484:	d84e      	bhi.n	8004524 <HAL_TIM_PWM_ConfigChannel+0xb8>
 8004486:	e8df f012 	tbh	[pc, r2, lsl #1]
 800448a:	0098      	.short	0x0098
 800448c:	004d004d 	.word	0x004d004d
 8004490:	00ac004d 	.word	0x00ac004d
 8004494:	004d004d 	.word	0x004d004d
 8004498:	00c1004d 	.word	0x00c1004d
 800449c:	004d004d 	.word	0x004d004d
 80044a0:	0015004d 	.word	0x0015004d
 80044a4:	004d004d 	.word	0x004d004d
 80044a8:	00d5004d 	.word	0x00d5004d
 80044ac:	004d004d 	.word	0x004d004d
 80044b0:	0051004d 	.word	0x0051004d
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044b4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ba:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044bc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	4e89      	ldr	r6, [pc, #548]	; (80046e4 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044c0:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80044c4:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80044c6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80044c8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80044ca:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 80044d0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044d4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044da:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044de:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e2:	d008      	beq.n	80044f6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80044e4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80044e8:	42b3      	cmp	r3, r6
 80044ea:	d004      	beq.n	80044f6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80044ec:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80044f0:	42b3      	cmp	r3, r6
 80044f2:	f040 80e7 	bne.w	80046c4 <HAL_TIM_PWM_ConfigChannel+0x258>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f8:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044fc:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8004500:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004502:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004504:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004506:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004508:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800450a:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800450e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004512:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004514:	69d9      	ldr	r1, [r3, #28]
 8004516:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800451a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004522:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004524:	2000      	movs	r0, #0
 8004526:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800452c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800452e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004532:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004536:	4e6b      	ldr	r6, [pc, #428]	; (80046e4 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004538:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800453c:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800453e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004540:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004544:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004548:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800454c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004550:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004552:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004556:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455a:	d013      	beq.n	8004584 <HAL_TIM_PWM_ConfigChannel+0x118>
 800455c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004560:	42b3      	cmp	r3, r6
 8004562:	d00f      	beq.n	8004584 <HAL_TIM_PWM_ConfigChannel+0x118>
 8004564:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004568:	42b3      	cmp	r3, r6
 800456a:	d00b      	beq.n	8004584 <HAL_TIM_PWM_ConfigChannel+0x118>
 800456c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004570:	42b3      	cmp	r3, r6
 8004572:	d007      	beq.n	8004584 <HAL_TIM_PWM_ConfigChannel+0x118>
 8004574:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004578:	42b3      	cmp	r3, r6
 800457a:	d003      	beq.n	8004584 <HAL_TIM_PWM_ConfigChannel+0x118>
 800457c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004580:	42b3      	cmp	r3, r6
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_ConfigChannel+0x122>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004584:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004586:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800458a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 800458e:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004590:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004594:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8004596:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004598:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800459a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800459c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80045a0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045a2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80045a8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80045b0:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80045b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80045b8:	e7b7      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	f7ff fa36 	bl	8003a2c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c4:	6999      	ldr	r1, [r3, #24]
 80045c6:	f041 0108 	orr.w	r1, r1, #8
 80045ca:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045cc:	6999      	ldr	r1, [r3, #24]
 80045ce:	f021 0104 	bic.w	r1, r1, #4
 80045d2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80045d8:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045da:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80045dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80045e0:	e7a3      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e2:	6800      	ldr	r0, [r0, #0]
 80045e4:	f7ff fef0 	bl	80043c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045ea:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80045f2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80045fa:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8004602:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004604:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004606:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800460a:	e78e      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f7ff fa4f 	bl	8003ab0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004612:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004614:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004616:	69d9      	ldr	r1, [r3, #28]
 8004618:	f041 0108 	orr.w	r1, r1, #8
 800461c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800461e:	69d9      	ldr	r1, [r3, #28]
 8004620:	f021 0104 	bic.w	r1, r1, #4
 8004624:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800462a:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800462c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800462e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004632:	e77a      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004634:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004636:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800463a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800463c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463e:	4e29      	ldr	r6, [pc, #164]	; (80046e4 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004640:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004644:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004646:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004648:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800464a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800464c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8004650:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004654:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004658:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800465a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800465e:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	d013      	beq.n	800468c <HAL_TIM_PWM_ConfigChannel+0x220>
 8004664:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004668:	42b3      	cmp	r3, r6
 800466a:	d00f      	beq.n	800468c <HAL_TIM_PWM_ConfigChannel+0x220>
 800466c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004670:	42b3      	cmp	r3, r6
 8004672:	d00b      	beq.n	800468c <HAL_TIM_PWM_ConfigChannel+0x220>
 8004674:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004678:	42b3      	cmp	r3, r6
 800467a:	d007      	beq.n	800468c <HAL_TIM_PWM_ConfigChannel+0x220>
 800467c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004680:	42b3      	cmp	r3, r6
 8004682:	d003      	beq.n	800468c <HAL_TIM_PWM_ConfigChannel+0x220>
 8004684:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004688:	42b3      	cmp	r3, r6
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_ConfigChannel+0x22a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800468c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800468e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004692:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8004696:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004698:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800469c:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800469e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046a2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046a4:	f041 0108 	orr.w	r1, r1, #8
 80046a8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ac:	f021 0104 	bic.w	r1, r1, #4
 80046b0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b4:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80046b6:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80046ba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80046be:	e734      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0xbe>
  __HAL_LOCK(htim);
 80046c0:	2002      	movs	r0, #2
}
 80046c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80046c8:	42b3      	cmp	r3, r6
 80046ca:	f43f af14 	beq.w	80044f6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80046ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80046d2:	42b3      	cmp	r3, r6
 80046d4:	f43f af0f 	beq.w	80044f6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80046d8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80046dc:	42b3      	cmp	r3, r6
 80046de:	f47f af0f 	bne.w	8004500 <HAL_TIM_PWM_ConfigChannel+0x94>
 80046e2:	e708      	b.n	80044f6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80046e4:	40012c00 	.word	0x40012c00

080046e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d04e      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 80046f0:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f2:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f4:	4c27      	ldr	r4, [pc, #156]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 80046f6:	2202      	movs	r2, #2
 80046f8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046fc:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 80046fe:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004700:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004702:	d03a      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004704:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004708:	42a3      	cmp	r3, r4
 800470a:	d02c      	beq.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800470c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8004710:	42a3      	cmp	r3, r4
 8004712:	d028      	beq.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004714:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004716:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004722:	d012      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004724:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800472a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800472e:	4293      	cmp	r3, r2
 8004730:	d00b      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004732:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800473a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004746:	4293      	cmp	r3, r2
 8004748:	d104      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474a:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004750:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004752:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004754:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004756:	2201      	movs	r2, #1
 8004758:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800475c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004760:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004762:	4618      	mov	r0, r3
}
 8004764:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004766:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800476a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800476e:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004770:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004774:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 8004776:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	e7d1      	b.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800477a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800477e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004782:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004784:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004788:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 800478a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478c:	e7dd      	b.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 800478e:	2002      	movs	r0, #2
}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400

0800479c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800479c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d03f      	beq.n	8004824 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 80047a4:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047a6:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80047aa:	4602      	mov	r2, r0
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047b0:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047b4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ba:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047c0:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047c4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ca:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047d0:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047d2:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047d4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047da:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047dc:	4c12      	ldr	r4, [pc, #72]	; (8004828 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80047de:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047e4:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047ea:	d007      	beq.n	80047fc <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80047ec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d003      	beq.n	80047fc <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80047f4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d10c      	bne.n	8004816 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047fc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80047fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004802:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004806:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800480a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004810:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004814:	430b      	orrs	r3, r1
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004816:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004818:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800481a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800481e:	4608      	mov	r0, r1
}
 8004820:	bc30      	pop	{r4, r5}
 8004822:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004824:	2002      	movs	r0, #2
}
 8004826:	4770      	bx	lr
 8004828:	40012c00 	.word	0x40012c00

0800482c <HAL_TIMEx_CommutCallback>:
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <HAL_TIMEx_BreakCallback>:
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <HAL_TIMEx_Break2Callback>:
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004838:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800483a:	07da      	lsls	r2, r3, #31
{
 800483c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800483e:	d506      	bpl.n	800484e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004840:	6801      	ldr	r1, [r0, #0]
 8004842:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004844:	684a      	ldr	r2, [r1, #4]
 8004846:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800484a:	4322      	orrs	r2, r4
 800484c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484e:	079c      	lsls	r4, r3, #30
 8004850:	d506      	bpl.n	8004860 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004852:	6801      	ldr	r1, [r0, #0]
 8004854:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004856:	684a      	ldr	r2, [r1, #4]
 8004858:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800485c:	4322      	orrs	r2, r4
 800485e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004860:	0759      	lsls	r1, r3, #29
 8004862:	d506      	bpl.n	8004872 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004864:	6801      	ldr	r1, [r0, #0]
 8004866:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004868:	684a      	ldr	r2, [r1, #4]
 800486a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800486e:	4322      	orrs	r2, r4
 8004870:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004872:	071a      	lsls	r2, r3, #28
 8004874:	d506      	bpl.n	8004884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004876:	6801      	ldr	r1, [r0, #0]
 8004878:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800487a:	684a      	ldr	r2, [r1, #4]
 800487c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004880:	4322      	orrs	r2, r4
 8004882:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004884:	06dc      	lsls	r4, r3, #27
 8004886:	d506      	bpl.n	8004896 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800488c:	688a      	ldr	r2, [r1, #8]
 800488e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004892:	4322      	orrs	r2, r4
 8004894:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004896:	0699      	lsls	r1, r3, #26
 8004898:	d506      	bpl.n	80048a8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489a:	6801      	ldr	r1, [r0, #0]
 800489c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800489e:	688a      	ldr	r2, [r1, #8]
 80048a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048a4:	4322      	orrs	r2, r4
 80048a6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a8:	065a      	lsls	r2, r3, #25
 80048aa:	d509      	bpl.n	80048c0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ac:	6801      	ldr	r1, [r0, #0]
 80048ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80048b0:	684a      	ldr	r2, [r1, #4]
 80048b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80048b6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048bc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048be:	d00b      	beq.n	80048d8 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	d506      	bpl.n	80048d2 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c4:	6802      	ldr	r2, [r0, #0]
 80048c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80048c8:	6853      	ldr	r3, [r2, #4]
 80048ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80048ce:	430b      	orrs	r3, r1
 80048d0:	6053      	str	r3, [r2, #4]
  }
}
 80048d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048d6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d8:	684a      	ldr	r2, [r1, #4]
 80048da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80048dc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80048e0:	4322      	orrs	r2, r4
 80048e2:	604a      	str	r2, [r1, #4]
 80048e4:	e7ec      	b.n	80048c0 <UART_AdvFeatureConfig+0x88>
 80048e6:	bf00      	nop

080048e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	2300      	movs	r3, #0
{
 80048ec:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f2:	f7fd fbc3 	bl	800207c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80048fc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fe:	d40b      	bmi.n	8004918 <UART_CheckIdleState+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	0752      	lsls	r2, r2, #29
 8004904:	d42d      	bmi.n	8004962 <UART_CheckIdleState+0x7a>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004908:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 800490a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 800490e:	67a2      	str	r2, [r4, #120]	; 0x78

  return HAL_OK;
 8004910:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8004912:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	6623      	str	r3, [r4, #96]	; 0x60
}
 8004916:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	0292      	lsls	r2, r2, #10
 800491c:	d4f0      	bmi.n	8004900 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fd fbad 	bl	800207c <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004922:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	1b40      	subs	r0, r0, r5
 8004926:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492c:	d22a      	bcs.n	8004984 <UART_CheckIdleState+0x9c>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800492e:	0750      	lsls	r0, r2, #29
 8004930:	d5f2      	bpl.n	8004918 <UART_CheckIdleState+0x30>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	0511      	lsls	r1, r2, #20
 8004936:	d5ef      	bpl.n	8004918 <UART_CheckIdleState+0x30>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800493c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004944:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004946:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004948:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	f021 0101 	bic.w	r1, r1, #1
 800494e:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004950:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8004952:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8004956:	67a2      	str	r2, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8004958:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 800495a:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800495c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 8004960:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	0258      	lsls	r0, r3, #9
 8004966:	d4ce      	bmi.n	8004906 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004968:	f7fd fb88 	bl	800207c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800496c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	1b40      	subs	r0, r0, r5
 8004970:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004974:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	d205      	bcs.n	8004984 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004978:	0751      	lsls	r1, r2, #29
 800497a:	d5f2      	bpl.n	8004962 <UART_CheckIdleState+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	0512      	lsls	r2, r2, #20
 8004980:	d5ef      	bpl.n	8004962 <UART_CheckIdleState+0x7a>
 8004982:	e7d9      	b.n	8004938 <UART_CheckIdleState+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004984:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004988:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 800498c:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004994:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8004996:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 800499a:	67a1      	str	r1, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 800499c:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800499e:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 80049a0:	bd38      	pop	{r3, r4, r5, pc}
 80049a2:	bf00      	nop

080049a4 <HAL_UART_Init>:
  if (huart == NULL)
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f000 8128 	beq.w	8004bfa <HAL_UART_Init+0x256>
{
 80049aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80049ac:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80049ae:	4604      	mov	r4, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d036      	beq.n	8004a22 <HAL_UART_Init+0x7e>
  __HAL_UART_DISABLE(huart);
 80049b4:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b6:	6927      	ldr	r7, [r4, #16]
 80049b8:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ba:	499c      	ldr	r1, [pc, #624]	; (8004c2c <HAL_UART_Init+0x288>)
  huart->gState = HAL_UART_STATE_BUSY;
 80049bc:	2224      	movs	r2, #36	; 0x24
 80049be:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80049c0:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049c2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80049c4:	f020 0001 	bic.w	r0, r0, #1
 80049c8:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ca:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049cc:	69e0      	ldr	r0, [r4, #28]
 80049ce:	433a      	orrs	r2, r7
 80049d0:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d2:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049de:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80049e0:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80049e6:	4329      	orrs	r1, r5
 80049e8:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ea:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ec:	4d90      	ldr	r5, [pc, #576]	; (8004c30 <HAL_UART_Init+0x28c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ee:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80049f2:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f4:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049f6:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049fa:	d017      	beq.n	8004a2c <HAL_UART_Init+0x88>
 80049fc:	4a8d      	ldr	r2, [pc, #564]	; (8004c34 <HAL_UART_Init+0x290>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d038      	beq.n	8004a74 <HAL_UART_Init+0xd0>
 8004a02:	4a8d      	ldr	r2, [pc, #564]	; (8004c38 <HAL_UART_Init+0x294>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	f000 80e0 	beq.w	8004bca <HAL_UART_Init+0x226>
 8004a0a:	4a8c      	ldr	r2, [pc, #560]	; (8004c3c <HAL_UART_Init+0x298>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	f000 8098 	beq.w	8004b42 <HAL_UART_Init+0x19e>
 8004a12:	4a8b      	ldr	r2, [pc, #556]	; (8004c40 <HAL_UART_Init+0x29c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d04a      	beq.n	8004aae <HAL_UART_Init+0x10a>
  huart->RxISR = NULL;
 8004a18:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004a1a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8004a1e:	2001      	movs	r0, #1
 8004a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004a22:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004a26:	f7fc fb5d 	bl	80010e4 <HAL_UART_MspInit>
 8004a2a:	e7c3      	b.n	80049b4 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a2c:	4b85      	ldr	r3, [pc, #532]	; (8004c44 <HAL_UART_Init+0x2a0>)
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d874      	bhi.n	8004b24 <HAL_UART_Init+0x180>
 8004a3a:	4a83      	ldr	r2, [pc, #524]	; (8004c48 <HAL_UART_Init+0x2a4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	f000 808c 	beq.w	8004b5e <HAL_UART_Init+0x1ba>
    switch (clocksource)
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d8e6      	bhi.n	8004a18 <HAL_UART_Init+0x74>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <HAL_UART_Init+0xac>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004b3d 	.word	0x08004b3d
 8004a54:	08004b2b 	.word	0x08004b2b
 8004a58:	08004b21 	.word	0x08004b21
 8004a5c:	08004a19 	.word	0x08004a19
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a19 	.word	0x08004a19
 8004a68:	08004a19 	.word	0x08004a19
 8004a6c:	08004a19 	.word	0x08004a19
 8004a70:	08004ac3 	.word	0x08004ac3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a74:	4b73      	ldr	r3, [pc, #460]	; (8004c44 <HAL_UART_Init+0x2a0>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a80:	d01c      	beq.n	8004abc <HAL_UART_Init+0x118>
 8004a82:	d846      	bhi.n	8004b12 <HAL_UART_Init+0x16e>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d056      	beq.n	8004b36 <HAL_UART_Init+0x192>
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8c:	d1c4      	bne.n	8004a18 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004a92:	f000 80bd 	beq.w	8004c10 <HAL_UART_Init+0x26c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fe fe1b 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004a9a:	b9a0      	cbnz	r0, 8004ac6 <HAL_UART_Init+0x122>
  huart->RxISR = NULL;
 8004a9c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004a9e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aa4:	b31b      	cbz	r3, 8004aee <HAL_UART_Init+0x14a>
    UART_AdvFeatureConfig(huart);
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7ff fec6 	bl	8004838 <UART_AdvFeatureConfig>
 8004aac:	e01f      	b.n	8004aee <HAL_UART_Init+0x14a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aae:	4b65      	ldr	r3, [pc, #404]	; (8004c44 <HAL_UART_Init+0x2a0>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aba:	d139      	bne.n	8004b30 <HAL_UART_Init+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004ac0:	d066      	beq.n	8004b90 <HAL_UART_Init+0x1ec>
        pclk = (uint32_t) LSE_VALUE;
 8004ac2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004acc:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ad0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad2:	f1a0 0210 	sub.w	r2, r0, #16
 8004ad6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d89c      	bhi.n	8004a18 <HAL_UART_Init+0x74>
        huart->Instance->BRR = usartdiv;
 8004ade:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8004ae0:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 8004ae2:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8004ae4:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1db      	bne.n	8004aa6 <HAL_UART_Init+0x102>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004b06:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004b08:	601a      	str	r2, [r3, #0]
}
 8004b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8004b0e:	f7ff beeb 	b.w	80048e8 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b16:	f47f af7f 	bne.w	8004a18 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b1e:	d052      	beq.n	8004bc6 <HAL_UART_Init+0x222>
 8004b20:	484a      	ldr	r0, [pc, #296]	; (8004c4c <HAL_UART_Init+0x2a8>)
 8004b22:	e7d0      	b.n	8004ac6 <HAL_UART_Init+0x122>
 8004b24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b28:	d07c      	beq.n	8004c24 <HAL_UART_Init+0x280>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b2a:	f7fe fe17 	bl	800375c <HAL_RCC_GetPCLK2Freq>
        break;
 8004b2e:	e7b4      	b.n	8004a9a <HAL_UART_Init+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b30:	d86a      	bhi.n	8004c08 <HAL_UART_Init+0x264>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d163      	bne.n	8004bfe <HAL_UART_Init+0x25a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b36:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b3a:	d070      	beq.n	8004c1e <HAL_UART_Init+0x27a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7fe fdf6 	bl	800372c <HAL_RCC_GetPCLK1Freq>
        break;
 8004b40:	e7ab      	b.n	8004a9a <HAL_UART_Init+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b42:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <HAL_UART_Init+0x2a0>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b4e:	d0b5      	beq.n	8004abc <HAL_UART_Init+0x118>
 8004b50:	d84f      	bhi.n	8004bf2 <HAL_UART_Init+0x24e>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ef      	beq.n	8004b36 <HAL_UART_Init+0x192>
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5a:	d098      	beq.n	8004a8e <HAL_UART_Init+0xea>
 8004b5c:	e75c      	b.n	8004a18 <HAL_UART_Init+0x74>
    switch (clocksource)
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	f63f af5a 	bhi.w	8004a18 <HAL_UART_Init+0x74>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <HAL_UART_Init+0x1c8>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004c1f 	.word	0x08004c1f
 8004b70:	08004c25 	.word	0x08004c25
 8004b74:	08004bc7 	.word	0x08004bc7
 8004b78:	08004a19 	.word	0x08004a19
 8004b7c:	08004c11 	.word	0x08004c11
 8004b80:	08004a19 	.word	0x08004a19
 8004b84:	08004a19 	.word	0x08004a19
 8004b88:	08004a19 	.word	0x08004a19
 8004b8c:	08004b91 	.word	0x08004b91
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004b9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b9e:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba0:	f1a3 0110 	sub.w	r1, r3, #16
 8004ba4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004ba8:	4291      	cmp	r1, r2
 8004baa:	f63f af35 	bhi.w	8004a18 <HAL_UART_Init+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bae:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004bb6:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb8:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8004bba:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8004bbc:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 8004bbe:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8004bc0:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  return ret;
 8004bc4:	e790      	b.n	8004ae8 <HAL_UART_Init+0x144>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc6:	4822      	ldr	r0, [pc, #136]	; (8004c50 <HAL_UART_Init+0x2ac>)
 8004bc8:	e7e4      	b.n	8004b94 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <HAL_UART_Init+0x2a0>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004bd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bd6:	f43f af71 	beq.w	8004abc <HAL_UART_Init+0x118>
 8004bda:	d806      	bhi.n	8004bea <HAL_UART_Init+0x246>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0aa      	beq.n	8004b36 <HAL_UART_Init+0x192>
 8004be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004be4:	f43f af53 	beq.w	8004a8e <HAL_UART_Init+0xea>
 8004be8:	e716      	b.n	8004a18 <HAL_UART_Init+0x74>
 8004bea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bee:	d094      	beq.n	8004b1a <HAL_UART_Init+0x176>
 8004bf0:	e712      	b.n	8004a18 <HAL_UART_Init+0x74>
 8004bf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bf6:	d090      	beq.n	8004b1a <HAL_UART_Init+0x176>
 8004bf8:	e70e      	b.n	8004a18 <HAL_UART_Init+0x74>
}
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c02:	f43f af44 	beq.w	8004a8e <HAL_UART_Init+0xea>
 8004c06:	e707      	b.n	8004a18 <HAL_UART_Init+0x74>
 8004c08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c0c:	d085      	beq.n	8004b1a <HAL_UART_Init+0x176>
 8004c0e:	e703      	b.n	8004a18 <HAL_UART_Init+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c10:	f7fe fd5e 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f43f af41 	beq.w	8004a9c <HAL_UART_Init+0xf8>
 8004c1a:	0040      	lsls	r0, r0, #1
 8004c1c:	e7ba      	b.n	8004b94 <HAL_UART_Init+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1e:	f7fe fd85 	bl	800372c <HAL_RCC_GetPCLK1Freq>
        break;
 8004c22:	e7f7      	b.n	8004c14 <HAL_UART_Init+0x270>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fe fd9a 	bl	800375c <HAL_RCC_GetPCLK2Freq>
        break;
 8004c28:	e7f4      	b.n	8004c14 <HAL_UART_Init+0x270>
 8004c2a:	bf00      	nop
 8004c2c:	efff69f3 	.word	0xefff69f3
 8004c30:	40013800 	.word	0x40013800
 8004c34:	40004400 	.word	0x40004400
 8004c38:	40004800 	.word	0x40004800
 8004c3c:	40004c00 	.word	0x40004c00
 8004c40:	40005000 	.word	0x40005000
 8004c44:	40021000 	.word	0x40021000
 8004c48:	08004cfc 	.word	0x08004cfc
 8004c4c:	007a1200 	.word	0x007a1200
 8004c50:	00f42400 	.word	0x00f42400

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4d0d      	ldr	r5, [pc, #52]	; (8004c8c <__libc_init_array+0x38>)
 8004c58:	4c0d      	ldr	r4, [pc, #52]	; (8004c90 <__libc_init_array+0x3c>)
 8004c5a:	1b64      	subs	r4, r4, r5
 8004c5c:	10a4      	asrs	r4, r4, #2
 8004c5e:	2600      	movs	r6, #0
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	4d0b      	ldr	r5, [pc, #44]	; (8004c94 <__libc_init_array+0x40>)
 8004c66:	4c0c      	ldr	r4, [pc, #48]	; (8004c98 <__libc_init_array+0x44>)
 8004c68:	f000 f820 	bl	8004cac <_init>
 8004c6c:	1b64      	subs	r4, r4, r5
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	2600      	movs	r6, #0
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08004d00 	.word	0x08004d00
 8004c90:	08004d00 	.word	0x08004d00
 8004c94:	08004d00 	.word	0x08004d00
 8004c98:	08004d04 	.word	0x08004d04

08004c9c <memset>:
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <_init>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr

08004cb8 <_fini>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr

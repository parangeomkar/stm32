
MPC_12_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004060  08004060  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004060  08004060  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004060  08004060  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  2000000c  08004074  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08004074  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c1  00000000  00000000  000388f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0003bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002230  00000000  00000000  0003c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217c4  00000000  00000000  0003eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3f8  00000000  00000000  00060274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1206  00000000  00000000  0007b66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e94  00000000  00000000  0014c8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00011aa8  00000000  00000000  0014f75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800400c 	.word	0x0800400c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800400c 	.word	0x0800400c

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d8:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001da:	2258      	movs	r2, #88	; 0x58
 80001dc:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e2:	e9cd 1100 	strd	r1, r1, [sp]
 80001e6:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ee:	f003 ff05 	bl	8003ffc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f4:	2310      	movs	r3, #16
 80001f6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2202      	movs	r2, #2
 80001fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000200:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800020a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f001 fe68 	bl	8001ee8 <HAL_RCC_OscConfig>
 8000218:	b108      	cbz	r0, 800021e <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800021a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800021c:	e7fe      	b.n	800021c <SystemClock_Config+0x48>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021e:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000220:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	240f      	movs	r4, #15
 800022e:	2502      	movs	r5, #2
 8000230:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000234:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f002 f944 	bl	80024c4 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	b108      	cbz	r0, 8000244 <SystemClock_Config+0x70>
 8000240:	b672      	cpsid	i
  while (1)
 8000242:	e7fe      	b.n	8000242 <SystemClock_Config+0x6e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000244:	4c0a      	ldr	r4, [pc, #40]	; (8000270 <SystemClock_Config+0x9c>)
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000246:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000248:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800024c:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8000250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000254:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000256:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000258:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800025a:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800025c:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 800025e:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	f002 fa7c 	bl	800275c <HAL_RCCEx_PeriphCLKConfig>
 8000264:	b108      	cbz	r0, 800026a <SystemClock_Config+0x96>
 8000266:	b672      	cpsid	i
  while (1)
 8000268:	e7fe      	b.n	8000268 <SystemClock_Config+0x94>
}
 800026a:	b027      	add	sp, #156	; 0x9c
 800026c:	bd30      	pop	{r4, r5, pc}
 800026e:	bf00      	nop
 8000270:	00301082 	.word	0x00301082

08000274 <main>:
{
 8000274:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	2400      	movs	r4, #0
{
 800027a:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 800027c:	f000 fe4e 	bl	8000f1c <HAL_Init>
  SystemClock_Config();
 8000280:	f7ff ffa8 	bl	80001d4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000288:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028c:	4eaa      	ldr	r6, [pc, #680]	; (8000538 <main+0x2c4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000290:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000292:	4daa      	ldr	r5, [pc, #680]	; (800053c <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000298:	6173      	str	r3, [r6, #20]
 800029a:	6973      	ldr	r3, [r6, #20]
 800029c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002a0:	9302      	str	r3, [sp, #8]
 80002a2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002a4:	6973      	ldr	r3, [r6, #20]
 80002a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002aa:	6173      	str	r3, [r6, #20]
 80002ac:	6973      	ldr	r3, [r6, #20]
 80002ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002b2:	9303      	str	r3, [sp, #12]
 80002b4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	6973      	ldr	r3, [r6, #20]
 80002b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002bc:	6173      	str	r3, [r6, #20]
 80002be:	6973      	ldr	r3, [r6, #20]
 80002c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c4:	9304      	str	r3, [sp, #16]
 80002c6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	6973      	ldr	r3, [r6, #20]
 80002ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002ce:	6173      	str	r3, [r6, #20]
 80002d0:	6973      	ldr	r3, [r6, #20]
 80002d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002d6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d8:	4622      	mov	r2, r4
 80002da:	2120      	movs	r1, #32
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e2:	f001 fded 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80002e6:	4896      	ldr	r0, [pc, #600]	; (8000540 <main+0x2cc>)
 80002e8:	4622      	mov	r2, r4
 80002ea:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80002ee:	f001 fde7 	bl	8001ec0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80002f2:	4b94      	ldr	r3, [pc, #592]	; (8000544 <main+0x2d0>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80002f4:	4892      	ldr	r0, [pc, #584]	; (8000540 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80002f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80002fc:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80002fe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = LD2_Pin;
 8000302:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000306:	f001 fcd9 	bl	8001cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800030a:	f04f 0900 	mov.w	r9, #0
 800030e:	2220      	movs	r2, #32
 8000310:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000312:	a916      	add	r1, sp, #88	; 0x58
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 8000318:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800031c:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000320:	f001 fccc 	bl	8001cbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000324:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000328:	2301      	movs	r3, #1
 800032a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032e:	4884      	ldr	r0, [pc, #528]	; (8000540 <main+0x2cc>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000330:	2202      	movs	r2, #2
 8000332:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000334:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000336:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033a:	f001 fcbf 	bl	8001cbc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033e:	6973      	ldr	r3, [r6, #20]
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6173      	str	r3, [r6, #20]
 8000346:	6973      	ldr	r3, [r6, #20]
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000350:	6973      	ldr	r3, [r6, #20]
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6173      	str	r3, [r6, #20]
 8000358:	6973      	ldr	r3, [r6, #20]
 800035a:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800035e:	4622      	mov	r2, r4
 8000360:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000362:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000364:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000366:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000368:	f001 fb3c 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800036c:	200b      	movs	r0, #11
 800036e:	f001 fb71 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  hadc1.Init.NbrOfConversion = 3;
 8000372:	2003      	movs	r0, #3
  hadc1.Instance = ADC1;
 8000374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000378:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037c:	2104      	movs	r1, #4
  hadc1.Init.NbrOfConversion = 3;
 800037e:	61e8      	str	r0, [r5, #28]
  hadc1.Instance = ADC1;
 8000380:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000382:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000384:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000386:	832a      	strh	r2, [r5, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000388:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 800038c:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8000390:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8000394:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000398:	e9c5 4401 	strd	r4, r4, [r5, #4]
  ADC_MultiModeTypeDef multimode = {0};
 800039c:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800039e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a2:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a4:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a8:	60ec      	str	r4, [r5, #12]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003aa:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ac:	6169      	str	r1, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ae:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003b0:	612b      	str	r3, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b2:	f000 fe6b 	bl	800108c <HAL_ADC_Init>
 80003b6:	b108      	cbz	r0, 80003bc <main+0x148>
 80003b8:	b672      	cpsid	i
  while (1)
 80003ba:	e7fe      	b.n	80003ba <main+0x146>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003bc:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003be:	a90e      	add	r1, sp, #56	; 0x38
 80003c0:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003c4:	f001 fa6a 	bl	800189c <HAL_ADCEx_MultiModeConfigChannel>
 80003c8:	b108      	cbz	r0, 80003ce <main+0x15a>
 80003ca:	b672      	cpsid	i
  while (1)
 80003cc:	e7fe      	b.n	80003cc <main+0x158>
  sConfig.Channel = ADC_CHANNEL_1;
 80003ce:	2201      	movs	r2, #1
 80003d0:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d2:	a916      	add	r1, sp, #88	; 0x58
 80003d4:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80003d6:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 80003da:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 80003de:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e2:	f001 f89b 	bl	800151c <HAL_ADC_ConfigChannel>
 80003e6:	b108      	cbz	r0, 80003ec <main+0x178>
 80003e8:	b672      	cpsid	i
  while (1)
 80003ea:	e7fe      	b.n	80003ea <main+0x176>
  sConfig.Channel = ADC_CHANNEL_7;
 80003ec:	2207      	movs	r2, #7
 80003ee:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f0:	a916      	add	r1, sp, #88	; 0x58
 80003f2:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_7;
 80003f4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f8:	f001 f890 	bl	800151c <HAL_ADC_ConfigChannel>
 80003fc:	b108      	cbz	r0, 8000402 <main+0x18e>
 80003fe:	b672      	cpsid	i
  while (1)
 8000400:	e7fe      	b.n	8000400 <main+0x18c>
  sConfig.Channel = ADC_CHANNEL_14;
 8000402:	2303      	movs	r3, #3
 8000404:	220e      	movs	r2, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	4628      	mov	r0, r5
 8000408:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_14;
 800040a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040e:	f001 f885 	bl	800151c <HAL_ADC_ConfigChannel>
 8000412:	4603      	mov	r3, r0
 8000414:	b108      	cbz	r0, 800041a <main+0x1a6>
 8000416:	b672      	cpsid	i
  while (1)
 8000418:	e7fe      	b.n	8000418 <main+0x1a4>
  hdac1.Instance = DAC1;
 800041a:	4c4b      	ldr	r4, [pc, #300]	; (8000548 <main+0x2d4>)
 800041c:	4a4b      	ldr	r2, [pc, #300]	; (800054c <main+0x2d8>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800041e:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000420:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8000422:	6022      	str	r2, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8000424:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000428:	f001 fb3c 	bl	8001aa4 <HAL_DAC_Init>
 800042c:	4602      	mov	r2, r0
 800042e:	b108      	cbz	r0, 8000434 <main+0x1c0>
 8000430:	b672      	cpsid	i
  while (1)
 8000432:	e7fe      	b.n	8000432 <main+0x1be>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000434:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000436:	2502      	movs	r5, #2
 8000438:	243c      	movs	r4, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800043a:	a916      	add	r1, sp, #88	; 0x58
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800043c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000440:	f001 fb46 	bl	8001ad0 <HAL_DAC_ConfigChannel>
 8000444:	4604      	mov	r4, r0
 8000446:	b108      	cbz	r0, 800044c <main+0x1d8>
 8000448:	b672      	cpsid	i
  while (1)
 800044a:	e7fe      	b.n	800044a <main+0x1d6>
  htim1.Instance = TIM1;
 800044c:	4d40      	ldr	r5, [pc, #256]	; (8000550 <main+0x2dc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044e:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000450:	4601      	mov	r1, r0
 8000452:	222c      	movs	r2, #44	; 0x2c
 8000454:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000456:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800045a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 800045e:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000462:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000466:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800046a:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800046c:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046e:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000470:	f003 fdc4 	bl	8003ffc <memset>
  htim1.Instance = TIM1;
 8000474:	4b37      	ldr	r3, [pc, #220]	; (8000554 <main+0x2e0>)
 8000476:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 6;
 8000478:	2006      	movs	r0, #6
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800047a:	2120      	movs	r1, #32
  htim1.Init.Period = 517;
 800047c:	f240 2205 	movw	r2, #517	; 0x205
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000480:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 6;
 8000482:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000484:	4628      	mov	r0, r5
  htim1.Init.Period = 517;
 8000486:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800048c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800048e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000490:	f002 fb48 	bl	8002b24 <HAL_TIM_Base_Init>
 8000494:	b108      	cbz	r0, 800049a <main+0x226>
 8000496:	b672      	cpsid	i
  while (1)
 8000498:	e7fe      	b.n	8000498 <main+0x224>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800049e:	a90a      	add	r1, sp, #40	; 0x28
 80004a0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a4:	f002 fe10 	bl	80030c8 <HAL_TIM_ConfigClockSource>
 80004a8:	b108      	cbz	r0, 80004ae <main+0x23a>
 80004aa:	b672      	cpsid	i
  while (1)
 80004ac:	e7fe      	b.n	80004ac <main+0x238>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004ae:	4628      	mov	r0, r5
 80004b0:	f002 fc0c 	bl	8002ccc <HAL_TIM_PWM_Init>
 80004b4:	b108      	cbz	r0, 80004ba <main+0x246>
 80004b6:	b672      	cpsid	i
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <main+0x244>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80004ba:	2470      	movs	r4, #112	; 0x70
 80004bc:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c2:	4823      	ldr	r0, [pc, #140]	; (8000550 <main+0x2dc>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c6:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80004c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004cc:	f003 f8f4 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 80004d0:	b108      	cbz	r0, 80004d6 <main+0x262>
 80004d2:	b672      	cpsid	i
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x260>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d6:	2460      	movs	r4, #96	; 0x60
 80004d8:	2500      	movs	r5, #0
 80004da:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004de:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e0:	2400      	movs	r4, #0
 80004e2:	2500      	movs	r5, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004e4:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004e6:	a90e      	add	r1, sp, #56	; 0x38
 80004e8:	4819      	ldr	r0, [pc, #100]	; (8000550 <main+0x2dc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ea:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80004ee:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f2:	f002 ffa3 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 80004f6:	b108      	cbz	r0, 80004fc <main+0x288>
 80004f8:	b672      	cpsid	i
  while (1)
 80004fa:	e7fe      	b.n	80004fa <main+0x286>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004fc:	4814      	ldr	r0, [pc, #80]	; (8000550 <main+0x2dc>)
 80004fe:	2204      	movs	r2, #4
 8000500:	a90e      	add	r1, sp, #56	; 0x38
 8000502:	f002 ff9b 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 8000506:	b108      	cbz	r0, 800050c <main+0x298>
 8000508:	b672      	cpsid	i
  while (1)
 800050a:	e7fe      	b.n	800050a <main+0x296>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <main+0x2dc>)
 800050e:	2208      	movs	r2, #8
 8000510:	a90e      	add	r1, sp, #56	; 0x38
 8000512:	f002 ff93 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 8000516:	b108      	cbz	r0, 800051c <main+0x2a8>
 8000518:	b672      	cpsid	i
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x2a6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800051c:	2470      	movs	r4, #112	; 0x70
 800051e:	f240 15fd 	movw	r5, #509	; 0x1fd
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x2dc>)
 8000524:	220c      	movs	r2, #12
 8000526:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000528:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800052c:	f002 ff86 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 8000530:	b190      	cbz	r0, 8000558 <main+0x2e4>
 8000532:	b672      	cpsid	i
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x2c0>
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	20000178 	.word	0x20000178
 8000540:	48000800 	.word	0x48000800
 8000544:	10210000 	.word	0x10210000
 8000548:	200000bc 	.word	0x200000bc
 800054c:	40007400 	.word	0x40007400
 8000550:	20000250 	.word	0x20000250
 8000554:	40012c00 	.word	0x40012c00
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800055c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000560:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000568:	2300      	movs	r3, #0
 800056a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000574:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000578:	2200      	movs	r2, #0
 800057a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800057e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000582:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000584:	2200      	movs	r2, #0
 8000586:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000588:	48b1      	ldr	r0, [pc, #708]	; (8000850 <main+0x5dc>)
 800058a:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800058c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000590:	f003 f8ec 	bl	800376c <HAL_TIMEx_ConfigBreakDeadTime>
 8000594:	4604      	mov	r4, r0
 8000596:	b108      	cbz	r0, 800059c <main+0x328>
 8000598:	b672      	cpsid	i
  while (1)
 800059a:	e7fe      	b.n	800059a <main+0x326>
  htim2.Instance = TIM2;
 800059c:	4dad      	ldr	r5, [pc, #692]	; (8000854 <main+0x5e0>)
  HAL_TIM_MspPostInit(&htim1);
 800059e:	48ac      	ldr	r0, [pc, #688]	; (8000850 <main+0x5dc>)
 80005a0:	f000 fb0c 	bl	8000bbc <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80005a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 29;
 80005a8:	221d      	movs	r2, #29
  htim2.Init.Period = 565;
 80005aa:	f240 2335 	movw	r3, #565	; 0x235
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ae:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b0:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80005b4:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80005bc:	9410      	str	r4, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c0:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c2:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 80005c4:	6029      	str	r1, [r5, #0]
  htim2.Init.Prescaler = 29;
 80005c6:	606a      	str	r2, [r5, #4]
  htim2.Init.Period = 565;
 80005c8:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ca:	f002 faab 	bl	8002b24 <HAL_TIM_Base_Init>
 80005ce:	b108      	cbz	r0, 80005d4 <main+0x360>
 80005d0:	b672      	cpsid	i
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x35e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005d8:	a916      	add	r1, sp, #88	; 0x58
 80005da:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005de:	f002 fd73 	bl	80030c8 <HAL_TIM_ConfigClockSource>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b108      	cbz	r0, 80005ea <main+0x376>
 80005e6:	b672      	cpsid	i
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x374>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ea:	4628      	mov	r0, r5
 80005ec:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ee:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f2:	f003 f861 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 80005f6:	b108      	cbz	r0, 80005fc <main+0x388>
 80005f8:	b672      	cpsid	i
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x386>
  huart2.Instance = USART2;
 80005fc:	4b96      	ldr	r3, [pc, #600]	; (8000858 <main+0x5e4>)
 80005fe:	4c97      	ldr	r4, [pc, #604]	; (800085c <main+0x5e8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000600:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 1843200;
 8000602:	f44f 11e1 	mov.w	r1, #1843200	; 0x1c2000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000606:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8000608:	e9c3 0003 	strd	r0, r0, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000610:	f44f 6000 	mov.w	r0, #2048	; 0x800
  huart2.Init.BaudRate = 1843200;
 8000614:	6059      	str	r1, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000616:	615a      	str	r2, [r3, #20]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000618:	2120      	movs	r1, #32
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800061a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800061e:	6218      	str	r0, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000620:	4618      	mov	r0, r3
  huart2.Instance = USART2;
 8000622:	601c      	str	r4, [r3, #0]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000624:	6259      	str	r1, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000626:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000628:	f003 fa78 	bl	8003b1c <HAL_UART_Init>
 800062c:	b108      	cbz	r0, 8000632 <main+0x3be>
 800062e:	b672      	cpsid	i
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x3bc>
  htim3.Instance = TIM3;
 8000632:	4c8b      	ldr	r4, [pc, #556]	; (8000860 <main+0x5ec>)
 8000634:	4b8b      	ldr	r3, [pc, #556]	; (8000864 <main+0x5f0>)
 8000636:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 517;
 8000638:	f240 2205 	movw	r2, #517	; 0x205
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 6;
 800063e:	f04f 0906 	mov.w	r9, #6
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000642:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	e9c4 9301 	strd	r9, r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000648:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 800064c:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim3.Init.Period = 517;
 8000654:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000656:	9310      	str	r3, [sp, #64]	; 0x40
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800065c:	f002 fa62 	bl	8002b24 <HAL_TIM_Base_Init>
 8000660:	b108      	cbz	r0, 8000666 <main+0x3f2>
 8000662:	b672      	cpsid	i
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x3f0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000666:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800066a:	a916      	add	r1, sp, #88	; 0x58
 800066c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066e:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000672:	f002 fd29 	bl	80030c8 <HAL_TIM_ConfigClockSource>
 8000676:	b108      	cbz	r0, 800067c <main+0x408>
 8000678:	b672      	cpsid	i
  while (1)
 800067a:	e7fe      	b.n	800067a <main+0x406>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800067c:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800067e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000680:	a90e      	add	r1, sp, #56	; 0x38
 8000682:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000684:	920e      	str	r2, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000686:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000688:	f003 f816 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	b108      	cbz	r0, 8000692 <main+0x41e>
 800068e:	b672      	cpsid	i
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x41c>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4c75      	ldr	r4, [pc, #468]	; (8000868 <main+0x5f4>)
  hadc2.Instance = ADC2;
 8000694:	4a75      	ldr	r2, [pc, #468]	; (800086c <main+0x5f8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	9016      	str	r0, [sp, #88]	; 0x58
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000698:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	2501      	movs	r5, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 80006a2:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a6:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hadc2.Init.NbrOfConversion = 2;
 80006aa:	2102      	movs	r1, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ac:	901b      	str	r0, [sp, #108]	; 0x6c
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006b4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b8:	60e0      	str	r0, [r4, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ba:	6360      	str	r0, [r4, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006c0:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006c2:	8323      	strh	r3, [r4, #24]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c4:	e9c4 5804 	strd	r5, r8, [r4, #16]
  hadc2.Init.NbrOfConversion = 2;
 80006c8:	61e1      	str	r1, [r4, #28]
  hadc2.Instance = ADC2;
 80006ca:	6022      	str	r2, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ce:	f000 fcdd 	bl	800108c <HAL_ADC_Init>
 80006d2:	b108      	cbz	r0, 80006d8 <main+0x464>
 80006d4:	b672      	cpsid	i
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <main+0x462>
  sConfig.Channel = ADC_CHANNEL_11;
 80006d8:	2600      	movs	r6, #0
 80006da:	2700      	movs	r7, #0
 80006dc:	220b      	movs	r2, #11
 80006de:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006e0:	a916      	add	r1, sp, #88	; 0x58
 80006e2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_11;
 80006e4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80006e8:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 80006ec:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006f0:	f000 ff14 	bl	800151c <HAL_ADC_ConfigChannel>
 80006f4:	b108      	cbz	r0, 80006fa <main+0x486>
 80006f6:	b672      	cpsid	i
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0x484>
  sConfig.Channel = ADC_CHANNEL_5;
 80006fa:	2205      	movs	r2, #5
 80006fc:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006fe:	a916      	add	r1, sp, #88	; 0x58
 8000700:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8000702:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000706:	f000 ff09 	bl	800151c <HAL_ADC_ConfigChannel>
 800070a:	b108      	cbz	r0, 8000710 <main+0x49c>
 800070c:	b672      	cpsid	i
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x49a>
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000710:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8000880 <main+0x60c>
  hadc4.Instance = ADC4;
 8000714:	4a56      	ldr	r2, [pc, #344]	; (8000870 <main+0x5fc>)
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000716:	f88b 0020 	strb.w	r0, [fp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 800071e:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 8000722:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	e9cb 500a 	strd	r5, r0, [fp, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	e9cb 0002 	strd	r0, r0, [fp, #8]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072e:	e9cb 0804 	strd	r0, r8, [fp, #16]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000732:	f88b 0030 	strb.w	r0, [fp, #48]	; 0x30
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000736:	f8ab 0018 	strh.w	r0, [fp, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800073a:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800073e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000742:	4658      	mov	r0, fp
  hadc4.Init.NbrOfConversion = 1;
 8000744:	f8cb 501c 	str.w	r5, [fp, #28]
  hadc4.Instance = ADC4;
 8000748:	f8cb 2000 	str.w	r2, [fp]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800074c:	f8cb 3004 	str.w	r3, [fp, #4]
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000750:	f000 fc9c 	bl	800108c <HAL_ADC_Init>
 8000754:	b108      	cbz	r0, 800075a <main+0x4e6>
 8000756:	b672      	cpsid	i
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x4e4>
  sConfig.Channel = ADC_CHANNEL_3;
 800075a:	2203      	movs	r2, #3
 800075c:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800075e:	a916      	add	r1, sp, #88	; 0x58
 8000760:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_3;
 8000762:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8000766:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 800076a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800076e:	f000 fed5 	bl	800151c <HAL_ADC_ConfigChannel>
 8000772:	4606      	mov	r6, r0
 8000774:	b108      	cbz	r0, 800077a <main+0x506>
 8000776:	b672      	cpsid	i
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x504>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 800077a:	462a      	mov	r2, r5
 800077c:	4641      	mov	r1, r8
 800077e:	2018      	movs	r0, #24
 8000780:	f001 f930 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000784:	2018      	movs	r0, #24
 8000786:	f001 f965 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800078a:	4632      	mov	r2, r6
 800078c:	4631      	mov	r1, r6
 800078e:	2019      	movs	r0, #25
 8000790:	f001 f928 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000794:	2019      	movs	r0, #25
 8000796:	f001 f95d 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800079a:	4632      	mov	r2, r6
 800079c:	2103      	movs	r1, #3
 800079e:	201c      	movs	r0, #28
 80007a0:	f001 f920 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007a4:	201c      	movs	r0, #28
 80007a6:	f001 f955 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80007aa:	462a      	mov	r2, r5
 80007ac:	2103      	movs	r1, #3
 80007ae:	2026      	movs	r0, #38	; 0x26
 80007b0:	f001 f918 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007b4:	2026      	movs	r0, #38	; 0x26
 80007b6:	f001 f94d 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80007ba:	4632      	mov	r2, r6
 80007bc:	2103      	movs	r1, #3
 80007be:	2028      	movs	r0, #40	; 0x28
 80007c0:	f001 f910 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007c4:	2028      	movs	r0, #40	; 0x28
 80007c6:	f001 f945 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ca:	4632      	mov	r2, r6
 80007cc:	4631      	mov	r1, r6
 80007ce:	2010      	movs	r0, #16
 80007d0:	f001 f908 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007d4:	2010      	movs	r0, #16
 80007d6:	f001 f93d 	bl	8001a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007da:	4632      	mov	r2, r6
 80007dc:	4631      	mov	r1, r6
 80007de:	201d      	movs	r0, #29
 80007e0:	f001 f900 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007e4:	201d      	movs	r0, #29
 80007e6:	f001 f935 	bl	8001a54 <HAL_NVIC_EnableIRQ>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80007ea:	4631      	mov	r1, r6
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <main+0x600>)
 80007ee:	f000 fe4f 	bl	8001490 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80007f2:	4631      	mov	r1, r6
 80007f4:	4620      	mov	r0, r4
 80007f6:	f000 fe4b 	bl	8001490 <HAL_ADCEx_Calibration_Start>
  	HAL_TIM_Base_Start_IT(&htim2);
 80007fa:	4816      	ldr	r0, [pc, #88]	; (8000854 <main+0x5e0>)
 80007fc:	f002 fa26 	bl	8002c4c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000800:	4631      	mov	r1, r6
 8000802:	4813      	ldr	r0, [pc, #76]	; (8000850 <main+0x5dc>)
 8000804:	f002 faf6 	bl	8002df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000808:	4641      	mov	r1, r8
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <main+0x5dc>)
 800080c:	f002 faf2 	bl	8002df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000810:	2108      	movs	r1, #8
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <main+0x5dc>)
 8000814:	f002 faee 	bl	8002df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000818:	210c      	movs	r1, #12
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <main+0x5dc>)
 800081c:	f002 fb84 	bl	8002f28 <HAL_TIM_PWM_Start_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8000820:	4815      	ldr	r0, [pc, #84]	; (8000878 <main+0x604>)
 8000822:	462a      	mov	r2, r5
 8000824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000828:	f001 fb4a 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 800082c:	4812      	ldr	r0, [pc, #72]	; (8000878 <main+0x604>)
 800082e:	462a      	mov	r2, r5
 8000830:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000834:	f001 fb44 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <main+0x604>)
 800083a:	462a      	mov	r2, r5
 800083c:	4651      	mov	r1, sl
 800083e:	f001 fb3f 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&huart2, RX_data, 6);
 8000842:	490e      	ldr	r1, [pc, #56]	; (800087c <main+0x608>)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <main+0x5e4>)
 8000846:	464a      	mov	r2, r9
 8000848:	f002 ffde 	bl	8003808 <HAL_UART_Receive_DMA>
  while (1)
 800084c:	e7fe      	b.n	800084c <main+0x5d8>
 800084e:	bf00      	nop
 8000850:	20000250 	.word	0x20000250
 8000854:	2000029c 	.word	0x2000029c
 8000858:	200002e8 	.word	0x200002e8
 800085c:	40004400 	.word	0x40004400
 8000860:	2000012c 	.word	0x2000012c
 8000864:	40000400 	.word	0x40000400
 8000868:	200000d0 	.word	0x200000d0
 800086c:	50000100 	.word	0x50000100
 8000870:	50000500 	.word	0x50000500
 8000874:	20000178 	.word	0x20000178
 8000878:	48000800 	.word	0x48000800
 800087c:	20000124 	.word	0x20000124
 8000880:	2000036c 	.word	0x2000036c

08000884 <Error_Handler>:
 8000884:	b672      	cpsid	i
  while (1)
 8000886:	e7fe      	b.n	8000886 <Error_Handler+0x2>

08000888 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x30>)
 800088a:	699a      	ldr	r2, [r3, #24]
 800088c:	f042 0201 	orr.w	r2, r2, #1
 8000890:	619a      	str	r2, [r3, #24]
 8000892:	699a      	ldr	r2, [r3, #24]
{
 8000894:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	f002 0201 	and.w	r2, r2, #1
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	69da      	ldr	r2, [r3, #28]
 80008a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008a4:	61da      	str	r2, [r3, #28]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008b0:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008b4:	f001 b882 	b.w	80019bc <HAL_NVIC_SetPriorityGrouping>
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008bc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80008be:	6803      	ldr	r3, [r0, #0]
{
 80008c0:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80008c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80008cc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
{
 80008d0:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	940c      	str	r4, [sp, #48]	; 0x30
  if(hadc->Instance==ADC1)
 80008d4:	d03b      	beq.n	800094e <HAL_ADC_MspInit+0x92>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80008d6:	4a67      	ldr	r2, [pc, #412]	; (8000a74 <HAL_ADC_MspInit+0x1b8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d005      	beq.n	80008e8 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 80008dc:	4a66      	ldr	r2, [pc, #408]	; (8000a78 <HAL_ADC_MspInit+0x1bc>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	f000 8091 	beq.w	8000a06 <HAL_ADC_MspInit+0x14a>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80008e4:	b00e      	add	sp, #56	; 0x38
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e8:	4a64      	ldr	r2, [pc, #400]	; (8000a7c <HAL_ADC_MspInit+0x1c0>)
 80008ea:	6813      	ldr	r3, [r2, #0]
 80008ec:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ee:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f2:	d07a      	beq.n	80009ea <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f4:	4b62      	ldr	r3, [pc, #392]	; (8000a80 <HAL_ADC_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	4863      	ldr	r0, [pc, #396]	; (8000a84 <HAL_ADC_MspInit+0x1c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f8:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA2_Channel1;
 80008fa:	4c63      	ldr	r4, [pc, #396]	; (8000a88 <HAL_ADC_MspInit+0x1cc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000908:	9305      	str	r3, [sp, #20]
 800090a:	9e05      	ldr	r6, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800090c:	2303      	movs	r3, #3
 800090e:	2230      	movs	r2, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000914:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f001 f9cf 	bl	8001cbc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800091e:	4b5b      	ldr	r3, [pc, #364]	; (8000a8c <HAL_ADC_MspInit+0x1d0>)
 8000920:	6023      	str	r3, [r4, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000922:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000924:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000928:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800092c:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800092e:	60e0      	str	r0, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000930:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000934:	6066      	str	r6, [r4, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000936:	60a6      	str	r6, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000938:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800093a:	4620      	mov	r0, r4
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800093c:	61a3      	str	r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800093e:	f001 f8ed 	bl	8001b1c <HAL_DMA_Init>
 8000942:	2800      	cmp	r0, #0
 8000944:	d15c      	bne.n	8000a00 <HAL_ADC_MspInit+0x144>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000946:	63ac      	str	r4, [r5, #56]	; 0x38
 8000948:	6265      	str	r5, [r4, #36]	; 0x24
}
 800094a:	b00e      	add	sp, #56	; 0x38
 800094c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800094e:	4a4b      	ldr	r2, [pc, #300]	; (8000a7c <HAL_ADC_MspInit+0x1c0>)
 8000950:	6813      	ldr	r3, [r2, #0]
 8000952:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000954:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000956:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000958:	d03c      	beq.n	80009d4 <HAL_ADC_MspInit+0x118>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <HAL_ADC_MspInit+0x1c4>)
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800095c:	4849      	ldr	r0, [pc, #292]	; (8000a84 <HAL_ADC_MspInit+0x1c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	695a      	ldr	r2, [r3, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8000960:	4c4b      	ldr	r4, [pc, #300]	; (8000a90 <HAL_ADC_MspInit+0x1d4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800096e:	9201      	str	r2, [sp, #4]
 8000970:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000980:	9202      	str	r2, [sp, #8]
 8000982:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000992:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8000994:	2202      	movs	r2, #2
 8000996:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800099e:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80009a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f001 f98a 	bl	8001cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80009a8:	2201      	movs	r2, #1
 80009aa:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80009ac:	a908      	add	r1, sp, #32
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80009b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f001 f980 	bl	8001cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009bc:	2303      	movs	r3, #3
 80009be:	f44f 6200 	mov.w	r2, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	4834      	ldr	r0, [pc, #208]	; (8000a94 <HAL_ADC_MspInit+0x1d8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f001 f976 	bl	8001cbc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <HAL_ADC_MspInit+0x1dc>)
 80009d2:	e7a5      	b.n	8000920 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_ADC_MspInit+0x1c4>)
 80009d6:	695a      	ldr	r2, [r3, #20]
 80009d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	9b00      	ldr	r3, [sp, #0]
 80009e8:	e7b7      	b.n	800095a <HAL_ADC_MspInit+0x9e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_ADC_MspInit+0x1c4>)
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	9304      	str	r3, [sp, #16]
 80009fc:	9b04      	ldr	r3, [sp, #16]
 80009fe:	e779      	b.n	80008f4 <HAL_ADC_MspInit+0x38>
      Error_Handler();
 8000a00:	f7ff ff40 	bl	8000884 <Error_Handler>
 8000a04:	e79f      	b.n	8000946 <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_ADC_MspInit+0x1c4>)
    hdma_adc4.Instance = DMA2_Channel2;
 8000a08:	4e24      	ldr	r6, [pc, #144]	; (8000a9c <HAL_ADC_MspInit+0x1e0>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	695a      	ldr	r2, [r3, #20]
 8000a14:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000a18:	9206      	str	r2, [sp, #24]
 8000a1a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a32:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	9807      	ldr	r0, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <HAL_ADC_MspInit+0x1d8>)
 8000a38:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f001 f93d 	bl	8001cbc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_ADC_MspInit+0x1e4>)
 8000a44:	6033      	str	r3, [r6, #0]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000a46:	2080      	movs	r0, #128	; 0x80
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000a50:	2320      	movs	r3, #32
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	60f0      	str	r0, [r6, #12]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000a54:	4630      	mov	r0, r6
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a56:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a5a:	6074      	str	r4, [r6, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	60b4      	str	r4, [r6, #8]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000a5e:	61f4      	str	r4, [r6, #28]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000a60:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000a62:	f001 f85b 	bl	8001b1c <HAL_DMA_Init>
 8000a66:	b910      	cbnz	r0, 8000a6e <HAL_ADC_MspInit+0x1b2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8000a68:	63ae      	str	r6, [r5, #56]	; 0x38
 8000a6a:	6275      	str	r5, [r6, #36]	; 0x24
}
 8000a6c:	e73a      	b.n	80008e4 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 8000a6e:	f7ff ff09 	bl	8000884 <Error_Handler>
 8000a72:	e7f9      	b.n	8000a68 <HAL_ADC_MspInit+0x1ac>
 8000a74:	50000100 	.word	0x50000100
 8000a78:	50000500 	.word	0x50000500
 8000a7c:	20000028 	.word	0x20000028
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000800 	.word	0x48000800
 8000a88:	200003bc 	.word	0x200003bc
 8000a8c:	40020408 	.word	0x40020408
 8000a90:	2000020c 	.word	0x2000020c
 8000a94:	48000400 	.word	0x48000400
 8000a98:	40020008 	.word	0x40020008
 8000a9c:	20000078 	.word	0x20000078
 8000aa0:	4002041c 	.word	0x4002041c

08000aa4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000aa4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8000aa6:	6801      	ldr	r1, [r0, #0]
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_DAC_MspInit+0x5c>)
{
 8000aaa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8000aae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000ab4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000ab8:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 8000aba:	d001      	beq.n	8000ac0 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000abc:	b008      	add	sp, #32
 8000abe:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ac0:	f502 32ce 	add.w	r2, r2, #105472	; 0x19c00
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ac8:	69d1      	ldr	r1, [r2, #28]
 8000aca:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8000ace:	61d1      	str	r1, [r2, #28]
 8000ad0:	69d1      	ldr	r1, [r2, #28]
 8000ad2:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8000ad6:	9100      	str	r1, [sp, #0]
 8000ad8:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	6951      	ldr	r1, [r2, #20]
 8000adc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000ae0:	6151      	str	r1, [r2, #20]
 8000ae2:	6952      	ldr	r2, [r2, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000aea:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8000aec:	2303      	movs	r3, #3
 8000aee:	2210      	movs	r2, #16
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8000af2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f001 f8e0 	bl	8001cbc <HAL_GPIO_Init>
}
 8000afc:	b008      	add	sp, #32
 8000afe:	bd10      	pop	{r4, pc}
 8000b00:	40007400 	.word	0x40007400

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8000b06:	6802      	ldr	r2, [r0, #0]
 8000b08:	4929      	ldr	r1, [pc, #164]	; (8000bb0 <HAL_TIM_Base_MspInit+0xac>)
{
 8000b0a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8000b0e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000b14:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000b18:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8000b1a:	d020      	beq.n	8000b5e <HAL_TIM_Base_MspInit+0x5a>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000b1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000b20:	d004      	beq.n	8000b2c <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb0>)
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d00d      	beq.n	8000b44 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b28:	b00a      	add	sp, #40	; 0x28
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8000b2e:	69da      	ldr	r2, [r3, #28]
 8000b30:	f042 0201 	orr.w	r2, r2, #1
 8000b34:	61da      	str	r2, [r3, #28]
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	9b02      	ldr	r3, [sp, #8]
}
 8000b40:	b00a      	add	sp, #40	; 0x28
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b44:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000b48:	69da      	ldr	r2, [r3, #28]
 8000b4a:	f042 0202 	orr.w	r2, r2, #2
 8000b4e:	61da      	str	r2, [r3, #28]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	9303      	str	r3, [sp, #12]
 8000b58:	9b03      	ldr	r3, [sp, #12]
}
 8000b5a:	b00a      	add	sp, #40	; 0x28
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b62:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8000b66:	200c      	movs	r0, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b6e:	619a      	str	r2, [r3, #24]
 8000b70:	699a      	ldr	r2, [r3, #24]
 8000b72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000b76:	9200      	str	r2, [sp, #0]
 8000b78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 8000b84:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8000b90:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8000b92:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000b96:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8000b9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f001 f889 	bl	8001cbc <HAL_GPIO_Init>
}
 8000baa:	b00a      	add	sp, #40	; 0x28
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	bf00      	nop
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	40000400 	.word	0x40000400
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bbc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8000bbe:	6801      	ldr	r1, [r0, #0]
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <HAL_TIM_MspPostInit+0x5c>)
{
 8000bc2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8000bc6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000bcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000bd0:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8000bd2:	d001      	beq.n	8000bd8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bd4:	b008      	add	sp, #32
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bdc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000be0:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bec:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8000bfa:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 8000bfe:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8000c04:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000c08:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f001 f855 	bl	8001cbc <HAL_GPIO_Init>
}
 8000c12:	b008      	add	sp, #32
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	bf00      	nop
 8000c18:	40012c00 	.word	0x40012c00

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8000c1e:	6802      	ldr	r2, [r0, #0]
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <HAL_UART_MspInit+0xc0>)
{
 8000c22:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8000c26:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c2c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000c30:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8000c32:	d001      	beq.n	8000c38 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c34:	b008      	add	sp, #32
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c3c:	4e28      	ldr	r6, [pc, #160]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	69da      	ldr	r2, [r3, #28]
 8000c40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c44:	61da      	str	r2, [r3, #28]
 8000c46:	69da      	ldr	r2, [r3, #28]
 8000c48:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c4c:	9200      	str	r2, [sp, #0]
 8000c4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8000c60:	220c      	movs	r2, #12
 8000c62:	2302      	movs	r3, #2
 8000c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c72:	2307      	movs	r3, #7
 8000c74:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c78:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f001 f81d 	bl	8001cbc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c82:	4918      	ldr	r1, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c84:	6074      	str	r4, [r6, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c88:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c8a:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8c:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c90:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c94:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c96:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c98:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c9a:	f000 ff3f 	bl	8001b1c <HAL_DMA_Init>
 8000c9e:	b9b0      	cbnz	r0, 8000cce <HAL_UART_MspInit+0xb2>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ca0:	4c11      	ldr	r4, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_UART_MspInit+0xd0>)
 8000ca4:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca6:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca8:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000caa:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cac:	672e      	str	r6, [r5, #112]	; 0x70
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cae:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb0:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb8:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cbc:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cbe:	6061      	str	r1, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cc0:	f000 ff2c 	bl	8001b1c <HAL_DMA_Init>
 8000cc4:	b930      	cbnz	r0, 8000cd4 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000cc6:	66ec      	str	r4, [r5, #108]	; 0x6c
 8000cc8:	6265      	str	r5, [r4, #36]	; 0x24
}
 8000cca:	b008      	add	sp, #32
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000cce:	f7ff fdd9 	bl	8000884 <Error_Handler>
 8000cd2:	e7e5      	b.n	8000ca0 <HAL_UART_MspInit+0x84>
      Error_Handler();
 8000cd4:	f7ff fdd6 	bl	8000884 <Error_Handler>
 8000cd8:	e7f5      	b.n	8000cc6 <HAL_UART_MspInit+0xaa>
 8000cda:	bf00      	nop
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	20000034 	.word	0x20000034
 8000ce4:	4002006c 	.word	0x4002006c
 8000ce8:	200001c8 	.word	0x200001c8
 8000cec:	40020080 	.word	0x40020080

08000cf0 <DMA1_Channel1_IRQHandler>:
  */
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cf0:	4801      	ldr	r0, [pc, #4]	; (8000cf8 <DMA1_Channel1_IRQHandler+0x8>)
 8000cf2:	f000 bf99 	b.w	8001c28 <HAL_DMA_IRQHandler>
 8000cf6:	bf00      	nop
 8000cf8:	2000020c 	.word	0x2000020c

08000cfc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  startSending();
 8000cfe:	f000 f85b 	bl	8000db8 <startSending>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d06:	4801      	ldr	r0, [pc, #4]	; (8000d0c <DMA1_Channel6_IRQHandler+0x10>)
 8000d08:	f000 bf8e 	b.w	8001c28 <HAL_DMA_IRQHandler>
 8000d0c:	20000034 	.word	0x20000034

08000d10 <TIM1_UP_TIM16_IRQHandler>:
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d10:	4801      	ldr	r0, [pc, #4]	; (8000d18 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8000d12:	f002 ba89 	b.w	8003228 <HAL_TIM_IRQHandler>
 8000d16:	bf00      	nop
 8000d18:	20000250 	.word	0x20000250

08000d1c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //SVPWM();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d1c:	4801      	ldr	r0, [pc, #4]	; (8000d24 <TIM2_IRQHandler+0x8>)
 8000d1e:	f002 ba83 	b.w	8003228 <HAL_TIM_IRQHandler>
 8000d22:	bf00      	nop
 8000d24:	2000029c 	.word	0x2000029c

08000d28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
  measure();
 8000d2a:	f000 f811 	bl	8000d50 <measure>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim3);
 8000d32:	4801      	ldr	r0, [pc, #4]	; (8000d38 <TIM3_IRQHandler+0x10>)
 8000d34:	f002 ba78 	b.w	8003228 <HAL_TIM_IRQHandler>
 8000d38:	2000012c 	.word	0x2000012c

08000d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  startStop();
 8000d3e:	f000 f88b 	bl	8000e58 <startStop>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d46:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d4a:	f001 b8c1 	b.w	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
 8000d4e:	bf00      	nop

08000d50 <measure>:
//}


int v1,v2;

void measure(){
 8000d50:	b570      	push	{r4, r5, r6, lr}
//	if(RX_data[0] == 202){
//		RX_data[0] = 0;
	HAL_UART_Transmit(&huart2, pData, 9, 10);
 8000d52:	4c13      	ldr	r4, [pc, #76]	; (8000da0 <measure+0x50>)
//	}

	HAL_ADC_Start_DMA(&hadc2, value2, 2);
 8000d54:	4d13      	ldr	r5, [pc, #76]	; (8000da4 <measure+0x54>)
	HAL_ADC_Start_DMA(&hadc1, value, 3);
 8000d56:	4e14      	ldr	r6, [pc, #80]	; (8000da8 <measure+0x58>)
	HAL_UART_Transmit(&huart2, pData, 9, 10);
 8000d58:	4814      	ldr	r0, [pc, #80]	; (8000dac <measure+0x5c>)
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	2209      	movs	r2, #9
 8000d60:	f003 f88a 	bl	8003e78 <HAL_UART_Transmit>
	HAL_ADC_Start_DMA(&hadc2, value2, 2);
 8000d64:	4629      	mov	r1, r5
 8000d66:	2202      	movs	r2, #2
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <measure+0x60>)
 8000d6a:	f000 fae5 	bl	8001338 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, value, 3);
 8000d6e:	4631      	mov	r1, r6
 8000d70:	2203      	movs	r2, #3
 8000d72:	4810      	ldr	r0, [pc, #64]	; (8000db4 <measure+0x64>)
 8000d74:	f000 fae0 	bl	8001338 <HAL_ADC_Start_DMA>

	pData[0] = 255;
	pData[1] = value[0] & 0xff;
	pData[2] = (value[0] >> 8) & 0xff;
	pData[3] = value[1] & 0xff;
 8000d78:	e9d6 3000 	ldrd	r3, r0, [r6]
	pData[4] = (value[1] >> 8) & 0xff;
	pData[5] = value2[0] & 0xff;
	pData[6] = (value2[0] >> 8) & 0xff;
	pData[7] = value2[1] & 0xff;
 8000d7c:	e9d5 1200 	ldrd	r1, r2, [r5]
	pData[1] = value[0] & 0xff;
 8000d80:	7063      	strb	r3, [r4, #1]
	pData[0] = 255;
 8000d82:	25ff      	movs	r5, #255	; 0xff
	pData[2] = (value[0] >> 8) & 0xff;
 8000d84:	0a1b      	lsrs	r3, r3, #8
	pData[4] = (value[1] >> 8) & 0xff;
 8000d86:	0a06      	lsrs	r6, r0, #8
	pData[0] = 255;
 8000d88:	7025      	strb	r5, [r4, #0]
	pData[2] = (value[0] >> 8) & 0xff;
 8000d8a:	70a3      	strb	r3, [r4, #2]
	pData[6] = (value2[0] >> 8) & 0xff;
 8000d8c:	0a0d      	lsrs	r5, r1, #8
	pData[8] = (value2[1] >> 8) & 0xff;
 8000d8e:	0a13      	lsrs	r3, r2, #8
	pData[3] = value[1] & 0xff;
 8000d90:	70e0      	strb	r0, [r4, #3]
	pData[4] = (value[1] >> 8) & 0xff;
 8000d92:	7126      	strb	r6, [r4, #4]
	pData[5] = value2[0] & 0xff;
 8000d94:	7161      	strb	r1, [r4, #5]
	pData[6] = (value2[0] >> 8) & 0xff;
 8000d96:	71a5      	strb	r5, [r4, #6]
	pData[7] = value2[1] & 0xff;
 8000d98:	71e2      	strb	r2, [r4, #7]
	pData[8] = (value2[1] >> 8) & 0xff;
 8000d9a:	7223      	strb	r3, [r4, #8]

}
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000404 	.word	0x20000404
 8000da4:	20000420 	.word	0x20000420
 8000da8:	2000042c 	.word	0x2000042c
 8000dac:	200002e8 	.word	0x200002e8
 8000db0:	200000d0 	.word	0x200000d0
 8000db4:	20000178 	.word	0x20000178

08000db8 <startSending>:

uint8_t startFlag = 0;
void startSending(){
 8000db8:	b570      	push	{r4, r5, r6, lr}
	if(RX_data[0] == 201 && startFlag == 0){
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <startSending+0x78>)
 8000dbc:	7813      	ldrb	r3, [r2, #0]
 8000dbe:	2bc9      	cmp	r3, #201	; 0xc9
 8000dc0:	d01d      	beq.n	8000dfe <startSending+0x46>
	if(run == 1){
 8000dc2:	481c      	ldr	r0, [pc, #112]	; (8000e34 <startSending+0x7c>)
		HAL_TIM_Base_Start_IT(&htim3);

		TX_data[0] = 101;
		HAL_UART_Transmit(&huart2, TX_data, 1, 10);
	} else {
		Ta = RX_data[0] + (256*RX_data[1]);
 8000dc4:	7856      	ldrb	r6, [r2, #1]
		Tb = RX_data[2] + (256*RX_data[3]);
 8000dc6:	78d5      	ldrb	r5, [r2, #3]
		Tc = RX_data[4] + (256*RX_data[5]);
 8000dc8:	7954      	ldrb	r4, [r2, #5]
		Tb = RX_data[2] + (256*RX_data[3]);
 8000dca:	7891      	ldrb	r1, [r2, #2]
		Tc = RX_data[4] + (256*RX_data[5]);
 8000dcc:	7912      	ldrb	r2, [r2, #4]
	if(run == 1){
 8000dce:	7800      	ldrb	r0, [r0, #0]
		Ta = RX_data[0] + (256*RX_data[1]);
 8000dd0:	eb03 2306 	add.w	r3, r3, r6, lsl #8
		Tb = RX_data[2] + (256*RX_data[3]);
 8000dd4:	eb01 2105 	add.w	r1, r1, r5, lsl #8
		Tc = RX_data[4] + (256*RX_data[5]);
 8000dd8:	eb02 2204 	add.w	r2, r2, r4, lsl #8
		Ta = RX_data[0] + (256*RX_data[1]);
 8000ddc:	4e16      	ldr	r6, [pc, #88]	; (8000e38 <startSending+0x80>)
		Tb = RX_data[2] + (256*RX_data[3]);
 8000dde:	4d17      	ldr	r5, [pc, #92]	; (8000e3c <startSending+0x84>)
		Tc = RX_data[4] + (256*RX_data[5]);
 8000de0:	4c17      	ldr	r4, [pc, #92]	; (8000e40 <startSending+0x88>)
		Ta = RX_data[0] + (256*RX_data[1]);
 8000de2:	b29b      	uxth	r3, r3
		Tb = RX_data[2] + (256*RX_data[3]);
 8000de4:	b289      	uxth	r1, r1
		Tc = RX_data[4] + (256*RX_data[5]);
 8000de6:	b292      	uxth	r2, r2
	if(run == 1){
 8000de8:	2801      	cmp	r0, #1
		Ta = RX_data[0] + (256*RX_data[1]);
 8000dea:	8033      	strh	r3, [r6, #0]
		Tb = RX_data[2] + (256*RX_data[3]);
 8000dec:	8029      	strh	r1, [r5, #0]
		Tc = RX_data[4] + (256*RX_data[5]);
 8000dee:	8022      	strh	r2, [r4, #0]
	if(run == 1){
 8000df0:	d018      	beq.n	8000e24 <startSending+0x6c>
		TIM1->CCR1 = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <startSending+0x8c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000df8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
		SVPWM_PC();
	}
}
 8000dfc:	bd70      	pop	{r4, r5, r6, pc}
	if(RX_data[0] == 201 && startFlag == 0){
 8000dfe:	4912      	ldr	r1, [pc, #72]	; (8000e48 <startSending+0x90>)
 8000e00:	7808      	ldrb	r0, [r1, #0]
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d1dd      	bne.n	8000dc2 <startSending+0xa>
		startFlag = 1;
 8000e06:	2401      	movs	r4, #1
		HAL_TIM_Base_Start_IT(&htim3);
 8000e08:	4810      	ldr	r0, [pc, #64]	; (8000e4c <startSending+0x94>)
		startFlag = 1;
 8000e0a:	700c      	strb	r4, [r1, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8000e0c:	f001 ff1e 	bl	8002c4c <HAL_TIM_Base_Start_IT>
		TX_data[0] = 101;
 8000e10:	490f      	ldr	r1, [pc, #60]	; (8000e50 <startSending+0x98>)
		HAL_UART_Transmit(&huart2, TX_data, 1, 10);
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <startSending+0x9c>)
 8000e14:	4622      	mov	r2, r4
		TX_data[0] = 101;
 8000e16:	2465      	movs	r4, #101	; 0x65
 8000e18:	700c      	strb	r4, [r1, #0]
}
 8000e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart2, TX_data, 1, 10);
 8000e1e:	230a      	movs	r3, #10
 8000e20:	f003 b82a 	b.w	8003e78 <HAL_UART_Transmit>
		TIM1->CCR1 = Ta;
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <startSending+0x8c>)
 8000e26:	6343      	str	r3, [r0, #52]	; 0x34
		TIM1->CCR2 = Tb;
 8000e28:	6381      	str	r1, [r0, #56]	; 0x38
		TIM1->CCR3 = Tc;
 8000e2a:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000124 	.word	0x20000124
 8000e34:	20000032 	.word	0x20000032
 8000e38:	2000002c 	.word	0x2000002c
 8000e3c:	2000002e 	.word	0x2000002e
 8000e40:	20000030 	.word	0x20000030
 8000e44:	40012c00 	.word	0x40012c00
 8000e48:	20000033 	.word	0x20000033
 8000e4c:	2000012c 	.word	0x2000012c
 8000e50:	20000120 	.word	0x20000120
 8000e54:	200002e8 	.word	0x200002e8

08000e58 <startStop>:

	}
}

void startStop(){
	if(run == 0){
 8000e58:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <startStop+0x10>)
 8000e5a:	7813      	ldrb	r3, [r2, #0]
 8000e5c:	fab3 f383 	clz	r3, r3
 8000e60:	095b      	lsrs	r3, r3, #5
 8000e62:	7013      	strb	r3, [r2, #0]
		run = 1;
	} else {
		run = 0;
	}
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000032 	.word	0x20000032

08000e6c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <SystemInit+0x10>)
 8000e6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eaa:	f7ff ffdf 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f003 f881 	bl	8003fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb2:	f7ff f9df 	bl	8000274 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec4:	08004068 	.word	0x08004068
  ldr r2, =_sbss
 8000ec8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ecc:	2000043c 	.word	0x2000043c

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_InitTick+0x3c>)
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_InitTick+0x40>)
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
{
 8000ede:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ee8:	fbb3 f0f0 	udiv	r0, r3, r0
 8000eec:	f000 fdc0 	bl	8001a70 <HAL_SYSTICK_Config>
 8000ef0:	b908      	cbnz	r0, 8000ef6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	2d0f      	cmp	r5, #15
 8000ef4:	d901      	bls.n	8000efa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000ef8:	bd38      	pop	{r3, r4, r5, pc}
 8000efa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	4602      	mov	r2, r0
 8000efe:	4629      	mov	r1, r5
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fd6e 	bl	80019e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_InitTick+0x44>)
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	601d      	str	r5, [r3, #0]
}
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	20000004 	.word	0x20000004
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x20>)
{
 8000f1e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	6813      	ldr	r3, [r2, #0]
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 fd47 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f7ff ffd0 	bl	8000ed4 <HAL_InitTick>
  HAL_MspInit();
 8000f34:	f7ff fca8 	bl	8000888 <HAL_MspInit>
}
 8000f38:	2000      	movs	r0, #0
 8000f3a:	bd08      	pop	{r3, pc}
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f40:	4b01      	ldr	r3, [pc, #4]	; (8000f48 <HAL_GetTick+0x8>)
 8000f42:	6818      	ldr	r0, [r3, #0]
}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000438 	.word	0x20000438

08000f4c <HAL_ADC_ConvCpltCallback>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_ADC_ConvHalfCpltCallback>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_ADC_ErrorCallback>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f58:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f6a:	f7ff bff3 	b.w	8000f54 <HAL_ADC_ErrorCallback>
 8000f6e:	bf00      	nop

08000f70 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f70:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f72:	f7ff bfed 	b.w	8000f50 <HAL_ADC_ConvHalfCpltCallback>
 8000f76:	bf00      	nop

08000f78 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f78:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000f80:	d118      	bne.n	8000fb4 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f84:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f8c:	68ca      	ldr	r2, [r1, #12]
 8000f8e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000f92:	d10c      	bne.n	8000fae <ADC_DMAConvCplt+0x36>
 8000f94:	7e5a      	ldrb	r2, [r3, #25]
 8000f96:	b952      	cbnz	r2, 8000fae <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa2:	04d2      	lsls	r2, r2, #19
 8000fa4:	d403      	bmi.n	8000fae <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa8:	f042 0201 	orr.w	r2, r2, #1
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff bfcc 	b.w	8000f4c <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4718      	bx	r3
 8000fba:	bf00      	nop

08000fbc <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000fbc:	6802      	ldr	r2, [r0, #0]
{
 8000fbe:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000fc0:	6893      	ldr	r3, [r2, #8]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d001      	beq.n	8000fce <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fca:	2000      	movs	r0, #0
}
 8000fcc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000fce:	6811      	ldr	r1, [r2, #0]
 8000fd0:	07c9      	lsls	r1, r1, #31
 8000fd2:	d5fa      	bpl.n	8000fca <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000fd4:	6891      	ldr	r1, [r2, #8]
 8000fd6:	f001 010d 	and.w	r1, r1, #13
 8000fda:	2901      	cmp	r1, #1
 8000fdc:	4604      	mov	r4, r0
 8000fde:	d009      	beq.n	8000ff4 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000fe2:	f042 0210 	orr.w	r2, r2, #16
 8000fe6:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000fea:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 8000fee:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff0:	6462      	str	r2, [r4, #68]	; 0x44
}
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000ff4:	6893      	ldr	r3, [r2, #8]
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6093      	str	r3, [r2, #8]
 8000ffe:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8001000:	f7ff ff9e 	bl	8000f40 <HAL_GetTick>
 8001004:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	07db      	lsls	r3, r3, #31
 800100c:	d5dd      	bpl.n	8000fca <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800100e:	f7ff ff97 	bl	8000f40 <HAL_GetTick>
 8001012:	1b40      	subs	r0, r0, r5
 8001014:	2802      	cmp	r0, #2
 8001016:	d9f6      	bls.n	8001006 <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001020:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6463      	str	r3, [r4, #68]	; 0x44
 8001028:	2001      	movs	r0, #1
}
 800102a:	bd38      	pop	{r3, r4, r5, pc}

0800102c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800102c:	6802      	ldr	r2, [r0, #0]
{
 800102e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001030:	6893      	ldr	r3, [r2, #8]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
{
 8001038:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800103a:	d020      	beq.n	800107e <ADC_Enable+0x52>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800103c:	6891      	ldr	r1, [r2, #8]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <ADC_Enable+0x5c>)
 8001040:	4219      	tst	r1, r3
 8001042:	d009      	beq.n	8001058 <ADC_Enable+0x2c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6463      	str	r3, [r4, #68]	; 0x44
 8001054:	2001      	movs	r0, #1
}
 8001056:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001058:	6893      	ldr	r3, [r2, #8]
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001060:	f7ff ff6e 	bl	8000f40 <HAL_GetTick>
 8001064:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001066:	e004      	b.n	8001072 <ADC_Enable+0x46>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001068:	f7ff ff6a 	bl	8000f40 <HAL_GetTick>
 800106c:	1b43      	subs	r3, r0, r5
 800106e:	2b02      	cmp	r3, #2
 8001070:	d8e8      	bhi.n	8001044 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	07db      	lsls	r3, r3, #31
 8001078:	d5f6      	bpl.n	8001068 <ADC_Enable+0x3c>
  return HAL_OK;
 800107a:	2000      	movs	r0, #0
}
 800107c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	07d9      	lsls	r1, r3, #31
 8001082:	d5db      	bpl.n	800103c <ADC_Enable+0x10>
  return HAL_OK;
 8001084:	2000      	movs	r0, #0
 8001086:	e7f9      	b.n	800107c <ADC_Enable+0x50>
 8001088:	8000003f 	.word	0x8000003f

0800108c <HAL_ADC_Init>:
{
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001094:	2800      	cmp	r0, #0
 8001096:	f000 809d 	beq.w	80011d4 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800109c:	f013 0310 	ands.w	r3, r3, #16
 80010a0:	4604      	mov	r4, r0
 80010a2:	d118      	bne.n	80010d6 <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010a4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	f000 8097 	beq.w	80011da <HAL_ADC_Init+0x14e>
 80010ac:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010ae:	6891      	ldr	r1, [r2, #8]
 80010b0:	00cd      	lsls	r5, r1, #3
 80010b2:	f140 8083 	bpl.w	80011bc <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010b6:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010b8:	0088      	lsls	r0, r1, #2
 80010ba:	d47f      	bmi.n	80011bc <HAL_ADC_Init+0x130>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80010be:	06c9      	lsls	r1, r1, #27
 80010c0:	d400      	bmi.n	80010c4 <HAL_ADC_Init+0x38>
 80010c2:	b163      	cbz	r3, 80010de <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c6:	f023 0312 	bic.w	r3, r3, #18
 80010ca:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 80010ce:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80010d0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80010d2:	b002      	add	sp, #8
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010d8:	06da      	lsls	r2, r3, #27
 80010da:	d4f3      	bmi.n	80010c4 <HAL_ADC_Init+0x38>
 80010dc:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010de:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80010e0:	f010 0004 	ands.w	r0, r0, #4
 80010e4:	d1ee      	bne.n	80010c4 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 80010e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80010e8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80010ec:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80010f4:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f6:	f000 80e3 	beq.w	80012c0 <HAL_ADC_Init+0x234>
 80010fa:	4b87      	ldr	r3, [pc, #540]	; (8001318 <HAL_ADC_Init+0x28c>)
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f000 80e7 	beq.w	80012d0 <HAL_ADC_Init+0x244>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001102:	4986      	ldr	r1, [pc, #536]	; (800131c <HAL_ADC_Init+0x290>)
 8001104:	428a      	cmp	r2, r1
 8001106:	d075      	beq.n	80011f4 <HAL_ADC_Init+0x168>
 8001108:	4b85      	ldr	r3, [pc, #532]	; (8001320 <HAL_ADC_Init+0x294>)
 800110a:	429a      	cmp	r2, r3
 800110c:	d073      	beq.n	80011f6 <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800110e:	6893      	ldr	r3, [r2, #8]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b01      	cmp	r3, #1
 8001116:	f000 80ed 	beq.w	80012f4 <HAL_ADC_Init+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800111a:	4d82      	ldr	r5, [pc, #520]	; (8001324 <HAL_ADC_Init+0x298>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 800111c:	68ab      	ldr	r3, [r5, #8]
 800111e:	6861      	ldr	r1, [r4, #4]
 8001120:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001124:	430b      	orrs	r3, r1
 8001126:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001128:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 800112c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800112e:	7e65      	ldrb	r5, [r4, #25]
 8001130:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001132:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001136:	2e01      	cmp	r6, #1
 8001138:	bf18      	it	ne
 800113a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800113e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001142:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001144:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001148:	f000 8095 	beq.w	8001276 <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800114c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800114e:	2901      	cmp	r1, #1
 8001150:	d00d      	beq.n	800116e <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001152:	4872      	ldr	r0, [pc, #456]	; (800131c <HAL_ADC_Init+0x290>)
 8001154:	4282      	cmp	r2, r0
 8001156:	f000 809e 	beq.w	8001296 <HAL_ADC_Init+0x20a>
 800115a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800115e:	4282      	cmp	r2, r0
 8001160:	f000 8099 	beq.w	8001296 <HAL_ADC_Init+0x20a>
 8001164:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001168:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800116a:	4303      	orrs	r3, r0
 800116c:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800116e:	6891      	ldr	r1, [r2, #8]
 8001170:	f011 0f0c 	tst.w	r1, #12
 8001174:	d10c      	bne.n	8001190 <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001176:	68d1      	ldr	r1, [r2, #12]
 8001178:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800117c:	f021 0102 	bic.w	r1, r1, #2
 8001180:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001182:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001186:	7e20      	ldrb	r0, [r4, #24]
 8001188:	0049      	lsls	r1, r1, #1
 800118a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800118e:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001190:	68d5      	ldr	r5, [r2, #12]
 8001192:	4965      	ldr	r1, [pc, #404]	; (8001328 <HAL_ADC_Init+0x29c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001194:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001196:	4029      	ands	r1, r5
 8001198:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800119a:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800119c:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800119e:	d072      	beq.n	8001286 <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011a2:	f023 030f 	bic.w	r3, r3, #15
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	2000      	movs	r0, #0
 80011aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6423      	str	r3, [r4, #64]	; 0x40
}
 80011b8:	b002      	add	sp, #8
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80011bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011be:	f023 0312 	bic.w	r3, r3, #18
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011d2:	e777      	b.n	80010c4 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 80011d4:	2001      	movs	r0, #1
}
 80011d6:	b002      	add	sp, #8
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 80011da:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80011de:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 80011e0:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80011e4:	f7ff fb6a 	bl	80008bc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011e8:	6822      	ldr	r2, [r4, #0]
 80011ea:	6893      	ldr	r3, [r2, #8]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	d511      	bpl.n	8001214 <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f0:	462b      	mov	r3, r5
 80011f2:	e75c      	b.n	80010ae <HAL_ADC_Init+0x22>
 80011f4:	494a      	ldr	r1, [pc, #296]	; (8001320 <HAL_ADC_Init+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f6:	4d4b      	ldr	r5, [pc, #300]	; (8001324 <HAL_ADC_Init+0x298>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011f8:	6893      	ldr	r3, [r2, #8]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d061      	beq.n	80012c6 <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001202:	688b      	ldr	r3, [r1, #8]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d187      	bne.n	800111c <HAL_ADC_Init+0x90>
 800120c:	680b      	ldr	r3, [r1, #0]
 800120e:	07db      	lsls	r3, r3, #31
 8001210:	d48a      	bmi.n	8001128 <HAL_ADC_Init+0x9c>
 8001212:	e783      	b.n	800111c <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff fed1 	bl	8000fbc <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800121a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800121c:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 800121e:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001220:	f53f af44 	bmi.w	80010ac <HAL_ADC_Init+0x20>
 8001224:	2800      	cmp	r0, #0
 8001226:	f47f af41 	bne.w	80010ac <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 800122a:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800122c:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800122e:	493f      	ldr	r1, [pc, #252]	; (800132c <HAL_ADC_Init+0x2a0>)
 8001230:	4d3f      	ldr	r5, [pc, #252]	; (8001330 <HAL_ADC_Init+0x2a4>)
 8001232:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8001234:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8001238:	f020 0002 	bic.w	r0, r0, #2
 800123c:	f040 0002 	orr.w	r0, r0, #2
 8001240:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001242:	6890      	ldr	r0, [r2, #8]
 8001244:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8001248:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800124a:	fba5 0101 	umull	r0, r1, r5, r1
 800124e:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001250:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001252:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001256:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001258:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800125c:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800125e:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001260:	9901      	ldr	r1, [sp, #4]
 8001262:	2900      	cmp	r1, #0
 8001264:	f43f af23 	beq.w	80010ae <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8001268:	9901      	ldr	r1, [sp, #4]
 800126a:	3901      	subs	r1, #1
 800126c:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800126e:	9901      	ldr	r1, [sp, #4]
 8001270:	2900      	cmp	r1, #0
 8001272:	d1f9      	bne.n	8001268 <HAL_ADC_Init+0x1dc>
 8001274:	e71b      	b.n	80010ae <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001276:	bb7d      	cbnz	r5, 80012d8 <HAL_ADC_Init+0x24c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001278:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800127a:	3901      	subs	r1, #1
 800127c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	e762      	b.n	800114c <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001286:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001288:	69e3      	ldr	r3, [r4, #28]
 800128a:	f021 010f 	bic.w	r1, r1, #15
 800128e:	3b01      	subs	r3, #1
 8001290:	430b      	orrs	r3, r1
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	e788      	b.n	80011a8 <HAL_ADC_Init+0x11c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001296:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800129a:	d028      	beq.n	80012ee <HAL_ADC_Init+0x262>
 800129c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80012a0:	d02d      	beq.n	80012fe <HAL_ADC_Init+0x272>
 80012a2:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 80012a6:	d02d      	beq.n	8001304 <HAL_ADC_Init+0x278>
 80012a8:	f5b1 5f8a 	cmp.w	r1, #4416	; 0x1140
 80012ac:	d02d      	beq.n	800130a <HAL_ADC_Init+0x27e>
 80012ae:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 80012b2:	d02d      	beq.n	8001310 <HAL_ADC_Init+0x284>
 80012b4:	f5b1 5f86 	cmp.w	r1, #4288	; 0x10c0
 80012b8:	bf08      	it	eq
 80012ba:	f44f 71c0 	moveq.w	r1, #384	; 0x180
 80012be:	e753      	b.n	8001168 <HAL_ADC_Init+0xdc>
 80012c0:	4915      	ldr	r1, [pc, #84]	; (8001318 <HAL_ADC_Init+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c2:	4d1c      	ldr	r5, [pc, #112]	; (8001334 <HAL_ADC_Init+0x2a8>)
 80012c4:	e798      	b.n	80011f8 <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	07de      	lsls	r6, r3, #31
 80012ca:	f53f af2d 	bmi.w	8001128 <HAL_ADC_Init+0x9c>
 80012ce:	e798      	b.n	8001202 <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d0:	4d18      	ldr	r5, [pc, #96]	; (8001334 <HAL_ADC_Init+0x2a8>)
 80012d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80012d6:	e78f      	b.n	80011f8 <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 80012d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80012da:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80012de:	f041 0120 	orr.w	r1, r1, #32
 80012e2:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012e6:	f041 0101 	orr.w	r1, r1, #1
 80012ea:	6461      	str	r1, [r4, #68]	; 0x44
 80012ec:	e72e      	b.n	800114c <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012ee:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80012f2:	e739      	b.n	8001168 <HAL_ADC_Init+0xdc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012f4:	6813      	ldr	r3, [r2, #0]
 80012f6:	07db      	lsls	r3, r3, #31
 80012f8:	f53f af16 	bmi.w	8001128 <HAL_ADC_Init+0x9c>
 80012fc:	e70d      	b.n	800111a <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012fe:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001302:	e731      	b.n	8001168 <HAL_ADC_Init+0xdc>
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	e72e      	b.n	8001168 <HAL_ADC_Init+0xdc>
 800130a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800130e:	e72b      	b.n	8001168 <HAL_ADC_Init+0xdc>
 8001310:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001314:	e728      	b.n	8001168 <HAL_ADC_Init+0xdc>
 8001316:	bf00      	nop
 8001318:	50000100 	.word	0x50000100
 800131c:	50000400 	.word	0x50000400
 8001320:	50000500 	.word	0x50000500
 8001324:	50000700 	.word	0x50000700
 8001328:	fff0c007 	.word	0xfff0c007
 800132c:	20000000 	.word	0x20000000
 8001330:	431bde83 	.word	0x431bde83
 8001334:	50000300 	.word	0x50000300

08001338 <HAL_ADC_Start_DMA>:
{
 8001338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800133c:	6800      	ldr	r0, [r0, #0]
 800133e:	6885      	ldr	r5, [r0, #8]
 8001340:	076d      	lsls	r5, r5, #29
 8001342:	d478      	bmi.n	8001436 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001344:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001348:	2b01      	cmp	r3, #1
 800134a:	d074      	beq.n	8001436 <HAL_ADC_Start_DMA+0xfe>
 800134c:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800134e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001352:	460f      	mov	r7, r1
 8001354:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 8001356:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800135a:	d00f      	beq.n	800137c <HAL_ADC_Start_DMA+0x44>
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_ADC_Start_DMA+0x13c>)
 800135e:	4298      	cmp	r0, r3
 8001360:	d00c      	beq.n	800137c <HAL_ADC_Start_DMA+0x44>
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <HAL_ADC_Start_DMA+0x140>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f013 0f1f 	tst.w	r3, #31
 800136a:	bf0c      	ite	eq
 800136c:	2301      	moveq	r3, #1
 800136e:	2300      	movne	r3, #0
 8001370:	b96b      	cbnz	r3, 800138e <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8001372:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001376:	2501      	movs	r5, #1
}
 8001378:	4628      	mov	r0, r5
 800137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <HAL_ADC_Start_DMA+0x144>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f013 0f1f 	tst.w	r3, #31
 8001384:	bf0c      	ite	eq
 8001386:	2301      	moveq	r3, #1
 8001388:	2300      	movne	r3, #0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f1      	beq.n	8001372 <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff fe4c 	bl	800102c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001394:	4605      	mov	r5, r0
 8001396:	2800      	cmp	r0, #0
 8001398:	d150      	bne.n	800143c <HAL_ADC_Start_DMA+0x104>
        ADC_STATE_CLR_SET(hadc->State,
 800139a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800139c:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800139e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013aa:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 80013ae:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013b0:	d056      	beq.n	8001460 <HAL_ADC_Start_DMA+0x128>
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_ADC_Start_DMA+0x13c>)
 80013b4:	4299      	cmp	r1, r3
 80013b6:	d045      	beq.n	8001444 <HAL_ADC_Start_DMA+0x10c>
 80013b8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	06d8      	lsls	r0, r3, #27
 80013c0:	d050      	beq.n	8001464 <HAL_ADC_Start_DMA+0x12c>
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <HAL_ADC_Start_DMA+0x148>)
 80013c4:	4291      	cmp	r1, r2
 80013c6:	d04d      	beq.n	8001464 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013ce:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013d0:	68d3      	ldr	r3, [r2, #12]
 80013d2:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80013d6:	b12b      	cbz	r3, 80013e4 <HAL_ADC_Start_DMA+0xac>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e2:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013e8:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_ADC_Start_DMA+0x14c>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ee:	bf1c      	itt	ne
 80013f0:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 80013f2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80013f6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80013f8:	f04f 0c00 	mov.w	ip, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 80013fe:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001402:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001404:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001406:	4a21      	ldr	r2, [pc, #132]	; (800148c <HAL_ADC_Start_DMA+0x154>)
 8001408:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800140a:	231c      	movs	r3, #28
 800140c:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800140e:	684b      	ldr	r3, [r1, #4]
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001416:	68cb      	ldr	r3, [r1, #12]
 8001418:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800141c:	463a      	mov	r2, r7
 800141e:	4633      	mov	r3, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001420:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001424:	3140      	adds	r1, #64	; 0x40
 8001426:	f000 fbbd 	bl	8001ba4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800142a:	6822      	ldr	r2, [r4, #0]
 800142c:	6893      	ldr	r3, [r2, #8]
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6093      	str	r3, [r2, #8]
 8001434:	e7a0      	b.n	8001378 <HAL_ADC_Start_DMA+0x40>
    tmp_hal_status = HAL_BUSY;
 8001436:	2502      	movs	r5, #2
}
 8001438:	4628      	mov	r0, r5
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 800143c:	2300      	movs	r3, #0
 800143e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001442:	e799      	b.n	8001378 <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_ADC_Start_DMA+0x144>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	06db      	lsls	r3, r3, #27
 800144a:	d00b      	beq.n	8001464 <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800144c:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800144e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001456:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001458:	68d3      	ldr	r3, [r2, #12]
 800145a:	f3c3 6340 	ubfx	r3, r3, #25, #1
 800145e:	e7ba      	b.n	80013d6 <HAL_ADC_Start_DMA+0x9e>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_ADC_Start_DMA+0x144>)
 8001462:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001466:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800146a:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800146c:	68cb      	ldr	r3, [r1, #12]
 800146e:	019a      	lsls	r2, r3, #6
 8001470:	d5b8      	bpl.n	80013e4 <HAL_ADC_Start_DMA+0xac>
 8001472:	e7b1      	b.n	80013d8 <HAL_ADC_Start_DMA+0xa0>
 8001474:	50000100 	.word	0x50000100
 8001478:	50000700 	.word	0x50000700
 800147c:	50000300 	.word	0x50000300
 8001480:	50000400 	.word	0x50000400
 8001484:	08000f79 	.word	0x08000f79
 8001488:	08000f71 	.word	0x08000f71
 800148c:	08000f59 	.word	0x08000f59

08001490 <HAL_ADCEx_Calibration_Start>:
{
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001492:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001496:	2b01      	cmp	r3, #1
 8001498:	d030      	beq.n	80014fc <HAL_ADCEx_Calibration_Start+0x6c>
 800149a:	2701      	movs	r7, #1
 800149c:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 80014a0:	4604      	mov	r4, r0
 80014a2:	460d      	mov	r5, r1
 80014a4:	f7ff fd8a 	bl	8000fbc <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80014a8:	4606      	mov	r6, r0
 80014aa:	bb10      	cbnz	r0, 80014f2 <HAL_ADCEx_Calibration_Start+0x62>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80014ac:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80014ae:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80014b0:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014b2:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80014b4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80014b8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014ba:	d103      	bne.n	80014c4 <HAL_ADCEx_Calibration_Start+0x34>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014ca:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80014cc:	f7ff fd38 	bl	8000f40 <HAL_GetTick>
 80014d0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014d2:	e004      	b.n	80014de <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014d4:	f7ff fd34 	bl	8000f40 <HAL_GetTick>
 80014d8:	1b43      	subs	r3, r0, r5
 80014da:	2b0a      	cmp	r3, #10
 80014dc:	d811      	bhi.n	8001502 <HAL_ADCEx_Calibration_Start+0x72>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	dbf6      	blt.n	80014d4 <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e8:	f023 0303 	bic.w	r3, r3, #3
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80014f2:	2300      	movs	r3, #0
 80014f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80014f8:	4630      	mov	r0, r6
 80014fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80014fc:	2602      	movs	r6, #2
}
 80014fe:	4630      	mov	r0, r6
 8001500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8001502:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001504:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8001506:	f023 0312 	bic.w	r3, r3, #18
 800150a:	f043 0310 	orr.w	r3, r3, #16
        return HAL_ERROR;
 800150e:	2601      	movs	r6, #1
        __HAL_UNLOCK(hadc);
 8001510:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        ADC_STATE_CLR_SET(hadc->State,
 8001514:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001516:	4630      	mov	r0, r6
 8001518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800151a:	bf00      	nop

0800151c <HAL_ADC_ConfigChannel>:
{
 800151c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800151e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001522:	68cc      	ldr	r4, [r1, #12]
{
 8001524:	b082      	sub	sp, #8
 8001526:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001528:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001530:	f000 80fe 	beq.w	8001730 <HAL_ADC_ConfigChannel+0x214>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001534:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001536:	2001      	movs	r0, #1
 8001538:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800153c:	6895      	ldr	r5, [r2, #8]
 800153e:	076d      	lsls	r5, r5, #29
 8001540:	d436      	bmi.n	80015b0 <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 8001542:	6848      	ldr	r0, [r1, #4]
 8001544:	2804      	cmp	r0, #4
 8001546:	f200 8088 	bhi.w	800165a <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->SQR1,
 800154a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800154e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001550:	680d      	ldr	r5, [r1, #0]
 8001552:	0040      	lsls	r0, r0, #1
 8001554:	271f      	movs	r7, #31
 8001556:	4087      	lsls	r7, r0
 8001558:	ea26 0607 	bic.w	r6, r6, r7
 800155c:	fa05 f000 	lsl.w	r0, r5, r0
 8001560:	4330      	orrs	r0, r6
 8001562:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001564:	6890      	ldr	r0, [r2, #8]
 8001566:	f010 0f0c 	tst.w	r0, #12
 800156a:	d134      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800156c:	2d09      	cmp	r5, #9
 800156e:	f200 8089 	bhi.w	8001684 <HAL_ADC_ConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001572:	6950      	ldr	r0, [r2, #20]
 8001574:	688e      	ldr	r6, [r1, #8]
 8001576:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800157a:	2707      	movs	r7, #7
 800157c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001580:	ea20 0007 	bic.w	r0, r0, r7
 8001584:	fa06 f60c 	lsl.w	r6, r6, ip
 8001588:	4330      	orrs	r0, r6
 800158a:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800158c:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8001590:	68d0      	ldr	r0, [r2, #12]
 8001592:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001596:	0040      	lsls	r0, r0, #1
 8001598:	3e01      	subs	r6, #1
 800159a:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 800159e:	2e03      	cmp	r6, #3
 80015a0:	f200 8142 	bhi.w	8001828 <HAL_ADC_ConfigChannel+0x30c>
 80015a4:	e8df f016 	tbh	[pc, r6, lsl #1]
 80015a8:	0105000e 	.word	0x0105000e
 80015ac:	00f100fb 	.word	0x00f100fb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80015be:	b002      	add	sp, #8
 80015c0:	bcf0      	pop	{r4, r5, r6, r7}
 80015c2:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015c4:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80015c6:	4eae      	ldr	r6, [pc, #696]	; (8001880 <HAL_ADC_ConfigChannel+0x364>)
 80015c8:	403e      	ands	r6, r7
 80015ca:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80015ce:	4330      	orrs	r0, r6
 80015d0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80015d4:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d6:	6890      	ldr	r0, [r2, #8]
 80015d8:	f000 0003 	and.w	r0, r0, #3
 80015dc:	2801      	cmp	r0, #1
 80015de:	f000 80a2 	beq.w	8001726 <HAL_ADC_ConfigChannel+0x20a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015e2:	2c01      	cmp	r4, #1
 80015e4:	f000 80a8 	beq.w	8001738 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015e8:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80015ec:	2001      	movs	r0, #1
 80015ee:	40a8      	lsls	r0, r5
 80015f0:	ea21 0100 	bic.w	r1, r1, r0
 80015f4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80015fc:	d073      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0x1ca>
 80015fe:	49a1      	ldr	r1, [pc, #644]	; (8001884 <HAL_ADC_ConfigChannel+0x368>)
 8001600:	428a      	cmp	r2, r1
 8001602:	d070      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0x1ca>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001604:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001606:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800160a:	d06f      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x1d0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800160c:	2d11      	cmp	r5, #17
 800160e:	f040 80aa 	bne.w	8001766 <HAL_ADC_ConfigChannel+0x24a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001612:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001614:	01c4      	lsls	r4, r0, #7
 8001616:	d46c      	bmi.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001618:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800161c:	f000 80d3 	beq.w	80017c6 <HAL_ADC_ConfigChannel+0x2aa>
 8001620:	4898      	ldr	r0, [pc, #608]	; (8001884 <HAL_ADC_ConfigChannel+0x368>)
 8001622:	4282      	cmp	r2, r0
 8001624:	d067      	beq.n	80016f6 <HAL_ADC_ConfigChannel+0x1da>
 8001626:	4c98      	ldr	r4, [pc, #608]	; (8001888 <HAL_ADC_ConfigChannel+0x36c>)
 8001628:	42a2      	cmp	r2, r4
 800162a:	f000 80f7 	beq.w	800181c <HAL_ADC_ConfigChannel+0x300>
 800162e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001632:	4282      	cmp	r2, r0
 8001634:	d061      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001636:	6890      	ldr	r0, [r2, #8]
 8001638:	f000 0003 	and.w	r0, r0, #3
 800163c:	2801      	cmp	r0, #1
 800163e:	f000 80ef 	beq.w	8001820 <HAL_ADC_ConfigChannel+0x304>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001642:	2d10      	cmp	r5, #16
 8001644:	d055      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001646:	2d11      	cmp	r5, #17
 8001648:	d053      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800164a:	2d12      	cmp	r5, #18
 800164c:	d151      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800164e:	688a      	ldr	r2, [r1, #8]
 8001650:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001654:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001656:	2000      	movs	r0, #0
 8001658:	e7ae      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 800165a:	2809      	cmp	r0, #9
 800165c:	d921      	bls.n	80016a2 <HAL_ADC_ConfigChannel+0x186>
    else if (sConfig->Rank < 15U)
 800165e:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001660:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001664:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8001668:	f200 8083 	bhi.w	8001772 <HAL_ADC_ConfigChannel+0x256>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800166c:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800166e:	680d      	ldr	r5, [r1, #0]
 8001670:	383c      	subs	r0, #60	; 0x3c
 8001672:	271f      	movs	r7, #31
 8001674:	4087      	lsls	r7, r0
 8001676:	ea26 0607 	bic.w	r6, r6, r7
 800167a:	fa05 f000 	lsl.w	r0, r5, r0
 800167e:	4330      	orrs	r0, r6
 8001680:	6390      	str	r0, [r2, #56]	; 0x38
 8001682:	e76f      	b.n	8001564 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001684:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8001688:	6990      	ldr	r0, [r2, #24]
 800168a:	688e      	ldr	r6, [r1, #8]
 800168c:	3f1e      	subs	r7, #30
 800168e:	f04f 0c07 	mov.w	ip, #7
 8001692:	fa0c fc07 	lsl.w	ip, ip, r7
 8001696:	ea20 000c 	bic.w	r0, r0, ip
 800169a:	40be      	lsls	r6, r7
 800169c:	4330      	orrs	r0, r6
 800169e:	6190      	str	r0, [r2, #24]
 80016a0:	e774      	b.n	800158c <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 80016a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80016a6:	0040      	lsls	r0, r0, #1
 80016a8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80016aa:	680d      	ldr	r5, [r1, #0]
 80016ac:	381e      	subs	r0, #30
 80016ae:	271f      	movs	r7, #31
 80016b0:	4087      	lsls	r7, r0
 80016b2:	ea26 0607 	bic.w	r6, r6, r7
 80016b6:	fa05 f000 	lsl.w	r0, r5, r0
 80016ba:	4330      	orrs	r0, r6
 80016bc:	6350      	str	r0, [r2, #52]	; 0x34
 80016be:	e751      	b.n	8001564 <HAL_ADC_ConfigChannel+0x48>
        MODIFY_REG(hadc->Instance->SMPR1,
 80016c0:	1c68      	adds	r0, r5, #1
 80016c2:	688e      	ldr	r6, [r1, #8]
 80016c4:	6954      	ldr	r4, [r2, #20]
 80016c6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80016ca:	2707      	movs	r7, #7
 80016cc:	408f      	lsls	r7, r1
 80016ce:	fa06 f001 	lsl.w	r0, r6, r1
 80016d2:	ea24 0107 	bic.w	r1, r4, r7
 80016d6:	4301      	orrs	r1, r0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80016dc:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016de:	d008      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
 80016e0:	4968      	ldr	r1, [pc, #416]	; (8001884 <HAL_ADC_ConfigChannel+0x368>)
 80016e2:	428a      	cmp	r2, r1
 80016e4:	d105      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016e6:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e8:	4968      	ldr	r1, [pc, #416]	; (800188c <HAL_ADC_ConfigChannel+0x370>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ea:	d18f      	bne.n	800160c <HAL_ADC_ConfigChannel+0xf0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016ec:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ee:	0206      	lsls	r6, r0, #8
 80016f0:	d592      	bpl.n	8001618 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f2:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016f4:	e760      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x9c>
 80016f6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016fa:	6890      	ldr	r0, [r2, #8]
 80016fc:	f000 0003 	and.w	r0, r0, #3
 8001700:	2801      	cmp	r0, #1
 8001702:	d062      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x2ae>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001704:	68a0      	ldr	r0, [r4, #8]
 8001706:	f000 0003 	and.w	r0, r0, #3
 800170a:	2801      	cmp	r0, #1
 800170c:	d066      	beq.n	80017dc <HAL_ADC_ConfigChannel+0x2c0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800170e:	2d10      	cmp	r5, #16
 8001710:	d068      	beq.n	80017e4 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001712:	2d11      	cmp	r5, #17
 8001714:	d199      	bne.n	800164a <HAL_ADC_ConfigChannel+0x12e>
 8001716:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800171a:	d1ea      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800171c:	688a      	ldr	r2, [r1, #8]
 800171e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001722:	608a      	str	r2, [r1, #8]
 8001724:	e7e5      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001726:	6810      	ldr	r0, [r2, #0]
 8001728:	07c7      	lsls	r7, r0, #31
 800172a:	f57f af5a 	bpl.w	80015e2 <HAL_ADC_ConfigChannel+0xc6>
 800172e:	e7e0      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
  __HAL_LOCK(hadc);
 8001730:	2002      	movs	r0, #2
}
 8001732:	b002      	add	sp, #8
 8001734:	bcf0      	pop	{r4, r5, r6, r7}
 8001736:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001738:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 800173c:	40ac      	lsls	r4, r5
 800173e:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001740:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001742:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001746:	d9bb      	bls.n	80016c0 <HAL_ADC_ConfigChannel+0x1a4>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001748:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800174c:	688e      	ldr	r6, [r1, #8]
 800174e:	6994      	ldr	r4, [r2, #24]
 8001750:	f1a0 011b 	sub.w	r1, r0, #27
 8001754:	2707      	movs	r7, #7
 8001756:	408f      	lsls	r7, r1
 8001758:	fa06 f001 	lsl.w	r0, r6, r1
 800175c:	ea24 0107 	bic.w	r1, r4, r7
 8001760:	4301      	orrs	r1, r0
 8001762:	6191      	str	r1, [r2, #24]
 8001764:	e748      	b.n	80015f8 <HAL_ADC_ConfigChannel+0xdc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001766:	2d12      	cmp	r5, #18
 8001768:	d1c3      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800176a:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800176c:	0240      	lsls	r0, r0, #9
 800176e:	d4c0      	bmi.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
 8001770:	e752      	b.n	8001618 <HAL_ADC_ConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001772:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8001774:	680d      	ldr	r5, [r1, #0]
 8001776:	385a      	subs	r0, #90	; 0x5a
 8001778:	271f      	movs	r7, #31
 800177a:	4087      	lsls	r7, r0
 800177c:	ea26 0607 	bic.w	r6, r6, r7
 8001780:	fa05 f000 	lsl.w	r0, r5, r0
 8001784:	4330      	orrs	r0, r6
 8001786:	63d0      	str	r0, [r2, #60]	; 0x3c
 8001788:	e6ec      	b.n	8001564 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800178a:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 800178c:	4e3c      	ldr	r6, [pc, #240]	; (8001880 <HAL_ADC_ConfigChannel+0x364>)
 800178e:	403e      	ands	r6, r7
 8001790:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001794:	4330      	orrs	r0, r6
 8001796:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800179a:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 800179c:	e71b      	b.n	80015d6 <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800179e:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80017a0:	4e37      	ldr	r6, [pc, #220]	; (8001880 <HAL_ADC_ConfigChannel+0x364>)
 80017a2:	403e      	ands	r6, r7
 80017a4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80017a8:	4330      	orrs	r0, r6
 80017aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80017ae:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80017b0:	e711      	b.n	80015d6 <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017b2:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80017b4:	4e32      	ldr	r6, [pc, #200]	; (8001880 <HAL_ADC_ConfigChannel+0x364>)
 80017b6:	403e      	ands	r6, r7
 80017b8:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80017bc:	4330      	orrs	r0, r6
 80017be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80017c2:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80017c4:	e707      	b.n	80015d6 <HAL_ADC_ConfigChannel+0xba>
 80017c6:	4c2f      	ldr	r4, [pc, #188]	; (8001884 <HAL_ADC_ConfigChannel+0x368>)
 80017c8:	e797      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017ca:	6810      	ldr	r0, [r2, #0]
 80017cc:	07c6      	lsls	r6, r0, #31
 80017ce:	d599      	bpl.n	8001704 <HAL_ADC_ConfigChannel+0x1e8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d2:	f042 0220 	orr.w	r2, r2, #32
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	e6ed      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x9c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	07c0      	lsls	r0, r0, #31
 80017e0:	d4f6      	bmi.n	80017d0 <HAL_ADC_ConfigChannel+0x2b4>
 80017e2:	e794      	b.n	800170e <HAL_ADC_ConfigChannel+0x1f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017e4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80017e8:	d183      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ea:	4a29      	ldr	r2, [pc, #164]	; (8001890 <HAL_ADC_ConfigChannel+0x374>)
 80017ec:	4c29      	ldr	r4, [pc, #164]	; (8001894 <HAL_ADC_ConfigChannel+0x378>)
 80017ee:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017f0:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017f2:	fba4 4202 	umull	r4, r2, r4, r2
 80017f6:	0c92      	lsrs	r2, r2, #18
 80017f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017fc:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001802:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001804:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001806:	9a01      	ldr	r2, [sp, #4]
 8001808:	2a00      	cmp	r2, #0
 800180a:	f43f af72 	beq.w	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
            wait_loop_index--;
 800180e:	9a01      	ldr	r2, [sp, #4]
 8001810:	3a01      	subs	r2, #1
 8001812:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001814:	9a01      	ldr	r2, [sp, #4]
 8001816:	2a00      	cmp	r2, #0
 8001818:	d1f9      	bne.n	800180e <HAL_ADC_ConfigChannel+0x2f2>
 800181a:	e76a      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1d6>
 800181c:	4c1e      	ldr	r4, [pc, #120]	; (8001898 <HAL_ADC_ConfigChannel+0x37c>)
 800181e:	e76c      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	07d7      	lsls	r7, r2, #31
 8001824:	d4d4      	bmi.n	80017d0 <HAL_ADC_ConfigChannel+0x2b4>
 8001826:	e70c      	b.n	8001642 <HAL_ADC_ConfigChannel+0x126>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001828:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800182a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800182e:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8001832:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8001836:	d014      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x346>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001838:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800183a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800183e:	4286      	cmp	r6, r0
 8001840:	d014      	beq.n	800186c <HAL_ADC_ConfigChannel+0x350>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001842:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001844:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001848:	4286      	cmp	r6, r0
 800184a:	d014      	beq.n	8001876 <HAL_ADC_ConfigChannel+0x35a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800184c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800184e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001852:	4286      	cmp	r6, r0
 8001854:	f47f aebf 	bne.w	80015d6 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001858:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800185a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800185e:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001860:	e6b9      	b.n	80015d6 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001862:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001864:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001868:	6610      	str	r0, [r2, #96]	; 0x60
 800186a:	e7e5      	b.n	8001838 <HAL_ADC_ConfigChannel+0x31c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800186c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800186e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001872:	6650      	str	r0, [r2, #100]	; 0x64
 8001874:	e7e5      	b.n	8001842 <HAL_ADC_ConfigChannel+0x326>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001876:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001878:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800187c:	6690      	str	r0, [r2, #104]	; 0x68
 800187e:	e7e5      	b.n	800184c <HAL_ADC_ConfigChannel+0x330>
 8001880:	83fff000 	.word	0x83fff000
 8001884:	50000100 	.word	0x50000100
 8001888:	50000400 	.word	0x50000400
 800188c:	50000300 	.word	0x50000300
 8001890:	20000000 	.word	0x20000000
 8001894:	431bde83 	.word	0x431bde83
 8001898:	50000500 	.word	0x50000500

0800189c <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800189c:	6803      	ldr	r3, [r0, #0]
 800189e:	4a43      	ldr	r2, [pc, #268]	; (80019ac <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80018a4:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018a6:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018a8:	d00e      	beq.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00a      	beq.n	80018c4 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 80018ae:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d049      	beq.n	800194a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80018b6:	4c3e      	ldr	r4, [pc, #248]	; (80019b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80018b8:	42a3      	cmp	r3, r4
 80018ba:	d005      	beq.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
} 
 80018be:	4618      	mov	r0, r3
 80018c0:	bcf0      	pop	{r4, r5, r6, r7}
 80018c2:	4770      	bx	lr
 80018c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 80018c8:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80018cc:	2c01      	cmp	r4, #1
 80018ce:	d041      	beq.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 80018d0:	2401      	movs	r4, #1
 80018d2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018d6:	689c      	ldr	r4, [r3, #8]
 80018d8:	0766      	lsls	r6, r4, #29
 80018da:	d50a      	bpl.n	80018f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018de:	f043 0320 	orr.w	r3, r3, #32
 80018e2:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 80018ec:	bcf0      	pop	{r4, r5, r6, r7}
 80018ee:	4618      	mov	r0, r3
 80018f0:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80018f2:	6894      	ldr	r4, [r2, #8]
 80018f4:	0764      	lsls	r4, r4, #29
 80018f6:	d4f1      	bmi.n	80018dc <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fc:	d044      	beq.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80018fe:	4f2b      	ldr	r7, [pc, #172]	; (80019ac <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001900:	4c2c      	ldr	r4, [pc, #176]	; (80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8001902:	4e2d      	ldr	r6, [pc, #180]	; (80019b8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8001904:	42bb      	cmp	r3, r7
 8001906:	bf18      	it	ne
 8001908:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800190a:	b33d      	cbz	r5, 800195c <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800190c:	68a7      	ldr	r7, [r4, #8]
 800190e:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 8001912:	684e      	ldr	r6, [r1, #4]
 8001914:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 8001918:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 800191c:	433e      	orrs	r6, r7
 800191e:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001920:	689e      	ldr	r6, [r3, #8]
 8001922:	f006 0603 	and.w	r6, r6, #3
 8001926:	2e01      	cmp	r6, #1
 8001928:	d03c      	beq.n	80019a4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800192a:	6893      	ldr	r3, [r2, #8]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d02f      	beq.n	8001994 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001934:	68a2      	ldr	r2, [r4, #8]
 8001936:	688b      	ldr	r3, [r1, #8]
 8001938:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800193c:	431d      	orrs	r5, r3
 800193e:	f022 020f 	bic.w	r2, r2, #15
 8001942:	4315      	orrs	r5, r2
 8001944:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e7cd      	b.n	80018e6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800194a:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8001950:	2c01      	cmp	r4, #1
 8001952:	d1bd      	bne.n	80018d0 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 8001954:	2302      	movs	r3, #2
} 
 8001956:	4618      	mov	r0, r3
 8001958:	bcf0      	pop	{r4, r5, r6, r7}
 800195a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800195c:	68a1      	ldr	r1, [r4, #8]
 800195e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001962:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	f001 0103 	and.w	r1, r1, #3
 800196a:	2901      	cmp	r1, #1
 800196c:	d016      	beq.n	800199c <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800196e:	6893      	ldr	r3, [r2, #8]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d009      	beq.n	800198c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001978:	68a3      	ldr	r3, [r4, #8]
 800197a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800197e:	f023 030f 	bic.w	r3, r3, #15
 8001982:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e7ae      	b.n	80018e6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800198a:	e7be      	b.n	800190a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	07db      	lsls	r3, r3, #31
 8001990:	d4d9      	bmi.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001992:	e7f1      	b.n	8001978 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	07de      	lsls	r6, r3, #31
 8001998:	d4d5      	bmi.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800199a:	e7cb      	b.n	8001934 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	07d9      	lsls	r1, r3, #31
 80019a0:	d4d1      	bmi.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80019a2:	e7e4      	b.n	800196e <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	07df      	lsls	r7, r3, #31
 80019a8:	d5bf      	bpl.n	800192a <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80019aa:	e7cc      	b.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80019ac:	50000100 	.word	0x50000100
 80019b0:	50000500 	.word	0x50000500
 80019b4:	50000300 	.word	0x50000300
 80019b8:	50000700 	.word	0x50000700

080019bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4908      	ldr	r1, [pc, #32]	; (80019e0 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80019be:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c2:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80019c8:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ca:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80019dc:	60cb      	str	r3, [r1, #12]
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_NVIC_SetPriority+0x68>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ee:	f1c3 0507 	rsb	r5, r3, #7
 80019f2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	bf28      	it	cs
 80019fa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fc:	2c06      	cmp	r4, #6
 80019fe:	d919      	bls.n	8001a34 <HAL_NVIC_SetPriority+0x50>
 8001a00:	3b03      	subs	r3, #3
 8001a02:	f04f 34ff 	mov.w	r4, #4294967295
 8001a06:	409c      	lsls	r4, r3
 8001a08:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8001a10:	40ac      	lsls	r4, r5
 8001a12:	ea21 0104 	bic.w	r1, r1, r4
 8001a16:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001a18:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	db0c      	blt.n	8001a3a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a28:	0109      	lsls	r1, r1, #4
 8001a2a:	b2c9      	uxtb	r1, r1
 8001a2c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a30:	bc30      	pop	{r4, r5}
 8001a32:	4770      	bx	lr
 8001a34:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	4613      	mov	r3, r2
 8001a38:	e7e8      	b.n	8001a0c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_NVIC_SetPriority+0x6c>)
 8001a3c:	f000 000f 	and.w	r0, r0, #15
 8001a40:	0109      	lsls	r1, r1, #4
 8001a42:	4403      	add	r3, r0
 8001a44:	b2c9      	uxtb	r1, r1
 8001a46:	7619      	strb	r1, [r3, #24]
 8001a48:	bc30      	pop	{r4, r5}
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	e000ecfc 	.word	0xe000ecfc

08001a54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a54:	2800      	cmp	r0, #0
 8001a56:	db07      	blt.n	8001a68 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a58:	f000 011f 	and.w	r1, r0, #31
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_NVIC_EnableIRQ+0x18>)
 8001a5e:	0940      	lsrs	r0, r0, #5
 8001a60:	2301      	movs	r3, #1
 8001a62:	408b      	lsls	r3, r1
 8001a64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	3801      	subs	r0, #1
 8001a72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a76:	d20e      	bcs.n	8001a96 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	4c08      	ldr	r4, [pc, #32]	; (8001aa0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	20f0      	movs	r0, #240	; 0xf0
 8001a82:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a86:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a88:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	6019      	str	r1, [r3, #0]
 8001a94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2001      	movs	r0, #1
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8001aa4:	b188      	cbz	r0, 8001aca <HAL_DAC_Init+0x26>
{ 
 8001aa6:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001aa8:	7903      	ldrb	r3, [r0, #4]
 8001aaa:	4604      	mov	r4, r0
 8001aac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ab0:	b13b      	cbz	r3, 8001ac2 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ab2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ab4:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ab6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ab8:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001aba:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001abc:	7122      	strb	r2, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001abe:	4618      	mov	r0, r3
}
 8001ac0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001ac2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001ac4:	f7fe ffee 	bl	8000aa4 <HAL_DAC_MspInit>
 8001ac8:	e7f3      	b.n	8001ab2 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001ad0:	4603      	mov	r3, r0
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ad2:	7940      	ldrb	r0, [r0, #5]
 8001ad4:	2801      	cmp	r0, #1
 8001ad6:	d01e      	beq.n	8001b16 <HAL_DAC_ConfigChannel+0x46>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ad8:	2002      	movs	r0, #2
{
 8001ada:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8001adc:	7118      	strb	r0, [r3, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ade:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8001ae2:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001ae4:	f640 76fe 	movw	r6, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8001ae8:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001aea:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001aec:	fa06 f002 	lsl.w	r0, r6, r2
 8001af0:	ea25 0000 	bic.w	r0, r5, r0
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001af4:	4091      	lsls	r1, r2
 8001af6:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001af8:	6021      	str	r1, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001afa:	6821      	ldr	r1, [r4, #0]
 8001afc:	20c0      	movs	r0, #192	; 0xc0
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	ea21 0202 	bic.w	r2, r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b06:	2501      	movs	r5, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b08:	2100      	movs	r1, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001b0a:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001b0c:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8001b0e:	7159      	strb	r1, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001b10:	4608      	mov	r0, r1
}
 8001b12:	bc70      	pop	{r4, r5, r6}
 8001b14:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8001b16:	2002      	movs	r0, #2
}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop

08001b1c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d034      	beq.n	8001b8a <HAL_DMA_Init+0x6e>
{ 
 8001b20:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b22:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b26:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 8001b2a:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001b2c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b30:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 8001b34:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b38:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 8001b3a:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3c:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b40:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b42:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b46:	4c12      	ldr	r4, [pc, #72]	; (8001b90 <HAL_DMA_Init+0x74>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b48:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001b4c:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b4e:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 8001b50:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b52:	d910      	bls.n	8001b76 <HAL_DMA_Init+0x5a>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_DMA_Init+0x78>)
 8001b56:	4910      	ldr	r1, [pc, #64]	; (8001b98 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8001b58:	4c10      	ldr	r4, [pc, #64]	; (8001b9c <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b5a:	4402      	add	r2, r0
 8001b5c:	fba1 1202 	umull	r1, r2, r1, r2
 8001b60:	0912      	lsrs	r2, r2, #4
 8001b62:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 8001b64:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b68:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8001b6a:	8419      	strh	r1, [r3, #32]
 8001b6c:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
}  
 8001b70:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b72:	6398      	str	r0, [r3, #56]	; 0x38
}  
 8001b74:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_DMA_Init+0x84>)
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <HAL_DMA_Init+0x7c>)
 8001b7a:	4402      	add	r2, r0
 8001b7c:	fba1 1202 	umull	r1, r2, r1, r2
 8001b80:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8001b82:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b86:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8001b88:	e7ec      	b.n	8001b64 <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
}  
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40020407 	.word	0x40020407
 8001b94:	bffdfbf8 	.word	0xbffdfbf8
 8001b98:	cccccccd 	.word	0xcccccccd
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	bffdfff8 	.word	0xbffdfff8

08001ba4 <HAL_DMA_Start_IT>:
{
 8001ba4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8001ba6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001baa:	2c01      	cmp	r4, #1
 8001bac:	d039      	beq.n	8001c22 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bae:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001bb2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001bb6:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bba:	d005      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8001bc2:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8001bc4:	2002      	movs	r0, #2
} 
 8001bc6:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bc8:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001bca:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bcc:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001bce:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd2:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bd4:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bd6:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bd8:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bdc:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bde:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001be2:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be4:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001be6:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001be8:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001bea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bec:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 8001bee:	bf0b      	itete	eq
 8001bf0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001bf2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001bf4:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001bf6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001bf8:	b153      	cbz	r3, 8001c10 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	f043 030e 	orr.w	r3, r3, #14
 8001c00:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c0a:	2000      	movs	r0, #0
} 
 8001c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c0e:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	f043 030a 	orr.w	r3, r3, #10
 8001c16:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6023      	str	r3, [r4, #0]
 8001c20:	e7ef      	b.n	8001c02 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001c22:	2002      	movs	r0, #2
} 
 8001c24:	bcf0      	pop	{r4, r5, r6, r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_DMA_IRQHandler>:
{
 8001c28:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c2a:	e9d0 620f 	ldrd	r6, r2, [r0, #60]	; 0x3c
 8001c2e:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c30:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c32:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c34:	4093      	lsls	r3, r2
 8001c36:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8001c38:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c3a:	d00e      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x32>
 8001c3c:	f015 0f04 	tst.w	r5, #4
 8001c40:	d00b      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c42:	6822      	ldr	r2, [r4, #0]
 8001c44:	0692      	lsls	r2, r2, #26
 8001c46:	d403      	bmi.n	8001c50 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	f022 0204 	bic.w	r2, r2, #4
 8001c4e:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c50:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c52:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c54:	b1ca      	cbz	r2, 8001c8a <HAL_DMA_IRQHandler+0x62>
}  
 8001c56:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8001c58:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	420b      	tst	r3, r1
 8001c60:	d015      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x66>
 8001c62:	f015 0f02 	tst.w	r5, #2
 8001c66:	d012      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	0692      	lsls	r2, r2, #26
 8001c6c:	d406      	bmi.n	8001c7c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c6e:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001c70:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c72:	f022 020a 	bic.w	r2, r2, #10
 8001c76:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001c78:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001c7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c7e:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8001c80:	2300      	movs	r3, #0
 8001c82:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d1e5      	bne.n	8001c56 <HAL_DMA_IRQHandler+0x2e>
}  
 8001c8a:	bc70      	pop	{r4, r5, r6}
 8001c8c:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c8e:	2308      	movs	r3, #8
 8001c90:	4093      	lsls	r3, r2
 8001c92:	420b      	tst	r3, r1
 8001c94:	d0f9      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x62>
 8001c96:	072b      	lsls	r3, r5, #28
 8001c98:	d5f7      	bpl.n	8001c8a <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c9a:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001c9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c9e:	f023 030e 	bic.w	r3, r3, #14
 8001ca2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8001caa:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cae:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cb0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 8001cb2:	8404      	strh	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001cb4:	2900      	cmp	r1, #0
 8001cb6:	d0e8      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x62>
}  
 8001cb8:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8001cba:	4708      	bx	r1

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc0:	680e      	ldr	r6, [r1, #0]
{
 8001cc2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc4:	2e00      	cmp	r6, #0
 8001cc6:	f000 8091 	beq.w	8001dec <HAL_GPIO_Init+0x130>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cca:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001ebc <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8001cce:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8001cd6:	ea14 0c06 	ands.w	ip, r4, r6
 8001cda:	f000 8082 	beq.w	8001de2 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cde:	684d      	ldr	r5, [r1, #4]
 8001ce0:	f025 0a10 	bic.w	sl, r5, #16
 8001ce4:	f10a 32ff 	add.w	r2, sl, #4294967295
 8001ce8:	2a01      	cmp	r2, #1
 8001cea:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cee:	f04f 0203 	mov.w	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf2:	d97e      	bls.n	8001df2 <HAL_GPIO_Init+0x136>
      temp = GPIOx->PUPDR;
 8001cf4:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cf6:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cf8:	fa02 f208 	lsl.w	r2, r2, r8
 8001cfc:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d00:	fa04 f408 	lsl.w	r4, r4, r8
 8001d04:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001d06:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d08:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8001d0a:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0c:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d10:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d12:	fa02 f208 	lsl.w	r2, r2, r8
 8001d16:	433a      	orrs	r2, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d18:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8001d1a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1c:	d561      	bpl.n	8001de2 <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4c60      	ldr	r4, [pc, #384]	; (8001ea0 <HAL_GPIO_Init+0x1e4>)
 8001d20:	69a2      	ldr	r2, [r4, #24]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	61a2      	str	r2, [r4, #24]
 8001d28:	69a2      	ldr	r2, [r4, #24]
 8001d2a:	f023 0703 	bic.w	r7, r3, #3
 8001d2e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001d32:	f002 0201 	and.w	r2, r2, #1
 8001d36:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001d3a:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d3c:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d40:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d42:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d46:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8001d4a:	240f      	movs	r4, #15
 8001d4c:	fa04 f409 	lsl.w	r4, r4, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d50:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d54:	ea28 0404 	bic.w	r4, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d58:	d01c      	beq.n	8001d94 <HAL_GPIO_Init+0xd8>
 8001d5a:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <HAL_GPIO_Init+0x1e8>)
 8001d5c:	4290      	cmp	r0, r2
 8001d5e:	f000 8088 	beq.w	8001e72 <HAL_GPIO_Init+0x1b6>
 8001d62:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <HAL_GPIO_Init+0x1ec>)
 8001d64:	4290      	cmp	r0, r2
 8001d66:	f000 8089 	beq.w	8001e7c <HAL_GPIO_Init+0x1c0>
 8001d6a:	4a50      	ldr	r2, [pc, #320]	; (8001eac <HAL_GPIO_Init+0x1f0>)
 8001d6c:	4290      	cmp	r0, r2
 8001d6e:	d07a      	beq.n	8001e66 <HAL_GPIO_Init+0x1aa>
 8001d70:	4a4f      	ldr	r2, [pc, #316]	; (8001eb0 <HAL_GPIO_Init+0x1f4>)
 8001d72:	4290      	cmp	r0, r2
 8001d74:	f000 8088 	beq.w	8001e88 <HAL_GPIO_Init+0x1cc>
 8001d78:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_GPIO_Init+0x1f8>)
 8001d7a:	4290      	cmp	r0, r2
 8001d7c:	f000 808a 	beq.w	8001e94 <HAL_GPIO_Init+0x1d8>
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_GPIO_Init+0x1fc>)
 8001d82:	4290      	cmp	r0, r2
 8001d84:	bf0c      	ite	eq
 8001d86:	f04f 0806 	moveq.w	r8, #6
 8001d8a:	f04f 0807 	movne.w	r8, #7
 8001d8e:	fa08 f209 	lsl.w	r2, r8, r9
 8001d92:	4314      	orrs	r4, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d94:	60bc      	str	r4, [r7, #8]
        temp = EXTI->IMR;
 8001d96:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8001d9a:	ea6f 070c 	mvn.w	r7, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9e:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8001da0:	bf54      	ite	pl
 8001da2:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001da4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001da8:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR;
 8001dac:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db0:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8001db2:	bf54      	ite	pl
 8001db4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001db6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001dba:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc2:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8001dc4:	bf54      	ite	pl
 8001dc6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001dc8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001dcc:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR;
 8001dd0:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8001dd6:	bf54      	ite	pl
 8001dd8:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001dda:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR = temp;
 8001dde:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8001de2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de4:	fa36 f203 	lsrs.w	r2, r6, r3
 8001de8:	f47f af72 	bne.w	8001cd0 <HAL_GPIO_Init+0x14>
  }
}
 8001dec:	b003      	add	sp, #12
 8001dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001df2:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001df4:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001df8:	fa02 f208 	lsl.w	r2, r2, r8
 8001dfc:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e00:	68cf      	ldr	r7, [r1, #12]
 8001e02:	fa07 f708 	lsl.w	r7, r7, r8
 8001e06:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8001e0a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e0c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e0e:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e12:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e16:	465c      	mov	r4, fp
 8001e18:	409c      	lsls	r4, r3
 8001e1a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8001e1c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001e1e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e20:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e24:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e28:	ea49 0404 	orr.w	r4, r9, r4
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2c:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e30:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8001e34:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e36:	f47f af68 	bne.w	8001d0a <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3u];
 8001e3a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001e3e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e42:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001e46:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	f04f 0b0f 	mov.w	fp, #15
 8001e50:	fa0b fb02 	lsl.w	fp, fp, r2
 8001e54:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e58:	690c      	ldr	r4, [r1, #16]
 8001e5a:	4094      	lsls	r4, r2
 8001e5c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3u] = temp;
 8001e60:	f8c9 4020 	str.w	r4, [r9, #32]
 8001e64:	e751      	b.n	8001d0a <HAL_GPIO_Init+0x4e>
 8001e66:	f04f 0803 	mov.w	r8, #3
 8001e6a:	fa08 f209 	lsl.w	r2, r8, r9
 8001e6e:	4314      	orrs	r4, r2
 8001e70:	e790      	b.n	8001d94 <HAL_GPIO_Init+0xd8>
 8001e72:	2201      	movs	r2, #1
 8001e74:	fa02 f209 	lsl.w	r2, r2, r9
 8001e78:	4314      	orrs	r4, r2
 8001e7a:	e78b      	b.n	8001d94 <HAL_GPIO_Init+0xd8>
 8001e7c:	f04f 0802 	mov.w	r8, #2
 8001e80:	fa08 f209 	lsl.w	r2, r8, r9
 8001e84:	4314      	orrs	r4, r2
 8001e86:	e785      	b.n	8001d94 <HAL_GPIO_Init+0xd8>
 8001e88:	f04f 0804 	mov.w	r8, #4
 8001e8c:	fa08 f209 	lsl.w	r2, r8, r9
 8001e90:	4314      	orrs	r4, r2
 8001e92:	e77f      	b.n	8001d94 <HAL_GPIO_Init+0xd8>
 8001e94:	f04f 0805 	mov.w	r8, #5
 8001e98:	fa08 f209 	lsl.w	r2, r8, r9
 8001e9c:	4314      	orrs	r4, r2
 8001e9e:	e779      	b.n	8001d94 <HAL_GPIO_Init+0xd8>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48000c00 	.word	0x48000c00
 8001eb0:	48001000 	.word	0x48001000
 8001eb4:	48001400 	.word	0x48001400
 8001eb8:	48001800 	.word	0x48001800
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	b10a      	cbz	r2, 8001ec6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec2:	6181      	str	r1, [r0, #24]
 8001ec4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001ed2:	6951      	ldr	r1, [r2, #20]
 8001ed4:	4201      	tst	r1, r0
 8001ed6:	d100      	bne.n	8001eda <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001ed8:	4770      	bx	lr
{
 8001eda:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001edc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ede:	f7ff fff5 	bl	8001ecc <HAL_GPIO_EXTI_Callback>
}
 8001ee2:	bd08      	pop	{r3, pc}
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	f000 827f 	beq.w	80023ec <HAL_RCC_OscConfig+0x504>
{
 8001eee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	6803      	ldr	r3, [r0, #0]
 8001ef4:	07df      	lsls	r7, r3, #31
{
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	d53d      	bpl.n	8001f78 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001efc:	49c1      	ldr	r1, [pc, #772]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 8001efe:	684a      	ldr	r2, [r1, #4]
 8001f00:	f002 020c 	and.w	r2, r2, #12
 8001f04:	2a04      	cmp	r2, #4
 8001f06:	f000 815f 	beq.w	80021c8 <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f0a:	684a      	ldr	r2, [r1, #4]
 8001f0c:	f002 020c 	and.w	r2, r2, #12
 8001f10:	2a08      	cmp	r2, #8
 8001f12:	f000 8152 	beq.w	80021ba <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	6863      	ldr	r3, [r4, #4]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	f000 816b 	beq.w	80021f6 <HAL_RCC_OscConfig+0x30e>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 819a 	beq.w	800225a <HAL_RCC_OscConfig+0x372>
 8001f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f2a:	f000 82bc 	beq.w	80024a6 <HAL_RCC_OscConfig+0x5be>
 8001f2e:	4bb5      	ldr	r3, [pc, #724]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3e:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe fffe 	bl	8000f40 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f44:	4faf      	ldr	r7, [pc, #700]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8001f46:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4c:	2601      	movs	r6, #1
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7fe fff6 	bl	8000f40 <HAL_GetTick>
 8001f54:	1b40      	subs	r0, r0, r5
 8001f56:	2864      	cmp	r0, #100	; 0x64
 8001f58:	f200 817b 	bhi.w	8002252 <HAL_RCC_OscConfig+0x36a>
 8001f5c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	fa98 f3a8 	rbit	r3, r8
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	fa06 f303 	lsl.w	r3, r6, r3
 8001f72:	4213      	tst	r3, r2
 8001f74:	d0ec      	beq.n	8001f50 <HAL_RCC_OscConfig+0x68>
 8001f76:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f78:	079e      	lsls	r6, r3, #30
 8001f7a:	d542      	bpl.n	8002002 <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f7c:	4aa1      	ldr	r2, [pc, #644]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 8001f7e:	6851      	ldr	r1, [r2, #4]
 8001f80:	f011 0f0c 	tst.w	r1, #12
 8001f84:	f000 80cf 	beq.w	8002126 <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f88:	6851      	ldr	r1, [r2, #4]
 8001f8a:	f001 010c 	and.w	r1, r1, #12
 8001f8e:	2908      	cmp	r1, #8
 8001f90:	f000 80c2 	beq.w	8002118 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f94:	68e2      	ldr	r2, [r4, #12]
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	f000 81b8 	beq.w	800230c <HAL_RCC_OscConfig+0x424>
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001faa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fae:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 8001fb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ffc4 	bl	8000f40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	4e92      	ldr	r6, [pc, #584]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8001fba:	4605      	mov	r5, r0
 8001fbc:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e005      	b.n	8001fce <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7fe ffbd 	bl	8000f40 <HAL_GetTick>
 8001fc6:	1b40      	subs	r0, r0, r5
 8001fc8:	2802      	cmp	r0, #2
 8001fca:	f200 8142 	bhi.w	8002252 <HAL_RCC_OscConfig+0x36a>
 8001fce:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	6832      	ldr	r2, [r6, #0]
 8001fd4:	fa98 f3a8 	rbit	r3, r8
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa07 f303 	lsl.w	r3, r7, r3
 8001fe4:	4213      	tst	r3, r2
 8001fe6:	d0ec      	beq.n	8001fc2 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	6831      	ldr	r1, [r6, #0]
 8001fea:	22f8      	movs	r2, #248	; 0xf8
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	fab2 f282 	clz	r2, r2
 8001ff6:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6033      	str	r3, [r6, #0]
 8002000:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	071d      	lsls	r5, r3, #28
 8002004:	d421      	bmi.n	800204a <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002006:	0758      	lsls	r0, r3, #29
 8002008:	d54e      	bpl.n	80020a8 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	00d1      	lsls	r1, r2, #3
 8002010:	f140 80c7 	bpl.w	80021a2 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8002014:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4d7b      	ldr	r5, [pc, #492]	; (8002208 <HAL_RCC_OscConfig+0x320>)
 800201a:	682b      	ldr	r3, [r5, #0]
 800201c:	05da      	lsls	r2, r3, #23
 800201e:	f140 8108 	bpl.w	8002232 <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002022:	68a3      	ldr	r3, [r4, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	f000 8197 	beq.w	8002358 <HAL_RCC_OscConfig+0x470>
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8138 	beq.w	80022a0 <HAL_RCC_OscConfig+0x3b8>
 8002030:	2b05      	cmp	r3, #5
 8002032:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 8002034:	6a1a      	ldr	r2, [r3, #32]
 8002036:	f000 81d1 	beq.w	80023dc <HAL_RCC_OscConfig+0x4f4>
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	621a      	str	r2, [r3, #32]
 8002040:	6a1a      	ldr	r2, [r3, #32]
 8002042:	f022 0204 	bic.w	r2, r2, #4
 8002046:	621a      	str	r2, [r3, #32]
 8002048:	e18b      	b.n	8002362 <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204a:	6962      	ldr	r2, [r4, #20]
 800204c:	2a00      	cmp	r2, #0
 800204e:	f000 8081 	beq.w	8002154 <HAL_RCC_OscConfig+0x26c>
 8002052:	2201      	movs	r2, #1
 8002054:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002058:	4b6c      	ldr	r3, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4f6a      	ldr	r7, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 800205c:	fab1 f181 	clz	r1, r1
 8002060:	440b      	add	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002064:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 8002066:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002068:	f7fe ff6a 	bl	8000f40 <HAL_GetTick>
 800206c:	f04f 0802 	mov.w	r8, #2
 8002070:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e005      	b.n	8002080 <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe ff64 	bl	8000f40 <HAL_GetTick>
 8002078:	1b40      	subs	r0, r0, r5
 800207a:	2802      	cmp	r0, #2
 800207c:	f200 80e9 	bhi.w	8002252 <HAL_RCC_OscConfig+0x36a>
 8002080:	fa98 f3a8 	rbit	r3, r8
 8002084:	fa98 f3a8 	rbit	r3, r8
 8002088:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	fa98 f3a8 	rbit	r3, r8
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	fa06 f303 	lsl.w	r3, r6, r3
 800209e:	4213      	tst	r3, r2
 80020a0:	d0e8      	beq.n	8002074 <HAL_RCC_OscConfig+0x18c>
 80020a2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	0758      	lsls	r0, r3, #29
 80020a6:	d4b0      	bmi.n	800200a <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a8:	69a0      	ldr	r0, [r4, #24]
 80020aa:	b388      	cbz	r0, 8002110 <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4d55      	ldr	r5, [pc, #340]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 80020ae:	686b      	ldr	r3, [r5, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	f000 8179 	beq.w	80023ac <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	2802      	cmp	r0, #2
 80020bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c0:	f000 8196 	beq.w	80023f0 <HAL_RCC_OscConfig+0x508>
 80020c4:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe ff31 	bl	8000f40 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	462c      	mov	r4, r5
 80020e0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 80020e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	2601      	movs	r6, #1
 80020e8:	e005      	b.n	80020f6 <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe ff29 	bl	8000f40 <HAL_GetTick>
 80020ee:	1b40      	subs	r0, r0, r5
 80020f0:	2802      	cmp	r0, #2
 80020f2:	f200 80ae 	bhi.w	8002252 <HAL_RCC_OscConfig+0x36a>
 80020f6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	6822      	ldr	r2, [r4, #0]
 80020fc:	fa97 f3a7 	rbit	r3, r7
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa06 f303 	lsl.w	r3, r6, r3
 800210c:	4213      	tst	r3, r2
 800210e:	d1ec      	bne.n	80020ea <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 8002110:	2000      	movs	r0, #0
}
 8002112:	b003      	add	sp, #12
 8002114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002118:	6852      	ldr	r2, [r2, #4]
 800211a:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 800211e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002122:	f47f af37 	bne.w	8001f94 <HAL_RCC_OscConfig+0xac>
 8002126:	2202      	movs	r2, #2
 8002128:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212c:	4935      	ldr	r1, [pc, #212]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 800212e:	6808      	ldr	r0, [r1, #0]
 8002130:	fa92 f2a2 	rbit	r2, r2
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	f002 021f 	and.w	r2, r2, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	4202      	tst	r2, r0
 8002144:	d064      	beq.n	8002210 <HAL_RCC_OscConfig+0x328>
 8002146:	68e2      	ldr	r2, [r4, #12]
 8002148:	428a      	cmp	r2, r1
 800214a:	d061      	beq.n	8002210 <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 800214c:	2001      	movs	r0, #1
}
 800214e:	b003      	add	sp, #12
 8002150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002154:	2501      	movs	r5, #1
 8002156:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4f29      	ldr	r7, [pc, #164]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 800215e:	fab1 f181 	clz	r1, r1
 8002162:	440b      	add	r3, r1
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f04f 0802 	mov.w	r8, #2
 800216a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800216c:	f7fe fee8 	bl	8000f40 <HAL_GetTick>
 8002170:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002172:	e004      	b.n	800217e <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002174:	f7fe fee4 	bl	8000f40 <HAL_GetTick>
 8002178:	1b80      	subs	r0, r0, r6
 800217a:	2802      	cmp	r0, #2
 800217c:	d869      	bhi.n	8002252 <HAL_RCC_OscConfig+0x36a>
 800217e:	fa98 f3a8 	rbit	r3, r8
 8002182:	fa98 f3a8 	rbit	r3, r8
 8002186:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	fa98 f3a8 	rbit	r3, r8
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	fa05 f303 	lsl.w	r3, r5, r3
 800219c:	4213      	tst	r3, r2
 800219e:	d1e9      	bne.n	8002174 <HAL_RCC_OscConfig+0x28c>
 80021a0:	e77f      	b.n	80020a2 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021a8:	61da      	str	r2, [r3, #28]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021b4:	f04f 0801 	mov.w	r8, #1
 80021b8:	e72e      	b.n	8002018 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ba:	684a      	ldr	r2, [r1, #4]
 80021bc:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 80021c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021c4:	f47f aea7 	bne.w	8001f16 <HAL_RCC_OscConfig+0x2e>
 80021c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021cc:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 80021d2:	6808      	ldr	r0, [r1, #0]
 80021d4:	fa92 f2a2 	rbit	r2, r2
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	f002 021f 	and.w	r2, r2, #31
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	4202      	tst	r2, r0
 80021e8:	f43f aec6 	beq.w	8001f78 <HAL_RCC_OscConfig+0x90>
 80021ec:	6862      	ldr	r2, [r4, #4]
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	f47f aec2 	bne.w	8001f78 <HAL_RCC_OscConfig+0x90>
 80021f4:	e7aa      	b.n	800214c <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f6:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_RCC_OscConfig+0x31c>)
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	e69e      	b.n	8001f40 <HAL_RCC_OscConfig+0x58>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
 800220c:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4dab      	ldr	r5, [pc, #684]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
 8002212:	21f8      	movs	r1, #248	; 0xf8
 8002214:	6828      	ldr	r0, [r5, #0]
 8002216:	fa91 f1a1 	rbit	r1, r1
 800221a:	6922      	ldr	r2, [r4, #16]
 800221c:	fab1 f181 	clz	r1, r1
 8002220:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8002224:	408a      	lsls	r2, r1
 8002226:	4302      	orrs	r2, r0
 8002228:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	071d      	lsls	r5, r3, #28
 800222c:	f57f aeeb 	bpl.w	8002006 <HAL_RCC_OscConfig+0x11e>
 8002230:	e70b      	b.n	800204a <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	682b      	ldr	r3, [r5, #0]
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800223a:	f7fe fe81 	bl	8000f40 <HAL_GetTick>
 800223e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	05db      	lsls	r3, r3, #23
 8002244:	f53f aeed 	bmi.w	8002022 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fe7a 	bl	8000f40 <HAL_GetTick>
 800224c:	1b80      	subs	r0, r0, r6
 800224e:	2864      	cmp	r0, #100	; 0x64
 8002250:	d9f6      	bls.n	8002240 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8002252:	2003      	movs	r0, #3
}
 8002254:	b003      	add	sp, #12
 8002256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	4d99      	ldr	r5, [pc, #612]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	602b      	str	r3, [r5, #0]
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800226c:	f7fe fe68 	bl	8000f40 <HAL_GetTick>
 8002270:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002274:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	2701      	movs	r7, #1
 8002278:	e004      	b.n	8002284 <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227a:	f7fe fe61 	bl	8000f40 <HAL_GetTick>
 800227e:	1b80      	subs	r0, r0, r6
 8002280:	2864      	cmp	r0, #100	; 0x64
 8002282:	d8e6      	bhi.n	8002252 <HAL_RCC_OscConfig+0x36a>
 8002284:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002288:	682a      	ldr	r2, [r5, #0]
 800228a:	fa98 f3a8 	rbit	r3, r8
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	fa07 f303 	lsl.w	r3, r7, r3
 800229a:	4213      	tst	r3, r2
 800229c:	d1ed      	bne.n	800227a <HAL_RCC_OscConfig+0x392>
 800229e:	e66a      	b.n	8001f76 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	4d87      	ldr	r5, [pc, #540]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
 80022a2:	6a2b      	ldr	r3, [r5, #32]
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	622b      	str	r3, [r5, #32]
 80022aa:	6a2b      	ldr	r3, [r5, #32]
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80022b2:	f7fe fe45 	bl	8000f40 <HAL_GetTick>
 80022b6:	f04f 0902 	mov.w	r9, #2
 80022ba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	2701      	movs	r7, #1
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x400>
 80022c0:	fa99 f3a9 	rbit	r3, r9
 80022c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80022c6:	fa99 f3a9 	rbit	r3, r9
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	fa07 f303 	lsl.w	r3, r7, r3
 80022d6:	4213      	tst	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fe31 	bl	8000f40 <HAL_GetTick>
 80022de:	f241 3388 	movw	r3, #5000	; 0x1388
 80022e2:	1b80      	subs	r0, r0, r6
 80022e4:	4298      	cmp	r0, r3
 80022e6:	d8b4      	bhi.n	8002252 <HAL_RCC_OscConfig+0x36a>
 80022e8:	fa99 f3a9 	rbit	r3, r9
 80022ec:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0e5      	beq.n	80022c0 <HAL_RCC_OscConfig+0x3d8>
 80022f4:	6a2a      	ldr	r2, [r5, #32]
 80022f6:	e7e6      	b.n	80022c6 <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 80022f8:	f1b8 0f00 	cmp.w	r8, #0
 80022fc:	f43f aed4 	beq.w	80020a8 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4a6f      	ldr	r2, [pc, #444]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
 8002302:	69d3      	ldr	r3, [r2, #28]
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	e6cd      	b.n	80020a8 <HAL_RCC_OscConfig+0x1c0>
 800230c:	2501      	movs	r5, #1
 800230e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800231e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002320:	4f67      	ldr	r7, [pc, #412]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 8002322:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002324:	f7fe fe0c 	bl	8000f40 <HAL_GetTick>
 8002328:	f04f 0802 	mov.w	r8, #2
 800232c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e004      	b.n	800233a <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002330:	f7fe fe06 	bl	8000f40 <HAL_GetTick>
 8002334:	1b80      	subs	r0, r0, r6
 8002336:	2802      	cmp	r0, #2
 8002338:	d88b      	bhi.n	8002252 <HAL_RCC_OscConfig+0x36a>
 800233a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	fa98 f3a8 	rbit	r3, r8
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa05 f303 	lsl.w	r3, r5, r3
 8002350:	4213      	tst	r3, r2
 8002352:	d1ed      	bne.n	8002330 <HAL_RCC_OscConfig+0x448>
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	e654      	b.n	8002002 <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	4a59      	ldr	r2, [pc, #356]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
 800235a:	6a13      	ldr	r3, [r2, #32]
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002362:	f7fe fded 	bl	8000f40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002366:	4f56      	ldr	r7, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8002368:	4605      	mov	r5, r0
 800236a:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	2601      	movs	r6, #1
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x4b4>
 8002372:	fa99 f3a9 	rbit	r3, r9
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	fa99 f3a9 	rbit	r3, r9
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	fa06 f303 	lsl.w	r3, r6, r3
 8002388:	4213      	tst	r3, r2
 800238a:	d1b5      	bne.n	80022f8 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fdd8 	bl	8000f40 <HAL_GetTick>
 8002390:	f241 3388 	movw	r3, #5000	; 0x1388
 8002394:	1b40      	subs	r0, r0, r5
 8002396:	4298      	cmp	r0, r3
 8002398:	f63f af5b 	bhi.w	8002252 <HAL_RCC_OscConfig+0x36a>
 800239c:	fa99 f3a9 	rbit	r3, r9
 80023a0:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0e4      	beq.n	8002372 <HAL_RCC_OscConfig+0x48a>
 80023a8:	6a3a      	ldr	r2, [r7, #32]
 80023aa:	e7e5      	b.n	8002378 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	2801      	cmp	r0, #1
 80023ae:	f43f aeb0 	beq.w	8002112 <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 80023b2:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023b4:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 80023b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023b8:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 80023bc:	4288      	cmp	r0, r1
 80023be:	f47f aec5 	bne.w	800214c <HAL_RCC_OscConfig+0x264>
 80023c2:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023c4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023c8:	428a      	cmp	r2, r1
 80023ca:	f47f aebf 	bne.w	800214c <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023d0:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 80023d4:	1a18      	subs	r0, r3, r0
 80023d6:	bf18      	it	ne
 80023d8:	2001      	movne	r0, #1
 80023da:	e69a      	b.n	8002112 <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	f042 0204 	orr.w	r2, r2, #4
 80023e0:	621a      	str	r2, [r3, #32]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	621a      	str	r2, [r3, #32]
 80023ea:	e7ba      	b.n	8002362 <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
}
 80023ee:	4770      	bx	lr
 80023f0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002406:	f7fe fd9b 	bl	8000f40 <HAL_GetTick>
 800240a:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800240e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	2701      	movs	r7, #1
 8002412:	e005      	b.n	8002420 <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fd94 	bl	8000f40 <HAL_GetTick>
 8002418:	1b80      	subs	r0, r0, r6
 800241a:	2802      	cmp	r0, #2
 800241c:	f63f af19 	bhi.w	8002252 <HAL_RCC_OscConfig+0x36a>
 8002420:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	682a      	ldr	r2, [r5, #0]
 8002426:	fa98 f3a8 	rbit	r3, r8
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	fa07 f303 	lsl.w	r3, r7, r3
 8002436:	4213      	tst	r3, r2
 8002438:	d1ec      	bne.n	8002414 <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800243c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800243e:	f023 030f 	bic.w	r3, r3, #15
 8002442:	4313      	orrs	r3, r2
 8002444:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002446:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 800244a:	686a      	ldr	r2, [r5, #4]
 800244c:	430b      	orrs	r3, r1
 800244e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8002452:	4313      	orrs	r3, r2
 8002454:	606b      	str	r3, [r5, #4]
 8002456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800245a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002466:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800246a:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	4e14      	ldr	r6, [pc, #80]	; (80024c0 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 800246e:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8002470:	f7fe fd66 	bl	8000f40 <HAL_GetTick>
 8002474:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002478:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247a:	2501      	movs	r5, #1
 800247c:	e005      	b.n	800248a <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe fd5f 	bl	8000f40 <HAL_GetTick>
 8002482:	1b00      	subs	r0, r0, r4
 8002484:	2802      	cmp	r0, #2
 8002486:	f63f aee4 	bhi.w	8002252 <HAL_RCC_OscConfig+0x36a>
 800248a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248e:	6832      	ldr	r2, [r6, #0]
 8002490:	fa98 f3a8 	rbit	r3, r8
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa05 f303 	lsl.w	r3, r5, r3
 80024a0:	4213      	tst	r3, r2
 80024a2:	d0ec      	beq.n	800247e <HAL_RCC_OscConfig+0x596>
 80024a4:	e634      	b.n	8002110 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024aa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e53f      	b.n	8001f40 <HAL_RCC_OscConfig+0x58>
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c4:	2800      	cmp	r0, #0
 80024c6:	f000 80c4 	beq.w	8002652 <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	428b      	cmp	r3, r1
{
 80024d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024d8:	460d      	mov	r5, r1
 80024da:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	d20c      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	f023 0307 	bic.w	r3, r3, #7
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e8:	6813      	ldr	r3, [r2, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	428b      	cmp	r3, r1
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80024f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	0798      	lsls	r0, r3, #30
 80024fc:	d506      	bpl.n	800250c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fe:	4961      	ldr	r1, [pc, #388]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	68a0      	ldr	r0, [r4, #8]
 8002502:	684a      	ldr	r2, [r1, #4]
 8002504:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002508:	4302      	orrs	r2, r0
 800250a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250c:	07d9      	lsls	r1, r3, #31
 800250e:	d52f      	bpl.n	8002570 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002510:	6861      	ldr	r1, [r4, #4]
 8002512:	2901      	cmp	r1, #1
 8002514:	f000 809f 	beq.w	8002656 <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	2902      	cmp	r1, #2
 800251a:	f000 8087 	beq.w	800262c <HAL_RCC_ClockConfig+0x168>
 800251e:	2202      	movs	r2, #2
 8002520:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	fa92 f2a2 	rbit	r2, r2
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	f002 021f 	and.w	r2, r2, #31
 8002534:	2301      	movs	r3, #1
 8002536:	fa03 f202 	lsl.w	r2, r3, r2
 800253a:	4202      	tst	r2, r0
 800253c:	d0d9      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4e51      	ldr	r6, [pc, #324]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	6873      	ldr	r3, [r6, #4]
 8002542:	f023 0303 	bic.w	r3, r3, #3
 8002546:	430b      	orrs	r3, r1
 8002548:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800254a:	f7fe fcf9 	bl	8000f40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002552:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	e005      	b.n	8002562 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7fe fcf3 	bl	8000f40 <HAL_GetTick>
 800255a:	1bc0      	subs	r0, r0, r7
 800255c:	4540      	cmp	r0, r8
 800255e:	f200 808c 	bhi.w	800267a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	6873      	ldr	r3, [r6, #4]
 8002564:	6862      	ldr	r2, [r4, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800256e:	d1f2      	bne.n	8002556 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4a43      	ldr	r2, [pc, #268]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	6813      	ldr	r3, [r2, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	42ab      	cmp	r3, r5
 800257a:	d909      	bls.n	8002590 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257c:	6813      	ldr	r3, [r2, #0]
 800257e:	f023 0307 	bic.w	r3, r3, #7
 8002582:	432b      	orrs	r3, r5
 8002584:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	42ab      	cmp	r3, r5
 800258e:	d1b0      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	075a      	lsls	r2, r3, #29
 8002594:	d506      	bpl.n	80025a4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002596:	493b      	ldr	r1, [pc, #236]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	68e0      	ldr	r0, [r4, #12]
 800259a:	684a      	ldr	r2, [r1, #4]
 800259c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025a0:	4302      	orrs	r2, r0
 80025a2:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	071b      	lsls	r3, r3, #28
 80025a6:	d507      	bpl.n	80025b8 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a8:	4a36      	ldr	r2, [pc, #216]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	6921      	ldr	r1, [r4, #16]
 80025ac:	6853      	ldr	r3, [r2, #4]
 80025ae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025b6:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80025b8:	4a32      	ldr	r2, [pc, #200]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025bc:	f003 010c 	and.w	r1, r3, #12
 80025c0:	2908      	cmp	r1, #8
 80025c2:	d017      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c4:	4930      	ldr	r1, [pc, #192]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025c6:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	22f0      	movs	r2, #240	; 0xf0
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	fa92 f2a2 	rbit	r2, r2
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d8:	40d3      	lsrs	r3, r2
 80025da:	4a2c      	ldr	r2, [pc, #176]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 80025dc:	482c      	ldr	r0, [pc, #176]	; (8002690 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	4a2c      	ldr	r2, [pc, #176]	; (8002694 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 80025e2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025e4:	fa21 f303 	lsr.w	r3, r1, r3
 80025e8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80025ea:	f7fe fc73 	bl	8000ed4 <HAL_InitTick>
  return HAL_OK;
 80025ee:	2000      	movs	r0, #0
}
 80025f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025f4:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80025f8:	fa91 f1a1 	rbit	r1, r1
 80025fc:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002600:	fab1 f181 	clz	r1, r1
 8002604:	fa90 f0a0 	rbit	r0, r0
 8002608:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800260c:	40cb      	lsrs	r3, r1
 800260e:	4922      	ldr	r1, [pc, #136]	; (8002698 <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002610:	4c22      	ldr	r4, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002612:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002614:	491c      	ldr	r1, [pc, #112]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002616:	fab0 f080 	clz	r0, r0
 800261a:	f002 020f 	and.w	r2, r2, #15
 800261e:	40c2      	lsrs	r2, r0
 8002620:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002622:	fbb1 f1f2 	udiv	r1, r1, r2
 8002626:	fb03 f101 	mul.w	r1, r3, r1
 800262a:	e7cc      	b.n	80025c6 <HAL_RCC_ClockConfig+0x102>
 800262c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002630:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002636:	6810      	ldr	r0, [r2, #0]
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2201      	movs	r2, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	4203      	tst	r3, r0
 800264c:	f47f af77 	bne.w	800253e <HAL_RCC_ClockConfig+0x7a>
 8002650:	e74f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002652:	2001      	movs	r0, #1
}
 8002654:	4770      	bx	lr
 8002656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265a:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa92 f2a2 	rbit	r2, r2
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	f002 021f 	and.w	r2, r2, #31
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	421a      	tst	r2, r3
 8002674:	f47f af63 	bne.w	800253e <HAL_RCC_ClockConfig+0x7a>
 8002678:	e73b      	b.n	80024f2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800267a:	2003      	movs	r0, #3
 800267c:	e73a      	b.n	80024f4 <HAL_RCC_ClockConfig+0x30>
 800267e:	bf00      	nop
 8002680:	40022000 	.word	0x40022000
 8002684:	40021000 	.word	0x40021000
 8002688:	007a1200 	.word	0x007a1200
 800268c:	08004024 	.word	0x08004024
 8002690:	20000008 	.word	0x20000008
 8002694:	20000000 	.word	0x20000000
 8002698:	0800403c 	.word	0x0800403c
 800269c:	0800404c 	.word	0x0800404c

080026a0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80026a0:	4a12      	ldr	r2, [pc, #72]	; (80026ec <HAL_RCC_GetSysClockFreq+0x4c>)
 80026a2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80026a4:	f003 010c 	and.w	r1, r3, #12
 80026a8:	2908      	cmp	r1, #8
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80026ac:	4810      	ldr	r0, [pc, #64]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026ae:	4770      	bx	lr
{
 80026b0:	b430      	push	{r4, r5}
 80026b2:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 80026b6:	fa90 f0a0 	rbit	r0, r0
 80026ba:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026be:	fab0 f080 	clz	r0, r0
 80026c2:	fa91 f1a1 	rbit	r1, r1
 80026c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026ca:	40c3      	lsrs	r3, r0
 80026cc:	4809      	ldr	r0, [pc, #36]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026ce:	4d0a      	ldr	r5, [pc, #40]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026d0:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026d2:	4c07      	ldr	r4, [pc, #28]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026d4:	fab1 f181 	clz	r1, r1
 80026d8:	f002 030f 	and.w	r3, r2, #15
 80026dc:	40cb      	lsrs	r3, r1
 80026de:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026e4:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026e6:	fb00 f003 	mul.w	r0, r0, r3
}
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000
 80026f0:	007a1200 	.word	0x007a1200
 80026f4:	0800403c 	.word	0x0800403c
 80026f8:	0800404c 	.word	0x0800404c

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	fab2 f282 	clz	r2, r2
 800270c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002710:	4904      	ldr	r1, [pc, #16]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002712:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	6810      	ldr	r0, [r2, #0]
}    
 800271a:	40d8      	lsrs	r0, r3
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	08004034 	.word	0x08004034
 8002728:	20000000 	.word	0x20000000

0800272c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002740:	4904      	ldr	r1, [pc, #16]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002742:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	6810      	ldr	r0, [r2, #0]
} 
 800274a:	40d8      	lsrs	r0, r3
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	08004034 	.word	0x08004034
 8002758:	20000000 	.word	0x20000000

0800275c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800275c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002760:	6803      	ldr	r3, [r0, #0]
 8002762:	03d9      	lsls	r1, r3, #15
{
 8002764:	b083      	sub	sp, #12
 8002766:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002768:	d53d      	bpl.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4ba1      	ldr	r3, [pc, #644]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	00d2      	lsls	r2, r2, #3
 8002770:	f140 80f6 	bpl.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4d9f      	ldr	r5, [pc, #636]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800277a:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	f140 80ff 	bpl.w	8002980 <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002782:	4d9b      	ldr	r5, [pc, #620]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002784:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002786:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800278a:	d01f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x70>
 800278c:	6861      	ldr	r1, [r4, #4]
 800278e:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8002792:	429a      	cmp	r2, r3
 8002794:	d01b      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002796:	6a29      	ldr	r1, [r5, #32]
 8002798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80027a0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027a4:	f8df c250 	ldr.w	ip, [pc, #592]	; 80029f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80027a8:	fab2 f282 	clz	r2, r2
 80027ac:	4462      	add	r2, ip
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	2701      	movs	r7, #1
 80027b2:	6017      	str	r7, [r2, #0]
 80027b4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	4463      	add	r3, ip
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c2:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c4:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80027c6:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c8:	f100 80ee 	bmi.w	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80027cc:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027ce:	4a88      	ldr	r2, [pc, #544]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027d0:	6a13      	ldr	r3, [r2, #32]
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	430b      	orrs	r3, r1
 80027d8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027da:	b11e      	cbz	r6, 80027e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	69d3      	ldr	r3, [r2, #28]
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e2:	61d3      	str	r3, [r2, #28]
 80027e4:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e6:	07da      	lsls	r2, r3, #31
 80027e8:	d506      	bpl.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ea:	4981      	ldr	r1, [pc, #516]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027ec:	68a0      	ldr	r0, [r4, #8]
 80027ee:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80027f0:	f022 0203 	bic.w	r2, r2, #3
 80027f4:	4302      	orrs	r2, r0
 80027f6:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f8:	079f      	lsls	r7, r3, #30
 80027fa:	d506      	bpl.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027fc:	497c      	ldr	r1, [pc, #496]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80027fe:	68e0      	ldr	r0, [r4, #12]
 8002800:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002802:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002806:	4302      	orrs	r2, r0
 8002808:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800280a:	075e      	lsls	r6, r3, #29
 800280c:	d506      	bpl.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800280e:	4978      	ldr	r1, [pc, #480]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002810:	6920      	ldr	r0, [r4, #16]
 8002812:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002814:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002818:	4302      	orrs	r2, r0
 800281a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800281c:	069d      	lsls	r5, r3, #26
 800281e:	d506      	bpl.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002820:	4973      	ldr	r1, [pc, #460]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002822:	69e0      	ldr	r0, [r4, #28]
 8002824:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002826:	f022 0210 	bic.w	r2, r2, #16
 800282a:	4302      	orrs	r2, r0
 800282c:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800282e:	0398      	lsls	r0, r3, #14
 8002830:	d506      	bpl.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002832:	496f      	ldr	r1, [pc, #444]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002834:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002836:	684a      	ldr	r2, [r1, #4]
 8002838:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800283c:	4302      	orrs	r2, r0
 800283e:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002840:	0659      	lsls	r1, r3, #25
 8002842:	d506      	bpl.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002844:	496a      	ldr	r1, [pc, #424]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002846:	6a20      	ldr	r0, [r4, #32]
 8002848:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800284a:	f022 0220 	bic.w	r2, r2, #32
 800284e:	4302      	orrs	r2, r0
 8002850:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002852:	035a      	lsls	r2, r3, #13
 8002854:	d506      	bpl.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002856:	4966      	ldr	r1, [pc, #408]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002858:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800285a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800285c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002860:	4302      	orrs	r2, r0
 8002862:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002864:	071f      	lsls	r7, r3, #28
 8002866:	d506      	bpl.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002868:	4961      	ldr	r1, [pc, #388]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800286a:	6960      	ldr	r0, [r4, #20]
 800286c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800286e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002872:	4302      	orrs	r2, r0
 8002874:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002876:	06de      	lsls	r6, r3, #27
 8002878:	d506      	bpl.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800287a:	495d      	ldr	r1, [pc, #372]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800287c:	69a0      	ldr	r0, [r4, #24]
 800287e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002880:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002884:	4302      	orrs	r2, r0
 8002886:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002888:	059d      	lsls	r5, r3, #22
 800288a:	d506      	bpl.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800288c:	4958      	ldr	r1, [pc, #352]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800288e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002890:	684a      	ldr	r2, [r1, #4]
 8002892:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002896:	4302      	orrs	r2, r0
 8002898:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800289a:	0618      	lsls	r0, r3, #24
 800289c:	d506      	bpl.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800289e:	4954      	ldr	r1, [pc, #336]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80028a4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80028a8:	4302      	orrs	r2, r0
 80028aa:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028ac:	05d9      	lsls	r1, r3, #23
 80028ae:	d506      	bpl.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028b0:	494f      	ldr	r1, [pc, #316]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80028b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80028b6:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80028ba:	4302      	orrs	r2, r0
 80028bc:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028be:	04da      	lsls	r2, r3, #19
 80028c0:	d506      	bpl.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028c2:	494b      	ldr	r1, [pc, #300]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80028c6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028cc:	4302      	orrs	r2, r0
 80028ce:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028d0:	049f      	lsls	r7, r3, #18
 80028d2:	d506      	bpl.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028d4:	4946      	ldr	r1, [pc, #280]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80028d8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028de:	4302      	orrs	r2, r0
 80028e0:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80028e2:	02de      	lsls	r6, r3, #11
 80028e4:	d506      	bpl.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80028e6:	4942      	ldr	r1, [pc, #264]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028ea:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028ec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80028f0:	4302      	orrs	r2, r0
 80028f2:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80028f4:	029d      	lsls	r5, r3, #10
 80028f6:	d506      	bpl.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80028f8:	493d      	ldr	r1, [pc, #244]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80028fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80028fc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80028fe:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002902:	4302      	orrs	r2, r0
 8002904:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002906:	0258      	lsls	r0, r3, #9
 8002908:	d506      	bpl.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800290a:	4939      	ldr	r1, [pc, #228]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800290c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800290e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002914:	4302      	orrs	r2, r0
 8002916:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002918:	0219      	lsls	r1, r3, #8
 800291a:	d506      	bpl.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800291c:	4934      	ldr	r1, [pc, #208]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800291e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002920:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002926:	4302      	orrs	r2, r0
 8002928:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800292a:	01da      	lsls	r2, r3, #7
 800292c:	d506      	bpl.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800292e:	4930      	ldr	r1, [pc, #192]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002930:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002932:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002938:	4302      	orrs	r2, r0
 800293a:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800293c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002940:	d103      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002942:	4618      	mov	r0, r3
}
 8002944:	b003      	add	sp, #12
 8002946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800294c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800294e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002954:	430b      	orrs	r3, r1
  return HAL_OK;
 8002956:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
}
 800295a:	b003      	add	sp, #12
 800295c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4d24      	ldr	r5, [pc, #144]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002968:	61da      	str	r2, [r3, #28]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	682b      	ldr	r3, [r5, #0]
 8002976:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 8002978:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	f53f af01 	bmi.w	8002782 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002986:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002988:	f7fe fada 	bl	8000f40 <HAL_GetTick>
 800298c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	682b      	ldr	r3, [r5, #0]
 8002990:	05d8      	lsls	r0, r3, #23
 8002992:	f53f aef6 	bmi.w	8002782 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe fad3 	bl	8000f40 <HAL_GetTick>
 800299a:	1bc0      	subs	r0, r0, r7
 800299c:	2864      	cmp	r0, #100	; 0x64
 800299e:	d9f6      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 80029a0:	2003      	movs	r0, #3
}
 80029a2:	b003      	add	sp, #12
 80029a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80029a8:	f7fe faca 	bl	8000f40 <HAL_GetTick>
 80029ac:	f04f 0902 	mov.w	r9, #2
 80029b0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	e015      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80029b4:	fa99 f3a9 	rbit	r3, r9
 80029b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80029ba:	fa99 f3a9 	rbit	r3, r9
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	fa07 f303 	lsl.w	r3, r7, r3
 80029ca:	4213      	tst	r3, r2
 80029cc:	f47f aefe 	bne.w	80027cc <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fe fab6 	bl	8000f40 <HAL_GetTick>
 80029d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80029d8:	eba0 0008 	sub.w	r0, r0, r8
 80029dc:	4298      	cmp	r0, r3
 80029de:	d8df      	bhi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80029e0:	fa99 f3a9 	rbit	r3, r9
 80029e4:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0e3      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80029ec:	6a2a      	ldr	r2, [r5, #32]
 80029ee:	e7e4      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
 80029f8:	10908100 	.word	0x10908100

080029fc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fc:	6a03      	ldr	r3, [r0, #32]
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	6203      	str	r3, [r0, #32]
{
 8002a04:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a0c:	4f1a      	ldr	r7, [pc, #104]	; (8002a78 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 8002a0e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002a10:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8002a16:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a1a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a1e:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8002a20:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8002a24:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a28:	d012      	beq.n	8002a50 <TIM_OC1_SetConfig+0x54>
 8002a2a:	4c14      	ldr	r4, [pc, #80]	; (8002a7c <TIM_OC1_SetConfig+0x80>)
 8002a2c:	42a0      	cmp	r0, r4
 8002a2e:	d00f      	beq.n	8002a50 <TIM_OC1_SetConfig+0x54>
 8002a30:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8002a34:	42a0      	cmp	r0, r4
 8002a36:	d00b      	beq.n	8002a50 <TIM_OC1_SetConfig+0x54>
 8002a38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a3c:	42a0      	cmp	r0, r4
 8002a3e:	d007      	beq.n	8002a50 <TIM_OC1_SetConfig+0x54>
 8002a40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a44:	42a0      	cmp	r0, r4
 8002a46:	d003      	beq.n	8002a50 <TIM_OC1_SetConfig+0x54>
 8002a48:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002a4c:	42a0      	cmp	r0, r4
 8002a4e:	d10b      	bne.n	8002a68 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a50:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a52:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002a56:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a58:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a5c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a60:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a62:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a66:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a68:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002a6a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002a6c:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002a6e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8002a70:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002a72:	6203      	str	r3, [r0, #32]
}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40013400 	.word	0x40013400

08002a80 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a80:	6a03      	ldr	r3, [r0, #32]
 8002a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a86:	6203      	str	r3, [r0, #32]
{
 8002a88:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a90:	4f21      	ldr	r7, [pc, #132]	; (8002b18 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a92:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002a94:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8002a9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a9e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aa2:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8002aa8:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aac:	d016      	beq.n	8002adc <TIM_OC3_SetConfig+0x5c>
 8002aae:	4c1b      	ldr	r4, [pc, #108]	; (8002b1c <TIM_OC3_SetConfig+0x9c>)
 8002ab0:	42a0      	cmp	r0, r4
 8002ab2:	d013      	beq.n	8002adc <TIM_OC3_SetConfig+0x5c>
 8002ab4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8002ab8:	42a0      	cmp	r0, r4
 8002aba:	d024      	beq.n	8002b06 <TIM_OC3_SetConfig+0x86>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002abc:	4c18      	ldr	r4, [pc, #96]	; (8002b20 <TIM_OC3_SetConfig+0xa0>)
 8002abe:	42a0      	cmp	r0, r4
 8002ac0:	d013      	beq.n	8002aea <TIM_OC3_SetConfig+0x6a>
 8002ac2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ac6:	42a0      	cmp	r0, r4
 8002ac8:	d00f      	beq.n	8002aea <TIM_OC3_SetConfig+0x6a>
 8002aca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ace:	42a0      	cmp	r0, r4
 8002ad0:	d00b      	beq.n	8002aea <TIM_OC3_SetConfig+0x6a>
 8002ad2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002ad6:	42a0      	cmp	r0, r4
 8002ad8:	d10e      	bne.n	8002af8 <TIM_OC3_SetConfig+0x78>
 8002ada:	e006      	b.n	8002aea <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002adc:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ae2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aea:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aee:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002af2:	432c      	orrs	r4, r5
 8002af4:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002afa:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002afc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002afe:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8002b00:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002b02:	6203      	str	r3, [r0, #32]
}
 8002b04:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b06:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b0c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b14:	e7d2      	b.n	8002abc <TIM_OC3_SetConfig+0x3c>
 8002b16:	bf00      	nop
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40013400 	.word	0x40013400
 8002b20:	40014000 	.word	0x40014000

08002b24 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002b24:	2800      	cmp	r0, #0
 8002b26:	f000 8085 	beq.w	8002c34 <HAL_TIM_Base_Init+0x110>
{
 8002b2a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b30:	4604      	mov	r4, r0
 8002b32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d074      	beq.n	8002c24 <HAL_TIM_Base_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	4941      	ldr	r1, [pc, #260]	; (8002c44 <HAL_TIM_Base_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002b46:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b48:	d058      	beq.n	8002bfc <HAL_TIM_Base_Init+0xd8>
 8002b4a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002b4e:	d028      	beq.n	8002ba2 <HAL_TIM_Base_Init+0x7e>
 8002b50:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002b54:	428a      	cmp	r2, r1
 8002b56:	d024      	beq.n	8002ba2 <HAL_TIM_Base_Init+0x7e>
 8002b58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b5c:	428a      	cmp	r2, r1
 8002b5e:	d020      	beq.n	8002ba2 <HAL_TIM_Base_Init+0x7e>
 8002b60:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8002b64:	428a      	cmp	r2, r1
 8002b66:	d049      	beq.n	8002bfc <HAL_TIM_Base_Init+0xd8>
 8002b68:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8002b6c:	428a      	cmp	r2, r1
 8002b6e:	d063      	beq.n	8002c38 <HAL_TIM_Base_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b70:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_TIM_Base_Init+0x124>)
 8002b72:	428a      	cmp	r2, r1
 8002b74:	d05b      	beq.n	8002c2e <HAL_TIM_Base_Init+0x10a>
 8002b76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b7a:	428a      	cmp	r2, r1
 8002b7c:	d057      	beq.n	8002c2e <HAL_TIM_Base_Init+0x10a>
 8002b7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b82:	428a      	cmp	r2, r1
 8002b84:	d053      	beq.n	8002c2e <HAL_TIM_Base_Init+0x10a>
 8002b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b8a:	428a      	cmp	r2, r1
 8002b8c:	d04f      	beq.n	8002c2e <HAL_TIM_Base_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b90:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8002b92:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b98:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002b9a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b9c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b9e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba0:	e010      	b.n	8002bc4 <HAL_TIM_Base_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8002ba2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba4:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba6:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bac:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bba:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002bbc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002bbe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002bc2:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002bd0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002bd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002bd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002be8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002bf0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002bf8:	2000      	movs	r0, #0
}
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfe:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c06:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c12:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002c14:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c16:	68e3      	ldr	r3, [r4, #12]
 8002c18:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c1a:	6863      	ldr	r3, [r4, #4]
 8002c1c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1e:	6963      	ldr	r3, [r4, #20]
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	e7cf      	b.n	8002bc4 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002c24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c28:	f7fd ff6c 	bl	8000b04 <HAL_TIM_Base_MspInit>
 8002c2c:	e785      	b.n	8002b3a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c30:	69a1      	ldr	r1, [r4, #24]
 8002c32:	e7e9      	b.n	8002c08 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
}
 8002c36:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002c38:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c3e:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c40:	e796      	b.n	8002b70 <HAL_TIM_Base_Init+0x4c>
 8002c42:	bf00      	nop
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40014000 	.word	0x40014000

08002c4c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002c4c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d126      	bne.n	8002ca2 <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c54:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c56:	4919      	ldr	r1, [pc, #100]	; (8002cbc <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c60:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c68:	d01d      	beq.n	8002ca6 <HAL_TIM_Base_Start_IT+0x5a>
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d01a      	beq.n	8002ca6 <HAL_TIM_Base_Start_IT+0x5a>
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_TIM_Base_Start_IT+0x74>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d017      	beq.n	8002ca6 <HAL_TIM_Base_Start_IT+0x5a>
 8002c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_TIM_Base_Start_IT+0x5a>
 8002c7e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00f      	beq.n	8002ca6 <HAL_TIM_Base_Start_IT+0x5a>
 8002c86:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_TIM_Base_Start_IT+0x5a>
 8002c8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_TIM_Base_Start_IT+0x5a>
    __HAL_TIM_ENABLE(htim);
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	4770      	bx	lr
    return HAL_ERROR;
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca6:	6899      	ldr	r1, [r3, #8]
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_TIM_Base_Start_IT+0x78>)
 8002caa:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cac:	2a06      	cmp	r2, #6
 8002cae:	d002      	beq.n	8002cb6 <HAL_TIM_Base_Start_IT+0x6a>
 8002cb0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002cb4:	d1ef      	bne.n	8002c96 <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 8002cb6:	2000      	movs	r0, #0
}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	00010007 	.word	0x00010007

08002cc8 <HAL_TIM_PWM_MspInit>:
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	f000 8085 	beq.w	8002ddc <HAL_TIM_PWM_Init+0x110>
{
 8002cd2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cd8:	4604      	mov	r4, r0
 8002cda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d074      	beq.n	8002dcc <HAL_TIM_PWM_Init+0x100>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	4941      	ldr	r1, [pc, #260]	; (8002dec <HAL_TIM_PWM_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cec:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002cee:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	d058      	beq.n	8002da4 <HAL_TIM_PWM_Init+0xd8>
 8002cf2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002cf6:	d028      	beq.n	8002d4a <HAL_TIM_PWM_Init+0x7e>
 8002cf8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002cfc:	428a      	cmp	r2, r1
 8002cfe:	d024      	beq.n	8002d4a <HAL_TIM_PWM_Init+0x7e>
 8002d00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d04:	428a      	cmp	r2, r1
 8002d06:	d020      	beq.n	8002d4a <HAL_TIM_PWM_Init+0x7e>
 8002d08:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8002d0c:	428a      	cmp	r2, r1
 8002d0e:	d049      	beq.n	8002da4 <HAL_TIM_PWM_Init+0xd8>
 8002d10:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8002d14:	428a      	cmp	r2, r1
 8002d16:	d063      	beq.n	8002de0 <HAL_TIM_PWM_Init+0x114>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d18:	4935      	ldr	r1, [pc, #212]	; (8002df0 <HAL_TIM_PWM_Init+0x124>)
 8002d1a:	428a      	cmp	r2, r1
 8002d1c:	d05b      	beq.n	8002dd6 <HAL_TIM_PWM_Init+0x10a>
 8002d1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d22:	428a      	cmp	r2, r1
 8002d24:	d057      	beq.n	8002dd6 <HAL_TIM_PWM_Init+0x10a>
 8002d26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d2a:	428a      	cmp	r2, r1
 8002d2c:	d053      	beq.n	8002dd6 <HAL_TIM_PWM_Init+0x10a>
 8002d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d32:	428a      	cmp	r2, r1
 8002d34:	d04f      	beq.n	8002dd6 <HAL_TIM_PWM_Init+0x10a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d36:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8002d3a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d40:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002d42:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d46:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d48:	e010      	b.n	8002d6c <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= Structure->CounterMode;
 8002d4a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d4e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d54:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d5a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d62:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002d64:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002d66:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d68:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d6a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002d78:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d94:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002d98:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002da0:	2000      	movs	r0, #0
}
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002da4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002dae:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dba:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002dbc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dbe:	68e3      	ldr	r3, [r4, #12]
 8002dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002dc2:	6863      	ldr	r3, [r4, #4]
 8002dc4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc6:	6963      	ldr	r3, [r4, #20]
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	e7cf      	b.n	8002d6c <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8002dcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002dd0:	f7ff ff7a 	bl	8002cc8 <HAL_TIM_PWM_MspInit>
 8002dd4:	e785      	b.n	8002ce2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	69a1      	ldr	r1, [r4, #24]
 8002dda:	e7e9      	b.n	8002db0 <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
}
 8002dde:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002de0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002de6:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de8:	e796      	b.n	8002d18 <HAL_TIM_PWM_Init+0x4c>
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40014000 	.word	0x40014000

08002df4 <HAL_TIM_PWM_Start>:
 8002df4:	2900      	cmp	r1, #0
 8002df6:	d154      	bne.n	8002ea2 <HAL_TIM_PWM_Start+0xae>
 8002df8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d15a      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xc2>
 8002e00:	2302      	movs	r3, #2
 8002e02:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	6a18      	ldr	r0, [r3, #32]
 8002e0c:	f001 011f 	and.w	r1, r1, #31
 8002e10:	fa02 f101 	lsl.w	r1, r2, r1
 8002e14:	ea20 0001 	bic.w	r0, r0, r1
 8002e18:	b410      	push	{r4}
 8002e1a:	6218      	str	r0, [r3, #32]
 8002e1c:	6a1a      	ldr	r2, [r3, #32]
 8002e1e:	4c3e      	ldr	r4, [pc, #248]	; (8002f18 <HAL_TIM_PWM_Start+0x124>)
 8002e20:	4311      	orrs	r1, r2
 8002e22:	42a3      	cmp	r3, r4
 8002e24:	6219      	str	r1, [r3, #32]
 8002e26:	d056      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0xe2>
 8002e28:	4a3c      	ldr	r2, [pc, #240]	; (8002f1c <HAL_TIM_PWM_Start+0x128>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00f      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x5a>
 8002e2e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x5a>
 8002e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x5a>
 8002e3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x5a>
 8002e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d103      	bne.n	8002e56 <HAL_TIM_PWM_Start+0x62>
 8002e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5a:	d012      	beq.n	8002e82 <HAL_TIM_PWM_Start+0x8e>
 8002e5c:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_TIM_PWM_Start+0x12c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <HAL_TIM_PWM_Start+0x8e>
 8002e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <HAL_TIM_PWM_Start+0x8e>
 8002e6a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <HAL_TIM_PWM_Start+0x8e>
 8002e72:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_PWM_Start+0x8e>
 8002e7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d107      	bne.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <HAL_TIM_PWM_Start+0x130>)
 8002e86:	400a      	ands	r2, r1
 8002e88:	2a06      	cmp	r2, #6
 8002e8a:	d016      	beq.n	8002eba <HAL_TIM_PWM_Start+0xc6>
 8002e8c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e90:	d013      	beq.n	8002eba <HAL_TIM_PWM_Start+0xc6>
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	4770      	bx	lr
 8002ea2:	2904      	cmp	r1, #4
 8002ea4:	d01c      	beq.n	8002ee0 <HAL_TIM_PWM_Start+0xec>
 8002ea6:	2908      	cmp	r1, #8
 8002ea8:	d022      	beq.n	8002ef0 <HAL_TIM_PWM_Start+0xfc>
 8002eaa:	290c      	cmp	r1, #12
 8002eac:	d109      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0xce>
 8002eae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d024      	beq.n	8002f00 <HAL_TIM_PWM_Start+0x10c>
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	4770      	bx	lr
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	2910      	cmp	r1, #16
 8002ec4:	d020      	beq.n	8002f08 <HAL_TIM_PWM_Start+0x114>
 8002ec6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d1f3      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xc2>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002ed4:	e797      	b.n	8002e06 <HAL_TIM_PWM_Start+0x12>
 8002ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
 8002ede:	e7d0      	b.n	8002e82 <HAL_TIM_PWM_Start+0x8e>
 8002ee0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d1e6      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xc2>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002eee:	e78a      	b.n	8002e06 <HAL_TIM_PWM_Start+0x12>
 8002ef0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d1de      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xc2>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002efe:	e782      	b.n	8002e06 <HAL_TIM_PWM_Start+0x12>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002f06:	e77e      	b.n	8002e06 <HAL_TIM_PWM_Start+0x12>
 8002f08:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d1d2      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xc2>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002f16:	e776      	b.n	8002e06 <HAL_TIM_PWM_Start+0x12>
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40013400 	.word	0x40013400
 8002f20:	40000400 	.word	0x40000400
 8002f24:	00010007 	.word	0x00010007

08002f28 <HAL_TIM_PWM_Start_IT>:
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	d159      	bne.n	8002fe0 <HAL_TIM_PWM_Start_IT+0xb8>
 8002f2c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d15f      	bne.n	8002ff4 <HAL_TIM_PWM_Start_IT+0xcc>
 8002f34:	2302      	movs	r3, #2
 8002f36:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002f3a:	6803      	ldr	r3, [r0, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	f042 0202 	orr.w	r2, r2, #2
 8002f42:	60da      	str	r2, [r3, #12]
 8002f44:	6a18      	ldr	r0, [r3, #32]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f001 011f 	and.w	r1, r1, #31
 8002f4c:	fa02 f101 	lsl.w	r1, r2, r1
 8002f50:	ea20 0001 	bic.w	r0, r0, r1
 8002f54:	b410      	push	{r4}
 8002f56:	6218      	str	r0, [r3, #32]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	4c57      	ldr	r4, [pc, #348]	; (80030b8 <HAL_TIM_PWM_Start_IT+0x190>)
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	42a3      	cmp	r3, r4
 8002f60:	6219      	str	r1, [r3, #32]
 8002f62:	f000 809a 	beq.w	800309a <HAL_TIM_PWM_Start_IT+0x172>
 8002f66:	4a55      	ldr	r2, [pc, #340]	; (80030bc <HAL_TIM_PWM_Start_IT+0x194>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00f      	beq.n	8002f8c <HAL_TIM_PWM_Start_IT+0x64>
 8002f6c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00b      	beq.n	8002f8c <HAL_TIM_PWM_Start_IT+0x64>
 8002f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d007      	beq.n	8002f8c <HAL_TIM_PWM_Start_IT+0x64>
 8002f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <HAL_TIM_PWM_Start_IT+0x64>
 8002f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <HAL_TIM_PWM_Start_IT+0x6c>
 8002f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d012      	beq.n	8002fc0 <HAL_TIM_PWM_Start_IT+0x98>
 8002f9a:	4a49      	ldr	r2, [pc, #292]	; (80030c0 <HAL_TIM_PWM_Start_IT+0x198>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_TIM_PWM_Start_IT+0x98>
 8002fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_TIM_PWM_Start_IT+0x98>
 8002fa8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <HAL_TIM_PWM_Start_IT+0x98>
 8002fb0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_TIM_PWM_Start_IT+0x98>
 8002fb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_PWM_Start_IT+0xa8>
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	4a40      	ldr	r2, [pc, #256]	; (80030c4 <HAL_TIM_PWM_Start_IT+0x19c>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	2a06      	cmp	r2, #6
 8002fc8:	d016      	beq.n	8002ff8 <HAL_TIM_PWM_Start_IT+0xd0>
 8002fca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_PWM_Start_IT+0xd0>
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	2000      	movs	r0, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4770      	bx	lr
 8002fe0:	2904      	cmp	r1, #4
 8002fe2:	d044      	beq.n	800306e <HAL_TIM_PWM_Start_IT+0x146>
 8002fe4:	2908      	cmp	r1, #8
 8002fe6:	d035      	beq.n	8003054 <HAL_TIM_PWM_Start_IT+0x12c>
 8002fe8:	290c      	cmp	r1, #12
 8002fea:	d109      	bne.n	8003000 <HAL_TIM_PWM_Start_IT+0xd8>
 8002fec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d049      	beq.n	8003088 <HAL_TIM_PWM_Start_IT+0x160>
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	4770      	bx	lr
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	2910      	cmp	r1, #16
 8003002:	d04f      	beq.n	80030a4 <HAL_TIM_PWM_Start_IT+0x17c>
 8003004:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8003008:	2b01      	cmp	r3, #1
 800300a:	d1f3      	bne.n	8002ff4 <HAL_TIM_PWM_Start_IT+0xcc>
 800300c:	2302      	movs	r3, #2
 800300e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8003012:	290c      	cmp	r1, #12
 8003014:	d81c      	bhi.n	8003050 <HAL_TIM_PWM_Start_IT+0x128>
 8003016:	a301      	add	r3, pc, #4	; (adr r3, 800301c <HAL_TIM_PWM_Start_IT+0xf4>)
 8003018:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800301c:	08002f3b 	.word	0x08002f3b
 8003020:	08003051 	.word	0x08003051
 8003024:	08003051 	.word	0x08003051
 8003028:	08003051 	.word	0x08003051
 800302c:	0800307d 	.word	0x0800307d
 8003030:	08003051 	.word	0x08003051
 8003034:	08003051 	.word	0x08003051
 8003038:	08003051 	.word	0x08003051
 800303c:	08003063 	.word	0x08003063
 8003040:	08003051 	.word	0x08003051
 8003044:	08003051 	.word	0x08003051
 8003048:	08003051 	.word	0x08003051
 800304c:	0800308f 	.word	0x0800308f
 8003050:	6803      	ldr	r3, [r0, #0]
 8003052:	e777      	b.n	8002f44 <HAL_TIM_PWM_Start_IT+0x1c>
 8003054:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003058:	2b01      	cmp	r3, #1
 800305a:	d1cb      	bne.n	8002ff4 <HAL_TIM_PWM_Start_IT+0xcc>
 800305c:	2302      	movs	r3, #2
 800305e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003062:	6803      	ldr	r3, [r0, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	60da      	str	r2, [r3, #12]
 800306c:	e76a      	b.n	8002f44 <HAL_TIM_PWM_Start_IT+0x1c>
 800306e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003072:	2b01      	cmp	r3, #1
 8003074:	d1be      	bne.n	8002ff4 <HAL_TIM_PWM_Start_IT+0xcc>
 8003076:	2302      	movs	r3, #2
 8003078:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800307c:	6803      	ldr	r3, [r0, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	f042 0204 	orr.w	r2, r2, #4
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	e75d      	b.n	8002f44 <HAL_TIM_PWM_Start_IT+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800308e:	6803      	ldr	r3, [r0, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	f042 0210 	orr.w	r2, r2, #16
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	e754      	b.n	8002f44 <HAL_TIM_PWM_Start_IT+0x1c>
 800309a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800309c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
 80030a2:	e78d      	b.n	8002fc0 <HAL_TIM_PWM_Start_IT+0x98>
 80030a4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d1a3      	bne.n	8002ff4 <HAL_TIM_PWM_Start_IT+0xcc>
 80030ac:	2302      	movs	r3, #2
 80030ae:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80030b2:	6803      	ldr	r3, [r0, #0]
 80030b4:	e746      	b.n	8002f44 <HAL_TIM_PWM_Start_IT+0x1c>
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40013400 	.word	0x40013400
 80030c0:	40000400 	.word	0x40000400
 80030c4:	00010007 	.word	0x00010007

080030c8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80030c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d073      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0xf0>
{
 80030d0:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 80030d2:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80030d4:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80030d6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80030d8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80030e2:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e4:	4c4a      	ldr	r4, [pc, #296]	; (8003210 <HAL_TIM_ConfigClockSource+0x148>)
  switch (sClockSourceConfig->ClockSource)
 80030e6:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e8:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80030ec:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80030ee:	d065      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0xf4>
 80030f0:	d831      	bhi.n	8003156 <HAL_TIM_ConfigClockSource+0x8e>
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d048      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0xc0>
 80030f6:	d921      	bls.n	800313c <HAL_TIM_ConfigClockSource+0x74>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d116      	bne.n	800312a <HAL_TIM_ConfigClockSource+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030fc:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fe:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003100:	684c      	ldr	r4, [r1, #4]
 8003102:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003104:	f026 0601 	bic.w	r6, r6, #1
 8003108:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310a:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003110:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003114:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003118:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311a:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800311c:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800311e:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003124:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003128:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 800312a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800312c:	2201      	movs	r2, #1
 800312e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003132:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003136:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003138:	4618      	mov	r0, r3
}
 800313a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800313c:	2b20      	cmp	r3, #32
 800313e:	d002      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x7e>
 8003140:	d91e      	bls.n	8003180 <HAL_TIM_ConfigClockSource+0xb8>
 8003142:	2b30      	cmp	r3, #48	; 0x30
 8003144:	d1f1      	bne.n	800312a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8003146:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003148:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314c:	430b      	orrs	r3, r1
 800314e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003152:	6093      	str	r3, [r2, #8]
}
 8003154:	e7e9      	b.n	800312a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003156:	2b70      	cmp	r3, #112	; 0x70
 8003158:	d049      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x126>
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315e:	d1e4      	bne.n	800312a <HAL_TIM_ConfigClockSource+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003160:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003164:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003166:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003168:	432b      	orrs	r3, r5
 800316a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003172:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003174:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003176:	6893      	ldr	r3, [r2, #8]
 8003178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317c:	6093      	str	r3, [r2, #8]
      break;
 800317e:	e7d4      	b.n	800312a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003180:	f033 0110 	bics.w	r1, r3, #16
 8003184:	d1d1      	bne.n	800312a <HAL_TIM_ConfigClockSource+0x62>
 8003186:	e7de      	b.n	8003146 <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 8003188:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318a:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318c:	684c      	ldr	r4, [r1, #4]
 800318e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003190:	f026 0601 	bic.w	r6, r6, #1
 8003194:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003196:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003198:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800319c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a0:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80031a4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80031a8:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80031aa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80031b4:	6093      	str	r3, [r2, #8]
}
 80031b6:	e7b8      	b.n	800312a <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 80031b8:	2002      	movs	r0, #2
}
 80031ba:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031bc:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	684d      	ldr	r5, [r1, #4]
 80031c0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c2:	f024 0410 	bic.w	r4, r4, #16
 80031c6:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c8:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80031ca:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031cc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80031d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80031dc:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80031de:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80031e0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80031ea:	6093      	str	r3, [r2, #8]
}
 80031ec:	e79d      	b.n	800312a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ee:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80031f2:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80031f4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f6:	432b      	orrs	r3, r5
 80031f8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003200:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003202:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003204:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003206:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800320a:	6093      	str	r3, [r2, #8]
      break;
 800320c:	e78d      	b.n	800312a <HAL_TIM_ConfigClockSource+0x62>
 800320e:	bf00      	nop
 8003210:	fffe0088 	.word	0xfffe0088

08003214 <HAL_TIM_PeriodElapsedCallback>:
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <HAL_TIM_OC_DelayElapsedCallback>:
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop

0800321c <HAL_TIM_IC_CaptureCallback>:
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <HAL_TIM_TriggerCallback>:
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop

08003228 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003228:	6803      	ldr	r3, [r0, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	0791      	lsls	r1, r2, #30
{
 800322e:	b510      	push	{r4, lr}
 8003230:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003232:	d502      	bpl.n	800323a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	0792      	lsls	r2, r2, #30
 8003238:	d468      	bmi.n	800330c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	0752      	lsls	r2, r2, #29
 800323e:	d502      	bpl.n	8003246 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	0750      	lsls	r0, r2, #29
 8003244:	d44f      	bmi.n	80032e6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	0711      	lsls	r1, r2, #28
 800324a:	d502      	bpl.n	8003252 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	0712      	lsls	r2, r2, #28
 8003250:	d437      	bmi.n	80032c2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	06d0      	lsls	r0, r2, #27
 8003256:	d502      	bpl.n	800325e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	06d1      	lsls	r1, r2, #27
 800325c:	d41e      	bmi.n	800329c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	07d2      	lsls	r2, r2, #31
 8003262:	d502      	bpl.n	800326a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	07d0      	lsls	r0, r2, #31
 8003268:	d469      	bmi.n	800333e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	0611      	lsls	r1, r2, #24
 800326e:	d502      	bpl.n	8003276 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	0612      	lsls	r2, r2, #24
 8003274:	d46b      	bmi.n	800334e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	05d0      	lsls	r0, r2, #23
 800327a:	d502      	bpl.n	8003282 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	0611      	lsls	r1, r2, #24
 8003280:	d46d      	bmi.n	800335e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	0652      	lsls	r2, r2, #25
 8003286:	d502      	bpl.n	800328e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	0650      	lsls	r0, r2, #25
 800328c:	d46f      	bmi.n	800336e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	0691      	lsls	r1, r2, #26
 8003292:	d502      	bpl.n	800329a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	0692      	lsls	r2, r2, #26
 8003298:	d449      	bmi.n	800332e <HAL_TIM_IRQHandler+0x106>
}
 800329a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800329c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80032ac:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ae:	d16f      	bne.n	8003390 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b0:	f7ff ffb2 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7ff ffb3 	bl	8003220 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	2200      	movs	r2, #0
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	7722      	strb	r2, [r4, #28]
 80032c0:	e7cd      	b.n	800325e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032c2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032c6:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032c8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80032d0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d2:	d15a      	bne.n	800338a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d4:	f7ff ffa0 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff ffa1 	bl	8003220 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	2200      	movs	r2, #0
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	7722      	strb	r2, [r4, #28]
 80032e4:	e7b5      	b.n	8003252 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ea:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ec:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	d144      	bne.n	8003384 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fa:	f7ff ff8d 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fe:	4620      	mov	r0, r4
 8003300:	f7ff ff8e 	bl	8003220 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003304:	2200      	movs	r2, #0
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	7722      	strb	r2, [r4, #28]
 800330a:	e79c      	b.n	8003246 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800330c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003310:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003312:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003314:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	0799      	lsls	r1, r3, #30
 800331a:	d130      	bne.n	800337e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800331c:	f7ff ff7c 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff ff7d 	bl	8003220 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	2200      	movs	r2, #0
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	7722      	strb	r2, [r4, #28]
 800332c:	e785      	b.n	800323a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800332e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003332:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003334:	611a      	str	r2, [r3, #16]
}
 8003336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800333a:	f000 ba5f 	b.w	80037fc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800333e:	f06f 0201 	mvn.w	r2, #1
 8003342:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff ff65 	bl	8003214 <HAL_TIM_PeriodElapsedCallback>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	e78d      	b.n	800326a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800334e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003352:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003354:	4620      	mov	r0, r4
 8003356:	f000 fa53 	bl	8003800 <HAL_TIMEx_BreakCallback>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	e78b      	b.n	8003276 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800335e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003362:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003364:	4620      	mov	r0, r4
 8003366:	f000 fa4d 	bl	8003804 <HAL_TIMEx_Break2Callback>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	e789      	b.n	8003282 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800336e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003372:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff ff55 	bl	8003224 <HAL_TIM_TriggerCallback>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	e787      	b.n	800328e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800337e:	f7ff ff4d 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8003382:	e7d0      	b.n	8003326 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003384:	f7ff ff4a 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8003388:	e7bc      	b.n	8003304 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	f7ff ff47 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 800338e:	e7a6      	b.n	80032de <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003390:	f7ff ff44 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8003394:	e791      	b.n	80032ba <HAL_TIM_IRQHandler+0x92>
 8003396:	bf00      	nop

08003398 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003398:	6a03      	ldr	r3, [r0, #32]
 800339a:	f023 0310 	bic.w	r3, r3, #16
 800339e:	6203      	str	r3, [r0, #32]
{
 80033a0:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 80033a2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80033a4:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80033a6:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033a8:	4f21      	ldr	r7, [pc, #132]	; (8003430 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033aa:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80033b2:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033ba:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c4:	d016      	beq.n	80033f4 <TIM_OC2_SetConfig+0x5c>
 80033c6:	4c1b      	ldr	r4, [pc, #108]	; (8003434 <TIM_OC2_SetConfig+0x9c>)
 80033c8:	42a0      	cmp	r0, r4
 80033ca:	d013      	beq.n	80033f4 <TIM_OC2_SetConfig+0x5c>
 80033cc:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d024      	beq.n	800341e <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	4c18      	ldr	r4, [pc, #96]	; (8003438 <TIM_OC2_SetConfig+0xa0>)
 80033d6:	42a0      	cmp	r0, r4
 80033d8:	d013      	beq.n	8003402 <TIM_OC2_SetConfig+0x6a>
 80033da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033de:	42a0      	cmp	r0, r4
 80033e0:	d00f      	beq.n	8003402 <TIM_OC2_SetConfig+0x6a>
 80033e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033e6:	42a0      	cmp	r0, r4
 80033e8:	d00b      	beq.n	8003402 <TIM_OC2_SetConfig+0x6a>
 80033ea:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80033ee:	42a0      	cmp	r0, r4
 80033f0:	d10e      	bne.n	8003410 <TIM_OC2_SetConfig+0x78>
 80033f2:	e006      	b.n	8003402 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033fa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80033fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003402:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003406:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800340a:	432c      	orrs	r4, r5
 800340c:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8003410:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003412:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003414:	6182      	str	r2, [r0, #24]
}
 8003416:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8003418:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800341a:	6203      	str	r3, [r0, #32]
}
 800341c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800341e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003424:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	e7d2      	b.n	80033d4 <TIM_OC2_SetConfig+0x3c>
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40013400 	.word	0x40013400
 8003438:	40014000 	.word	0x40014000

0800343c <HAL_TIM_PWM_ConfigChannel>:
{
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800343e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003442:	2b01      	cmp	r3, #1
 8003444:	f000 8124 	beq.w	8003690 <HAL_TIM_PWM_ConfigChannel+0x254>
 8003448:	2301      	movs	r3, #1
 800344a:	4604      	mov	r4, r0
 800344c:	460d      	mov	r5, r1
 800344e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003452:	2a14      	cmp	r2, #20
 8003454:	d84e      	bhi.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0xb8>
 8003456:	e8df f012 	tbh	[pc, r2, lsl #1]
 800345a:	0098      	.short	0x0098
 800345c:	004d004d 	.word	0x004d004d
 8003460:	00ac004d 	.word	0x00ac004d
 8003464:	004d004d 	.word	0x004d004d
 8003468:	00c1004d 	.word	0x00c1004d
 800346c:	004d004d 	.word	0x004d004d
 8003470:	0015004d 	.word	0x0015004d
 8003474:	004d004d 	.word	0x004d004d
 8003478:	00d5004d 	.word	0x00d5004d
 800347c:	004d004d 	.word	0x004d004d
 8003480:	0051004d 	.word	0x0051004d
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003484:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003486:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800348a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	4e89      	ldr	r6, [pc, #548]	; (80036b4 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003490:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003494:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003496:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003498:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800349a:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800349c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 80034a0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034aa:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ae:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b2:	d008      	beq.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80034b4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80034b8:	42b3      	cmp	r3, r6
 80034ba:	d004      	beq.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80034bc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80034c0:	42b3      	cmp	r3, r6
 80034c2:	f040 80e7 	bne.w	8003694 <HAL_TIM_PWM_ConfigChannel+0x258>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c8:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034cc:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 80034d0:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80034d2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80034d4:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80034d6:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80034d8:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034da:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034dc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034de:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80034e2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034e4:	69d9      	ldr	r1, [r3, #28]
 80034e6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80034ea:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80034f2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80034fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034fc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034fe:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003502:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003504:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	4e6b      	ldr	r6, [pc, #428]	; (80036b4 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003508:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800350c:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800350e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003510:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003512:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003514:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003518:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800351c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003520:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003522:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003526:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352a:	d013      	beq.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x118>
 800352c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003530:	42b3      	cmp	r3, r6
 8003532:	d00f      	beq.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x118>
 8003534:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003538:	42b3      	cmp	r3, r6
 800353a:	d00b      	beq.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x118>
 800353c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003540:	42b3      	cmp	r3, r6
 8003542:	d007      	beq.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x118>
 8003544:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003548:	42b3      	cmp	r3, r6
 800354a:	d003      	beq.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x118>
 800354c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003550:	42b3      	cmp	r3, r6
 8003552:	d104      	bne.n	800355e <HAL_TIM_PWM_ConfigChannel+0x122>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003554:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003556:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800355a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 800355e:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003560:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003564:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8003566:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003568:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800356a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800356c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003570:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003572:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003574:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003578:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800357a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8003580:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003584:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003588:	e7b7      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800358a:	6800      	ldr	r0, [r0, #0]
 800358c:	f7ff fa36 	bl	80029fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003590:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003592:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003594:	6999      	ldr	r1, [r3, #24]
 8003596:	f041 0108 	orr.w	r1, r1, #8
 800359a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	f021 0104 	bic.w	r1, r1, #4
 80035a2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80035a8:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035aa:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80035ac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80035b0:	e7a3      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b2:	6800      	ldr	r0, [r0, #0]
 80035b4:	f7ff fef0 	bl	8003398 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035ba:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80035c2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c4:	6999      	ldr	r1, [r3, #24]
 80035c6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80035ca:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80035d2:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d4:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80035d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80035da:	e78e      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035dc:	6800      	ldr	r0, [r0, #0]
 80035de:	f7ff fa4f 	bl	8002a80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035e4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e6:	69d9      	ldr	r1, [r3, #28]
 80035e8:	f041 0108 	orr.w	r1, r1, #8
 80035ec:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ee:	69d9      	ldr	r1, [r3, #28]
 80035f0:	f021 0104 	bic.w	r1, r1, #4
 80035f4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80035fa:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80035fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003602:	e77a      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003604:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003606:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800360a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800360c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	4e29      	ldr	r6, [pc, #164]	; (80036b4 <HAL_TIM_PWM_ConfigChannel+0x278>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003610:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003614:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003616:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003618:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800361a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800361c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8003620:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003624:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003628:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800362a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800362e:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	d013      	beq.n	800365c <HAL_TIM_PWM_ConfigChannel+0x220>
 8003634:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003638:	42b3      	cmp	r3, r6
 800363a:	d00f      	beq.n	800365c <HAL_TIM_PWM_ConfigChannel+0x220>
 800363c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003640:	42b3      	cmp	r3, r6
 8003642:	d00b      	beq.n	800365c <HAL_TIM_PWM_ConfigChannel+0x220>
 8003644:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003648:	42b3      	cmp	r3, r6
 800364a:	d007      	beq.n	800365c <HAL_TIM_PWM_ConfigChannel+0x220>
 800364c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003650:	42b3      	cmp	r3, r6
 8003652:	d003      	beq.n	800365c <HAL_TIM_PWM_ConfigChannel+0x220>
 8003654:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003658:	42b3      	cmp	r3, r6
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x22a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800365c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800365e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003662:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8003666:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003668:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800366c:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800366e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003670:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003672:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003674:	f041 0108 	orr.w	r1, r1, #8
 8003678:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800367a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800367c:	f021 0104 	bic.w	r1, r1, #4
 8003680:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003684:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8003686:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800368a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800368e:	e734      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0xbe>
  __HAL_LOCK(htim);
 8003690:	2002      	movs	r0, #2
}
 8003692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003694:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003698:	42b3      	cmp	r3, r6
 800369a:	f43f af14 	beq.w	80034c6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 800369e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036a2:	42b3      	cmp	r3, r6
 80036a4:	f43f af0f 	beq.w	80034c6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80036a8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80036ac:	42b3      	cmp	r3, r6
 80036ae:	f47f af0f 	bne.w	80034d0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80036b2:	e708      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80036b4:	40012c00 	.word	0x40012c00

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d04e      	beq.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 80036c0:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c2:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036c4:	4c27      	ldr	r4, [pc, #156]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 80036c6:	2202      	movs	r2, #2
 80036c8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036cc:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 80036ce:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036d2:	d03a      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80036d4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80036d8:	42a3      	cmp	r3, r4
 80036da:	d02c      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80036dc:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	d028      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e4:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ea:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f2:	d012      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00f      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80036fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003702:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800370a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003712:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003716:	4293      	cmp	r3, r2
 8003718:	d104      	bne.n	8003724 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800371a:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003720:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003722:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003724:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003726:	2201      	movs	r2, #1
 8003728:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800372c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003730:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8003732:	4618      	mov	r0, r3
}
 8003734:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003736:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800373a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800373e:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003740:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003744:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 8003746:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003748:	e7d1      	b.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800374a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800374e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003752:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003754:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 800375a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	e7dd      	b.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 800375e:	2002      	movs	r0, #2
}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400

0800376c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800376c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d03f      	beq.n	80037f4 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 8003774:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003776:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800377a:	4602      	mov	r2, r0
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003780:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003784:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800378c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003790:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003794:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800379a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800379c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037a0:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80037a2:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037a4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037aa:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037ac:	4c12      	ldr	r4, [pc, #72]	; (80037f8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80037ae:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80037b0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037b4:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80037b6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037ba:	d007      	beq.n	80037cc <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80037bc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80037c0:	42a0      	cmp	r0, r4
 80037c2:	d003      	beq.n	80037cc <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80037c4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d10c      	bne.n	80037e6 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037cc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80037ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037d2:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037d6:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80037da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037de:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037e0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037e4:	430b      	orrs	r3, r1
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80037e6:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80037e8:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80037ea:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80037ee:	4608      	mov	r0, r1
}
 80037f0:	bc30      	pop	{r4, r5}
 80037f2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037f4:	2002      	movs	r0, #2
}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00

080037fc <HAL_TIMEx_CommutCallback>:
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <HAL_TIMEx_BreakCallback>:
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <HAL_TIMEx_Break2Callback>:
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	4604      	mov	r4, r0
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800380c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800380e:	2820      	cmp	r0, #32
 8003810:	d141      	bne.n	8003896 <HAL_UART_Receive_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003812:	2900      	cmp	r1, #0
 8003814:	d03d      	beq.n	8003892 <HAL_UART_Receive_DMA+0x8a>
 8003816:	2a00      	cmp	r2, #0
 8003818:	d03b      	beq.n	8003892 <HAL_UART_Receive_DMA+0x8a>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800381a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800381e:	2b01      	cmp	r3, #1
 8003820:	d039      	beq.n	8003896 <HAL_UART_Receive_DMA+0x8e>

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	2300      	movs	r3, #0

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003824:	6825      	ldr	r5, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_LOCK(huart);
 8003828:	2001      	movs	r0, #1
 800382a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800382e:	686b      	ldr	r3, [r5, #4]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	d503      	bpl.n	800383c <HAL_UART_Receive_DMA+0x34>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800383a:	602b      	str	r3, [r5, #0]
  huart->RxXferSize = Size;

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;

  if (huart->hdmarx != NULL)
 800383c:	6f20      	ldr	r0, [r4, #112]	; 0x70
  huart->pRxBuffPtr = pData;
 800383e:	6561      	str	r1, [r4, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	2600      	movs	r6, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003842:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  huart->RxXferSize = Size;
 8003848:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800384c:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 800384e:	b180      	cbz	r0, 8003872 <HAL_UART_Receive_DMA+0x6a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003850:	4f16      	ldr	r7, [pc, #88]	; (80038ac <HAL_UART_Receive_DMA+0xa4>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003852:	f8df c060 	ldr.w	ip, [pc, #96]	; 80038b4 <HAL_UART_Receive_DMA+0xac>

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003856:	6346      	str	r6, [r0, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003858:	4613      	mov	r3, r2
 800385a:	460a      	mov	r2, r1
 800385c:	f105 0124 	add.w	r1, r5, #36	; 0x24
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003860:	4d13      	ldr	r5, [pc, #76]	; (80038b0 <HAL_UART_Receive_DMA+0xa8>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003862:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003866:	e9c0 750b 	strd	r7, r5, [r0, #44]	; 0x2c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800386a:	f7fe f99b 	bl	8001ba4 <HAL_DMA_Start_IT>
 800386e:	b9a0      	cbnz	r0, 800389a <HAL_UART_Receive_DMA+0x92>
 8003870:	6825      	ldr	r5, [r4, #0]
      huart->gState = HAL_UART_STATE_READY;

      return HAL_ERROR;
    }
  }
  __HAL_UNLOCK(huart);
 8003872:	2000      	movs	r0, #0
 8003874:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387e:	602b      	str	r3, [r5, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003880:	68ab      	ldr	r3, [r5, #8]
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	60ab      	str	r3, [r5, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003888:	68ab      	ldr	r3, [r5, #8]
 800388a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388e:	60ab      	str	r3, [r5, #8]
}
 8003890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003892:	2001      	movs	r0, #1
}
 8003894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003896:	2002      	movs	r0, #2
}
 8003898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800389a:	2210      	movs	r2, #16
      huart->gState = HAL_UART_STATE_READY;
 800389c:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 800389e:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038a2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      return HAL_ERROR;
 80038a6:	2001      	movs	r0, #1
      huart->gState = HAL_UART_STATE_READY;
 80038a8:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ac:	0800393d 	.word	0x0800393d
 80038b0:	080038c5 	.word	0x080038c5
 80038b4:	08003959 	.word	0x08003959

080038b8 <HAL_UART_RxCpltCallback>:
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop

080038bc <HAL_UART_RxHalfCpltCallback>:
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop

080038c0 <HAL_UART_ErrorCallback>:
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop

080038c4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038c4:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038c6:	6803      	ldr	r3, [r0, #0]
{
 80038c8:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038ca:	6f84      	ldr	r4, [r0, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038cc:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	0612      	lsls	r2, r2, #24
 80038d2:	d501      	bpl.n	80038d8 <UART_DMAError+0x14>
 80038d4:	2c21      	cmp	r4, #33	; 0x21
 80038d6:	d025      	beq.n	8003924 <UART_DMAError+0x60>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	0652      	lsls	r2, r2, #25
 80038dc:	d501      	bpl.n	80038e2 <UART_DMAError+0x1e>
 80038de:	2922      	cmp	r1, #34	; 0x22
 80038e0:	d008      	beq.n	80038f4 <UART_DMAError+0x30>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038e2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80038e6:	f043 0310 	orr.w	r3, r3, #16
 80038ea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ee:	f7ff ffe7 	bl	80038c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f2:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003900:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800390c:	2a01      	cmp	r2, #1
 800390e:	d103      	bne.n	8003918 <UART_DMAError+0x54>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f022 0210 	bic.w	r2, r2, #16
 8003916:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800391a:	2220      	movs	r2, #32
 800391c:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->RxISR = NULL;
 800391e:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	6603      	str	r3, [r0, #96]	; 0x60
}
 8003922:	e7de      	b.n	80038e2 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 8003924:	2200      	movs	r2, #0
 8003926:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800392a:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800392c:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800392e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003932:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003934:	6784      	str	r4, [r0, #120]	; 0x78
}
 8003936:	e7cf      	b.n	80038d8 <UART_DMAError+0x14>

08003938 <HAL_UARTEx_RxEventCallback>:
}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop

0800393c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800393c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800393e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003942:	2b01      	cmp	r3, #1
 8003944:	d002      	beq.n	800394c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8003946:	f7ff ffb9 	bl	80038bc <HAL_UART_RxHalfCpltCallback>
}
 800394a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800394c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8003950:	0849      	lsrs	r1, r1, #1
 8003952:	f7ff fff1 	bl	8003938 <HAL_UARTEx_RxEventCallback>
}
 8003956:	bd08      	pop	{r3, pc}

08003958 <UART_DMAReceiveCplt>:
{
 8003958:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800395a:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800395c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800395e:	2b20      	cmp	r3, #32
 8003960:	d014      	beq.n	800398c <UART_DMAReceiveCplt+0x34>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003962:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8003964:	2200      	movs	r2, #0
 8003966:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003970:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397a:	689a      	ldr	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800397c:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003982:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8003984:	67c1      	str	r1, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003986:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003988:	2a01      	cmp	r2, #1
 800398a:	d005      	beq.n	8003998 <UART_DMAReceiveCplt+0x40>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800398e:	2b01      	cmp	r3, #1
 8003990:	d009      	beq.n	80039a6 <UART_DMAReceiveCplt+0x4e>
    HAL_UART_RxCpltCallback(huart);
 8003992:	f7ff ff91 	bl	80038b8 <HAL_UART_RxCpltCallback>
}
 8003996:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f022 0210 	bic.w	r2, r2, #16
 800399e:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d1f5      	bne.n	8003992 <UART_DMAReceiveCplt+0x3a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80039aa:	f7ff ffc5 	bl	8003938 <HAL_UARTEx_RxEventCallback>
}
 80039ae:	bd08      	pop	{r3, pc}

080039b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80039b2:	07da      	lsls	r2, r3, #31
{
 80039b4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b6:	d506      	bpl.n	80039c6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80039bc:	684a      	ldr	r2, [r1, #4]
 80039be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80039c2:	4322      	orrs	r2, r4
 80039c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039c6:	079c      	lsls	r4, r3, #30
 80039c8:	d506      	bpl.n	80039d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ca:	6801      	ldr	r1, [r0, #0]
 80039cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80039ce:	684a      	ldr	r2, [r1, #4]
 80039d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039d4:	4322      	orrs	r2, r4
 80039d6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d8:	0759      	lsls	r1, r3, #29
 80039da:	d506      	bpl.n	80039ea <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039dc:	6801      	ldr	r1, [r0, #0]
 80039de:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80039e0:	684a      	ldr	r2, [r1, #4]
 80039e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039e6:	4322      	orrs	r2, r4
 80039e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ea:	071a      	lsls	r2, r3, #28
 80039ec:	d506      	bpl.n	80039fc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ee:	6801      	ldr	r1, [r0, #0]
 80039f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80039f2:	684a      	ldr	r2, [r1, #4]
 80039f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f8:	4322      	orrs	r2, r4
 80039fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039fc:	06dc      	lsls	r4, r3, #27
 80039fe:	d506      	bpl.n	8003a0e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a00:	6801      	ldr	r1, [r0, #0]
 8003a02:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003a04:	688a      	ldr	r2, [r1, #8]
 8003a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a0a:	4322      	orrs	r2, r4
 8003a0c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a0e:	0699      	lsls	r1, r3, #26
 8003a10:	d506      	bpl.n	8003a20 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a12:	6801      	ldr	r1, [r0, #0]
 8003a14:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003a16:	688a      	ldr	r2, [r1, #8]
 8003a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1c:	4322      	orrs	r2, r4
 8003a1e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a20:	065a      	lsls	r2, r3, #25
 8003a22:	d509      	bpl.n	8003a38 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a24:	6801      	ldr	r1, [r0, #0]
 8003a26:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003a28:	684a      	ldr	r2, [r1, #4]
 8003a2a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003a2e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a34:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a36:	d00b      	beq.n	8003a50 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	d506      	bpl.n	8003a4a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a3c:	6802      	ldr	r2, [r0, #0]
 8003a3e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a40:	6853      	ldr	r3, [r2, #4]
 8003a42:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003a46:	430b      	orrs	r3, r1
 8003a48:	6053      	str	r3, [r2, #4]
}
 8003a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a4e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a50:	684a      	ldr	r2, [r1, #4]
 8003a52:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003a54:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003a58:	4322      	orrs	r2, r4
 8003a5a:	604a      	str	r2, [r1, #4]
 8003a5c:	e7ec      	b.n	8003a38 <UART_AdvFeatureConfig+0x88>
 8003a5e:	bf00      	nop

08003a60 <UART_CheckIdleState>:
{
 8003a60:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	2300      	movs	r3, #0
{
 8003a64:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003a6a:	f7fd fa69 	bl	8000f40 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8003a74:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a76:	d40b      	bmi.n	8003a90 <UART_CheckIdleState+0x30>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	0752      	lsls	r2, r2, #29
 8003a7c:	d42d      	bmi.n	8003ada <UART_CheckIdleState+0x7a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8003a82:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8003a86:	67a2      	str	r2, [r4, #120]	; 0x78
  return HAL_OK;
 8003a88:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	0292      	lsls	r2, r2, #10
 8003a94:	d4f0      	bmi.n	8003a78 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fd fa53 	bl	8000f40 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	1b40      	subs	r0, r0, r5
 8003a9e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa2:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	d22a      	bcs.n	8003afc <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aa6:	0750      	lsls	r0, r2, #29
 8003aa8:	d5f2      	bpl.n	8003a90 <UART_CheckIdleState+0x30>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	0511      	lsls	r1, r2, #20
 8003aae:	d5ef      	bpl.n	8003a90 <UART_CheckIdleState+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab4:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003abc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abe:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8003ac0:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac2:	f021 0101 	bic.w	r1, r1, #1
 8003ac6:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003ac8:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8003aca:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8003ace:	67a2      	str	r2, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8003ad0:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 8003ad8:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	0258      	lsls	r0, r3, #9
 8003ade:	d4ce      	bmi.n	8003a7e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae0:	f7fd fa2e 	bl	8000f40 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	1b40      	subs	r0, r0, r5
 8003ae8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aec:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	d205      	bcs.n	8003afc <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003af0:	0751      	lsls	r1, r2, #29
 8003af2:	d5f2      	bpl.n	8003ada <UART_CheckIdleState+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	0512      	lsls	r2, r2, #20
 8003af8:	d5ef      	bpl.n	8003ada <UART_CheckIdleState+0x7a>
 8003afa:	e7d9      	b.n	8003ab0 <UART_CheckIdleState+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8003b04:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003b0c:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003b0e:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8003b12:	67a1      	str	r1, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8003b14:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8003b16:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 8003b18:	bd38      	pop	{r3, r4, r5, pc}
 8003b1a:	bf00      	nop

08003b1c <HAL_UART_Init>:
  if (huart == NULL)
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	f000 8128 	beq.w	8003d72 <HAL_UART_Init+0x256>
{
 8003b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b24:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003b26:	4604      	mov	r4, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d036      	beq.n	8003b9a <HAL_UART_Init+0x7e>
  __HAL_UART_DISABLE(huart);
 8003b2c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b2e:	6927      	ldr	r7, [r4, #16]
 8003b30:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b32:	499c      	ldr	r1, [pc, #624]	; (8003da4 <HAL_UART_Init+0x288>)
  huart->gState = HAL_UART_STATE_BUSY;
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003b38:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b3a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8003b3c:	f020 0001 	bic.w	r0, r0, #1
 8003b40:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b42:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b44:	69e0      	ldr	r0, [r4, #28]
 8003b46:	433a      	orrs	r2, r7
 8003b48:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b4a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b4c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b56:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8003b58:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003b5e:	4329      	orrs	r1, r5
 8003b60:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b62:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b64:	4d90      	ldr	r5, [pc, #576]	; (8003da8 <HAL_UART_Init+0x28c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b66:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8003b6a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b6c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b70:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b72:	d017      	beq.n	8003ba4 <HAL_UART_Init+0x88>
 8003b74:	4a8d      	ldr	r2, [pc, #564]	; (8003dac <HAL_UART_Init+0x290>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d038      	beq.n	8003bec <HAL_UART_Init+0xd0>
 8003b7a:	4a8d      	ldr	r2, [pc, #564]	; (8003db0 <HAL_UART_Init+0x294>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	f000 80e0 	beq.w	8003d42 <HAL_UART_Init+0x226>
 8003b82:	4a8c      	ldr	r2, [pc, #560]	; (8003db4 <HAL_UART_Init+0x298>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	f000 8098 	beq.w	8003cba <HAL_UART_Init+0x19e>
 8003b8a:	4a8b      	ldr	r2, [pc, #556]	; (8003db8 <HAL_UART_Init+0x29c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04a      	beq.n	8003c26 <HAL_UART_Init+0x10a>
  huart->RxISR = NULL;
 8003b90:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003b92:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8003b96:	2001      	movs	r0, #1
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8003b9a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003b9e:	f7fd f83d 	bl	8000c1c <HAL_UART_MspInit>
 8003ba2:	e7c3      	b.n	8003b2c <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba4:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <HAL_UART_Init+0x2a0>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d874      	bhi.n	8003c9c <HAL_UART_Init+0x180>
 8003bb2:	4a83      	ldr	r2, [pc, #524]	; (8003dc0 <HAL_UART_Init+0x2a4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	f000 808c 	beq.w	8003cd6 <HAL_UART_Init+0x1ba>
    switch (clocksource)
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d8e6      	bhi.n	8003b90 <HAL_UART_Init+0x74>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_UART_Init+0xac>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003cb5 	.word	0x08003cb5
 8003bcc:	08003ca3 	.word	0x08003ca3
 8003bd0:	08003c99 	.word	0x08003c99
 8003bd4:	08003b91 	.word	0x08003b91
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003b91 	.word	0x08003b91
 8003be0:	08003b91 	.word	0x08003b91
 8003be4:	08003b91 	.word	0x08003b91
 8003be8:	08003c3b 	.word	0x08003c3b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bec:	4b73      	ldr	r3, [pc, #460]	; (8003dbc <HAL_UART_Init+0x2a0>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf8:	d01c      	beq.n	8003c34 <HAL_UART_Init+0x118>
 8003bfa:	d846      	bhi.n	8003c8a <HAL_UART_Init+0x16e>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d056      	beq.n	8003cae <HAL_UART_Init+0x192>
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d1c4      	bne.n	8003b90 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c0a:	f000 80bd 	beq.w	8003d88 <HAL_UART_Init+0x26c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe fd47 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003c12:	b9a0      	cbnz	r0, 8003c3e <HAL_UART_Init+0x122>
  huart->RxISR = NULL;
 8003c14:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003c16:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c1c:	b31b      	cbz	r3, 8003c66 <HAL_UART_Init+0x14a>
    UART_AdvFeatureConfig(huart);
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7ff fec6 	bl	80039b0 <UART_AdvFeatureConfig>
 8003c24:	e01f      	b.n	8003c66 <HAL_UART_Init+0x14a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c26:	4b65      	ldr	r3, [pc, #404]	; (8003dbc <HAL_UART_Init+0x2a0>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c32:	d139      	bne.n	8003ca8 <HAL_UART_Init+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c34:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c38:	d066      	beq.n	8003d08 <HAL_UART_Init+0x1ec>
        pclk = (uint32_t) LSE_VALUE;
 8003c3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c44:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c48:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4a:	f1a0 0210 	sub.w	r2, r0, #16
 8003c4e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d89c      	bhi.n	8003b90 <HAL_UART_Init+0x74>
        huart->Instance->BRR = usartdiv;
 8003c56:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8003c58:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 8003c5a:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8003c5c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1db      	bne.n	8003c1e <HAL_UART_Init+0x102>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c76:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003c7e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8003c86:	f7ff beeb 	b.w	8003a60 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c8e:	f47f af7f 	bne.w	8003b90 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c92:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c96:	d052      	beq.n	8003d3e <HAL_UART_Init+0x222>
 8003c98:	484a      	ldr	r0, [pc, #296]	; (8003dc4 <HAL_UART_Init+0x2a8>)
 8003c9a:	e7d0      	b.n	8003c3e <HAL_UART_Init+0x122>
 8003c9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003ca0:	d07c      	beq.n	8003d9c <HAL_UART_Init+0x280>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca2:	f7fe fd43 	bl	800272c <HAL_RCC_GetPCLK2Freq>
        break;
 8003ca6:	e7b4      	b.n	8003c12 <HAL_UART_Init+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca8:	d86a      	bhi.n	8003d80 <HAL_UART_Init+0x264>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d163      	bne.n	8003d76 <HAL_UART_Init+0x25a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003cb2:	d070      	beq.n	8003d96 <HAL_UART_Init+0x27a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb4:	f7fe fd22 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
        break;
 8003cb8:	e7ab      	b.n	8003c12 <HAL_UART_Init+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cba:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <HAL_UART_Init+0x2a0>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc6:	d0b5      	beq.n	8003c34 <HAL_UART_Init+0x118>
 8003cc8:	d84f      	bhi.n	8003d6a <HAL_UART_Init+0x24e>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ef      	beq.n	8003cae <HAL_UART_Init+0x192>
 8003cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd2:	d098      	beq.n	8003c06 <HAL_UART_Init+0xea>
 8003cd4:	e75c      	b.n	8003b90 <HAL_UART_Init+0x74>
    switch (clocksource)
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	f63f af5a 	bhi.w	8003b90 <HAL_UART_Init+0x74>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_UART_Init+0x1c8>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d97 	.word	0x08003d97
 8003ce8:	08003d9d 	.word	0x08003d9d
 8003cec:	08003d3f 	.word	0x08003d3f
 8003cf0:	08003b91 	.word	0x08003b91
 8003cf4:	08003d89 	.word	0x08003d89
 8003cf8:	08003b91 	.word	0x08003b91
 8003cfc:	08003b91 	.word	0x08003b91
 8003d00:	08003b91 	.word	0x08003b91
 8003d04:	08003d09 	.word	0x08003d09
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d0c:	6863      	ldr	r3, [r4, #4]
 8003d0e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003d12:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d16:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d18:	f1a3 0110 	sub.w	r1, r3, #16
 8003d1c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003d20:	4291      	cmp	r1, r2
 8003d22:	f63f af35 	bhi.w	8003b90 <HAL_UART_Init+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d26:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d2a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003d2e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d30:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003d32:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8003d34:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 8003d36:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8003d38:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  return ret;
 8003d3c:	e790      	b.n	8003c60 <HAL_UART_Init+0x144>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3e:	4822      	ldr	r0, [pc, #136]	; (8003dc8 <HAL_UART_Init+0x2ac>)
 8003d40:	e7e4      	b.n	8003d0c <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d42:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <HAL_UART_Init+0x2a0>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d4e:	f43f af71 	beq.w	8003c34 <HAL_UART_Init+0x118>
 8003d52:	d806      	bhi.n	8003d62 <HAL_UART_Init+0x246>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0aa      	beq.n	8003cae <HAL_UART_Init+0x192>
 8003d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5c:	f43f af53 	beq.w	8003c06 <HAL_UART_Init+0xea>
 8003d60:	e716      	b.n	8003b90 <HAL_UART_Init+0x74>
 8003d62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d66:	d094      	beq.n	8003c92 <HAL_UART_Init+0x176>
 8003d68:	e712      	b.n	8003b90 <HAL_UART_Init+0x74>
 8003d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d6e:	d090      	beq.n	8003c92 <HAL_UART_Init+0x176>
 8003d70:	e70e      	b.n	8003b90 <HAL_UART_Init+0x74>
}
 8003d72:	2001      	movs	r0, #1
 8003d74:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7a:	f43f af44 	beq.w	8003c06 <HAL_UART_Init+0xea>
 8003d7e:	e707      	b.n	8003b90 <HAL_UART_Init+0x74>
 8003d80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d84:	d085      	beq.n	8003c92 <HAL_UART_Init+0x176>
 8003d86:	e703      	b.n	8003b90 <HAL_UART_Init+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d88:	f7fe fc8a 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	f43f af41 	beq.w	8003c14 <HAL_UART_Init+0xf8>
 8003d92:	0040      	lsls	r0, r0, #1
 8003d94:	e7ba      	b.n	8003d0c <HAL_UART_Init+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d96:	f7fe fcb1 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
        break;
 8003d9a:	e7f7      	b.n	8003d8c <HAL_UART_Init+0x270>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe fcc6 	bl	800272c <HAL_RCC_GetPCLK2Freq>
        break;
 8003da0:	e7f4      	b.n	8003d8c <HAL_UART_Init+0x270>
 8003da2:	bf00      	nop
 8003da4:	efff69f3 	.word	0xefff69f3
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40004400 	.word	0x40004400
 8003db0:	40004800 	.word	0x40004800
 8003db4:	40004c00 	.word	0x40004c00
 8003db8:	40005000 	.word	0x40005000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	0800405c 	.word	0x0800405c
 8003dc4:	007a1200 	.word	0x007a1200
 8003dc8:	00f42400 	.word	0x00f42400

08003dcc <UART_WaitOnFlagUntilTimeout>:
{
 8003dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd4:	6804      	ldr	r4, [r0, #0]
 8003dd6:	4607      	mov	r7, r0
 8003dd8:	460e      	mov	r6, r1
 8003dda:	4615      	mov	r5, r2
 8003ddc:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dde:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003de2:	d10a      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003de4:	69e3      	ldr	r3, [r4, #28]
 8003de6:	ea36 0303 	bics.w	r3, r6, r3
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	429d      	cmp	r5, r3
 8003df2:	d0f7      	beq.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8003df4:	2000      	movs	r0, #0
}
 8003df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	69e3      	ldr	r3, [r4, #28]
 8003dfc:	ea36 0303 	bics.w	r3, r6, r3
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	429d      	cmp	r5, r3
 8003e08:	d1f4      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fd f899 	bl	8000f40 <HAL_GetTick>
 8003e0e:	eba0 0009 	sub.w	r0, r0, r9
 8003e12:	4540      	cmp	r0, r8
 8003e14:	d81e      	bhi.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x88>
 8003e16:	f1b8 0f00 	cmp.w	r8, #0
 8003e1a:	d01b      	beq.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x88>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e1c:	683c      	ldr	r4, [r7, #0]
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	075a      	lsls	r2, r3, #29
 8003e22:	d5dc      	bpl.n	8003dde <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e24:	69e3      	ldr	r3, [r4, #28]
 8003e26:	051b      	lsls	r3, r3, #20
 8003e28:	d5d9      	bpl.n	8003dde <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e2e:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e36:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003e3a:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 8003e40:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 8003e44:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8003e46:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003e48:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 8003e52:	e7d0      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003e60:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8003e66:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8003e6a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8003e6c:	67b9      	str	r1, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003e6e:	f887 4074 	strb.w	r4, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e72:	67f9      	str	r1, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 8003e74:	e7bf      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x2a>
 8003e76:	bf00      	nop

08003e78 <HAL_UART_Transmit>:
{
 8003e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e7c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003e7e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003e80:	2820      	cmp	r0, #32
{
 8003e82:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003e84:	d177      	bne.n	8003f76 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8003e86:	4688      	mov	r8, r1
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	d046      	beq.n	8003f1a <HAL_UART_Transmit+0xa2>
 8003e8c:	4617      	mov	r7, r2
 8003e8e:	2a00      	cmp	r2, #0
 8003e90:	d043      	beq.n	8003f1a <HAL_UART_Transmit+0xa2>
 8003e92:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8003e94:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d06c      	beq.n	8003f76 <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8003e9e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	f04f 0900 	mov.w	r9, #0
 8003ea4:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    __HAL_LOCK(huart);
 8003ea8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eac:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003eae:	f7fd f847 	bl	8000f40 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003eb4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003ebc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003ebe:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec2:	d05c      	beq.n	8003f7e <HAL_UART_Transmit+0x106>
      pdata16bits = NULL;
 8003ec4:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8003ec6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8003eca:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003ecc:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003ece:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8003ed2:	b1b3      	cbz	r3, 8003f02 <HAL_UART_Transmit+0x8a>
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	1c69      	adds	r1, r5, #1
 8003ed8:	d123      	bne.n	8003f22 <HAL_UART_Transmit+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eda:	69d3      	ldr	r3, [r2, #28]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	d5fc      	bpl.n	8003eda <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 8003ee0:	f1b8 0f00 	cmp.w	r8, #0
 8003ee4:	d042      	beq.n	8003f6c <HAL_UART_Transmit+0xf4>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee6:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003eea:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003eec:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ef8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e9      	bne.n	8003ed6 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f02:	9500      	str	r5, [sp, #0]
 8003f04:	4633      	mov	r3, r6
 8003f06:	2200      	movs	r2, #0
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff ff5e 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d14d      	bne.n	8003fb0 <HAL_UART_Transmit+0x138>
    huart->gState = HAL_UART_STATE_READY;
 8003f14:	2320      	movs	r3, #32
 8003f16:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8003f18:	e000      	b.n	8003f1c <HAL_UART_Transmit+0xa4>
      return  HAL_ERROR;
 8003f1a:	2001      	movs	r0, #1
}
 8003f1c:	b003      	add	sp, #12
 8003f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f22:	69d3      	ldr	r3, [r2, #28]
 8003f24:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8003f28:	d1da      	bne.n	8003ee0 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fd f809 	bl	8000f40 <HAL_GetTick>
 8003f2e:	1b80      	subs	r0, r0, r6
 8003f30:	4285      	cmp	r5, r0
 8003f32:	d32a      	bcc.n	8003f8a <HAL_UART_Transmit+0x112>
 8003f34:	b34d      	cbz	r5, 8003f8a <HAL_UART_Transmit+0x112>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	075b      	lsls	r3, r3, #29
 8003f3c:	d5cb      	bpl.n	8003ed6 <HAL_UART_Transmit+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3e:	69d3      	ldr	r3, [r2, #28]
 8003f40:	0518      	lsls	r0, r3, #20
 8003f42:	d5c8      	bpl.n	8003ed6 <HAL_UART_Transmit+0x5e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f48:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f50:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003f54:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f56:	f021 0101 	bic.w	r1, r1, #1
 8003f5a:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 8003f5c:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8003f5e:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003f60:	f884 9074 	strb.w	r9, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f64:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8003f6a:	e7d7      	b.n	8003f1c <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f6c:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f74:	e7b9      	b.n	8003eea <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003f76:	2002      	movs	r0, #2
}
 8003f78:	b003      	add	sp, #12
 8003f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d19f      	bne.n	8003ec4 <HAL_UART_Transmit+0x4c>
 8003f84:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8003f86:	4698      	mov	r8, r3
 8003f88:	e79d      	b.n	8003ec6 <HAL_UART_Transmit+0x4e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f92:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003f96:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8003f9c:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8003f9e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003fa2:	67a1      	str	r1, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003fa4:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 8003faa:	b003      	add	sp, #12
 8003fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	e7b3      	b.n	8003f1c <HAL_UART_Transmit+0xa4>

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4d0d      	ldr	r5, [pc, #52]	; (8003fec <__libc_init_array+0x38>)
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ff0 <__libc_init_array+0x3c>)
 8003fba:	1b64      	subs	r4, r4, r5
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	42a6      	cmp	r6, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	4d0b      	ldr	r5, [pc, #44]	; (8003ff4 <__libc_init_array+0x40>)
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	; (8003ff8 <__libc_init_array+0x44>)
 8003fc8:	f000 f820 	bl	800400c <_init>
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	42a6      	cmp	r6, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fdc:	4798      	blx	r3
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe6:	4798      	blx	r3
 8003fe8:	3601      	adds	r6, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	08004060 	.word	0x08004060
 8003ff0:	08004060 	.word	0x08004060
 8003ff4:	08004060 	.word	0x08004060
 8003ff8:	08004064 	.word	0x08004064

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr

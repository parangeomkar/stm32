
MPC_22_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a08  08004a08  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08004a08  08004a08  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a08  08004a08  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08004a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000034  08004a44  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08004a44  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbb6  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b1  00000000  00000000  0003cc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000404d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002258  00000000  00000000  00041120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e671  00000000  00000000  00043378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a56f  00000000  00000000  000619e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5491  00000000  00000000  0007bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001313e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  0013143c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00010290  00000000  00000000  00133e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004844 	.word	0x08004844

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	08004844 	.word	0x08004844

080001d4 <modelPredictiveControl>:
 *
 */
uint8_t Sa,Sb,Sc;
int states[7] = {1,3,2,6,4,5,0};

void modelPredictiveControl(){
 80001d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d8:	ed2d 8b06 	vpush	{d8-d10}
	computeSinCos();
 80001dc:	f000 fc58 	bl	8000a90 <computeSinCos>
	parkTransform(Ia,Ib,Ic,&Idq);
 80001e0:	4c71      	ldr	r4, [pc, #452]	; (80003a8 <modelPredictiveControl+0x1d4>)
 80001e2:	4b72      	ldr	r3, [pc, #456]	; (80003ac <modelPredictiveControl+0x1d8>)
 80001e4:	4a72      	ldr	r2, [pc, #456]	; (80003b0 <modelPredictiveControl+0x1dc>)
 80001e6:	4973      	ldr	r1, [pc, #460]	; (80003b4 <modelPredictiveControl+0x1e0>)
 80001e8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80001ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80001f0:	f9b1 1000 	ldrsh.w	r1, [r1]

	cost = 100000;

	IdPredTemp = Idq.d/1230;
 80001f4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8000424 <modelPredictiveControl+0x250>
	IqPredTemp = Idq.q/1230;
 80001f8:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8000428 <modelPredictiveControl+0x254>

	V = (Vbus/65);

	for(i=0;i<6;i++){
 80001fc:	4e6e      	ldr	r6, [pc, #440]	; (80003b8 <modelPredictiveControl+0x1e4>)
 80001fe:	f8df a22c 	ldr.w	sl, [pc, #556]	; 800042c <modelPredictiveControl+0x258>

		costTemp = 0;

//		for(j=0;j<1;j++){
//		IdPred = (int)((8650*IdPredTemp) + (wr*IqPredTemp*2) + (1250*Vdq.d));
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 8000202:	ed9f aa6e 	vldr	s20, [pc, #440]	; 80003bc <modelPredictiveControl+0x1e8>
 8000206:	eddf 9a6e 	vldr	s19, [pc, #440]	; 80003c0 <modelPredictiveControl+0x1ec>

		costTemp = sqr(mod((IqRef*10000 - IqPred)))/10000;
 800020a:	ed9f 9a6e 	vldr	s18, [pc, #440]	; 80003c4 <modelPredictiveControl+0x1f0>
 800020e:	eddf 8a6e 	vldr	s17, [pc, #440]	; 80003c8 <modelPredictiveControl+0x1f4>
//		}

		if(costTemp < cost){
			optimalVector = i;
			cost = costTemp;
			IqTx = IqPred*1230;
 8000212:	ed9f 8a6e 	vldr	s16, [pc, #440]	; 80003cc <modelPredictiveControl+0x1f8>
	    Va = V*((2*Sa-Sb-Sc))/3;
 8000216:	4d6e      	ldr	r5, [pc, #440]	; (80003d0 <modelPredictiveControl+0x1fc>)
	parkTransform(Ia,Ib,Ic,&Idq);
 8000218:	4623      	mov	r3, r4
 800021a:	f000 fbfd 	bl	8000a18 <parkTransform>
	V = (Vbus/65);
 800021e:	4b6d      	ldr	r3, [pc, #436]	; (80003d4 <modelPredictiveControl+0x200>)
 8000220:	4a6d      	ldr	r2, [pc, #436]	; (80003d8 <modelPredictiveControl+0x204>)
 8000222:	f9b3 3000 	ldrsh.w	r3, [r3]
	cost = 100000;
 8000226:	486d      	ldr	r0, [pc, #436]	; (80003dc <modelPredictiveControl+0x208>)
 8000228:	496d      	ldr	r1, [pc, #436]	; (80003e0 <modelPredictiveControl+0x20c>)
	IdPredTemp = Idq.d/1230;
 800022a:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80003e4 <modelPredictiveControl+0x210>
 800022e:	ed94 7a00 	vldr	s14, [r4]
	IqPredTemp = Idq.q/1230;
 8000232:	edd4 7a01 	vldr	s15, [r4, #4]
	cost = 100000;
 8000236:	6001      	str	r1, [r0, #0]
	V = (Vbus/65);
 8000238:	fb82 1203 	smull	r1, r2, r2, r3
 800023c:	17db      	asrs	r3, r3, #31
 800023e:	ebc3 1262 	rsb	r2, r3, r2, asr #5
 8000242:	fa1f fb82 	uxth.w	fp, r2
	IdPredTemp = Idq.d/1230;
 8000246:	ee27 7a26 	vmul.f32	s14, s14, s13
	V = (Vbus/65);
 800024a:	4a67      	ldr	r2, [pc, #412]	; (80003e8 <modelPredictiveControl+0x214>)
	IdPredTemp = Idq.d/1230;
 800024c:	ed89 7a00 	vstr	s14, [r9]
	IqPredTemp = Idq.q/1230;
 8000250:	ee67 7aa6 	vmul.f32	s15, s15, s13
	for(i=0;i<6;i++){
 8000254:	2300      	movs	r3, #0
	V = (Vbus/65);
 8000256:	f8a2 b000 	strh.w	fp, [r2]
	IqPredTemp = Idq.q/1230;
 800025a:	edc8 7a00 	vstr	s15, [r8]
	for(i=0;i<6;i++){
 800025e:	6033      	str	r3, [r6, #0]
 8000260:	465a      	mov	r2, fp
 8000262:	e006      	b.n	8000272 <modelPredictiveControl+0x9e>
 8000264:	6833      	ldr	r3, [r6, #0]
 8000266:	3301      	adds	r3, #1
 8000268:	2b05      	cmp	r3, #5
 800026a:	6033      	str	r3, [r6, #0]
 800026c:	dc79      	bgt.n	8000362 <modelPredictiveControl+0x18e>
 800026e:	4a5e      	ldr	r2, [pc, #376]	; (80003e8 <modelPredictiveControl+0x214>)
 8000270:	8812      	ldrh	r2, [r2, #0]
		Sa = states[i] & 0x01;
 8000272:	495e      	ldr	r1, [pc, #376]	; (80003ec <modelPredictiveControl+0x218>)
 8000274:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
		parkTransform(Va,Vb,Vc,&Vdq);
 8000278:	4b5d      	ldr	r3, [pc, #372]	; (80003f0 <modelPredictiveControl+0x21c>)
		Sa = states[i] & 0x01;
 800027a:	f004 0e01 	and.w	lr, r4, #1
		Sb = (states[i]>>1) & 0x01;
 800027e:	f3c4 0c40 	ubfx	ip, r4, #1, #1
	    Va = V*((2*Sa-Sb-Sc))/3;
 8000282:	ebcc 004e 	rsb	r0, ip, lr, lsl #1
		Sc = (states[i]>>2) & 0x01;
 8000286:	f3c4 0480 	ubfx	r4, r4, #2, #1
	    Vc = V*((2*Sc-Sb-Sa))/3;
 800028a:	ebcc 0b44 	rsb	fp, ip, r4, lsl #1
	    Va = V*((2*Sa-Sb-Sc))/3;
 800028e:	1b00      	subs	r0, r0, r4
	    Vb = V*((2*Sb-Sa-Sc))/3;
 8000290:	ebce 014c 	rsb	r1, lr, ip, lsl #1
	    Va = V*((2*Sa-Sb-Sc))/3;
 8000294:	fb02 f000 	mul.w	r0, r2, r0
	    Vc = V*((2*Sc-Sb-Sa))/3;
 8000298:	ebab 0b0e 	sub.w	fp, fp, lr
	    Vb = V*((2*Sb-Sa-Sc))/3;
 800029c:	1b09      	subs	r1, r1, r4
 800029e:	fb02 f101 	mul.w	r1, r2, r1
	    Vc = V*((2*Sc-Sb-Sa))/3;
 80002a2:	fb02 f20b 	mul.w	r2, r2, fp
	    Va = V*((2*Sa-Sb-Sc))/3;
 80002a6:	fb85 7b00 	smull	r7, fp, r5, r0
 80002aa:	ebab 70e0 	sub.w	r0, fp, r0, asr #31
	    Vb = V*((2*Sb-Sa-Sc))/3;
 80002ae:	fb85 7b01 	smull	r7, fp, r5, r1
 80002b2:	ebab 71e1 	sub.w	r1, fp, r1, asr #31
	    Vc = V*((2*Sc-Sb-Sa))/3;
 80002b6:	fb85 7b02 	smull	r7, fp, r5, r2
		Sa = states[i] & 0x01;
 80002ba:	4f4e      	ldr	r7, [pc, #312]	; (80003f4 <modelPredictiveControl+0x220>)
 80002bc:	f887 e000 	strb.w	lr, [r7]
		Sb = (states[i]>>1) & 0x01;
 80002c0:	4f4d      	ldr	r7, [pc, #308]	; (80003f8 <modelPredictiveControl+0x224>)
 80002c2:	f887 c000 	strb.w	ip, [r7]
		Sc = (states[i]>>2) & 0x01;
 80002c6:	4f4d      	ldr	r7, [pc, #308]	; (80003fc <modelPredictiveControl+0x228>)
 80002c8:	703c      	strb	r4, [r7, #0]
	    Va = V*((2*Sa-Sb-Sc))/3;
 80002ca:	4c4d      	ldr	r4, [pc, #308]	; (8000400 <modelPredictiveControl+0x22c>)
 80002cc:	b200      	sxth	r0, r0
 80002ce:	8020      	strh	r0, [r4, #0]
	    Vb = V*((2*Sb-Sa-Sc))/3;
 80002d0:	4c4c      	ldr	r4, [pc, #304]	; (8000404 <modelPredictiveControl+0x230>)
 80002d2:	b209      	sxth	r1, r1
 80002d4:	8021      	strh	r1, [r4, #0]
	    Vc = V*((2*Sc-Sb-Sa))/3;
 80002d6:	ebab 72e2 	sub.w	r2, fp, r2, asr #31
 80002da:	4c4b      	ldr	r4, [pc, #300]	; (8000408 <modelPredictiveControl+0x234>)
 80002dc:	b212      	sxth	r2, r2
 80002de:	8022      	strh	r2, [r4, #0]
		parkTransform(Va,Vb,Vc,&Vdq);
 80002e0:	f000 fb9a 	bl	8000a18 <parkTransform>
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 80002e4:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <modelPredictiveControl+0x21c>)
 80002e6:	ed98 6a00 	vldr	s12, [r8]
 80002ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80002ee:	4b47      	ldr	r3, [pc, #284]	; (800040c <modelPredictiveControl+0x238>)
 80002f0:	ed99 7a00 	vldr	s14, [r9]
 80002f4:	edd3 5a00 	vldr	s11, [r3]
		costTemp = sqr(mod((IqRef*10000 - IqPred)))/10000;
 80002f8:	edda 6a00 	vldr	s13, [sl]
		if(costTemp < cost){
 80002fc:	4b37      	ldr	r3, [pc, #220]	; (80003dc <modelPredictiveControl+0x208>)
		costTemp = sqr(mod((IqRef*10000 - IqPred)))/10000;
 80002fe:	4844      	ldr	r0, [pc, #272]	; (8000410 <modelPredictiveControl+0x23c>)
		if(costTemp < cost){
 8000300:	681a      	ldr	r2, [r3, #0]
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 8000302:	4b44      	ldr	r3, [pc, #272]	; (8000414 <modelPredictiveControl+0x240>)
			IqTx = IqPred*1230;
 8000304:	4944      	ldr	r1, [pc, #272]	; (8000418 <modelPredictiveControl+0x244>)
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 8000306:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800030a:	ee27 7a65 	vnmul.f32	s14, s14, s11
 800030e:	eee6 7a29 	vfma.f32	s15, s12, s19
 8000312:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8000316:	eee7 7a06 	vfma.f32	s15, s14, s12
 800031a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800031e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		costTemp = sqr(mod((IqRef*10000 - IqPred)))/10000;
 8000322:	eeb0 7a67 	vmov.f32	s14, s15
 8000326:	ee96 7a89 	vfnms.f32	s14, s13, s18
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 800032a:	edc3 7a00 	vstr	s15, [r3]
		costTemp = sqr(mod((IqRef*10000 - IqPred)))/10000;
 800032e:	ee27 7a07 	vmul.f32	s14, s14, s14
			IqTx = IqPred*1230;
 8000332:	ee67 6a88 	vmul.f32	s13, s15, s16
		costTemp = sqr(mod((IqRef*10000 - IqPred)))/10000;
 8000336:	ee27 7a28 	vmul.f32	s14, s14, s17
 800033a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800033e:	ee17 3a90 	vmov	r3, s15
		if(costTemp < cost){
 8000342:	4293      	cmp	r3, r2
		costTemp = sqr(mod((IqRef*10000 - IqPred)))/10000;
 8000344:	edc0 7a00 	vstr	s15, [r0]
		if(costTemp < cost){
 8000348:	da8c      	bge.n	8000264 <modelPredictiveControl+0x90>
			optimalVector = i;
 800034a:	6832      	ldr	r2, [r6, #0]
			IqTx = IqPred*1230;
 800034c:	edc1 6a00 	vstr	s13, [r1]
	for(i=0;i<6;i++){
 8000350:	1c53      	adds	r3, r2, #1
			cost = costTemp;
 8000352:	4822      	ldr	r0, [pc, #136]	; (80003dc <modelPredictiveControl+0x208>)
			optimalVector = i;
 8000354:	4931      	ldr	r1, [pc, #196]	; (800041c <modelPredictiveControl+0x248>)
			cost = costTemp;
 8000356:	edc0 7a00 	vstr	s15, [r0]
	for(i=0;i<6;i++){
 800035a:	2b05      	cmp	r3, #5
			optimalVector = i;
 800035c:	700a      	strb	r2, [r1, #0]
	for(i=0;i<6;i++){
 800035e:	6033      	str	r3, [r6, #0]
 8000360:	dd85      	ble.n	800026e <modelPredictiveControl+0x9a>
		}
	}

	if(optimalVector == 6){
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <modelPredictiveControl+0x248>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b06      	cmp	r3, #6
 8000368:	d010      	beq.n	800038c <modelPredictiveControl+0x1b8>
		V = 0;
	} else {
		V = 800;
	}

	wt = (optimalVector)*60;
 800036a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	b29b      	uxth	r3, r3
 8000372:	4a2b      	ldr	r2, [pc, #172]	; (8000420 <modelPredictiveControl+0x24c>)
 8000374:	481c      	ldr	r0, [pc, #112]	; (80003e8 <modelPredictiveControl+0x214>)
 8000376:	8013      	strh	r3, [r2, #0]
 8000378:	f44f 7148 	mov.w	r1, #800	; 0x320
	if(wt >= 360){
 800037c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000380:	8001      	strh	r1, [r0, #0]
 8000382:	d209      	bcs.n	8000398 <modelPredictiveControl+0x1c4>
		wt -= 360;
	}
}
 8000384:	ecbd 8b06 	vpop	{d8-d10}
 8000388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <modelPredictiveControl+0x214>)
 800038e:	2300      	movs	r3, #0
 8000390:	8013      	strh	r3, [r2, #0]
	if(wt >= 360){
 8000392:	4a23      	ldr	r2, [pc, #140]	; (8000420 <modelPredictiveControl+0x24c>)
	wt = (optimalVector)*60;
 8000394:	f44f 73b4 	mov.w	r3, #360	; 0x168
}
 8000398:	ecbd 8b06 	vpop	{d8-d10}
		wt -= 360;
 800039c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80003a0:	8013      	strh	r3, [r2, #0]
}
 80003a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003a6:	bf00      	nop
 80003a8:	200001ac 	.word	0x200001ac
 80003ac:	2000007e 	.word	0x2000007e
 80003b0:	200000fa 	.word	0x200000fa
 80003b4:	200000d2 	.word	0x200000d2
 80003b8:	200000cc 	.word	0x200000cc
 80003bc:	449c4000 	.word	0x449c4000
 80003c0:	460d9800 	.word	0x460d9800
 80003c4:	461c4000 	.word	0x461c4000
 80003c8:	38d1b717 	.word	0x38d1b717
 80003cc:	4499c000 	.word	0x4499c000
 80003d0:	55555556 	.word	0x55555556
 80003d4:	200001a4 	.word	0x200001a4
 80003d8:	7e07e07f 	.word	0x7e07e07f
 80003dc:	200000a4 	.word	0x200000a4
 80003e0:	000186a0 	.word	0x000186a0
 80003e4:	3a55200d 	.word	0x3a55200d
 80003e8:	2000001e 	.word	0x2000001e
 80003ec:	20000000 	.word	0x20000000
 80003f0:	200000b4 	.word	0x200000b4
 80003f4:	200000d0 	.word	0x200000d0
 80003f8:	20000084 	.word	0x20000084
 80003fc:	200000c8 	.word	0x200000c8
 8000400:	200000b2 	.word	0x200000b2
 8000404:	200000fe 	.word	0x200000fe
 8000408:	200000d8 	.word	0x200000d8
 800040c:	20000110 	.word	0x20000110
 8000410:	20000080 	.word	0x20000080
 8000414:	200001a0 	.word	0x200001a0
 8000418:	200000dc 	.word	0x200000dc
 800041c:	200001a8 	.word	0x200001a8
 8000420:	20000064 	.word	0x20000064
 8000424:	200000a8 	.word	0x200000a8
 8000428:	200000a0 	.word	0x200000a0
 800042c:	200000c0 	.word	0x200000c0

08000430 <SVPWM>:
uint16_t xxx = 0;
/**
 * This function computes SVPWM timings for TIM1
 *
 */
void SVPWM(){
 8000430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(run == 1){
 8000434:	4b66      	ldr	r3, [pc, #408]	; (80005d0 <SVPWM+0x1a0>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d006      	beq.n	800044a <SVPWM+0x1a>
		TIM1->CCR1 = Ta;
		TIM1->CCR2 = Tb;
		TIM1->CCR3 = Tc;

	} else {
		TIM1->CCR1 = 0;
 800043c:	4b65      	ldr	r3, [pc, #404]	; (80005d4 <SVPWM+0x1a4>)
 800043e:	2200      	movs	r2, #0
 8000440:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000442:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000444:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		n = ((uint8_t)(wt/60))+1;
 800044a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000600 <SVPWM+0x1d0>
 800044e:	4c62      	ldr	r4, [pc, #392]	; (80005d8 <SVPWM+0x1a8>)
 8000450:	f8b8 0000 	ldrh.w	r0, [r8]
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000454:	4f61      	ldr	r7, [pc, #388]	; (80005dc <SVPWM+0x1ac>)
 8000456:	4d62      	ldr	r5, [pc, #392]	; (80005e0 <SVPWM+0x1b0>)
 8000458:	f8b7 9000 	ldrh.w	r9, [r7]
 800045c:	4e61      	ldr	r6, [pc, #388]	; (80005e4 <SVPWM+0x1b4>)
		n = ((uint8_t)(wt/60))+1;
 800045e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000462:	fba3 2300 	umull	r2, r3, r3, r0
 8000466:	095b      	lsrs	r3, r3, #5
 8000468:	3301      	adds	r3, #1
 800046a:	b2db      	uxtb	r3, r3
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 800046c:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8000470:	ebc0 0082 	rsb	r0, r0, r2, lsl #2
 8000474:	b200      	sxth	r0, r0
		n = ((uint8_t)(wt/60))+1;
 8000476:	7023      	strb	r3, [r4, #0]
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000478:	f000 fa90 	bl	800099c <sinLowRes>
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 800047c:	7823      	ldrb	r3, [r4, #0]
 800047e:	f8b8 2000 	ldrh.w	r2, [r8]
 8000482:	883f      	ldrh	r7, [r7, #0]
 8000484:	3b01      	subs	r3, #1
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000486:	fb09 f000 	mul.w	r0, r9, r0
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 800048a:	eba3 1303 	sub.w	r3, r3, r3, lsl #4
 800048e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000492:	fb85 1300 	smull	r1, r3, r5, r0
 8000496:	1819      	adds	r1, r3, r0
 8000498:	17c3      	asrs	r3, r0, #31
 800049a:	ebc3 23a1 	rsb	r3, r3, r1, asr #10
 800049e:	b29b      	uxth	r3, r3
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 80004a0:	b210      	sxth	r0, r2
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 80004a2:	6033      	str	r3, [r6, #0]
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 80004a4:	f000 fa7a 	bl	800099c <sinLowRes>
 80004a8:	fb07 f000 	mul.w	r0, r7, r0
 80004ac:	fb85 3500 	smull	r3, r5, r5, r0
 80004b0:	4405      	add	r5, r0
		T0 = Ts - (T1+T2);
 80004b2:	4a4d      	ldr	r2, [pc, #308]	; (80005e8 <SVPWM+0x1b8>)
 80004b4:	6833      	ldr	r3, [r6, #0]
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 80004b6:	4f4d      	ldr	r7, [pc, #308]	; (80005ec <SVPWM+0x1bc>)
 80004b8:	7821      	ldrb	r1, [r4, #0]
		T0 = Ts - (T1+T2);
 80004ba:	8812      	ldrh	r2, [r2, #0]
 80004bc:	4e4c      	ldr	r6, [pc, #304]	; (80005f0 <SVPWM+0x1c0>)
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 80004be:	17c0      	asrs	r0, r0, #31
 80004c0:	ebc0 20a5 	rsb	r0, r0, r5, asr #10
 80004c4:	b284      	uxth	r4, r0
 80004c6:	4620      	mov	r0, r4
 80004c8:	603c      	str	r4, [r7, #0]
		T0 = Ts - (T1+T2);
 80004ca:	441c      	add	r4, r3
 80004cc:	1b12      	subs	r2, r2, r4
 80004ce:	3901      	subs	r1, #1
 80004d0:	6032      	str	r2, [r6, #0]
		switch(n){
 80004d2:	2905      	cmp	r1, #5
 80004d4:	d872      	bhi.n	80005bc <SVPWM+0x18c>
 80004d6:	e8df f001 	tbb	[pc, r1]
 80004da:	2b1a      	.short	0x2b1a
 80004dc:	03604e3d 	.word	0x03604e3d
				Ta = T1 + T2 + (T0/2);
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80004e6:	f3c2 044f 	ubfx	r4, r2, #1, #16
 80004ea:	4418      	add	r0, r3
 80004ec:	1821      	adds	r1, r4, r0
 80004ee:	4e41      	ldr	r6, [pc, #260]	; (80005f4 <SVPWM+0x1c4>)
				Tc = T1 + (T0/2);
 80004f0:	4d41      	ldr	r5, [pc, #260]	; (80005f8 <SVPWM+0x1c8>)
				Tb = (T0/2);
 80004f2:	4842      	ldr	r0, [pc, #264]	; (80005fc <SVPWM+0x1cc>)
				Tc = T1 + (T0/2);
 80004f4:	4423      	add	r3, r4
				Ta = T1 + T2 + (T0/2);
 80004f6:	b289      	uxth	r1, r1
				Tc = T1 + (T0/2);
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	4622      	mov	r2, r4
				Ta = T1 + T2 + (T0/2);
 80004fc:	8031      	strh	r1, [r6, #0]
				Tc = T1 + (T0/2);
 80004fe:	802b      	strh	r3, [r5, #0]
				Tb = (T0/2);
 8000500:	8004      	strh	r4, [r0, #0]
		TIM1->CCR1 = Ta;
 8000502:	4c34      	ldr	r4, [pc, #208]	; (80005d4 <SVPWM+0x1a4>)
 8000504:	6361      	str	r1, [r4, #52]	; 0x34
		TIM1->CCR2 = Tb;
 8000506:	63a2      	str	r2, [r4, #56]	; 0x38
		TIM1->CCR3 = Tc;
 8000508:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800050a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				Ta = T1 + T2 + (T0/2);
 800050e:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 8000512:	f3c4 054f 	ubfx	r5, r4, #1, #16
 8000516:	18c1      	adds	r1, r0, r3
				Tb = T2 + (T0/2);
 8000518:	1942      	adds	r2, r0, r5
				Ta = T1 + T2 + (T0/2);
 800051a:	4f36      	ldr	r7, [pc, #216]	; (80005f4 <SVPWM+0x1c4>)
				Tb = T2 + (T0/2);
 800051c:	4e37      	ldr	r6, [pc, #220]	; (80005fc <SVPWM+0x1cc>)
				Tc = (T0/2);
 800051e:	4836      	ldr	r0, [pc, #216]	; (80005f8 <SVPWM+0x1c8>)
				Ta = T1 + T2 + (T0/2);
 8000520:	4429      	add	r1, r5
 8000522:	b289      	uxth	r1, r1
				Tb = T2 + (T0/2);
 8000524:	b292      	uxth	r2, r2
 8000526:	462b      	mov	r3, r5
				Ta = T1 + T2 + (T0/2);
 8000528:	8039      	strh	r1, [r7, #0]
				Tb = T2 + (T0/2);
 800052a:	8032      	strh	r2, [r6, #0]
				Tc = (T0/2);
 800052c:	8005      	strh	r5, [r0, #0]
				break;
 800052e:	e7e8      	b.n	8000502 <SVPWM+0xd2>
				Ta = T1 + (T0/2);
 8000530:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 8000534:	b29b      	uxth	r3, r3
 8000536:	f3c4 054f 	ubfx	r5, r4, #1, #16
				Tb = T1 + T2 + (T0/2);
 800053a:	4418      	add	r0, r3
 800053c:	182a      	adds	r2, r5, r0
				Ta = T1 + (T0/2);
 800053e:	442b      	add	r3, r5
 8000540:	4f2c      	ldr	r7, [pc, #176]	; (80005f4 <SVPWM+0x1c4>)
				Tb = T1 + T2 + (T0/2);
 8000542:	4e2e      	ldr	r6, [pc, #184]	; (80005fc <SVPWM+0x1cc>)
				Tc = (T0/2);
 8000544:	482c      	ldr	r0, [pc, #176]	; (80005f8 <SVPWM+0x1c8>)
				Ta = T1 + (T0/2);
 8000546:	b299      	uxth	r1, r3
				Tb = T1 + T2 + (T0/2);
 8000548:	b292      	uxth	r2, r2
 800054a:	462b      	mov	r3, r5
				Ta = T1 + (T0/2);
 800054c:	8039      	strh	r1, [r7, #0]
				Tb = T1 + T2 + (T0/2);
 800054e:	8032      	strh	r2, [r6, #0]
				Tc = (T0/2);
 8000550:	8005      	strh	r5, [r0, #0]
				break;
 8000552:	e7d6      	b.n	8000502 <SVPWM+0xd2>
				Ta = (T0/2);
 8000554:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 8000558:	f3c1 044f 	ubfx	r4, r1, #1, #16
				Tb = T1 + T2 + (T0/2);
 800055c:	18c2      	adds	r2, r0, r3
 800055e:	4f27      	ldr	r7, [pc, #156]	; (80005fc <SVPWM+0x1cc>)
				Tc = T2 + (T0/2);
 8000560:	4e25      	ldr	r6, [pc, #148]	; (80005f8 <SVPWM+0x1c8>)
				Ta = (T0/2);
 8000562:	4d24      	ldr	r5, [pc, #144]	; (80005f4 <SVPWM+0x1c4>)
				Tb = T1 + T2 + (T0/2);
 8000564:	4422      	add	r2, r4
				Tc = T2 + (T0/2);
 8000566:	4420      	add	r0, r4
				Tb = T1 + T2 + (T0/2);
 8000568:	b292      	uxth	r2, r2
				Tc = T2 + (T0/2);
 800056a:	b283      	uxth	r3, r0
				Tb = T1 + T2 + (T0/2);
 800056c:	803a      	strh	r2, [r7, #0]
				Tc = T2 + (T0/2);
 800056e:	8033      	strh	r3, [r6, #0]
 8000570:	4621      	mov	r1, r4
				Ta = (T0/2);
 8000572:	802c      	strh	r4, [r5, #0]
				break;
 8000574:	e7c5      	b.n	8000502 <SVPWM+0xd2>
				Ta = (T0/2);
 8000576:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
				Tb = T1 + (T0/2);
 800057a:	b29b      	uxth	r3, r3
				Ta = (T0/2);
 800057c:	f3c1 044f 	ubfx	r4, r1, #1, #16
				Tc = T1 + T2 + (T0/2);
 8000580:	4418      	add	r0, r3
				Tb = T1 + (T0/2);
 8000582:	18e2      	adds	r2, r4, r3
 8000584:	4f1d      	ldr	r7, [pc, #116]	; (80005fc <SVPWM+0x1cc>)
				Tc = T1 + T2 + (T0/2);
 8000586:	4e1c      	ldr	r6, [pc, #112]	; (80005f8 <SVPWM+0x1c8>)
				Ta = (T0/2);
 8000588:	4d1a      	ldr	r5, [pc, #104]	; (80005f4 <SVPWM+0x1c4>)
				Tc = T1 + T2 + (T0/2);
 800058a:	4420      	add	r0, r4
 800058c:	b283      	uxth	r3, r0
				Tb = T1 + (T0/2);
 800058e:	b292      	uxth	r2, r2
 8000590:	803a      	strh	r2, [r7, #0]
				Tc = T1 + T2 + (T0/2);
 8000592:	8033      	strh	r3, [r6, #0]
 8000594:	4621      	mov	r1, r4
				Ta = (T0/2);
 8000596:	802c      	strh	r4, [r5, #0]
				break;
 8000598:	e7b3      	b.n	8000502 <SVPWM+0xd2>
				Ta = T2 + (T0/2);
 800059a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800059e:	f3c2 044f 	ubfx	r4, r2, #1, #16
				Tc = T1 + T2 + (T0/2);
 80005a2:	4403      	add	r3, r0
				Ta = T2 + (T0/2);
 80005a4:	4f13      	ldr	r7, [pc, #76]	; (80005f4 <SVPWM+0x1c4>)
				Tc = T1 + T2 + (T0/2);
 80005a6:	4e14      	ldr	r6, [pc, #80]	; (80005f8 <SVPWM+0x1c8>)
				Tb = (T0/2);
 80005a8:	4d14      	ldr	r5, [pc, #80]	; (80005fc <SVPWM+0x1cc>)
				Ta = T2 + (T0/2);
 80005aa:	4420      	add	r0, r4
				Tc = T1 + T2 + (T0/2);
 80005ac:	4423      	add	r3, r4
				Ta = T2 + (T0/2);
 80005ae:	b281      	uxth	r1, r0
				Tc = T1 + T2 + (T0/2);
 80005b0:	b29b      	uxth	r3, r3
				Ta = T2 + (T0/2);
 80005b2:	8039      	strh	r1, [r7, #0]
				Tc = T1 + T2 + (T0/2);
 80005b4:	8033      	strh	r3, [r6, #0]
 80005b6:	4622      	mov	r2, r4
				Tb = (T0/2);
 80005b8:	802c      	strh	r4, [r5, #0]
				break;
 80005ba:	e7a2      	b.n	8000502 <SVPWM+0xd2>
				Ta = 0;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <SVPWM+0x1c4>)
				Tc = 0;
 80005be:	490e      	ldr	r1, [pc, #56]	; (80005f8 <SVPWM+0x1c8>)
				Tb = 0;
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <SVPWM+0x1cc>)
				Ta = 0;
 80005c2:	2200      	movs	r2, #0
 80005c4:	801a      	strh	r2, [r3, #0]
				Tc = 0;
 80005c6:	800a      	strh	r2, [r1, #0]
 80005c8:	4613      	mov	r3, r2
				Tb = 0;
 80005ca:	8002      	strh	r2, [r0, #0]
				Tc = 0;
 80005cc:	4611      	mov	r1, r2
 80005ce:	e798      	b.n	8000502 <SVPWM+0xd2>
 80005d0:	20000020 	.word	0x20000020
 80005d4:	40012c00 	.word	0x40012c00
 80005d8:	20000062 	.word	0x20000062
 80005dc:	2000001e 	.word	0x2000001e
 80005e0:	9d414457 	.word	0x9d414457
 80005e4:	20000054 	.word	0x20000054
 80005e8:	2000001c 	.word	0x2000001c
 80005ec:	20000058 	.word	0x20000058
 80005f0:	20000050 	.word	0x20000050
 80005f4:	2000005c 	.word	0x2000005c
 80005f8:	20000060 	.word	0x20000060
 80005fc:	2000005e 	.word	0x2000005e
 8000600:	20000064 	.word	0x20000064

08000604 <transferUART>:
/**
 * This function transfers data over UART
 *
 */
void transferUART(){
	if(startTx){
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <transferUART+0x48>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b903      	cbnz	r3, 800060c <transferUART+0x8>
 800060a:	4770      	bx	lr
		txData[0] = ((int16_t)(speed) + 10000) & 0xff;
		txData[1] = (((int16_t)(speed) + 10000) >> 8) & 0xff;

		txData[2] = ((int16_t)(IqTx) + 10000) & 0xff;
 800060c:	4a10      	ldr	r2, [pc, #64]	; (8000650 <transferUART+0x4c>)
		txData[0] = ((int16_t)(speed) + 10000) & 0xff;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <transferUART+0x50>)
		txData[2] = ((int16_t)(IqTx) + 10000) & 0xff;
 8000610:	edd2 7a00 	vldr	s15, [r2]
		txData[0] = ((int16_t)(speed) + 10000) & 0xff;
 8000614:	4910      	ldr	r1, [pc, #64]	; (8000658 <transferUART+0x54>)
//		txData[4] = ((int16_t)(Ib) + 10000) & 0xff;
//		txData[5] = (((int16_t)(Ib) + 10000) >> 8) & 0xff;
//
//		txData[6] = (optimalVector) & 0xff;

		HAL_UART_Transmit(&huart2, txData, 4, 10);
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <transferUART+0x58>)
		txData[2] = ((int16_t)(IqTx) + 10000) & 0xff;
 8000618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
void transferUART(){
 800061c:	b470      	push	{r4, r5, r6}
		txData[0] = ((int16_t)(speed) + 10000) & 0xff;
 800061e:	f9b3 4000 	ldrsh.w	r4, [r3]
		txData[2] = ((int16_t)(IqTx) + 10000) & 0xff;
 8000622:	ee17 3a90 	vmov	r3, s15
		txData[1] = (((int16_t)(speed) + 10000) >> 8) & 0xff;
 8000626:	f242 7210 	movw	r2, #10000	; 0x2710
		txData[2] = ((int16_t)(IqTx) + 10000) & 0xff;
 800062a:	b21b      	sxth	r3, r3
		txData[3] = (((int16_t)(IqTx) + 10000) >> 8) & 0xff;
 800062c:	189e      	adds	r6, r3, r2
		txData[1] = (((int16_t)(speed) + 10000) >> 8) & 0xff;
 800062e:	4422      	add	r2, r4
		txData[0] = ((int16_t)(speed) + 10000) & 0xff;
 8000630:	f104 0510 	add.w	r5, r4, #16
		txData[3] = (((int16_t)(IqTx) + 10000) >> 8) & 0xff;
 8000634:	1236      	asrs	r6, r6, #8
		txData[1] = (((int16_t)(speed) + 10000) >> 8) & 0xff;
 8000636:	1214      	asrs	r4, r2, #8
		txData[2] = ((int16_t)(IqTx) + 10000) & 0xff;
 8000638:	3310      	adds	r3, #16
 800063a:	708b      	strb	r3, [r1, #2]
		txData[3] = (((int16_t)(IqTx) + 10000) >> 8) & 0xff;
 800063c:	70ce      	strb	r6, [r1, #3]
		txData[0] = ((int16_t)(speed) + 10000) & 0xff;
 800063e:	700d      	strb	r5, [r1, #0]
		txData[1] = (((int16_t)(speed) + 10000) >> 8) & 0xff;
 8000640:	704c      	strb	r4, [r1, #1]
	}
}
 8000642:	bc70      	pop	{r4, r5, r6}
		HAL_UART_Transmit(&huart2, txData, 4, 10);
 8000644:	230a      	movs	r3, #10
 8000646:	2204      	movs	r2, #4
 8000648:	f004 b834 	b.w	80046b4 <HAL_UART_Transmit>
 800064c:	200001da 	.word	0x200001da
 8000650:	200000dc 	.word	0x200000dc
 8000654:	20000104 	.word	0x20000104
 8000658:	200001d4 	.word	0x200001d4
 800065c:	20000114 	.word	0x20000114

08000660 <receiveUART>:
/**
 * This function initializes UART DMA receive
 *
 */
void receiveUART(){
	HAL_UART_Receive_DMA(&huart2, comCode, 3);
 8000660:	4902      	ldr	r1, [pc, #8]	; (800066c <receiveUART+0xc>)
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <receiveUART+0x10>)
 8000664:	2203      	movs	r2, #3
 8000666:	f003 bd27 	b.w	80040b8 <HAL_UART_Receive_DMA>
 800066a:	bf00      	nop
 800066c:	200001dc 	.word	0x200001dc
 8000670:	20000114 	.word	0x20000114

08000674 <handleRxCommands>:
/**
 * This function is a handler for received data
 *
 */
void handleRxCommands(){
	if(comCode[0] == 101){
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <handleRxCommands+0x90>)
 8000676:	7813      	ldrb	r3, [r2, #0]
 8000678:	2b65      	cmp	r3, #101	; 0x65
 800067a:	d01a      	beq.n	80006b2 <handleRxCommands+0x3e>
		startTx = 1;
	} else if(comCode[0] == 102){
 800067c:	2b66      	cmp	r3, #102	; 0x66
 800067e:	d014      	beq.n	80006aa <handleRxCommands+0x36>
		startTx = 0;
	} else if(comCode[0] == 103){
 8000680:	2b67      	cmp	r3, #103	; 0x67
 8000682:	d01e      	beq.n	80006c2 <handleRxCommands+0x4e>
		run = 0;
	} else if(comCode[0] == 104){
 8000684:	2b68      	cmp	r3, #104	; 0x68
 8000686:	d018      	beq.n	80006ba <handleRxCommands+0x46>
		run = 1;
	} else if(comCode[0] == 105){
 8000688:	2b69      	cmp	r3, #105	; 0x69
 800068a:	d01e      	beq.n	80006ca <handleRxCommands+0x56>
		sigma = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 106){
 800068c:	2b6a      	cmp	r3, #106	; 0x6a
 800068e:	d02a      	beq.n	80006e6 <handleRxCommands+0x72>
		delta = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 107){
 8000690:	2b6b      	cmp	r3, #107	; 0x6b
 8000692:	d02f      	beq.n	80006f4 <handleRxCommands+0x80>
		Kp = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 108){
 8000694:	2b6c      	cmp	r3, #108	; 0x6c
 8000696:	d01f      	beq.n	80006d8 <handleRxCommands+0x64>
		Ki = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 109){
 8000698:	2b6d      	cmp	r3, #109	; 0x6d
 800069a:	d105      	bne.n	80006a8 <handleRxCommands+0x34>
		speedReq = comCode[1] + 256*comCode[2];
 800069c:	7853      	ldrb	r3, [r2, #1]
 800069e:	7891      	ldrb	r1, [r2, #2]
 80006a0:	4a19      	ldr	r2, [pc, #100]	; (8000708 <handleRxCommands+0x94>)
 80006a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80006a6:	8013      	strh	r3, [r2, #0]
	}
}
 80006a8:	4770      	bx	lr
		startTx = 0;
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <handleRxCommands+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	4770      	bx	lr
		startTx = 1;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <handleRxCommands+0x98>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	4770      	bx	lr
		run = 1;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <handleRxCommands+0x9c>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	4770      	bx	lr
		run = 0;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <handleRxCommands+0x9c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	4770      	bx	lr
		sigma = comCode[1] + 256*comCode[2];
 80006ca:	7853      	ldrb	r3, [r2, #1]
 80006cc:	7891      	ldrb	r1, [r2, #2]
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <handleRxCommands+0xa0>)
 80006d0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80006d4:	8013      	strh	r3, [r2, #0]
 80006d6:	4770      	bx	lr
		Ki = comCode[1] + 256*comCode[2];
 80006d8:	7853      	ldrb	r3, [r2, #1]
 80006da:	7891      	ldrb	r1, [r2, #2]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <handleRxCommands+0xa4>)
 80006de:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80006e2:	8013      	strh	r3, [r2, #0]
 80006e4:	4770      	bx	lr
		delta = comCode[1] + 256*comCode[2];
 80006e6:	7853      	ldrb	r3, [r2, #1]
 80006e8:	7891      	ldrb	r1, [r2, #2]
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <handleRxCommands+0xa8>)
 80006ec:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80006f0:	8013      	strh	r3, [r2, #0]
 80006f2:	4770      	bx	lr
		Kp = comCode[1] + 256*comCode[2];
 80006f4:	7853      	ldrb	r3, [r2, #1]
 80006f6:	7891      	ldrb	r1, [r2, #2]
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <handleRxCommands+0xac>)
 80006fa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80006fe:	8013      	strh	r3, [r2, #0]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	200001dc 	.word	0x200001dc
 8000708:	20000072 	.word	0x20000072
 800070c:	200001da 	.word	0x200001da
 8000710:	20000020 	.word	0x20000020
 8000714:	200000d4 	.word	0x200000d4
 8000718:	20000024 	.word	0x20000024
 800071c:	200000fc 	.word	0x200000fc
 8000720:	20000026 	.word	0x20000026

08000724 <executeAll>:
/**
 * This function controls the execution and ADC measurement
 *
 */
uint16_t ex;
void executeAll(){
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000726:	2120      	movs	r1, #32
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f002 f872 	bl	8002814 <HAL_GPIO_TogglePin>
	measureADC();
 8000730:	f000 f8fa 	bl	8000928 <measureADC>

	if(run){
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <executeAll+0x88>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b32b      	cbz	r3, 8000786 <executeAll+0x62>
		if(cnts < 2000){
 800073a:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <executeAll+0x8c>)
 800073c:	8813      	ldrh	r3, [r2, #0]
 800073e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000742:	d215      	bcs.n	8000770 <executeAll+0x4c>
	if(cnts < 1000){
 8000744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000748:	d32a      	bcc.n	80007a0 <executeAll+0x7c>
		thetaElec = 0;
 800074a:	481a      	ldr	r0, [pc, #104]	; (80007b4 <executeAll+0x90>)
		TIM3->CNT = 0;
 800074c:	4c1a      	ldr	r4, [pc, #104]	; (80007b8 <executeAll+0x94>)
		thetaElecTemp = 0;
 800074e:	4f1b      	ldr	r7, [pc, #108]	; (80007bc <executeAll+0x98>)
		thetaMech = 0;
 8000750:	4e1b      	ldr	r6, [pc, #108]	; (80007c0 <executeAll+0x9c>)
		speed = 0;
 8000752:	4d1c      	ldr	r5, [pc, #112]	; (80007c4 <executeAll+0xa0>)
		thetaElecTemp = 0;
 8000754:	2100      	movs	r1, #0
		thetaElec = 0;
 8000756:	8001      	strh	r1, [r0, #0]
		wr = 0;
 8000758:	481b      	ldr	r0, [pc, #108]	; (80007c8 <executeAll+0xa4>)
		thetaElecTemp = 0;
 800075a:	8039      	strh	r1, [r7, #0]
		thetaMech = 0;
 800075c:	8031      	strh	r1, [r6, #0]
		TIM3->CNT = 0;
 800075e:	6261      	str	r1, [r4, #36]	; 0x24
		wr = 0;
 8000760:	2400      	movs	r4, #0
		speed = 0;
 8000762:	8029      	strh	r1, [r5, #0]
		wr = 0;
 8000764:	6004      	str	r4, [r0, #0]
 8000766:	4819      	ldr	r0, [pc, #100]	; (80007cc <executeAll+0xa8>)
			initalPositionSet();
			cnts++;
 8000768:	3301      	adds	r3, #1
 800076a:	8013      	strh	r3, [r2, #0]
 800076c:	8001      	strh	r1, [r0, #0]
 800076e:	e00c      	b.n	800078a <executeAll+0x66>
		} else if(cnts >= 2000 && cnts < 3000){
 8000770:	f5a3 61fa 	sub.w	r1, r3, #2000	; 0x7d0
 8000774:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8000778:	d214      	bcs.n	80007a4 <executeAll+0x80>
			cnts++;
			V = 0;
 800077a:	4915      	ldr	r1, [pc, #84]	; (80007d0 <executeAll+0xac>)
			cnts++;
 800077c:	3301      	adds	r3, #1
			V = 0;
 800077e:	2000      	movs	r0, #0
			cnts++;
 8000780:	8013      	strh	r3, [r2, #0]
			V = 0;
 8000782:	8008      	strh	r0, [r1, #0]
 8000784:	e001      	b.n	800078a <executeAll+0x66>
//			} else {
//				ex++;
//			}
		}
	} else {
		V = 0;
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <executeAll+0xac>)
 8000788:	8013      	strh	r3, [r2, #0]
	}
	SVPWM();
 800078a:	f7ff fe51 	bl	8000430 <SVPWM>
	transferUART();
 800078e:	f7ff ff39 	bl	8000604 <transferUART>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 8000792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000796:	2120      	movs	r1, #32
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f002 b83a 	b.w	8002814 <HAL_GPIO_TogglePin>
		wt = 30;
 80007a0:	211e      	movs	r1, #30
 80007a2:	e7e0      	b.n	8000766 <executeAll+0x42>
			modelPredictiveControl();
 80007a4:	f7ff fd16 	bl	80001d4 <modelPredictiveControl>
 80007a8:	e7ef      	b.n	800078a <executeAll+0x66>
 80007aa:	bf00      	nop
 80007ac:	20000020 	.word	0x20000020
 80007b0:	20000066 	.word	0x20000066
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	40000400 	.word	0x40000400
 80007bc:	2000009c 	.word	0x2000009c
 80007c0:	200000c6 	.word	0x200000c6
 80007c4:	20000104 	.word	0x20000104
 80007c8:	20000110 	.word	0x20000110
 80007cc:	20000064 	.word	0x20000064
 80007d0:	2000001e 	.word	0x2000001e

080007d4 <computePositionWithEncoder>:
 */
int16_t speedTemp, sum, speedArr[20];
uint16_t j, k, e;
uint16_t x = 1;
void computePositionWithEncoder(){
	thetaElec = 90 + 360*TIM3->CNT/300;
 80007d4:	4b45      	ldr	r3, [pc, #276]	; (80008ec <computePositionWithEncoder+0x118>)
 80007d6:	4a46      	ldr	r2, [pc, #280]	; (80008f0 <computePositionWithEncoder+0x11c>)
 80007d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80007da:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80007de:	fb03 f301 	mul.w	r3, r3, r1
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80007ea:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 80007ee:	b211      	sxth	r1, r2


	if(thetaElec >= 360){
 80007f0:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 80007f4:	da52      	bge.n	800089c <computePositionWithEncoder+0xc8>
	thetaElec = 90 + 360*TIM3->CNT/300;
 80007f6:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <computePositionWithEncoder+0x120>)
		thetaElec -= 360;
	}

	if(thetaElec != thetaElecOld){
 80007f8:	483f      	ldr	r0, [pc, #252]	; (80008f8 <computePositionWithEncoder+0x124>)
	thetaElec = 90 + 360*TIM3->CNT/300;
 80007fa:	8019      	strh	r1, [r3, #0]
	if(thetaElec != thetaElecOld){
 80007fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000800:	428b      	cmp	r3, r1
 8000802:	b292      	uxth	r2, r2
 8000804:	d055      	beq.n	80008b2 <computePositionWithEncoder+0xde>
		dTheta = thetaElec - thetaElecOld;
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b21a      	sxth	r2, r3
		if(dTheta > 300){
 800080a:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
void computePositionWithEncoder(){
 800080e:	b4f0      	push	{r4, r5, r6, r7}
		dTheta = thetaElec - thetaElecOld;
 8000810:	b29b      	uxth	r3, r3
		if(dTheta > 300){
 8000812:	dd53      	ble.n	80008bc <computePositionWithEncoder+0xe8>
			dTheta -= 360;
 8000814:	4c39      	ldr	r4, [pc, #228]	; (80008fc <computePositionWithEncoder+0x128>)
 8000816:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800081a:	b21a      	sxth	r2, r3
 800081c:	8022      	strh	r2, [r4, #0]

		speedTemp = dTheta*833/x;

		x = 1;

		if(k>9){
 800081e:	4d38      	ldr	r5, [pc, #224]	; (8000900 <computePositionWithEncoder+0x12c>)
		speedTemp = dTheta*833/x;
 8000820:	4c38      	ldr	r4, [pc, #224]	; (8000904 <computePositionWithEncoder+0x130>)
		thetaElecOld = thetaElec;
 8000822:	8001      	strh	r1, [r0, #0]
		speedTemp = dTheta*833/x;
 8000824:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		if(k>9){
 8000828:	8829      	ldrh	r1, [r5, #0]
		speedTemp = dTheta*833/x;
 800082a:	4e37      	ldr	r6, [pc, #220]	; (8000908 <computePositionWithEncoder+0x134>)
 800082c:	8820      	ldrh	r0, [r4, #0]
 800082e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000832:	eb02 1302 	add.w	r3, r2, r2, lsl #4
		if(k>9){
 8000836:	2909      	cmp	r1, #9
		x = 1;
 8000838:	f04f 0201 	mov.w	r2, #1
		speedTemp = dTheta*833/x;
 800083c:	fb93 f3f0 	sdiv	r3, r3, r0
 8000840:	b218      	sxth	r0, r3
		x = 1;
 8000842:	8022      	strh	r2, [r4, #0]
		speedTemp = dTheta*833/x;
 8000844:	8030      	strh	r0, [r6, #0]
		if(k>9){
 8000846:	d942      	bls.n	80008ce <computePositionWithEncoder+0xfa>
			sum += (speedTemp - speedArr[e]);
 8000848:	4c30      	ldr	r4, [pc, #192]	; (800090c <computePositionWithEncoder+0x138>)
 800084a:	4e31      	ldr	r6, [pc, #196]	; (8000910 <computePositionWithEncoder+0x13c>)
 800084c:	8822      	ldrh	r2, [r4, #0]
 800084e:	4d31      	ldr	r5, [pc, #196]	; (8000914 <computePositionWithEncoder+0x140>)
 8000850:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
 8000854:	8829      	ldrh	r1, [r5, #0]
			speedArr[e] = speedTemp;
 8000856:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
			e++;
 800085a:	3201      	adds	r2, #1
 800085c:	b292      	uxth	r2, r2
			sum += (speedTemp - speedArr[e]);
 800085e:	1bc9      	subs	r1, r1, r7
 8000860:	440b      	add	r3, r1

			if(e>9){
 8000862:	2a09      	cmp	r2, #9
			sum += (speedTemp - speedArr[e]);
 8000864:	b21b      	sxth	r3, r3
				e = 0;
 8000866:	bf88      	it	hi
 8000868:	2200      	movhi	r2, #0
			sum += (speedTemp - speedArr[e]);
 800086a:	802b      	strh	r3, [r5, #0]
				e = 0;
 800086c:	8022      	strh	r2, [r4, #0]
			sum += speedTemp;
			speedArr[k] = speedTemp;
			k++;
		}

		speed = sum/10;
 800086e:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <computePositionWithEncoder+0x144>)
		wr = (float)speed*1047/10000;
 8000870:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800091c <computePositionWithEncoder+0x148>
		speed = sum/10;
 8000874:	482a      	ldr	r0, [pc, #168]	; (8000920 <computePositionWithEncoder+0x14c>)
		wr = (float)speed*1047/10000;
 8000876:	492b      	ldr	r1, [pc, #172]	; (8000924 <computePositionWithEncoder+0x150>)
		speed = sum/10;
 8000878:	fb82 4203 	smull	r4, r2, r2, r3
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8000882:	b21b      	sxth	r3, r3
		wr = (float)speed*1047/10000;
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
//		}

	} else {
		x++;
	}
}
 800088c:	bcf0      	pop	{r4, r5, r6, r7}
		wr = (float)speed*1047/10000;
 800088e:	ee67 7a87 	vmul.f32	s15, s15, s14
		speed = sum/10;
 8000892:	8003      	strh	r3, [r0, #0]
		wr = (float)speed*1047/10000;
 8000894:	edc1 7a00 	vstr	s15, [r1]
			SpeedPIController();
 8000898:	f000 ba96 	b.w	8000dc8 <SpeedPIController>
		thetaElec -= 360;
 800089c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <computePositionWithEncoder+0x120>)
 80008a2:	b219      	sxth	r1, r3
 80008a4:	8001      	strh	r1, [r0, #0]
	if(thetaElec != thetaElecOld){
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <computePositionWithEncoder+0x124>)
		thetaElec -= 360;
 80008a8:	b29a      	uxth	r2, r3
	if(thetaElec != thetaElecOld){
 80008aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d1a9      	bne.n	8000806 <computePositionWithEncoder+0x32>
		x++;
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <computePositionWithEncoder+0x130>)
 80008b4:	8813      	ldrh	r3, [r2, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	8013      	strh	r3, [r2, #0]
 80008ba:	4770      	bx	lr
		} else if (dTheta < -300){
 80008bc:	f512 7f96 	cmn.w	r2, #300	; 0x12c
 80008c0:	da10      	bge.n	80008e4 <computePositionWithEncoder+0x110>
			dTheta += 360;
 80008c2:	4c0e      	ldr	r4, [pc, #56]	; (80008fc <computePositionWithEncoder+0x128>)
 80008c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	8022      	strh	r2, [r4, #0]
 80008cc:	e7a7      	b.n	800081e <computePositionWithEncoder+0x4a>
			sum += speedTemp;
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <computePositionWithEncoder+0x140>)
			speedArr[k] = speedTemp;
 80008d0:	4e0f      	ldr	r6, [pc, #60]	; (8000910 <computePositionWithEncoder+0x13c>)
			sum += speedTemp;
 80008d2:	8814      	ldrh	r4, [r2, #0]
			speedArr[k] = speedTemp;
 80008d4:	f826 0011 	strh.w	r0, [r6, r1, lsl #1]
			sum += speedTemp;
 80008d8:	4423      	add	r3, r4
 80008da:	b21b      	sxth	r3, r3
			k++;
 80008dc:	3101      	adds	r1, #1
			sum += speedTemp;
 80008de:	8013      	strh	r3, [r2, #0]
			k++;
 80008e0:	8029      	strh	r1, [r5, #0]
 80008e2:	e7c4      	b.n	800086e <computePositionWithEncoder+0x9a>
		dTheta = thetaElec - thetaElecOld;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <computePositionWithEncoder+0x128>)
 80008e6:	801a      	strh	r2, [r3, #0]
 80008e8:	e799      	b.n	800081e <computePositionWithEncoder+0x4a>
 80008ea:	bf00      	nop
 80008ec:	40000400 	.word	0x40000400
 80008f0:	1b4e81b5 	.word	0x1b4e81b5
 80008f4:	2000007c 	.word	0x2000007c
 80008f8:	20000070 	.word	0x20000070
 80008fc:	20000086 	.word	0x20000086
 8000900:	20000210 	.word	0x20000210
 8000904:	20000022 	.word	0x20000022
 8000908:	2000020c 	.word	0x2000020c
 800090c:	20000212 	.word	0x20000212
 8000910:	200001e4 	.word	0x200001e4
 8000914:	2000020e 	.word	0x2000020e
 8000918:	66666667 	.word	0x66666667
 800091c:	3dd66cf4 	.word	0x3dd66cf4
 8000920:	20000104 	.word	0x20000104
 8000924:	20000110 	.word	0x20000110

08000928 <measureADC>:

/**
 * This function computes 2 phase currents and 2 BEMFs
 *
 */
void measureADC(){
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_ADC_Start_DMA(&hadc1, Iabc, 4);
 800092a:	4c15      	ldr	r4, [pc, #84]	; (8000980 <measureADC+0x58>)
 800092c:	4815      	ldr	r0, [pc, #84]	; (8000984 <measureADC+0x5c>)

	// Compute abc currents
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 800092e:	4d16      	ldr	r5, [pc, #88]	; (8000988 <measureADC+0x60>)
 8000930:	4f16      	ldr	r7, [pc, #88]	; (800098c <measureADC+0x64>)
	Ib = -((int16_t)Iabc[1]-1916);
 8000932:	4e17      	ldr	r6, [pc, #92]	; (8000990 <measureADC+0x68>)
	HAL_ADC_Start_DMA(&hadc1, Iabc, 4);
 8000934:	4621      	mov	r1, r4
 8000936:	2204      	movs	r2, #4
 8000938:	f001 f9d2 	bl	8001ce0 <HAL_ADC_Start_DMA>
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 800093c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000940:	f5c3 61f4 	rsb	r1, r3, #1952	; 0x7a0
 8000944:	3104      	adds	r1, #4
 8000946:	2367      	movs	r3, #103	; 0x67
	Ic = -((int16_t)Iabc[2]-1955);
 8000948:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 800094c:	fb03 f301 	mul.w	r3, r3, r1
 8000950:	fb85 1503 	smull	r1, r5, r5, r3
	Vbus = ((int16_t)Iabc[3]) + 1;
 8000954:	68e4      	ldr	r4, [r4, #12]
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 8000956:	17db      	asrs	r3, r3, #31
 8000958:	ebc3 1365 	rsb	r3, r3, r5, asr #5
	Ib = -((int16_t)Iabc[1]-1916);
 800095c:	f5c0 61ef 	rsb	r1, r0, #1912	; 0x778
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 8000960:	803b      	strh	r3, [r7, #0]
	Vbus = ((int16_t)Iabc[3]) + 1;
 8000962:	1c60      	adds	r0, r4, #1
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <measureADC+0x6c>)
	Ic = -((int16_t)Iabc[2]-1955);
 8000966:	4c0c      	ldr	r4, [pc, #48]	; (8000998 <measureADC+0x70>)
	Vbus = ((int16_t)Iabc[3]) + 1;
 8000968:	8018      	strh	r0, [r3, #0]
	Ic = -((int16_t)Iabc[2]-1955);
 800096a:	f5c2 62f4 	rsb	r2, r2, #1952	; 0x7a0
	Ib = -((int16_t)Iabc[1]-1916);
 800096e:	3104      	adds	r1, #4
	Ic = -((int16_t)Iabc[2]-1955);
 8000970:	3203      	adds	r2, #3
	Ib = -((int16_t)Iabc[1]-1916);
 8000972:	8031      	strh	r1, [r6, #0]
	Ic = -((int16_t)Iabc[2]-1955);
 8000974:	8022      	strh	r2, [r4, #0]

	// Compute rotor position
	computePositionWithEncoder();
//	fluxObserver();
}
 8000976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	computePositionWithEncoder();
 800097a:	f7ff bf2b 	b.w	80007d4 <computePositionWithEncoder>
 800097e:	bf00      	nop
 8000980:	2000008c 	.word	0x2000008c
 8000984:	200002e8 	.word	0x200002e8
 8000988:	51eb851f 	.word	0x51eb851f
 800098c:	2000007e 	.word	0x2000007e
 8000990:	200000d2 	.word	0x200000d2
 8000994:	200001a4 	.word	0x200001a4
 8000998:	200000fa 	.word	0x200000fa

0800099c <sinLowRes>:
 * @param short thetaElec
 * @return short angle between 0 to 360 degrees
 */
short limitTheta(short thetaElec){
	if(thetaElec < 0){
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <sinLowRes+0x74>)
	if(thetaElec < 0){
 800099e:	2800      	cmp	r0, #0
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 80009a0:	fb83 2300 	smull	r2, r3, r3, r0
 80009a4:	eb03 0200 	add.w	r2, r3, r0
 80009a8:	ea4f 73e0 	mov.w	r3, r0, asr #31
 80009ac:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	if(thetaElec < 0){
 80009b0:	db20      	blt.n	80009f4 <sinLowRes+0x58>
	} else {
		return (thetaElec - 360*(thetaElec/360));
 80009b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80009b6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80009ba:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 80009be:	b283      	uxth	r3, r0
 80009c0:	b200      	sxth	r0, r0
 * @return short sin(x) range -512 to +512
 */
short sinLowRes(short thetaElec){
  thetaElec = limitTheta(thetaElec);

  if(thetaElec <= 90){
 80009c2:	285a      	cmp	r0, #90	; 0x5a
 80009c4:	dd12      	ble.n	80009ec <sinLowRes+0x50>
    return sinTableLowRes[thetaElec];
  } else if(thetaElec > 90 && thetaElec <=180){
 80009c6:	f1a3 025b 	sub.w	r2, r3, #91	; 0x5b
 80009ca:	2a59      	cmp	r2, #89	; 0x59
 80009cc:	d90c      	bls.n	80009e8 <sinLowRes+0x4c>
    return sinTableLowRes[180 - thetaElec];
  } else if(thetaElec > 180 && thetaElec <= 270){
 80009ce:	3bb5      	subs	r3, #181	; 0xb5
 80009d0:	2b59      	cmp	r3, #89	; 0x59
    return -sinTableLowRes[thetaElec - 180];
 80009d2:	bf98      	it	ls
 80009d4:	38b4      	subls	r0, #180	; 0xb4
  } else {
    return -sinTableLowRes[360 - thetaElec];
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <sinLowRes+0x78>)
 80009d8:	bf88      	it	hi
 80009da:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
 80009de:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80009e2:	4240      	negs	r0, r0
 80009e4:	b200      	sxth	r0, r0
  }
}
 80009e6:	4770      	bx	lr
    return sinTableLowRes[180 - thetaElec];
 80009e8:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <sinLowRes+0x78>)
 80009ee:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80009f2:	4770      	bx	lr
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	3301      	adds	r3, #1
 80009f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80009fc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000a00:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8000a04:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 8000a08:	b283      	uxth	r3, r0
 8000a0a:	b200      	sxth	r0, r0
 8000a0c:	e7d9      	b.n	80009c2 <sinLowRes+0x26>
 8000a0e:	bf00      	nop
 8000a10:	b60b60b7 	.word	0xb60b60b7
 8000a14:	08004914 	.word	0x08004914

08000a18 <parkTransform>:

/**
 * This function computes Park transform
 *
 */
void parkTransform(short a, short b, short c, struct directQuad *Xdq){
 8000a18:	b4f0      	push	{r4, r5, r6, r7}
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a1a:	4c16      	ldr	r4, [pc, #88]	; (8000a74 <parkTransform+0x5c>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a1c:	4e16      	ldr	r6, [pc, #88]	; (8000a78 <parkTransform+0x60>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a1e:	8824      	ldrh	r4, [r4, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a20:	8836      	ldrh	r6, [r6, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a22:	4d16      	ldr	r5, [pc, #88]	; (8000a7c <parkTransform+0x64>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a24:	4f16      	ldr	r7, [pc, #88]	; (8000a80 <parkTransform+0x68>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a26:	882d      	ldrh	r5, [r5, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a28:	883f      	ldrh	r7, [r7, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a2a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000a84 <parkTransform+0x6c>
 8000a2e:	fb14 fc01 	smulbb	ip, r4, r1
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a32:	fb16 f101 	smulbb	r1, r6, r1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a36:	4c14      	ldr	r4, [pc, #80]	; (8000a88 <parkTransform+0x70>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a38:	4e14      	ldr	r6, [pc, #80]	; (8000a8c <parkTransform+0x74>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a3a:	8824      	ldrh	r4, [r4, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a3c:	8836      	ldrh	r6, [r6, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a3e:	fb15 c500 	smlabb	r5, r5, r0, ip
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a42:	fb10 1007 	smlabb	r0, r0, r7, r1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a46:	fb14 5102 	smlabb	r1, r4, r2, r5
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a4a:	fb12 0206 	smlabb	r2, r2, r6, r0
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a4e:	ee07 1a10 	vmov	s14, r1
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a52:	ee07 2a90 	vmov	s15, r2
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a5e:	ee27 7a26 	vmul.f32	s14, s14, s13
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a62:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 8000a66:	bcf0      	pop	{r4, r5, r6, r7}
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a68:	ed83 7a00 	vstr	s14, [r3]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a6c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200000c4 	.word	0x200000c4
 8000a78:	20000074 	.word	0x20000074
 8000a7c:	200000d6 	.word	0x200000d6
 8000a80:	20000100 	.word	0x20000100
 8000a84:	3aaaaaab 	.word	0x3aaaaaab
 8000a88:	2000019c 	.word	0x2000019c
 8000a8c:	2000008a 	.word	0x2000008a

08000a90 <computeSinCos>:
/**
 * This function computes sine & cosine values for given thetaElec to be used in park transform
 *
 */
void computeSinCos(){
	sin000 = sin2(thetaElec);
 8000a90:	4bc4      	ldr	r3, [pc, #784]	; (8000da4 <computeSinCos+0x314>)
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000a92:	4ac5      	ldr	r2, [pc, #788]	; (8000da8 <computeSinCos+0x318>)
	sin000 = sin2(thetaElec);
 8000a94:	f9b3 3000 	ldrsh.w	r3, [r3]
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000a98:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9c:	18d1      	adds	r1, r2, r3
	if(thetaElec < 0){
 8000a9e:	2b00      	cmp	r3, #0
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000aa0:	ea4f 72e3 	mov.w	r2, r3, asr #31
void computeSinCos(){
 8000aa4:	b430      	push	{r4, r5}
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000aa6:	ebc2 2221 	rsb	r2, r2, r1, asr #8
	if(thetaElec < 0){
 8000aaa:	f2c0 8144 	blt.w	8000d36 <computeSinCos+0x2a6>
		return (thetaElec - 360*(thetaElec/360));
 8000aae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ab2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 8000abc:	b291      	uxth	r1, r2
 8000abe:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000ac0:	2a5a      	cmp	r2, #90	; 0x5a
 8000ac2:	dd12      	ble.n	8000aea <computeSinCos+0x5a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000ac4:	f1a1 005b 	sub.w	r0, r1, #91	; 0x5b
 8000ac8:	2859      	cmp	r0, #89	; 0x59
 8000aca:	d90c      	bls.n	8000ae6 <computeSinCos+0x56>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000acc:	39b5      	subs	r1, #181	; 0xb5
 8000ace:	2959      	cmp	r1, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000ad0:	bf98      	it	ls
 8000ad2:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000ad4:	49b5      	ldr	r1, [pc, #724]	; (8000dac <computeSinCos+0x31c>)
 8000ad6:	bf88      	it	hi
 8000ad8:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000adc:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000ae0:	4264      	negs	r4, r4
 8000ae2:	b224      	sxth	r4, r4
 8000ae4:	e004      	b.n	8000af0 <computeSinCos+0x60>
    return sinTable[180 - thetaElec];
 8000ae6:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000aea:	49b0      	ldr	r1, [pc, #704]	; (8000dac <computeSinCos+0x31c>)
 8000aec:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	sin000 = sin2(thetaElec);
 8000af0:	4daf      	ldr	r5, [pc, #700]	; (8000db0 <computeSinCos+0x320>)
  return sin2(thetaElec+90);
 8000af2:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 8000af6:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000af8:	2a00      	cmp	r2, #0
	sin000 = sin2(thetaElec);
 8000afa:	802c      	strh	r4, [r5, #0]
  return sin2(thetaElec+90);
 8000afc:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000afe:	f2c0 8106 	blt.w	8000d0e <computeSinCos+0x27e>
		return (thetaElec - 360*(thetaElec/360));
 8000b02:	4ca9      	ldr	r4, [pc, #676]	; (8000da8 <computeSinCos+0x318>)
 8000b04:	fb84 5402 	smull	r5, r4, r4, r2
 8000b08:	4414      	add	r4, r2
 8000b0a:	17d2      	asrs	r2, r2, #31
 8000b0c:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000b10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b14:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000b18:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000b1c:	b290      	uxth	r0, r2
 8000b1e:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000b20:	2a5a      	cmp	r2, #90	; 0x5a
 8000b22:	dd10      	ble.n	8000b46 <computeSinCos+0xb6>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000b24:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000b28:	2c59      	cmp	r4, #89	; 0x59
 8000b2a:	d90a      	bls.n	8000b42 <computeSinCos+0xb2>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000b2c:	38b5      	subs	r0, #181	; 0xb5
 8000b2e:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000b30:	bf94      	ite	ls
 8000b32:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000b34:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000b38:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000b3c:	4264      	negs	r4, r4
 8000b3e:	b224      	sxth	r4, r4
 8000b40:	e003      	b.n	8000b4a <computeSinCos+0xba>
    return sinTable[180 - thetaElec];
 8000b42:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000b46:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	cos000 = cos2(thetaElec);
 8000b4a:	4d9a      	ldr	r5, [pc, #616]	; (8000db4 <computeSinCos+0x324>)
	sin120 = sin2(thetaElec+120);
 8000b4c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000b50:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000b52:	2a00      	cmp	r2, #0
	cos000 = cos2(thetaElec);
 8000b54:	802c      	strh	r4, [r5, #0]
	sin120 = sin2(thetaElec+120);
 8000b56:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000b58:	f2c0 80c5 	blt.w	8000ce6 <computeSinCos+0x256>
		return (thetaElec - 360*(thetaElec/360));
 8000b5c:	4c92      	ldr	r4, [pc, #584]	; (8000da8 <computeSinCos+0x318>)
 8000b5e:	fb84 5402 	smull	r5, r4, r4, r2
 8000b62:	4414      	add	r4, r2
 8000b64:	17d2      	asrs	r2, r2, #31
 8000b66:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000b6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b6e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000b72:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000b76:	b290      	uxth	r0, r2
 8000b78:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000b7a:	2a5a      	cmp	r2, #90	; 0x5a
 8000b7c:	dd10      	ble.n	8000ba0 <computeSinCos+0x110>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000b7e:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000b82:	2c59      	cmp	r4, #89	; 0x59
 8000b84:	d90a      	bls.n	8000b9c <computeSinCos+0x10c>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000b86:	38b5      	subs	r0, #181	; 0xb5
 8000b88:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000b8a:	bf94      	ite	ls
 8000b8c:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000b8e:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000b92:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000b96:	4264      	negs	r4, r4
 8000b98:	b224      	sxth	r4, r4
 8000b9a:	e003      	b.n	8000ba4 <computeSinCos+0x114>
    return sinTable[180 - thetaElec];
 8000b9c:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000ba0:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	sin120 = sin2(thetaElec+120);
 8000ba4:	4d84      	ldr	r5, [pc, #528]	; (8000db8 <computeSinCos+0x328>)
	sin240 = sin2(thetaElec+240);
 8000ba6:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8000baa:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000bac:	2a00      	cmp	r2, #0
	sin120 = sin2(thetaElec+120);
 8000bae:	802c      	strh	r4, [r5, #0]
	sin240 = sin2(thetaElec+240);
 8000bb0:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000bb2:	f2c0 8084 	blt.w	8000cbe <computeSinCos+0x22e>
		return (thetaElec - 360*(thetaElec/360));
 8000bb6:	4c7c      	ldr	r4, [pc, #496]	; (8000da8 <computeSinCos+0x318>)
 8000bb8:	fb84 5402 	smull	r5, r4, r4, r2
 8000bbc:	4414      	add	r4, r2
 8000bbe:	17d2      	asrs	r2, r2, #31
 8000bc0:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000bc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000bc8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000bcc:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000bd0:	b290      	uxth	r0, r2
 8000bd2:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000bd4:	2a5a      	cmp	r2, #90	; 0x5a
 8000bd6:	dd10      	ble.n	8000bfa <computeSinCos+0x16a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000bd8:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000bdc:	2c59      	cmp	r4, #89	; 0x59
 8000bde:	d90a      	bls.n	8000bf6 <computeSinCos+0x166>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000be0:	38b5      	subs	r0, #181	; 0xb5
 8000be2:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000be4:	bf94      	ite	ls
 8000be6:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000be8:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000bec:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000bf0:	4264      	negs	r4, r4
 8000bf2:	b224      	sxth	r4, r4
 8000bf4:	e003      	b.n	8000bfe <computeSinCos+0x16e>
    return sinTable[180 - thetaElec];
 8000bf6:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000bfa:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	sin240 = sin2(thetaElec+240);
 8000bfe:	4d6f      	ldr	r5, [pc, #444]	; (8000dbc <computeSinCos+0x32c>)
  return sin2(thetaElec+90);
 8000c00:	f103 00d2 	add.w	r0, r3, #210	; 0xd2
 8000c04:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000c06:	2a00      	cmp	r2, #0
	sin240 = sin2(thetaElec+240);
 8000c08:	802c      	strh	r4, [r5, #0]
  return sin2(thetaElec+90);
 8000c0a:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000c0c:	f2c0 80b5 	blt.w	8000d7a <computeSinCos+0x2ea>
		return (thetaElec - 360*(thetaElec/360));
 8000c10:	4c65      	ldr	r4, [pc, #404]	; (8000da8 <computeSinCos+0x318>)
 8000c12:	fb84 5402 	smull	r5, r4, r4, r2
 8000c16:	4414      	add	r4, r2
 8000c18:	17d2      	asrs	r2, r2, #31
 8000c1a:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000c1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000c22:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000c26:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000c2a:	b290      	uxth	r0, r2
 8000c2c:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000c2e:	2a5a      	cmp	r2, #90	; 0x5a
 8000c30:	dd10      	ble.n	8000c54 <computeSinCos+0x1c4>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000c32:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000c36:	2c59      	cmp	r4, #89	; 0x59
 8000c38:	d90a      	bls.n	8000c50 <computeSinCos+0x1c0>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000c3a:	38b5      	subs	r0, #181	; 0xb5
 8000c3c:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000c3e:	bf94      	ite	ls
 8000c40:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000c42:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000c46:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000c4a:	4264      	negs	r4, r4
 8000c4c:	b224      	sxth	r4, r4
 8000c4e:	e003      	b.n	8000c58 <computeSinCos+0x1c8>
    return sinTable[180 - thetaElec];
 8000c50:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000c54:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	cos120 = cos2(thetaElec+120);
 8000c58:	4d59      	ldr	r5, [pc, #356]	; (8000dc0 <computeSinCos+0x330>)
  return sin2(thetaElec+90);
 8000c5a:	f503 70a5 	add.w	r0, r3, #330	; 0x14a
 8000c5e:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000c60:	2a00      	cmp	r2, #0
	cos120 = cos2(thetaElec+120);
 8000c62:	802c      	strh	r4, [r5, #0]
  return sin2(thetaElec+90);
 8000c64:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000c66:	db74      	blt.n	8000d52 <computeSinCos+0x2c2>
		return (thetaElec - 360*(thetaElec/360));
 8000c68:	4b4f      	ldr	r3, [pc, #316]	; (8000da8 <computeSinCos+0x318>)
 8000c6a:	fb83 4302 	smull	r4, r3, r3, r2
 8000c6e:	4413      	add	r3, r2
 8000c70:	17d2      	asrs	r2, r2, #31
 8000c72:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8000c76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000c7a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000c7e:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000c82:	b293      	uxth	r3, r2
 8000c84:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000c86:	2a5a      	cmp	r2, #90	; 0x5a
 8000c88:	dd13      	ble.n	8000cb2 <computeSinCos+0x222>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000c8a:	f1a3 005b 	sub.w	r0, r3, #91	; 0x5b
 8000c8e:	2859      	cmp	r0, #89	; 0x59
 8000c90:	d90d      	bls.n	8000cae <computeSinCos+0x21e>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000c92:	3bb5      	subs	r3, #181	; 0xb5
 8000c94:	2b59      	cmp	r3, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000c96:	bf94      	ite	ls
 8000c98:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000c9a:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
	cos240 = cos2(thetaElec+240);
}
 8000c9e:	bc30      	pop	{r4, r5}
    return -sinTable[360 - thetaElec];
 8000ca0:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
	cos240 = cos2(thetaElec+240);
 8000ca4:	4a47      	ldr	r2, [pc, #284]	; (8000dc4 <computeSinCos+0x334>)
    return -sinTable[360 - thetaElec];
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	b21b      	sxth	r3, r3
	cos240 = cos2(thetaElec+240);
 8000caa:	8013      	strh	r3, [r2, #0]
}
 8000cac:	4770      	bx	lr
    return sinTable[180 - thetaElec];
 8000cae:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000cb2:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
	cos240 = cos2(thetaElec+240);
 8000cb6:	4a43      	ldr	r2, [pc, #268]	; (8000dc4 <computeSinCos+0x334>)
}
 8000cb8:	bc30      	pop	{r4, r5}
	cos240 = cos2(thetaElec+240);
 8000cba:	8013      	strh	r3, [r2, #0]
}
 8000cbc:	4770      	bx	lr
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000cbe:	483a      	ldr	r0, [pc, #232]	; (8000da8 <computeSinCos+0x318>)
 8000cc0:	fb80 4002 	smull	r4, r0, r0, r2
 8000cc4:	4410      	add	r0, r2
 8000cc6:	17d2      	asrs	r2, r2, #31
 8000cc8:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000ccc:	b212      	sxth	r2, r2
 8000cce:	3201      	adds	r2, #1
 8000cd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000cd4:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8000cd8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000cdc:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000ce0:	b290      	uxth	r0, r2
 8000ce2:	b212      	sxth	r2, r2
 8000ce4:	e776      	b.n	8000bd4 <computeSinCos+0x144>
 8000ce6:	4830      	ldr	r0, [pc, #192]	; (8000da8 <computeSinCos+0x318>)
 8000ce8:	fb80 4002 	smull	r4, r0, r0, r2
 8000cec:	4410      	add	r0, r2
 8000cee:	17d2      	asrs	r2, r2, #31
 8000cf0:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000cf4:	b212      	sxth	r2, r2
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000cfc:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 8000d00:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d04:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000d08:	b290      	uxth	r0, r2
 8000d0a:	b212      	sxth	r2, r2
 8000d0c:	e735      	b.n	8000b7a <computeSinCos+0xea>
 8000d0e:	4826      	ldr	r0, [pc, #152]	; (8000da8 <computeSinCos+0x318>)
 8000d10:	fb80 4002 	smull	r4, r0, r0, r2
 8000d14:	4410      	add	r0, r2
 8000d16:	17d2      	asrs	r2, r2, #31
 8000d18:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000d1c:	b212      	sxth	r2, r2
 8000d1e:	3201      	adds	r2, #1
 8000d20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d24:	f503 70e1 	add.w	r0, r3, #450	; 0x1c2
 8000d28:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d2c:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000d30:	b290      	uxth	r0, r2
 8000d32:	b212      	sxth	r2, r2
 8000d34:	e6f4      	b.n	8000b20 <computeSinCos+0x90>
 8000d36:	b212      	sxth	r2, r2
 8000d38:	3201      	adds	r2, #1
 8000d3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8000d44:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8000d48:	eba2 02c1 	sub.w	r2, r2, r1, lsl #3
 8000d4c:	b291      	uxth	r1, r2
 8000d4e:	b212      	sxth	r2, r2
 8000d50:	e6b6      	b.n	8000ac0 <computeSinCos+0x30>
 8000d52:	4815      	ldr	r0, [pc, #84]	; (8000da8 <computeSinCos+0x318>)
 8000d54:	fb80 4002 	smull	r4, r0, r0, r2
 8000d58:	4410      	add	r0, r2
 8000d5a:	17d2      	asrs	r2, r2, #31
 8000d5c:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000d60:	b212      	sxth	r2, r2
 8000d62:	3201      	adds	r2, #1
 8000d64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d68:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8000d6c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d70:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 8000d74:	b293      	uxth	r3, r2
 8000d76:	b212      	sxth	r2, r2
 8000d78:	e785      	b.n	8000c86 <computeSinCos+0x1f6>
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <computeSinCos+0x318>)
 8000d7c:	fb80 4002 	smull	r4, r0, r0, r2
 8000d80:	4410      	add	r0, r2
 8000d82:	17d2      	asrs	r2, r2, #31
 8000d84:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000d88:	b212      	sxth	r2, r2
 8000d8a:	3201      	adds	r2, #1
 8000d8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d90:	f203 203a 	addw	r0, r3, #570	; 0x23a
 8000d94:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d98:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000d9c:	b290      	uxth	r0, r2
 8000d9e:	b212      	sxth	r2, r2
 8000da0:	e745      	b.n	8000c2e <computeSinCos+0x19e>
 8000da2:	bf00      	nop
 8000da4:	2000007c 	.word	0x2000007c
 8000da8:	b60b60b7 	.word	0xb60b60b7
 8000dac:	0800485c 	.word	0x0800485c
 8000db0:	200000d6 	.word	0x200000d6
 8000db4:	20000100 	.word	0x20000100
 8000db8:	2000019c 	.word	0x2000019c
 8000dbc:	200000c4 	.word	0x200000c4
 8000dc0:	2000008a 	.word	0x2000008a
 8000dc4:	20000074 	.word	0x20000074

08000dc8 <SpeedPIController>:
int16_t Ki = 20;

float Iterm = 0;
void SpeedPIController(){
	speedReq = 1000;
	error = speedReq - speed;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <SpeedPIController+0xa8>)
	Kterm = (float)(error*2)/1000;
	Iterm += (float)(error*2)/10000;
 8000dca:	4a2a      	ldr	r2, [pc, #168]	; (8000e74 <SpeedPIController+0xac>)
	error = speedReq - speed;
 8000dcc:	881b      	ldrh	r3, [r3, #0]
	Iterm += (float)(error*2)/10000;
 8000dce:	ed92 7a00 	vldr	s14, [r2]
 8000dd2:	eddf 5a29 	vldr	s11, [pc, #164]	; 8000e78 <SpeedPIController+0xb0>
	Kterm = (float)(error*2)/1000;
 8000dd6:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8000e7c <SpeedPIController+0xb4>
 8000dda:	4929      	ldr	r1, [pc, #164]	; (8000e80 <SpeedPIController+0xb8>)
	speedReq = 1000;
 8000ddc:	4829      	ldr	r0, [pc, #164]	; (8000e84 <SpeedPIController+0xbc>)
	error = speedReq - speed;
 8000dde:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000de2:	b21b      	sxth	r3, r3
void SpeedPIController(){
 8000de4:	b430      	push	{r4, r5}
	Kterm = (float)(error*2)/1000;
 8000de6:	005d      	lsls	r5, r3, #1
 8000de8:	ee07 5a90 	vmov	s15, r5
 8000dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	error = speedReq - speed;
 8000df0:	4c25      	ldr	r4, [pc, #148]	; (8000e88 <SpeedPIController+0xc0>)
	Iterm += (float)(error*2)/10000;
 8000df2:	eea7 7aa5 	vfma.f32	s14, s15, s11
	error = speedReq - speed;
 8000df6:	8023      	strh	r3, [r4, #0]
	speedReq = 1000;
 8000df8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8

	if(Iterm > 1){
 8000dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	Kterm = (float)(error*2)/1000;
 8000e00:	ee67 7a86 	vmul.f32	s15, s15, s12
	if(Iterm > 1){
 8000e04:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	speedReq = 1000;
 8000e0c:	8003      	strh	r3, [r0, #0]
	Kterm = (float)(error*2)/1000;
 8000e0e:	edc1 7a00 	vstr	s15, [r1]
	if(Iterm > 1){
 8000e12:	dd1f      	ble.n	8000e54 <SpeedPIController+0x8c>
		Iterm = 1;
 8000e14:	edc2 6a00 	vstr	s13, [r2]
 8000e18:	eeb0 7a66 	vmov.f32	s14, s13
	} else if(Iterm < -1){
		Iterm = -1;
	}

	IqRef = (Kterm+Iterm);
 8000e1c:	ee77 7a87 	vadd.f32	s15, s15, s14

	if(IqRef > 3){
 8000e20:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	dd04      	ble.n	8000e38 <SpeedPIController+0x70>
		IqRef = 3;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <SpeedPIController+0xc4>)
	} else if(IqRef < -3){
		IqRef = -3;
	}
}
 8000e30:	bc30      	pop	{r4, r5}
		IqRef = 3;
 8000e32:	ed83 7a00 	vstr	s14, [r3]
}
 8000e36:	4770      	bx	lr
	} else if(IqRef < -3){
 8000e38:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
		IqRef = -3;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <SpeedPIController+0xc4>)
	} else if(IqRef < -3){
 8000e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8000e46:	bc30      	pop	{r4, r5}
	IqRef = (Kterm+Iterm);
 8000e48:	bf54      	ite	pl
 8000e4a:	edc3 7a00 	vstrpl	s15, [r3]
		IqRef = -3;
 8000e4e:	ed83 7a00 	vstrmi	s14, [r3]
}
 8000e52:	4770      	bx	lr
	} else if(Iterm < -1){
 8000e54:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000e58:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Iterm += (float)(error*2)/10000;
 8000e60:	bf52      	itee	pl
 8000e62:	ed82 7a00 	vstrpl	s14, [r2]
		Iterm = -1;
 8000e66:	eeb0 7a66 	vmovmi.f32	s14, s13
 8000e6a:	edc2 6a00 	vstrmi	s13, [r2]
 8000e6e:	e7d5      	b.n	8000e1c <SpeedPIController+0x54>
 8000e70:	20000104 	.word	0x20000104
 8000e74:	20000068 	.word	0x20000068
 8000e78:	38d1b717 	.word	0x38d1b717
 8000e7c:	3a83126f 	.word	0x3a83126f
 8000e80:	200000e0 	.word	0x200000e0
 8000e84:	20000072 	.word	0x20000072
 8000e88:	20000102 	.word	0x20000102
 8000e8c:	200000c0 	.word	0x200000c0

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b530      	push	{r4, r5, lr}
 8000e92:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e94:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e96:	2258      	movs	r2, #88	; 0x58
 8000e98:	a810      	add	r0, sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9a:	e9cd 1100 	strd	r1, r1, [sp]
 8000e9e:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	910a      	str	r1, [sp, #40]	; 0x28
 8000ea4:	9108      	str	r1, [sp, #32]
 8000ea6:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eaa:	f003 fcc3 	bl	8004834 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec2:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8000ec8:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed0:	9109      	str	r1, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f001 fca5 	bl	8002820 <HAL_RCC_OscConfig>
 8000ed6:	b108      	cbz	r0, 8000edc <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eda:	e7fe      	b.n	8000eda <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000edc:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	240f      	movs	r4, #15
 8000eea:	2502      	movs	r5, #2
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eec:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ef2:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef6:	f001 ff81 	bl	8002dfc <HAL_RCC_ClockConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b108      	cbz	r0, 8000f02 <SystemClock_Config+0x72>
 8000efe:	b672      	cpsid	i
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000f02:	4c09      	ldr	r4, [pc, #36]	; (8000f28 <SystemClock_Config+0x98>)
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f04:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000f06:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0e:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000f10:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000f12:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000f14:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f16:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f18:	f002 f8bc 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	b108      	cbz	r0, 8000f22 <SystemClock_Config+0x92>
 8000f1e:	b672      	cpsid	i
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <SystemClock_Config+0x90>
}
 8000f22:	b027      	add	sp, #156	; 0x9c
 8000f24:	bd30      	pop	{r4, r5, pc}
 8000f26:	bf00      	nop
 8000f28:	00201082 	.word	0x00201082

08000f2c <main>:
{
 8000f2c:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	2400      	movs	r4, #0
{
 8000f30:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8000f32:	f000 fcbb 	bl	80018ac <HAL_Init>
  SystemClock_Config();
 8000f36:	f7ff ffab 	bl	8000e90 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000f3e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	4ea6      	ldr	r6, [pc, #664]	; (80011dc <main+0x2b0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f48:	4da5      	ldr	r5, [pc, #660]	; (80011e0 <main+0x2b4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f4e:	6173      	str	r3, [r6, #20]
 8000f50:	6973      	ldr	r3, [r6, #20]
 8000f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f56:	9303      	str	r3, [sp, #12]
 8000f58:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	6973      	ldr	r3, [r6, #20]
 8000f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f60:	6173      	str	r3, [r6, #20]
 8000f62:	6973      	ldr	r3, [r6, #20]
 8000f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f68:	9304      	str	r3, [sp, #16]
 8000f6a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	6973      	ldr	r3, [r6, #20]
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	6173      	str	r3, [r6, #20]
 8000f74:	6973      	ldr	r3, [r6, #20]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f7c:	4622      	mov	r2, r4
 8000f7e:	2120      	movs	r1, #32
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f86:	f001 fc3f 	bl	8002808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000f8a:	4896      	ldr	r0, [pc, #600]	; (80011e4 <main+0x2b8>)
 8000f8c:	4622      	mov	r2, r4
 8000f8e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f92:	f001 fc39 	bl	8002808 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f96:	2220      	movs	r2, #32
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f001 fb1e 	bl	80025ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000fb0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	488a      	ldr	r0, [pc, #552]	; (80011e4 <main+0x2b8>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000fc2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc6:	f001 fb11 	bl	80025ec <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fca:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	f885 4020 	strb.w	r4, [r5, #32]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6173      	str	r3, [r6, #20]
 8000fd6:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd8:	62ec      	str	r4, [r5, #44]	; 0x2c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe2:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe4:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6173      	str	r3, [r6, #20]
 8000fee:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff0:	606c      	str	r4, [r5, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	9302      	str	r3, [sp, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc1.Instance = ADC1;
 8000ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001000:	9a02      	ldr	r2, [sp, #8]
  hadc1.Instance = ADC1;
 8001002:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001004:	2201      	movs	r2, #1
  hadc1.Init.NbrOfConversion = 4;
 8001006:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001008:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800100a:	8329      	strh	r1, [r5, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001010:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8001014:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8001018:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8001020:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001022:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001024:	62aa      	str	r2, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001026:	612a      	str	r2, [r5, #16]
  hadc1.Init.NbrOfConversion = 4;
 8001028:	61eb      	str	r3, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102a:	616b      	str	r3, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	f000 fd02 	bl	8001a34 <HAL_ADC_Init>
 8001030:	b108      	cbz	r0, 8001036 <main+0x10a>
 8001032:	b672      	cpsid	i
  while (1)
 8001034:	e7fe      	b.n	8001034 <main+0x108>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001036:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001038:	a90e      	add	r1, sp, #56	; 0x38
 800103a:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800103c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800103e:	f001 f901 	bl	8002244 <HAL_ADCEx_MultiModeConfigChannel>
 8001042:	b108      	cbz	r0, 8001048 <main+0x11c>
 8001044:	b672      	cpsid	i
  while (1)
 8001046:	e7fe      	b.n	8001046 <main+0x11a>
  sConfig.Channel = ADC_CHANNEL_1;
 8001048:	2201      	movs	r2, #1
 800104a:	2301      	movs	r3, #1
 800104c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_1;
 8001052:	2200      	movs	r2, #0
 8001054:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001058:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800105c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	f000 ff30 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8001064:	b108      	cbz	r0, 800106a <main+0x13e>
 8001066:	b672      	cpsid	i
  while (1)
 8001068:	e7fe      	b.n	8001068 <main+0x13c>
  sConfig.Channel = ADC_CHANNEL_7;
 800106a:	2207      	movs	r2, #7
 800106c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	a916      	add	r1, sp, #88	; 0x58
 8001070:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_7;
 8001072:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	f000 ff25 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 800107a:	b108      	cbz	r0, 8001080 <main+0x154>
 800107c:	b672      	cpsid	i
  while (1)
 800107e:	e7fe      	b.n	800107e <main+0x152>
  sConfig.Channel = ADC_CHANNEL_6;
 8001080:	2206      	movs	r2, #6
 8001082:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	a916      	add	r1, sp, #88	; 0x58
 8001086:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 8001088:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	f000 ff1a 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8001090:	b108      	cbz	r0, 8001096 <main+0x16a>
 8001092:	b672      	cpsid	i
  while (1)
 8001094:	e7fe      	b.n	8001094 <main+0x168>
  sConfig.Channel = ADC_CHANNEL_2;
 8001096:	2202      	movs	r2, #2
 8001098:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	4628      	mov	r0, r5
 800109c:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_2;
 800109e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	f000 ff0f 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 80010a6:	4604      	mov	r4, r0
 80010a8:	b108      	cbz	r0, 80010ae <main+0x182>
 80010aa:	b672      	cpsid	i
  while (1)
 80010ac:	e7fe      	b.n	80010ac <main+0x180>
  htim1.Instance = TIM1;
 80010ae:	4d4e      	ldr	r5, [pc, #312]	; (80011e8 <main+0x2bc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b0:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b2:	4601      	mov	r1, r0
 80010b4:	222c      	movs	r2, #44	; 0x2c
 80010b6:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80010bc:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 80010c0:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80010cc:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ce:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d0:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d2:	f003 fbaf 	bl	8004834 <memset>
  htim1.Instance = TIM1;
 80010d6:	4b45      	ldr	r3, [pc, #276]	; (80011ec <main+0x2c0>)
 80010d8:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 24;
 80010da:	2018      	movs	r0, #24
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010dc:	2120      	movs	r1, #32
  htim1.Init.Period = 72;
 80010de:	2248      	movs	r2, #72	; 0x48
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e0:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 24;
 80010e2:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e4:	4628      	mov	r0, r5
  htim1.Init.Period = 72;
 80010e6:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ec:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ee:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010f0:	f002 f9b4 	bl	800345c <HAL_TIM_Base_Init>
 80010f4:	b108      	cbz	r0, 80010fa <main+0x1ce>
 80010f6:	b672      	cpsid	i
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <main+0x1cc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010fe:	a90a      	add	r1, sp, #40	; 0x28
 8001100:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001102:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001104:	f002 fc20 	bl	8003948 <HAL_TIM_ConfigClockSource>
 8001108:	b108      	cbz	r0, 800110e <main+0x1e2>
 800110a:	b672      	cpsid	i
  while (1)
 800110c:	e7fe      	b.n	800110c <main+0x1e0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800110e:	4628      	mov	r0, r5
 8001110:	f002 fa22 	bl	8003558 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	b108      	cbz	r0, 800111c <main+0x1f0>
 8001118:	b672      	cpsid	i
  while (1)
 800111a:	e7fe      	b.n	800111a <main+0x1ee>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800111c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800111e:	2470      	movs	r4, #112	; 0x70
 8001120:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001124:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001126:	e9cd 4506 	strd	r4, r5, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112c:	f002 ff1c 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	b108      	cbz	r0, 8001136 <main+0x20a>
 8001132:	b672      	cpsid	i
  while (1)
 8001134:	e7fe      	b.n	8001134 <main+0x208>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001136:	2460      	movs	r4, #96	; 0x60
 8001138:	2500      	movs	r5, #0
 800113a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001140:	2600      	movs	r6, #0
 8001142:	2700      	movs	r7, #0
 8001144:	2404      	movs	r4, #4
 8001146:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001148:	4827      	ldr	r0, [pc, #156]	; (80011e8 <main+0x2bc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800114a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8001152:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001156:	f002 fdb1 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 800115a:	b108      	cbz	r0, 8001160 <main+0x234>
 800115c:	b672      	cpsid	i
  while (1)
 800115e:	e7fe      	b.n	800115e <main+0x232>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001160:	4821      	ldr	r0, [pc, #132]	; (80011e8 <main+0x2bc>)
 8001162:	2204      	movs	r2, #4
 8001164:	a90e      	add	r1, sp, #56	; 0x38
 8001166:	f002 fda9 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 800116a:	b108      	cbz	r0, 8001170 <main+0x244>
 800116c:	b672      	cpsid	i
  while (1)
 800116e:	e7fe      	b.n	800116e <main+0x242>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001170:	481d      	ldr	r0, [pc, #116]	; (80011e8 <main+0x2bc>)
 8001172:	2208      	movs	r2, #8
 8001174:	a90e      	add	r1, sp, #56	; 0x38
 8001176:	f002 fda1 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 800117a:	b108      	cbz	r0, 8001180 <main+0x254>
 800117c:	b672      	cpsid	i
  while (1)
 800117e:	e7fe      	b.n	800117e <main+0x252>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001180:	2470      	movs	r4, #112	; 0x70
 8001182:	2548      	movs	r5, #72	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001184:	4818      	ldr	r0, [pc, #96]	; (80011e8 <main+0x2bc>)
 8001186:	220c      	movs	r2, #12
 8001188:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800118a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800118e:	f002 fd95 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 8001192:	b108      	cbz	r0, 8001198 <main+0x26c>
 8001194:	b672      	cpsid	i
  while (1)
 8001196:	e7fe      	b.n	8001196 <main+0x26a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800119c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80011a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a8:	2300      	movs	r3, #0
 80011aa:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80011b8:	2200      	movs	r2, #0
 80011ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011be:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c2:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011c4:	2200      	movs	r2, #0
 80011c6:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <main+0x2bc>)
 80011ca:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011cc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d0:	f002 ff24 	bl	800401c <HAL_TIMEx_ConfigBreakDeadTime>
 80011d4:	4604      	mov	r4, r0
 80011d6:	b158      	cbz	r0, 80011f0 <main+0x2c4>
 80011d8:	b672      	cpsid	i
  while (1)
 80011da:	e7fe      	b.n	80011da <main+0x2ae>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	200002e8 	.word	0x200002e8
 80011e4:	48000800 	.word	0x48000800
 80011e8:	200003c0 	.word	0x200003c0
 80011ec:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 80011f0:	4862      	ldr	r0, [pc, #392]	; (800137c <main+0x450>)
 80011f2:	f000 fa49 	bl	8001688 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80011f6:	4862      	ldr	r0, [pc, #392]	; (8001380 <main+0x454>)
 80011f8:	4a62      	ldr	r2, [pc, #392]	; (8001384 <main+0x458>)
  huart2.Init.BaudRate = 2250000;
 80011fa:	4963      	ldr	r1, [pc, #396]	; (8001388 <main+0x45c>)
  huart2.Instance = USART2;
 80011fc:	6002      	str	r2, [r0, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fe:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 2250000;
 8001200:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001202:	6142      	str	r2, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001208:	f44f 6200 	mov.w	r2, #2048	; 0x800
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800120c:	61c1      	str	r1, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800120e:	6202      	str	r2, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001210:	2120      	movs	r1, #32
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001216:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121c:	6184      	str	r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800121e:	6241      	str	r1, [r0, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001220:	63c2      	str	r2, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	f003 f8a3 	bl	800436c <HAL_UART_Init>
 8001226:	b108      	cbz	r0, 800122c <main+0x300>
 8001228:	b672      	cpsid	i
  while (1)
 800122a:	e7fe      	b.n	800122a <main+0x2fe>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800122c:	4c57      	ldr	r4, [pc, #348]	; (800138c <main+0x460>)
  hadc2.Instance = ADC2;
 800122e:	4958      	ldr	r1, [pc, #352]	; (8001390 <main+0x464>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001230:	9016      	str	r0, [sp, #88]	; 0x58
  hadc2.Init.NbrOfConversion = 2;
 8001232:	2202      	movs	r2, #2
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001234:	2304      	movs	r3, #4
  hadc2.Init.NbrOfConversion = 2;
 8001236:	61e2      	str	r2, [r4, #28]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001238:	f44f 7280 	mov.w	r2, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 800123c:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 8001240:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001244:	e9c4 0001 	strd	r0, r0, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001248:	901b      	str	r0, [sp, #108]	; 0x6c
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800124a:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124e:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001250:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001254:	60e0      	str	r0, [r4, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001256:	6360      	str	r0, [r4, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001258:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800125a:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	2301      	movs	r3, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800125e:	8322      	strh	r2, [r4, #24]
  hadc2.Instance = ADC2;
 8001260:	6021      	str	r1, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001262:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001264:	6123      	str	r3, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001266:	f000 fbe5 	bl	8001a34 <HAL_ADC_Init>
 800126a:	b108      	cbz	r0, 8001270 <main+0x344>
 800126c:	b672      	cpsid	i
  while (1)
 800126e:	e7fe      	b.n	800126e <main+0x342>
  sConfig.Channel = ADC_CHANNEL_4;
 8001270:	2204      	movs	r2, #4
 8001272:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001274:	a916      	add	r1, sp, #88	; 0x58
 8001276:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001278:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 800127c:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8001280:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001284:	f000 fe1e 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8001288:	b108      	cbz	r0, 800128e <main+0x362>
 800128a:	b672      	cpsid	i
  while (1)
 800128c:	e7fe      	b.n	800128c <main+0x360>
  sConfig.Channel = ADC_CHANNEL_9;
 800128e:	2209      	movs	r2, #9
 8001290:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001292:	4620      	mov	r0, r4
 8001294:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_9;
 8001296:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800129a:	f000 fe13 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 800129e:	b108      	cbz	r0, 80012a4 <main+0x378>
 80012a0:	b672      	cpsid	i
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <main+0x376>
  htim3.Instance = TIM3;
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <main+0x468>)
 80012a6:	4d3c      	ldr	r5, [pc, #240]	; (8001398 <main+0x46c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	6118      	str	r0, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012aa:	2280      	movs	r2, #128	; 0x80
  htim3.Init.Period = 299;
 80012ac:	f240 142b 	movw	r4, #299	; 0x12b
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	e9c3 0001 	strd	r0, r0, [r3, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b4:	619a      	str	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80012ba:	2202      	movs	r2, #2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC2Filter = 0;
 80012be:	901e      	str	r0, [sp, #120]	; 0x78
  htim3.Instance = TIM3;
 80012c0:	601d      	str	r5, [r3, #0]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012c2:	4618      	mov	r0, r3
  htim3.Init.Period = 299;
 80012c4:	60dc      	str	r4, [r3, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80012cc:	2201      	movs	r2, #1
 80012ce:	2300      	movs	r3, #0
 80012d0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80012d4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012d8:	a916      	add	r1, sp, #88	; 0x58
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80012da:	2200      	movs	r2, #0
 80012dc:	2302      	movs	r3, #2
 80012de:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012e2:	f002 fa55 	bl	8003790 <HAL_TIM_Encoder_Init>
 80012e6:	b108      	cbz	r0, 80012ec <main+0x3c0>
 80012e8:	b672      	cpsid	i
  while (1)
 80012ea:	e7fe      	b.n	80012ea <main+0x3be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ee:	4829      	ldr	r0, [pc, #164]	; (8001394 <main+0x468>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f2:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f6:	f002 fe37 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4604      	mov	r4, r0
 80012fc:	b108      	cbz	r0, 8001302 <main+0x3d6>
 80012fe:	b672      	cpsid	i
  while (1)
 8001300:	e7fe      	b.n	8001300 <main+0x3d4>
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001302:	4602      	mov	r2, r0
 8001304:	4601      	mov	r1, r0
 8001306:	201b      	movs	r0, #27
 8001308:	f001 f840 	bl	800238c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800130c:	201b      	movs	r0, #27
 800130e:	f001 f875 	bl	80023fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001312:	4622      	mov	r2, r4
 8001314:	4621      	mov	r1, r4
 8001316:	2010      	movs	r0, #16
 8001318:	f001 f838 	bl	800238c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800131c:	2010      	movs	r0, #16
 800131e:	f001 f86d 	bl	80023fc <HAL_NVIC_EnableIRQ>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001322:	213c      	movs	r1, #60	; 0x3c
 8001324:	481b      	ldr	r0, [pc, #108]	; (8001394 <main+0x468>)
 8001326:	f002 fae9 	bl	80038fc <HAL_TIM_Encoder_Start>
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800132a:	4621      	mov	r1, r4
 800132c:	481b      	ldr	r0, [pc, #108]	; (800139c <main+0x470>)
 800132e:	f000 fd83 	bl	8001e38 <HAL_ADCEx_Calibration_Start>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <main+0x474>)
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133a:	f001 fa65 	bl	8002808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <main+0x474>)
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001346:	f001 fa5f 	bl	8002808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <main+0x474>)
 800134e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001352:	f001 fa59 	bl	8002808 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8001356:	210c      	movs	r1, #12
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <main+0x450>)
 800135a:	f002 f9b7 	bl	80036cc <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800135e:	4621      	mov	r1, r4
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <main+0x450>)
 8001362:	f002 f975 	bl	8003650 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001366:	2104      	movs	r1, #4
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <main+0x450>)
 800136a:	f002 f971 	bl	8003650 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800136e:	2108      	movs	r1, #8
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <main+0x450>)
 8001372:	f002 f96d 	bl	8003650 <HAL_TIM_PWM_Start>
		receiveUART();
 8001376:	f7ff f973 	bl	8000660 <receiveUART>
  while (1)
 800137a:	e7fe      	b.n	800137a <main+0x44e>
 800137c:	200003c0 	.word	0x200003c0
 8001380:	20000114 	.word	0x20000114
 8001384:	40004400 	.word	0x40004400
 8001388:	00225510 	.word	0x00225510
 800138c:	20000258 	.word	0x20000258
 8001390:	50000100 	.word	0x50000100
 8001394:	200002a8 	.word	0x200002a8
 8001398:	40000400 	.word	0x40000400
 800139c:	200002e8 	.word	0x200002e8
 80013a0:	48000800 	.word	0x48000800

080013a4 <Error_Handler>:
 80013a4:	b672      	cpsid	i
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <Error_Handler+0x2>

080013a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_MspInit+0x30>)
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	619a      	str	r2, [r3, #24]
 80013b2:	699a      	ldr	r2, [r3, #24]
{
 80013b4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	f002 0201 	and.w	r2, r2, #1
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013c4:	61da      	str	r2, [r3, #28]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80013d0:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80013d4:	f000 bfc6 	b.w	8002364 <HAL_NVIC_SetPriorityGrouping>
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80013e0:	6802      	ldr	r2, [r0, #0]
{
 80013e2:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80013e6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80013ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
{
 80013f2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80013f6:	d04d      	beq.n	8001494 <HAL_ADC_MspInit+0xb8>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80013f8:	4b55      	ldr	r3, [pc, #340]	; (8001550 <HAL_ADC_MspInit+0x174>)
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d002      	beq.n	8001404 <HAL_ADC_MspInit+0x28>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013fe:	b00d      	add	sp, #52	; 0x34
 8001400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001404:	4a53      	ldr	r2, [pc, #332]	; (8001554 <HAL_ADC_MspInit+0x178>)
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800140a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800140c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800140e:	f000 8093 	beq.w	8001538 <HAL_ADC_MspInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <HAL_ADC_MspInit+0x17c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001414:	4851      	ldr	r0, [pc, #324]	; (800155c <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA2_Channel1;
 8001418:	4d51      	ldr	r5, [pc, #324]	; (8001560 <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001426:	9204      	str	r2, [sp, #16]
 8001428:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800143c:	2208      	movs	r2, #8
 800143e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001446:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f001 f8cf 	bl	80025ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	a906      	add	r1, sp, #24
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001458:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f001 f8c5 	bl	80025ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001462:	4b40      	ldr	r3, [pc, #256]	; (8001564 <HAL_ADC_MspInit+0x188>)
 8001464:	602b      	str	r3, [r5, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001468:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800146c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001470:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001472:	60e8      	str	r0, [r5, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001474:	e9c5 1204 	strd	r1, r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001478:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800147a:	61ab      	str	r3, [r5, #24]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147c:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800147e:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001480:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001482:	f000 ffe3 	bl	800244c <HAL_DMA_Init>
 8001486:	2800      	cmp	r0, #0
 8001488:	d148      	bne.n	800151c <HAL_ADC_MspInit+0x140>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800148a:	63a5      	str	r5, [r4, #56]	; 0x38
 800148c:	626c      	str	r4, [r5, #36]	; 0x24
}
 800148e:	b00d      	add	sp, #52	; 0x34
 8001490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001494:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <HAL_ADC_MspInit+0x178>)
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800149a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800149c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800149e:	d040      	beq.n	8001522 <HAL_ADC_MspInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_ADC_MspInit+0x17c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	482e      	ldr	r0, [pc, #184]	; (800155c <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	695a      	ldr	r2, [r3, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80014a6:	4d30      	ldr	r5, [pc, #192]	; (8001568 <HAL_ADC_MspInit+0x18c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80014b4:	9201      	str	r2, [sp, #4]
 80014b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|M1_CURR_AMPL_V_Pin;
 80014ca:	f04f 0803 	mov.w	r8, #3
 80014ce:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|M1_CURR_AMPL_V_Pin;
 80014d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f001 f886 	bl	80025ec <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	a906      	add	r1, sp, #24
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|GPIO_PIN_1;
 80014e6:	e9cd 8906 	strd	r8, r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f001 f87e 	bl	80025ec <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014f8:	2320      	movs	r3, #32
    hdma_adc1.Instance = DMA1_Channel1;
 80014fa:	f8df c070 	ldr.w	ip, [pc, #112]	; 800156c <HAL_ADC_MspInit+0x190>
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014fe:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001500:	2780      	movs	r7, #128	; 0x80
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001502:	e9c5 1204 	strd	r1, r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001506:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001508:	606e      	str	r6, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800150a:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800150c:	61ee      	str	r6, [r5, #28]
    hdma_adc1.Instance = DMA1_Channel1;
 800150e:	f8c5 c000 	str.w	ip, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001512:	60ef      	str	r7, [r5, #12]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001514:	f000 ff9a 	bl	800244c <HAL_DMA_Init>
 8001518:	2800      	cmp	r0, #0
 800151a:	d0b6      	beq.n	800148a <HAL_ADC_MspInit+0xae>
      Error_Handler();
 800151c:	f7ff ff42 	bl	80013a4 <Error_Handler>
 8001520:	e7b3      	b.n	800148a <HAL_ADC_MspInit+0xae>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_ADC_MspInit+0x17c>)
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	9b00      	ldr	r3, [sp, #0]
 8001536:	e7b3      	b.n	80014a0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_ADC_MspInit+0x17c>)
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	9303      	str	r3, [sp, #12]
 800154a:	9b03      	ldr	r3, [sp, #12]
 800154c:	e761      	b.n	8001412 <HAL_ADC_MspInit+0x36>
 800154e:	bf00      	nop
 8001550:	50000100 	.word	0x50000100
 8001554:	2000006c 	.word	0x2000006c
 8001558:	40021000 	.word	0x40021000
 800155c:	48000800 	.word	0x48000800
 8001560:	20000400 	.word	0x20000400
 8001564:	40020408 	.word	0x40020408
 8001568:	2000037c 	.word	0x2000037c
 800156c:	40020008 	.word	0x40020008

08001570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001570:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8001572:	6802      	ldr	r2, [r0, #0]
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_TIM_Base_MspInit+0x78>)
{
 8001576:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 800157a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001580:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001584:	9406      	str	r4, [sp, #24]
  if(htim_base->Instance==TIM1)
 8001586:	d001      	beq.n	800158c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001588:	b008      	add	sp, #32
 800158a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800158c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001590:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80015b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b8:	2302      	movs	r3, #2
 80015ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 80015be:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80015c0:	2300      	movs	r3, #0
 80015c2:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80015c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 80015ce:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f001 f80c 	bl	80025ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015d4:	4622      	mov	r2, r4
 80015d6:	4621      	mov	r1, r4
 80015d8:	2018      	movs	r0, #24
 80015da:	f000 fed7 	bl	800238c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80015de:	2018      	movs	r0, #24
 80015e0:	f000 ff0c 	bl	80023fc <HAL_NVIC_EnableIRQ>
}
 80015e4:	b008      	add	sp, #32
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
 80015e8:	40012c00 	.word	0x40012c00

080015ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015ec:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 80015ee:	6801      	ldr	r1, [r0, #0]
 80015f0:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_TIM_Encoder_MspInit+0x94>)
{
 80015f2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 80015f6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80015fc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001600:	9308      	str	r3, [sp, #32]
  if(htim_encoder->Instance==TIM3)
 8001602:	d001      	beq.n	8001608 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001604:	b00a      	add	sp, #40	; 0x28
 8001606:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800160c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001610:	2401      	movs	r4, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	f042 0202 	orr.w	r2, r2, #2
 8001618:	61da      	str	r2, [r3, #28]
 800161a:	69da      	ldr	r2, [r3, #28]
 800161c:	f002 0202 	and.w	r2, r2, #2
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001632:	9202      	str	r2, [sp, #8]
 8001634:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001644:	9303      	str	r3, [sp, #12]
 8001646:	9803      	ldr	r0, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001648:	2210      	movs	r2, #16
 800164a:	2302      	movs	r3, #2
 800164c:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800164e:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	a904      	add	r1, sp, #16
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001656:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800165a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f000 ffc4 	bl	80025ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <HAL_TIM_Encoder_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800166a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800166e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001672:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f000 ffb9 	bl	80025ec <HAL_GPIO_Init>
}
 800167a:	b00a      	add	sp, #40	; 0x28
 800167c:	bd70      	pop	{r4, r5, r6, pc}
 800167e:	bf00      	nop
 8001680:	40000400 	.word	0x40000400
 8001684:	48000800 	.word	0x48000800

08001688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001688:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800168a:	6801      	ldr	r1, [r0, #0]
 800168c:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <HAL_TIM_MspPostInit+0x5c>)
{
 800168e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8001692:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001698:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800169c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800169e:	d001      	beq.n	80016a4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016a0:	b008      	add	sp, #32
 80016a2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016ac:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016b8:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80016c0:	2202      	movs	r2, #2
 80016c2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80016c6:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 80016ca:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80016d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80016d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f000 ff87 	bl	80025ec <HAL_GPIO_Init>
}
 80016de:	b008      	add	sp, #32
 80016e0:	bd70      	pop	{r4, r5, r6, pc}
 80016e2:	bf00      	nop
 80016e4:	40012c00 	.word	0x40012c00

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80016ea:	6802      	ldr	r2, [r0, #0]
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_UART_MspInit+0xc0>)
{
 80016ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80016f2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80016f8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80016fc:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 80016fe:	d001      	beq.n	8001704 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001700:	b008      	add	sp, #32
 8001702:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001704:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001708:	4e28      	ldr	r6, [pc, #160]	; (80017ac <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001710:	61da      	str	r2, [r3, #28]
 8001712:	69da      	ldr	r2, [r3, #28]
 8001714:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800172c:	220c      	movs	r2, #12
 800172e:	2302      	movs	r3, #2
 8001730:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001734:	2200      	movs	r2, #0
 8001736:	2300      	movs	r3, #0
 8001738:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001744:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f000 ff4f 	bl	80025ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800174e:	4918      	ldr	r1, [pc, #96]	; (80017b0 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001750:	6074      	str	r4, [r6, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001752:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001754:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001756:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001758:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175c:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800175e:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001760:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001762:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001764:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001766:	f000 fe71 	bl	800244c <HAL_DMA_Init>
 800176a:	b9b0      	cbnz	r0, 800179a <HAL_UART_MspInit+0xb2>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800176c:	4c11      	ldr	r4, [pc, #68]	; (80017b4 <HAL_UART_MspInit+0xcc>)
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_UART_MspInit+0xd0>)
 8001770:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001772:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001778:	66ee      	str	r6, [r5, #108]	; 0x6c
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800177a:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177c:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001780:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001784:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001788:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800178a:	6061      	str	r1, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800178c:	f000 fe5e 	bl	800244c <HAL_DMA_Init>
 8001790:	b930      	cbnz	r0, 80017a0 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001792:	66ac      	str	r4, [r5, #104]	; 0x68
 8001794:	6265      	str	r5, [r4, #36]	; 0x24
}
 8001796:	b008      	add	sp, #32
 8001798:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800179a:	f7ff fe03 	bl	80013a4 <Error_Handler>
 800179e:	e7e5      	b.n	800176c <HAL_UART_MspInit+0x84>
      Error_Handler();
 80017a0:	f7ff fe00 	bl	80013a4 <Error_Handler>
 80017a4:	e7f5      	b.n	8001792 <HAL_UART_MspInit+0xaa>
 80017a6:	bf00      	nop
 80017a8:	40004400 	.word	0x40004400
 80017ac:	20000214 	.word	0x20000214
 80017b0:	4002006c 	.word	0x4002006c
 80017b4:	20000338 	.word	0x20000338
 80017b8:	40020080 	.word	0x40020080

080017bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 b888 	b.w	80018d0 <HAL_IncTick>

080017c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80017c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	  handleRxCommands();
 80017c2:	f7fe ff57 	bl	8000674 <handleRxCommands>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017ca:	4801      	ldr	r0, [pc, #4]	; (80017d0 <DMA1_Channel6_IRQHandler+0x10>)
 80017cc:	f000 bec4 	b.w	8002558 <HAL_DMA_IRQHandler>
 80017d0:	20000214 	.word	0x20000214

080017d4 <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <TIM1_BRK_TIM15_IRQHandler+0x8>)
 80017d6:	f002 b967 	b.w	8003aa8 <HAL_TIM_IRQHandler>
 80017da:	bf00      	nop
 80017dc:	200003c0 	.word	0x200003c0

080017e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	  executeAll();
 80017e2:	f7fe ff9f 	bl	8000724 <executeAll>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 80017ea:	4801      	ldr	r0, [pc, #4]	; (80017f0 <TIM1_CC_IRQHandler+0x10>)
 80017ec:	f002 b95c 	b.w	8003aa8 <HAL_TIM_IRQHandler>
 80017f0:	200003c0 	.word	0x200003c0

080017f4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SystemInit+0x18>)
 80017f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001806:	6099      	str	r1, [r3, #8]
#endif
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001814:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001816:	e003      	b.n	8001820 <LoopCopyDataInit>

08001818 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800181a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800181c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800181e:	3104      	adds	r1, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001824:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001826:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001828:	d3f6      	bcc.n	8001818 <CopyDataInit>
	ldr	r2, =_sbss
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LoopForever+0x12>)
	b	LoopFillZerobss
 800182c:	e002      	b.n	8001834 <LoopFillZerobss>

0800182e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800182e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001830:	f842 3b04 	str.w	r3, [r2], #4

08001834 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <LoopForever+0x16>)
	cmp	r2, r3
 8001836:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001838:	d3f9      	bcc.n	800182e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800183a:	f7ff ffdb 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f002 ffd5 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001842:	f7ff fb73 	bl	8000f2c <main>

08001846 <LoopForever>:

LoopForever:
    b LoopForever
 8001846:	e7fe      	b.n	8001846 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001848:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800184c:	08004a10 	.word	0x08004a10
	ldr	r0, =_sdata
 8001850:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001854:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8001858:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 800185c:	20000448 	.word	0x20000448

08001860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC1_2_IRQHandler>
	...

08001864 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_InitTick+0x3c>)
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_InitTick+0x40>)
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
{
 800186e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001874:	fbb0 f0f2 	udiv	r0, r0, r2
 8001878:	fbb3 f0f0 	udiv	r0, r3, r0
 800187c:	f000 fdcc 	bl	8002418 <HAL_SYSTICK_Config>
 8001880:	b908      	cbnz	r0, 8001886 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	2d0f      	cmp	r5, #15
 8001884:	d901      	bls.n	800188a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8001888:	bd38      	pop	{r3, r4, r5, pc}
 800188a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	4602      	mov	r2, r0
 800188e:	4629      	mov	r1, r5
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 fd7a 	bl	800238c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_InitTick+0x44>)
 800189a:	4620      	mov	r0, r4
 800189c:	601d      	str	r5, [r3, #0]
}
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	2000002c 	.word	0x2000002c
 80018a4:	20000028 	.word	0x20000028
 80018a8:	20000030 	.word	0x20000030

080018ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_Init+0x20>)
{
 80018ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	6813      	ldr	r3, [r2, #0]
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 fd53 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2004      	movs	r0, #4
 80018c0:	f7ff ffd0 	bl	8001864 <HAL_InitTick>
  HAL_MspInit();
 80018c4:	f7ff fd70 	bl	80013a8 <HAL_MspInit>
}
 80018c8:	2000      	movs	r0, #0
 80018ca:	bd08      	pop	{r3, pc}
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x10>)
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_IncTick+0x14>)
 80018d4:	6811      	ldr	r1, [r2, #0]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	440b      	add	r3, r1
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000444 	.word	0x20000444
 80018e4:	2000002c 	.word	0x2000002c

080018e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <HAL_GetTick+0x8>)
 80018ea:	6818      	ldr	r0, [r3, #0]
}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000444 	.word	0x20000444

080018f4 <HAL_ADC_ConvCpltCallback>:
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <HAL_ADC_ConvHalfCpltCallback>:
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop

080018fc <HAL_ADC_ErrorCallback>:
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001900:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001902:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001908:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800190a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001912:	f7ff bff3 	b.w	80018fc <HAL_ADC_ErrorCallback>
 8001916:	bf00      	nop

08001918 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001918:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800191a:	f7ff bfed 	b.w	80018f8 <HAL_ADC_ConvHalfCpltCallback>
 800191e:	bf00      	nop

08001920 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001920:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001924:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001928:	d118      	bne.n	800195c <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800192a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800192c:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800192e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001934:	68ca      	ldr	r2, [r1, #12]
 8001936:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800193a:	d10c      	bne.n	8001956 <ADC_DMAConvCplt+0x36>
 800193c:	7e5a      	ldrb	r2, [r3, #25]
 800193e:	b952      	cbnz	r2, 8001956 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194a:	04d2      	lsls	r2, r2, #19
 800194c:	d403      	bmi.n	8001956 <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff bfcc 	b.w	80018f4 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4718      	bx	r3
 8001962:	bf00      	nop

08001964 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001964:	6802      	ldr	r2, [r0, #0]
{
 8001966:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001968:	6893      	ldr	r3, [r2, #8]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001972:	2000      	movs	r0, #0
}
 8001974:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001976:	6811      	ldr	r1, [r2, #0]
 8001978:	07c9      	lsls	r1, r1, #31
 800197a:	d5fa      	bpl.n	8001972 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800197c:	6891      	ldr	r1, [r2, #8]
 800197e:	f001 010d 	and.w	r1, r1, #13
 8001982:	2901      	cmp	r1, #1
 8001984:	4604      	mov	r4, r0
 8001986:	d009      	beq.n	800199c <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001988:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800198a:	f042 0210 	orr.w	r2, r2, #16
 800198e:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001990:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001992:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 8001996:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	6462      	str	r2, [r4, #68]	; 0x44
}
 800199a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 800199c:	6893      	ldr	r3, [r2, #8]
 800199e:	2103      	movs	r1, #3
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6093      	str	r3, [r2, #8]
 80019a6:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80019a8:	f7ff ff9e 	bl	80018e8 <HAL_GetTick>
 80019ac:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	07db      	lsls	r3, r3, #31
 80019b4:	d5dd      	bpl.n	8001972 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019b6:	f7ff ff97 	bl	80018e8 <HAL_GetTick>
 80019ba:	1b40      	subs	r0, r0, r5
 80019bc:	2802      	cmp	r0, #2
 80019be:	d9f6      	bls.n	80019ae <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6463      	str	r3, [r4, #68]	; 0x44
 80019d0:	2001      	movs	r0, #1
}
 80019d2:	bd38      	pop	{r3, r4, r5, pc}

080019d4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019d4:	6802      	ldr	r2, [r0, #0]
{
 80019d6:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019d8:	6893      	ldr	r3, [r2, #8]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
{
 80019e0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e2:	d020      	beq.n	8001a26 <ADC_Enable+0x52>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019e4:	6891      	ldr	r1, [r2, #8]
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <ADC_Enable+0x5c>)
 80019e8:	4219      	tst	r1, r3
 80019ea:	d009      	beq.n	8001a00 <ADC_Enable+0x2c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6463      	str	r3, [r4, #68]	; 0x44
 80019fc:	2001      	movs	r0, #1
}
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a00:	6893      	ldr	r3, [r2, #8]
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001a08:	f7ff ff6e 	bl	80018e8 <HAL_GetTick>
 8001a0c:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a0e:	e004      	b.n	8001a1a <ADC_Enable+0x46>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a10:	f7ff ff6a 	bl	80018e8 <HAL_GetTick>
 8001a14:	1b43      	subs	r3, r0, r5
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d8e8      	bhi.n	80019ec <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	07db      	lsls	r3, r3, #31
 8001a20:	d5f6      	bpl.n	8001a10 <ADC_Enable+0x3c>
  return HAL_OK;
 8001a22:	2000      	movs	r0, #0
}
 8001a24:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a26:	6813      	ldr	r3, [r2, #0]
 8001a28:	07d9      	lsls	r1, r3, #31
 8001a2a:	d5db      	bpl.n	80019e4 <ADC_Enable+0x10>
  return HAL_OK;
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	e7f9      	b.n	8001a24 <ADC_Enable+0x50>
 8001a30:	8000003f 	.word	0x8000003f

08001a34 <HAL_ADC_Init>:
{
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	f000 809d 	beq.w	8001b7c <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a44:	f013 0310 	ands.w	r3, r3, #16
 8001a48:	4604      	mov	r4, r0
 8001a4a:	d118      	bne.n	8001a7e <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	f000 8097 	beq.w	8001b82 <HAL_ADC_Init+0x14e>
 8001a54:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a56:	6891      	ldr	r1, [r2, #8]
 8001a58:	00cd      	lsls	r5, r1, #3
 8001a5a:	f140 8083 	bpl.w	8001b64 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a5e:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a60:	0088      	lsls	r0, r1, #2
 8001a62:	d47f      	bmi.n	8001b64 <HAL_ADC_Init+0x130>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a64:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001a66:	06c9      	lsls	r1, r1, #27
 8001a68:	d400      	bmi.n	8001a6c <HAL_ADC_Init+0x38>
 8001a6a:	b163      	cbz	r3, 8001a86 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a6e:	f023 0312 	bic.w	r3, r3, #18
 8001a72:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8001a76:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001a7a:	b002      	add	sp, #8
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a80:	06da      	lsls	r2, r3, #27
 8001a82:	d4f3      	bmi.n	8001a6c <HAL_ADC_Init+0x38>
 8001a84:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a86:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001a88:	f010 0004 	ands.w	r0, r0, #4
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001a90:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8001a94:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a98:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9e:	f000 80e3 	beq.w	8001c68 <HAL_ADC_Init+0x234>
 8001aa2:	4b87      	ldr	r3, [pc, #540]	; (8001cc0 <HAL_ADC_Init+0x28c>)
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f000 80e7 	beq.w	8001c78 <HAL_ADC_Init+0x244>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001aaa:	4986      	ldr	r1, [pc, #536]	; (8001cc4 <HAL_ADC_Init+0x290>)
 8001aac:	428a      	cmp	r2, r1
 8001aae:	d075      	beq.n	8001b9c <HAL_ADC_Init+0x168>
 8001ab0:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_ADC_Init+0x294>)
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d073      	beq.n	8001b9e <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ab6:	6893      	ldr	r3, [r2, #8]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f000 80ed 	beq.w	8001c9c <HAL_ADC_Init+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac2:	4d82      	ldr	r5, [pc, #520]	; (8001ccc <HAL_ADC_Init+0x298>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ac4:	68ab      	ldr	r3, [r5, #8]
 8001ac6:	6861      	ldr	r1, [r4, #4]
 8001ac8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001acc:	430b      	orrs	r3, r1
 8001ace:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ad0:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8001ad4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001ad6:	7e65      	ldrb	r5, [r4, #25]
 8001ad8:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ada:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ade:	2e01      	cmp	r6, #1
 8001ae0:	bf18      	it	ne
 8001ae2:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001ae6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aea:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001aec:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af0:	f000 8095 	beq.w	8001c1e <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001af6:	2901      	cmp	r1, #1
 8001af8:	d00d      	beq.n	8001b16 <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001afa:	4872      	ldr	r0, [pc, #456]	; (8001cc4 <HAL_ADC_Init+0x290>)
 8001afc:	4282      	cmp	r2, r0
 8001afe:	f000 809e 	beq.w	8001c3e <HAL_ADC_Init+0x20a>
 8001b02:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001b06:	4282      	cmp	r2, r0
 8001b08:	f000 8099 	beq.w	8001c3e <HAL_ADC_Init+0x20a>
 8001b0c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001b10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001b12:	4303      	orrs	r3, r0
 8001b14:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b16:	6891      	ldr	r1, [r2, #8]
 8001b18:	f011 0f0c 	tst.w	r1, #12
 8001b1c:	d10c      	bne.n	8001b38 <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b1e:	68d1      	ldr	r1, [r2, #12]
 8001b20:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001b24:	f021 0102 	bic.w	r1, r1, #2
 8001b28:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b2a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001b2e:	7e20      	ldrb	r0, [r4, #24]
 8001b30:	0049      	lsls	r1, r1, #1
 8001b32:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8001b36:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001b38:	68d5      	ldr	r5, [r2, #12]
 8001b3a:	4965      	ldr	r1, [pc, #404]	; (8001cd0 <HAL_ADC_Init+0x29c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3c:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001b3e:	4029      	ands	r1, r5
 8001b40:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b42:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8001b44:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b46:	d072      	beq.n	8001c2e <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b4a:	f023 030f 	bic.w	r3, r3, #15
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001b50:	2000      	movs	r0, #0
 8001b52:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001b60:	b002      	add	sp, #8
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8001b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b66:	f023 0312 	bic.w	r3, r3, #18
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b7a:	e777      	b.n	8001a6c <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
}
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b82:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8001b86:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8001b88:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001b8c:	f7ff fc26 	bl	80013dc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b90:	6822      	ldr	r2, [r4, #0]
 8001b92:	6893      	ldr	r3, [r2, #8]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	d511      	bpl.n	8001bbc <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	462b      	mov	r3, r5
 8001b9a:	e75c      	b.n	8001a56 <HAL_ADC_Init+0x22>
 8001b9c:	494a      	ldr	r1, [pc, #296]	; (8001cc8 <HAL_ADC_Init+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9e:	4d4b      	ldr	r5, [pc, #300]	; (8001ccc <HAL_ADC_Init+0x298>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ba0:	6893      	ldr	r3, [r2, #8]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d061      	beq.n	8001c6e <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001baa:	688b      	ldr	r3, [r1, #8]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d187      	bne.n	8001ac4 <HAL_ADC_Init+0x90>
 8001bb4:	680b      	ldr	r3, [r1, #0]
 8001bb6:	07db      	lsls	r3, r3, #31
 8001bb8:	d48a      	bmi.n	8001ad0 <HAL_ADC_Init+0x9c>
 8001bba:	e783      	b.n	8001ac4 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff fed1 	bl	8001964 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bc4:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8001bc6:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc8:	f53f af44 	bmi.w	8001a54 <HAL_ADC_Init+0x20>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	f47f af41 	bne.w	8001a54 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8001bd2:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bd4:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd6:	493f      	ldr	r1, [pc, #252]	; (8001cd4 <HAL_ADC_Init+0x2a0>)
 8001bd8:	4d3f      	ldr	r5, [pc, #252]	; (8001cd8 <HAL_ADC_Init+0x2a4>)
 8001bda:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8001be0:	f020 0002 	bic.w	r0, r0, #2
 8001be4:	f040 0002 	orr.w	r0, r0, #2
 8001be8:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bea:	6890      	ldr	r0, [r2, #8]
 8001bec:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8001bf0:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf2:	fba5 0101 	umull	r0, r1, r5, r1
 8001bf6:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001bf8:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001bfe:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c00:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001c04:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c06:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001c08:	9901      	ldr	r1, [sp, #4]
 8001c0a:	2900      	cmp	r1, #0
 8001c0c:	f43f af23 	beq.w	8001a56 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8001c10:	9901      	ldr	r1, [sp, #4]
 8001c12:	3901      	subs	r1, #1
 8001c14:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001c16:	9901      	ldr	r1, [sp, #4]
 8001c18:	2900      	cmp	r1, #0
 8001c1a:	d1f9      	bne.n	8001c10 <HAL_ADC_Init+0x1dc>
 8001c1c:	e71b      	b.n	8001a56 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c1e:	bb7d      	cbnz	r5, 8001c80 <HAL_ADC_Init+0x24c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c22:	3901      	subs	r1, #1
 8001c24:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	e762      	b.n	8001af4 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c30:	69e3      	ldr	r3, [r4, #28]
 8001c32:	f021 010f 	bic.w	r1, r1, #15
 8001c36:	3b01      	subs	r3, #1
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	e788      	b.n	8001b50 <HAL_ADC_Init+0x11c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c3e:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8001c42:	d028      	beq.n	8001c96 <HAL_ADC_Init+0x262>
 8001c44:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001c48:	d02d      	beq.n	8001ca6 <HAL_ADC_Init+0x272>
 8001c4a:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8001c4e:	d02d      	beq.n	8001cac <HAL_ADC_Init+0x278>
 8001c50:	f5b1 5f8a 	cmp.w	r1, #4416	; 0x1140
 8001c54:	d02d      	beq.n	8001cb2 <HAL_ADC_Init+0x27e>
 8001c56:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 8001c5a:	d02d      	beq.n	8001cb8 <HAL_ADC_Init+0x284>
 8001c5c:	f5b1 5f86 	cmp.w	r1, #4288	; 0x10c0
 8001c60:	bf08      	it	eq
 8001c62:	f44f 71c0 	moveq.w	r1, #384	; 0x180
 8001c66:	e753      	b.n	8001b10 <HAL_ADC_Init+0xdc>
 8001c68:	4915      	ldr	r1, [pc, #84]	; (8001cc0 <HAL_ADC_Init+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6a:	4d1c      	ldr	r5, [pc, #112]	; (8001cdc <HAL_ADC_Init+0x2a8>)
 8001c6c:	e798      	b.n	8001ba0 <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	07de      	lsls	r6, r3, #31
 8001c72:	f53f af2d 	bmi.w	8001ad0 <HAL_ADC_Init+0x9c>
 8001c76:	e798      	b.n	8001baa <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c78:	4d18      	ldr	r5, [pc, #96]	; (8001cdc <HAL_ADC_Init+0x2a8>)
 8001c7a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001c7e:	e78f      	b.n	8001ba0 <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 8001c80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c82:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8001c86:	f041 0120 	orr.w	r1, r1, #32
 8001c8a:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c8e:	f041 0101 	orr.w	r1, r1, #1
 8001c92:	6461      	str	r1, [r4, #68]	; 0x44
 8001c94:	e72e      	b.n	8001af4 <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c96:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001c9a:	e739      	b.n	8001b10 <HAL_ADC_Init+0xdc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	07db      	lsls	r3, r3, #31
 8001ca0:	f53f af16 	bmi.w	8001ad0 <HAL_ADC_Init+0x9c>
 8001ca4:	e70d      	b.n	8001ac2 <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ca6:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001caa:	e731      	b.n	8001b10 <HAL_ADC_Init+0xdc>
 8001cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb0:	e72e      	b.n	8001b10 <HAL_ADC_Init+0xdc>
 8001cb2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001cb6:	e72b      	b.n	8001b10 <HAL_ADC_Init+0xdc>
 8001cb8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001cbc:	e728      	b.n	8001b10 <HAL_ADC_Init+0xdc>
 8001cbe:	bf00      	nop
 8001cc0:	50000100 	.word	0x50000100
 8001cc4:	50000400 	.word	0x50000400
 8001cc8:	50000500 	.word	0x50000500
 8001ccc:	50000700 	.word	0x50000700
 8001cd0:	fff0c007 	.word	0xfff0c007
 8001cd4:	20000028 	.word	0x20000028
 8001cd8:	431bde83 	.word	0x431bde83
 8001cdc:	50000300 	.word	0x50000300

08001ce0 <HAL_ADC_Start_DMA>:
{
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ce4:	6800      	ldr	r0, [r0, #0]
 8001ce6:	6885      	ldr	r5, [r0, #8]
 8001ce8:	076d      	lsls	r5, r5, #29
 8001cea:	d478      	bmi.n	8001dde <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001cec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d074      	beq.n	8001dde <HAL_ADC_Start_DMA+0xfe>
 8001cf4:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001cf6:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001cfa:	460f      	mov	r7, r1
 8001cfc:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 8001cfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d02:	d00f      	beq.n	8001d24 <HAL_ADC_Start_DMA+0x44>
 8001d04:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <HAL_ADC_Start_DMA+0x13c>)
 8001d06:	4298      	cmp	r0, r3
 8001d08:	d00c      	beq.n	8001d24 <HAL_ADC_Start_DMA+0x44>
 8001d0a:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <HAL_ADC_Start_DMA+0x140>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f013 0f1f 	tst.w	r3, #31
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b96b      	cbnz	r3, 8001d36 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8001d1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001d1e:	2501      	movs	r5, #1
}
 8001d20:	4628      	mov	r0, r5
 8001d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_ADC_Start_DMA+0x144>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f013 0f1f 	tst.w	r3, #31
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f1      	beq.n	8001d1a <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff fe4c 	bl	80019d4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d150      	bne.n	8001de4 <HAL_ADC_Start_DMA+0x104>
        ADC_STATE_CLR_SET(hadc->State,
 8001d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d44:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001d46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d52:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8001d56:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d58:	d056      	beq.n	8001e08 <HAL_ADC_Start_DMA+0x128>
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_ADC_Start_DMA+0x13c>)
 8001d5c:	4299      	cmp	r1, r3
 8001d5e:	d045      	beq.n	8001dec <HAL_ADC_Start_DMA+0x10c>
 8001d60:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	06d8      	lsls	r0, r3, #27
 8001d68:	d050      	beq.n	8001e0c <HAL_ADC_Start_DMA+0x12c>
 8001d6a:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <HAL_ADC_Start_DMA+0x148>)
 8001d6c:	4291      	cmp	r1, r2
 8001d6e:	d04d      	beq.n	8001e0c <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d76:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d78:	68d3      	ldr	r3, [r2, #12]
 8001d7a:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001d7e:	b12b      	cbz	r3, 8001d8c <HAL_ADC_Start_DMA+0xac>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d8a:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_ADC_Start_DMA+0x14c>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d92:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d96:	bf1c      	itt	ne
 8001d98:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001d9a:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001d9e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001da0:	f04f 0c00 	mov.w	ip, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da4:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 8001da6:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001daa:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dac:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_ADC_Start_DMA+0x154>)
 8001db0:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db2:	231c      	movs	r3, #28
 8001db4:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001db6:	684b      	ldr	r3, [r1, #4]
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dbe:	68cb      	ldr	r3, [r1, #12]
 8001dc0:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dc4:	463a      	mov	r2, r7
 8001dc6:	4633      	mov	r3, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dc8:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dcc:	3140      	adds	r1, #64	; 0x40
 8001dce:	f000 fb81 	bl	80024d4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001dd2:	6822      	ldr	r2, [r4, #0]
 8001dd4:	6893      	ldr	r3, [r2, #8]
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6093      	str	r3, [r2, #8]
 8001ddc:	e7a0      	b.n	8001d20 <HAL_ADC_Start_DMA+0x40>
    tmp_hal_status = HAL_BUSY;
 8001dde:	2502      	movs	r5, #2
}
 8001de0:	4628      	mov	r0, r5
 8001de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8001de4:	2300      	movs	r3, #0
 8001de6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001dea:	e799      	b.n	8001d20 <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_ADC_Start_DMA+0x144>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	06db      	lsls	r3, r3, #27
 8001df2:	d00b      	beq.n	8001e0c <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001df6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dfe:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e00:	68d3      	ldr	r3, [r2, #12]
 8001e02:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001e06:	e7ba      	b.n	8001d7e <HAL_ADC_Start_DMA+0x9e>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_ADC_Start_DMA+0x144>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e12:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e14:	68cb      	ldr	r3, [r1, #12]
 8001e16:	019a      	lsls	r2, r3, #6
 8001e18:	d5b8      	bpl.n	8001d8c <HAL_ADC_Start_DMA+0xac>
 8001e1a:	e7b1      	b.n	8001d80 <HAL_ADC_Start_DMA+0xa0>
 8001e1c:	50000100 	.word	0x50000100
 8001e20:	50000700 	.word	0x50000700
 8001e24:	50000300 	.word	0x50000300
 8001e28:	50000400 	.word	0x50000400
 8001e2c:	08001921 	.word	0x08001921
 8001e30:	08001919 	.word	0x08001919
 8001e34:	08001901 	.word	0x08001901

08001e38 <HAL_ADCEx_Calibration_Start>:
{
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001e3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d030      	beq.n	8001ea4 <HAL_ADCEx_Calibration_Start+0x6c>
 8001e42:	2701      	movs	r7, #1
 8001e44:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8001e48:	4604      	mov	r4, r0
 8001e4a:	460d      	mov	r5, r1
 8001e4c:	f7ff fd8a 	bl	8001964 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8001e50:	4606      	mov	r6, r0
 8001e52:	bb10      	cbnz	r0, 8001e9a <HAL_ADCEx_Calibration_Start+0x62>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001e54:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8001e56:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001e58:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e5a:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001e5c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001e60:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e62:	d103      	bne.n	8001e6c <HAL_ADCEx_Calibration_Start+0x34>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e72:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001e74:	f7ff fd38 	bl	80018e8 <HAL_GetTick>
 8001e78:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e7a:	e004      	b.n	8001e86 <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e7c:	f7ff fd34 	bl	80018e8 <HAL_GetTick>
 8001e80:	1b43      	subs	r3, r0, r5
 8001e82:	2b0a      	cmp	r3, #10
 8001e84:	d811      	bhi.n	8001eaa <HAL_ADCEx_Calibration_Start+0x72>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	dbf6      	blt.n	8001e7c <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e90:	f023 0303 	bic.w	r3, r3, #3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8001ea4:	2602      	movs	r6, #2
}
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001eac:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8001eae:	f023 0312 	bic.w	r3, r3, #18
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
        return HAL_ERROR;
 8001eb6:	2601      	movs	r6, #1
        __HAL_UNLOCK(hadc);
 8001eb8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        ADC_STATE_CLR_SET(hadc->State,
 8001ebc:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001ebe:	4630      	mov	r0, r6
 8001ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec2:	bf00      	nop

08001ec4 <HAL_ADC_ConfigChannel>:
{
 8001ec4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8001ec6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001eca:	68cc      	ldr	r4, [r1, #12]
{
 8001ecc:	b082      	sub	sp, #8
 8001ece:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001ed0:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001ed2:	f04f 0000 	mov.w	r0, #0
 8001ed6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001ed8:	f000 80fe 	beq.w	80020d8 <HAL_ADC_ConfigChannel+0x214>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001edc:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ee4:	6895      	ldr	r5, [r2, #8]
 8001ee6:	076d      	lsls	r5, r5, #29
 8001ee8:	d436      	bmi.n	8001f58 <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 8001eea:	6848      	ldr	r0, [r1, #4]
 8001eec:	2804      	cmp	r0, #4
 8001eee:	f200 8088 	bhi.w	8002002 <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->SQR1,
 8001ef2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001ef6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001ef8:	680d      	ldr	r5, [r1, #0]
 8001efa:	0040      	lsls	r0, r0, #1
 8001efc:	271f      	movs	r7, #31
 8001efe:	4087      	lsls	r7, r0
 8001f00:	ea26 0607 	bic.w	r6, r6, r7
 8001f04:	fa05 f000 	lsl.w	r0, r5, r0
 8001f08:	4330      	orrs	r0, r6
 8001f0a:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f0c:	6890      	ldr	r0, [r2, #8]
 8001f0e:	f010 0f0c 	tst.w	r0, #12
 8001f12:	d134      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f14:	2d09      	cmp	r5, #9
 8001f16:	f200 8089 	bhi.w	800202c <HAL_ADC_ConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f1a:	6950      	ldr	r0, [r2, #20]
 8001f1c:	688e      	ldr	r6, [r1, #8]
 8001f1e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001f22:	2707      	movs	r7, #7
 8001f24:	fa07 f70c 	lsl.w	r7, r7, ip
 8001f28:	ea20 0007 	bic.w	r0, r0, r7
 8001f2c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001f30:	4330      	orrs	r0, r6
 8001f32:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f34:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8001f38:	68d0      	ldr	r0, [r2, #12]
 8001f3a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001f3e:	0040      	lsls	r0, r0, #1
 8001f40:	3e01      	subs	r6, #1
 8001f42:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8001f46:	2e03      	cmp	r6, #3
 8001f48:	f200 8142 	bhi.w	80021d0 <HAL_ADC_ConfigChannel+0x30c>
 8001f4c:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001f50:	0105000e 	.word	0x0105000e
 8001f54:	00f100fb 	.word	0x00f100fb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001f66:	b002      	add	sp, #8
 8001f68:	bcf0      	pop	{r4, r5, r6, r7}
 8001f6a:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f6c:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8001f6e:	4eae      	ldr	r6, [pc, #696]	; (8002228 <HAL_ADC_ConfigChannel+0x364>)
 8001f70:	403e      	ands	r6, r7
 8001f72:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001f76:	4330      	orrs	r0, r6
 8001f78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001f7c:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f7e:	6890      	ldr	r0, [r2, #8]
 8001f80:	f000 0003 	and.w	r0, r0, #3
 8001f84:	2801      	cmp	r0, #1
 8001f86:	f000 80a2 	beq.w	80020ce <HAL_ADC_ConfigChannel+0x20a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f8a:	2c01      	cmp	r4, #1
 8001f8c:	f000 80a8 	beq.w	80020e0 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f90:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001f94:	2001      	movs	r0, #1
 8001f96:	40a8      	lsls	r0, r5
 8001f98:	ea21 0100 	bic.w	r1, r1, r0
 8001f9c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001fa4:	d073      	beq.n	800208e <HAL_ADC_ConfigChannel+0x1ca>
 8001fa6:	49a1      	ldr	r1, [pc, #644]	; (800222c <HAL_ADC_ConfigChannel+0x368>)
 8001fa8:	428a      	cmp	r2, r1
 8001faa:	d070      	beq.n	800208e <HAL_ADC_ConfigChannel+0x1ca>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fac:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fae:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fb2:	d06f      	beq.n	8002094 <HAL_ADC_ConfigChannel+0x1d0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001fb4:	2d11      	cmp	r5, #17
 8001fb6:	f040 80aa 	bne.w	800210e <HAL_ADC_ConfigChannel+0x24a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001fba:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001fbc:	01c4      	lsls	r4, r0, #7
 8001fbe:	d46c      	bmi.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fc0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001fc4:	f000 80d3 	beq.w	800216e <HAL_ADC_ConfigChannel+0x2aa>
 8001fc8:	4898      	ldr	r0, [pc, #608]	; (800222c <HAL_ADC_ConfigChannel+0x368>)
 8001fca:	4282      	cmp	r2, r0
 8001fcc:	d067      	beq.n	800209e <HAL_ADC_ConfigChannel+0x1da>
 8001fce:	4c98      	ldr	r4, [pc, #608]	; (8002230 <HAL_ADC_ConfigChannel+0x36c>)
 8001fd0:	42a2      	cmp	r2, r4
 8001fd2:	f000 80f7 	beq.w	80021c4 <HAL_ADC_ConfigChannel+0x300>
 8001fd6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001fda:	4282      	cmp	r2, r0
 8001fdc:	d061      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fde:	6890      	ldr	r0, [r2, #8]
 8001fe0:	f000 0003 	and.w	r0, r0, #3
 8001fe4:	2801      	cmp	r0, #1
 8001fe6:	f000 80ef 	beq.w	80021c8 <HAL_ADC_ConfigChannel+0x304>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fea:	2d10      	cmp	r5, #16
 8001fec:	d055      	beq.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fee:	2d11      	cmp	r5, #17
 8001ff0:	d053      	beq.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ff2:	2d12      	cmp	r5, #18
 8001ff4:	d151      	bne.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ff6:	688a      	ldr	r2, [r1, #8]
 8001ff8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001ffc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffe:	2000      	movs	r0, #0
 8002000:	e7ae      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 8002002:	2809      	cmp	r0, #9
 8002004:	d921      	bls.n	800204a <HAL_ADC_ConfigChannel+0x186>
    else if (sConfig->Rank < 15U)
 8002006:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002008:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800200c:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8002010:	f200 8083 	bhi.w	800211a <HAL_ADC_ConfigChannel+0x256>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002014:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8002016:	680d      	ldr	r5, [r1, #0]
 8002018:	383c      	subs	r0, #60	; 0x3c
 800201a:	271f      	movs	r7, #31
 800201c:	4087      	lsls	r7, r0
 800201e:	ea26 0607 	bic.w	r6, r6, r7
 8002022:	fa05 f000 	lsl.w	r0, r5, r0
 8002026:	4330      	orrs	r0, r6
 8002028:	6390      	str	r0, [r2, #56]	; 0x38
 800202a:	e76f      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800202c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002030:	6990      	ldr	r0, [r2, #24]
 8002032:	688e      	ldr	r6, [r1, #8]
 8002034:	3f1e      	subs	r7, #30
 8002036:	f04f 0c07 	mov.w	ip, #7
 800203a:	fa0c fc07 	lsl.w	ip, ip, r7
 800203e:	ea20 000c 	bic.w	r0, r0, ip
 8002042:	40be      	lsls	r6, r7
 8002044:	4330      	orrs	r0, r6
 8002046:	6190      	str	r0, [r2, #24]
 8002048:	e774      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 800204a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800204e:	0040      	lsls	r0, r0, #1
 8002050:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002052:	680d      	ldr	r5, [r1, #0]
 8002054:	381e      	subs	r0, #30
 8002056:	271f      	movs	r7, #31
 8002058:	4087      	lsls	r7, r0
 800205a:	ea26 0607 	bic.w	r6, r6, r7
 800205e:	fa05 f000 	lsl.w	r0, r5, r0
 8002062:	4330      	orrs	r0, r6
 8002064:	6350      	str	r0, [r2, #52]	; 0x34
 8002066:	e751      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x48>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002068:	1c68      	adds	r0, r5, #1
 800206a:	688e      	ldr	r6, [r1, #8]
 800206c:	6954      	ldr	r4, [r2, #20]
 800206e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002072:	2707      	movs	r7, #7
 8002074:	408f      	lsls	r7, r1
 8002076:	fa06 f001 	lsl.w	r0, r6, r1
 800207a:	ea24 0107 	bic.w	r1, r4, r7
 800207e:	4301      	orrs	r1, r0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002080:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002084:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002086:	d008      	beq.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
 8002088:	4968      	ldr	r1, [pc, #416]	; (800222c <HAL_ADC_ConfigChannel+0x368>)
 800208a:	428a      	cmp	r2, r1
 800208c:	d105      	bne.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800208e:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002090:	4968      	ldr	r1, [pc, #416]	; (8002234 <HAL_ADC_ConfigChannel+0x370>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002092:	d18f      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0xf0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002094:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002096:	0206      	lsls	r6, r0, #8
 8002098:	d592      	bpl.n	8001fc0 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209a:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800209c:	e760      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x9c>
 800209e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020a2:	6890      	ldr	r0, [r2, #8]
 80020a4:	f000 0003 	and.w	r0, r0, #3
 80020a8:	2801      	cmp	r0, #1
 80020aa:	d062      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x2ae>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020ac:	68a0      	ldr	r0, [r4, #8]
 80020ae:	f000 0003 	and.w	r0, r0, #3
 80020b2:	2801      	cmp	r0, #1
 80020b4:	d066      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x2c0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020b6:	2d10      	cmp	r5, #16
 80020b8:	d068      	beq.n	800218c <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020ba:	2d11      	cmp	r5, #17
 80020bc:	d199      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x12e>
 80020be:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80020c2:	d1ea      	bne.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020c4:	688a      	ldr	r2, [r1, #8]
 80020c6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80020ca:	608a      	str	r2, [r1, #8]
 80020cc:	e7e5      	b.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ce:	6810      	ldr	r0, [r2, #0]
 80020d0:	07c7      	lsls	r7, r0, #31
 80020d2:	f57f af5a 	bpl.w	8001f8a <HAL_ADC_ConfigChannel+0xc6>
 80020d6:	e7e0      	b.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
  __HAL_LOCK(hadc);
 80020d8:	2002      	movs	r0, #2
}
 80020da:	b002      	add	sp, #8
 80020dc:	bcf0      	pop	{r4, r5, r6, r7}
 80020de:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020e0:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 80020e4:	40ac      	lsls	r4, r5
 80020e6:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020e8:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020ea:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020ee:	d9bb      	bls.n	8002068 <HAL_ADC_ConfigChannel+0x1a4>
        MODIFY_REG(hadc->Instance->SMPR2,
 80020f0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80020f4:	688e      	ldr	r6, [r1, #8]
 80020f6:	6994      	ldr	r4, [r2, #24]
 80020f8:	f1a0 011b 	sub.w	r1, r0, #27
 80020fc:	2707      	movs	r7, #7
 80020fe:	408f      	lsls	r7, r1
 8002100:	fa06 f001 	lsl.w	r0, r6, r1
 8002104:	ea24 0107 	bic.w	r1, r4, r7
 8002108:	4301      	orrs	r1, r0
 800210a:	6191      	str	r1, [r2, #24]
 800210c:	e748      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0xdc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800210e:	2d12      	cmp	r5, #18
 8002110:	d1c3      	bne.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002112:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002114:	0240      	lsls	r0, r0, #9
 8002116:	d4c0      	bmi.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
 8002118:	e752      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800211a:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800211c:	680d      	ldr	r5, [r1, #0]
 800211e:	385a      	subs	r0, #90	; 0x5a
 8002120:	271f      	movs	r7, #31
 8002122:	4087      	lsls	r7, r0
 8002124:	ea26 0607 	bic.w	r6, r6, r7
 8002128:	fa05 f000 	lsl.w	r0, r5, r0
 800212c:	4330      	orrs	r0, r6
 800212e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002130:	e6ec      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002132:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8002134:	4e3c      	ldr	r6, [pc, #240]	; (8002228 <HAL_ADC_ConfigChannel+0x364>)
 8002136:	403e      	ands	r6, r7
 8002138:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800213c:	4330      	orrs	r0, r6
 800213e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002142:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8002144:	e71b      	b.n	8001f7e <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002146:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8002148:	4e37      	ldr	r6, [pc, #220]	; (8002228 <HAL_ADC_ConfigChannel+0x364>)
 800214a:	403e      	ands	r6, r7
 800214c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002150:	4330      	orrs	r0, r6
 8002152:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002156:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8002158:	e711      	b.n	8001f7e <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 800215a:	6e57      	ldr	r7, [r2, #100]	; 0x64
 800215c:	4e32      	ldr	r6, [pc, #200]	; (8002228 <HAL_ADC_ConfigChannel+0x364>)
 800215e:	403e      	ands	r6, r7
 8002160:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002164:	4330      	orrs	r0, r6
 8002166:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800216a:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 800216c:	e707      	b.n	8001f7e <HAL_ADC_ConfigChannel+0xba>
 800216e:	4c2f      	ldr	r4, [pc, #188]	; (800222c <HAL_ADC_ConfigChannel+0x368>)
 8002170:	e797      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002172:	6810      	ldr	r0, [r2, #0]
 8002174:	07c6      	lsls	r6, r0, #31
 8002176:	d599      	bpl.n	80020ac <HAL_ADC_ConfigChannel+0x1e8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217a:	f042 0220 	orr.w	r2, r2, #32
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002180:	2001      	movs	r0, #1
 8002182:	e6ed      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x9c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002184:	6820      	ldr	r0, [r4, #0]
 8002186:	07c0      	lsls	r0, r0, #31
 8002188:	d4f6      	bmi.n	8002178 <HAL_ADC_ConfigChannel+0x2b4>
 800218a:	e794      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x1f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800218c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002190:	d183      	bne.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4a29      	ldr	r2, [pc, #164]	; (8002238 <HAL_ADC_ConfigChannel+0x374>)
 8002194:	4c29      	ldr	r4, [pc, #164]	; (800223c <HAL_ADC_ConfigChannel+0x378>)
 8002196:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002198:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800219a:	fba4 4202 	umull	r4, r2, r4, r2
 800219e:	0c92      	lsrs	r2, r2, #18
 80021a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80021a4:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80021aa:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ac:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80021ae:	9a01      	ldr	r2, [sp, #4]
 80021b0:	2a00      	cmp	r2, #0
 80021b2:	f43f af72 	beq.w	800209a <HAL_ADC_ConfigChannel+0x1d6>
            wait_loop_index--;
 80021b6:	9a01      	ldr	r2, [sp, #4]
 80021b8:	3a01      	subs	r2, #1
 80021ba:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80021bc:	9a01      	ldr	r2, [sp, #4]
 80021be:	2a00      	cmp	r2, #0
 80021c0:	d1f9      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x2f2>
 80021c2:	e76a      	b.n	800209a <HAL_ADC_ConfigChannel+0x1d6>
 80021c4:	4c1e      	ldr	r4, [pc, #120]	; (8002240 <HAL_ADC_ConfigChannel+0x37c>)
 80021c6:	e76c      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	07d7      	lsls	r7, r2, #31
 80021cc:	d4d4      	bmi.n	8002178 <HAL_ADC_ConfigChannel+0x2b4>
 80021ce:	e70c      	b.n	8001fea <HAL_ADC_ConfigChannel+0x126>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80021d2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80021d6:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80021da:	ea4f 6685 	mov.w	r6, r5, lsl #26
 80021de:	d014      	beq.n	800220a <HAL_ADC_ConfigChannel+0x346>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80021e2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80021e6:	4286      	cmp	r6, r0
 80021e8:	d014      	beq.n	8002214 <HAL_ADC_ConfigChannel+0x350>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021ea:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80021ec:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80021f0:	4286      	cmp	r6, r0
 80021f2:	d014      	beq.n	800221e <HAL_ADC_ConfigChannel+0x35a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021f4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80021f6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80021fa:	4286      	cmp	r6, r0
 80021fc:	f47f aebf 	bne.w	8001f7e <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002200:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002202:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002206:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002208:	e6b9      	b.n	8001f7e <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800220a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800220c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002210:	6610      	str	r0, [r2, #96]	; 0x60
 8002212:	e7e5      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x31c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002214:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002216:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800221a:	6650      	str	r0, [r2, #100]	; 0x64
 800221c:	e7e5      	b.n	80021ea <HAL_ADC_ConfigChannel+0x326>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800221e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002220:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002224:	6690      	str	r0, [r2, #104]	; 0x68
 8002226:	e7e5      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x330>
 8002228:	83fff000 	.word	0x83fff000
 800222c:	50000100 	.word	0x50000100
 8002230:	50000400 	.word	0x50000400
 8002234:	50000300 	.word	0x50000300
 8002238:	20000028 	.word	0x20000028
 800223c:	431bde83 	.word	0x431bde83
 8002240:	50000500 	.word	0x50000500

08002244 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002244:	6803      	ldr	r3, [r0, #0]
 8002246:	4a43      	ldr	r2, [pc, #268]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800224c:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800224e:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002250:	d00e      	beq.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002252:	4293      	cmp	r3, r2
 8002254:	d00a      	beq.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8002256:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800225a:	4293      	cmp	r3, r2
 800225c:	d049      	beq.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800225e:	4c3e      	ldr	r4, [pc, #248]	; (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002260:	42a3      	cmp	r3, r4
 8002262:	d005      	beq.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
} 
 8002266:	4618      	mov	r0, r3
 8002268:	bcf0      	pop	{r4, r5, r6, r7}
 800226a:	4770      	bx	lr
 800226c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8002270:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002274:	2c01      	cmp	r4, #1
 8002276:	d041      	beq.n	80022fc <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8002278:	2401      	movs	r4, #1
 800227a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800227e:	689c      	ldr	r4, [r3, #8]
 8002280:	0766      	lsls	r6, r4, #29
 8002282:	d50a      	bpl.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002286:	f043 0320 	orr.w	r3, r3, #32
 800228a:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 800228e:	2200      	movs	r2, #0
 8002290:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 8002294:	bcf0      	pop	{r4, r5, r6, r7}
 8002296:	4618      	mov	r0, r3
 8002298:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800229a:	6894      	ldr	r4, [r2, #8]
 800229c:	0764      	lsls	r4, r4, #29
 800229e:	d4f1      	bmi.n	8002284 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a4:	d044      	beq.n	8002330 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80022a6:	4f2b      	ldr	r7, [pc, #172]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80022a8:	4c2c      	ldr	r4, [pc, #176]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80022aa:	4e2d      	ldr	r6, [pc, #180]	; (8002360 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80022ac:	42bb      	cmp	r3, r7
 80022ae:	bf18      	it	ne
 80022b0:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b2:	b33d      	cbz	r5, 8002304 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022b4:	68a7      	ldr	r7, [r4, #8]
 80022b6:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 80022ba:	684e      	ldr	r6, [r1, #4]
 80022bc:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 80022c0:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 80022c4:	433e      	orrs	r6, r7
 80022c6:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022c8:	689e      	ldr	r6, [r3, #8]
 80022ca:	f006 0603 	and.w	r6, r6, #3
 80022ce:	2e01      	cmp	r6, #1
 80022d0:	d03c      	beq.n	800234c <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022d2:	6893      	ldr	r3, [r2, #8]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d02f      	beq.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022dc:	68a2      	ldr	r2, [r4, #8]
 80022de:	688b      	ldr	r3, [r1, #8]
 80022e0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80022e4:	431d      	orrs	r5, r3
 80022e6:	f022 020f 	bic.w	r2, r2, #15
 80022ea:	4315      	orrs	r5, r2
 80022ec:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e7cd      	b.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80022f2:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80022f8:	2c01      	cmp	r4, #1
 80022fa:	d1bd      	bne.n	8002278 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 80022fc:	2302      	movs	r3, #2
} 
 80022fe:	4618      	mov	r0, r3
 8002300:	bcf0      	pop	{r4, r5, r6, r7}
 8002302:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002304:	68a1      	ldr	r1, [r4, #8]
 8002306:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800230a:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	f001 0103 	and.w	r1, r1, #3
 8002312:	2901      	cmp	r1, #1
 8002314:	d016      	beq.n	8002344 <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002316:	6893      	ldr	r3, [r2, #8]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d009      	beq.n	8002334 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002320:	68a3      	ldr	r3, [r4, #8]
 8002322:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002326:	f023 030f 	bic.w	r3, r3, #15
 800232a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	e7ae      	b.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002330:	4c0a      	ldr	r4, [pc, #40]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002332:	e7be      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	07db      	lsls	r3, r3, #31
 8002338:	d4d9      	bmi.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800233a:	e7f1      	b.n	8002320 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800233c:	6813      	ldr	r3, [r2, #0]
 800233e:	07de      	lsls	r6, r3, #31
 8002340:	d4d5      	bmi.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002342:	e7cb      	b.n	80022dc <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	07d9      	lsls	r1, r3, #31
 8002348:	d4d1      	bmi.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800234a:	e7e4      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	07df      	lsls	r7, r3, #31
 8002350:	d5bf      	bpl.n	80022d2 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8002352:	e7cc      	b.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002354:	50000100 	.word	0x50000100
 8002358:	50000500 	.word	0x50000500
 800235c:	50000300 	.word	0x50000300
 8002360:	50000700 	.word	0x50000700

08002364 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4908      	ldr	r1, [pc, #32]	; (8002388 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8002366:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002370:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002372:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002380:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8002384:	60cb      	str	r3, [r1, #12]
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_NVIC_SetPriority+0x68>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002396:	f1c3 0507 	rsb	r5, r3, #7
 800239a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	bf28      	it	cs
 80023a2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a4:	2c06      	cmp	r4, #6
 80023a6:	d919      	bls.n	80023dc <HAL_NVIC_SetPriority+0x50>
 80023a8:	3b03      	subs	r3, #3
 80023aa:	f04f 34ff 	mov.w	r4, #4294967295
 80023ae:	409c      	lsls	r4, r3
 80023b0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 34ff 	mov.w	r4, #4294967295
 80023b8:	40ac      	lsls	r4, r5
 80023ba:	ea21 0104 	bic.w	r1, r1, r4
 80023be:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80023c0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80023c6:	db0c      	blt.n	80023e2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023d0:	0109      	lsls	r1, r1, #4
 80023d2:	b2c9      	uxtb	r1, r1
 80023d4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023d8:	bc30      	pop	{r4, r5}
 80023da:	4770      	bx	lr
 80023dc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	4613      	mov	r3, r2
 80023e0:	e7e8      	b.n	80023b4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_NVIC_SetPriority+0x6c>)
 80023e4:	f000 000f 	and.w	r0, r0, #15
 80023e8:	0109      	lsls	r1, r1, #4
 80023ea:	4403      	add	r3, r0
 80023ec:	b2c9      	uxtb	r1, r1
 80023ee:	7619      	strb	r1, [r3, #24]
 80023f0:	bc30      	pop	{r4, r5}
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00
 80023f8:	e000ecfc 	.word	0xe000ecfc

080023fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80023fc:	2800      	cmp	r0, #0
 80023fe:	db07      	blt.n	8002410 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002400:	f000 011f 	and.w	r1, r0, #31
 8002404:	4a03      	ldr	r2, [pc, #12]	; (8002414 <HAL_NVIC_EnableIRQ+0x18>)
 8002406:	0940      	lsrs	r0, r0, #5
 8002408:	2301      	movs	r3, #1
 800240a:	408b      	lsls	r3, r1
 800240c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	3801      	subs	r0, #1
 800241a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800241e:	d20e      	bcs.n	800243e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	4c08      	ldr	r4, [pc, #32]	; (8002448 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002426:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	20f0      	movs	r0, #240	; 0xf0
 800242a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002430:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002432:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8002436:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	6019      	str	r1, [r3, #0]
 800243c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2001      	movs	r0, #1
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800244c:	2800      	cmp	r0, #0
 800244e:	d034      	beq.n	80024ba <HAL_DMA_Init+0x6e>
{ 
 8002450:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002452:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002456:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 800245a:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 800245c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002460:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 8002464:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002466:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002468:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 800246a:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 800246c:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002470:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002472:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002476:	4c12      	ldr	r4, [pc, #72]	; (80024c0 <HAL_DMA_Init+0x74>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002478:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800247c:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800247e:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 8002480:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002482:	d910      	bls.n	80024a6 <HAL_DMA_Init+0x5a>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_DMA_Init+0x78>)
 8002486:	4910      	ldr	r1, [pc, #64]	; (80024c8 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8002488:	4c10      	ldr	r4, [pc, #64]	; (80024cc <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800248a:	4402      	add	r2, r0
 800248c:	fba1 1202 	umull	r1, r2, r1, r2
 8002490:	0912      	lsrs	r2, r2, #4
 8002492:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 8002494:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002498:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800249a:	8419      	strh	r1, [r3, #32]
 800249c:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
}  
 80024a0:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a2:	6398      	str	r0, [r3, #56]	; 0x38
}  
 80024a4:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_DMA_Init+0x84>)
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <HAL_DMA_Init+0x7c>)
 80024aa:	4402      	add	r2, r0
 80024ac:	fba1 1202 	umull	r1, r2, r1, r2
 80024b0:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 80024b2:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024b6:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80024b8:	e7ec      	b.n	8002494 <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 80024ba:	2001      	movs	r0, #1
}  
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40020407 	.word	0x40020407
 80024c4:	bffdfbf8 	.word	0xbffdfbf8
 80024c8:	cccccccd 	.word	0xcccccccd
 80024cc:	40020400 	.word	0x40020400
 80024d0:	bffdfff8 	.word	0xbffdfff8

080024d4 <HAL_DMA_Start_IT>:
{
 80024d4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80024d6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80024da:	2c01      	cmp	r4, #1
 80024dc:	d039      	beq.n	8002552 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 80024de:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80024e2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80024e4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80024e6:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ea:	d005      	beq.n	80024f8 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 80024ec:	2300      	movs	r3, #0
 80024ee:	f880 3020 	strb.w	r3, [r0, #32]
} 
 80024f2:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80024f4:	2002      	movs	r0, #2
} 
 80024f6:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024f8:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 80024fa:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fc:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 80024fe:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002502:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002504:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002506:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002508:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800250c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800250e:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002512:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002514:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002516:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002518:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 800251a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800251c:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 800251e:	bf0b      	itete	eq
 8002520:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002522:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002524:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002526:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002528:	b153      	cbz	r3, 8002540 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	f043 030e 	orr.w	r3, r3, #14
 8002530:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800253a:	2000      	movs	r0, #0
} 
 800253c:	bcf0      	pop	{r4, r5, r6, r7}
 800253e:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f043 030a 	orr.w	r3, r3, #10
 8002546:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	f023 0304 	bic.w	r3, r3, #4
 800254e:	6023      	str	r3, [r4, #0]
 8002550:	e7ef      	b.n	8002532 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8002552:	2002      	movs	r0, #2
} 
 8002554:	bcf0      	pop	{r4, r5, r6, r7}
 8002556:	4770      	bx	lr

08002558 <HAL_DMA_IRQHandler>:
{
 8002558:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800255a:	e9d0 620f 	ldrd	r6, r2, [r0, #60]	; 0x3c
 800255e:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002560:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002562:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002564:	4093      	lsls	r3, r2
 8002566:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8002568:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800256a:	d00e      	beq.n	800258a <HAL_DMA_IRQHandler+0x32>
 800256c:	f015 0f04 	tst.w	r5, #4
 8002570:	d00b      	beq.n	800258a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	0692      	lsls	r2, r2, #26
 8002576:	d403      	bmi.n	8002580 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002578:	6822      	ldr	r2, [r4, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002580:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002582:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002584:	b1ca      	cbz	r2, 80025ba <HAL_DMA_IRQHandler+0x62>
}  
 8002586:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8002588:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800258a:	2302      	movs	r3, #2
 800258c:	4093      	lsls	r3, r2
 800258e:	420b      	tst	r3, r1
 8002590:	d015      	beq.n	80025be <HAL_DMA_IRQHandler+0x66>
 8002592:	f015 0f02 	tst.w	r5, #2
 8002596:	d012      	beq.n	80025be <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002598:	6822      	ldr	r2, [r4, #0]
 800259a:	0692      	lsls	r2, r2, #26
 800259c:	d406      	bmi.n	80025ac <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800259e:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80025a0:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025a2:	f022 020a 	bic.w	r2, r2, #10
 80025a6:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80025a8:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 80025ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025ae:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 80025b0:	2300      	movs	r3, #0
 80025b2:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80025b6:	2a00      	cmp	r2, #0
 80025b8:	d1e5      	bne.n	8002586 <HAL_DMA_IRQHandler+0x2e>
}  
 80025ba:	bc70      	pop	{r4, r5, r6}
 80025bc:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025be:	2308      	movs	r3, #8
 80025c0:	4093      	lsls	r3, r2
 80025c2:	420b      	tst	r3, r1
 80025c4:	d0f9      	beq.n	80025ba <HAL_DMA_IRQHandler+0x62>
 80025c6:	072b      	lsls	r3, r5, #28
 80025c8:	d5f7      	bpl.n	80025ba <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025ca:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80025cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025ce:	f023 030e 	bic.w	r3, r3, #14
 80025d2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025d4:	2301      	movs	r3, #1
 80025d6:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80025da:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025de:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 80025e2:	8404      	strh	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80025e4:	2900      	cmp	r1, #0
 80025e6:	d0e8      	beq.n	80025ba <HAL_DMA_IRQHandler+0x62>
}  
 80025e8:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80025ea:	4708      	bx	r1

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	680e      	ldr	r6, [r1, #0]
{
 80025f2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f4:	2e00      	cmp	r6, #0
 80025f6:	f000 809a 	beq.w	800272e <HAL_GPIO_Init+0x142>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fa:	f8df c208 	ldr.w	ip, [pc, #520]	; 8002804 <HAL_GPIO_Init+0x218>
  uint32_t position = 0x00u;
 80025fe:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002600:	f04f 0801 	mov.w	r8, #1
 8002604:	fa08 f503 	lsl.w	r5, r8, r3
    if (iocurrent != 0x00u)
 8002608:	ea15 0e06 	ands.w	lr, r5, r6
 800260c:	f000 808a 	beq.w	8002724 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002610:	684c      	ldr	r4, [r1, #4]
 8002612:	f024 0a10 	bic.w	sl, r4, #16
 8002616:	f1ba 0f02 	cmp.w	sl, #2
 800261a:	f000 808b 	beq.w	8002734 <HAL_GPIO_Init+0x148>
      temp = GPIOx->MODER;
 800261e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002622:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f209 	lsl.w	r2, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262c:	f004 0703 	and.w	r7, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002630:	ea2b 0b02 	bic.w	fp, fp, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002634:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002638:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800263c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002640:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002644:	ea6f 0202 	mvn.w	r2, r2
      GPIOx->MODER = temp;
 8002648:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800264a:	f240 8099 	bls.w	8002780 <HAL_GPIO_Init+0x194>
      temp = GPIOx->PUPDR;
 800264e:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002650:	688d      	ldr	r5, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002652:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002654:	fa05 f509 	lsl.w	r5, r5, r9
 8002658:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265a:	00e7      	lsls	r7, r4, #3
      GPIOx->PUPDR = temp;
 800265c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265e:	d561      	bpl.n	8002724 <HAL_GPIO_Init+0x138>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4d61      	ldr	r5, [pc, #388]	; (80027e8 <HAL_GPIO_Init+0x1fc>)
 8002662:	69aa      	ldr	r2, [r5, #24]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	61aa      	str	r2, [r5, #24]
 800266a:	69aa      	ldr	r2, [r5, #24]
 800266c:	f023 0703 	bic.w	r7, r3, #3
 8002670:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002674:	f002 0201 	and.w	r2, r2, #1
 8002678:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800267c:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800267e:	f003 0503 	and.w	r5, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002684:	f8d7 9008 	ldr.w	r9, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002688:	00ad      	lsls	r5, r5, #2
 800268a:	220f      	movs	r2, #15
 800268c:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800268e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002692:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002696:	d01d      	beq.n	80026d4 <HAL_GPIO_Init+0xe8>
 8002698:	4a54      	ldr	r2, [pc, #336]	; (80027ec <HAL_GPIO_Init+0x200>)
 800269a:	4290      	cmp	r0, r2
 800269c:	f000 808a 	beq.w	80027b4 <HAL_GPIO_Init+0x1c8>
 80026a0:	4a53      	ldr	r2, [pc, #332]	; (80027f0 <HAL_GPIO_Init+0x204>)
 80026a2:	4290      	cmp	r0, r2
 80026a4:	f000 808b 	beq.w	80027be <HAL_GPIO_Init+0x1d2>
 80026a8:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_GPIO_Init+0x208>)
 80026aa:	4290      	cmp	r0, r2
 80026ac:	d07b      	beq.n	80027a6 <HAL_GPIO_Init+0x1ba>
 80026ae:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_GPIO_Init+0x20c>)
 80026b0:	4290      	cmp	r0, r2
 80026b2:	f000 808b 	beq.w	80027cc <HAL_GPIO_Init+0x1e0>
 80026b6:	4a51      	ldr	r2, [pc, #324]	; (80027fc <HAL_GPIO_Init+0x210>)
 80026b8:	4290      	cmp	r0, r2
 80026ba:	f000 808e 	beq.w	80027da <HAL_GPIO_Init+0x1ee>
 80026be:	4a50      	ldr	r2, [pc, #320]	; (8002800 <HAL_GPIO_Init+0x214>)
 80026c0:	4290      	cmp	r0, r2
 80026c2:	bf0c      	ite	eq
 80026c4:	f04f 0906 	moveq.w	r9, #6
 80026c8:	f04f 0907 	movne.w	r9, #7
 80026cc:	fa09 f505 	lsl.w	r5, r9, r5
 80026d0:	ea4a 0a05 	orr.w	sl, sl, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026d4:	f8c7 a008 	str.w	sl, [r7, #8]
        temp = EXTI->IMR;
 80026d8:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026dc:	03e5      	lsls	r5, r4, #15
        temp &= ~(iocurrent);
 80026de:	ea6f 070e 	mvn.w	r7, lr
 80026e2:	bf54      	ite	pl
 80026e4:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80026e6:	ea4e 0202 	orrmi.w	r2, lr, r2
        }
        EXTI->IMR = temp;
 80026ea:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80026ee:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f2:	03a2      	lsls	r2, r4, #14
        temp &= ~(iocurrent);
 80026f4:	bf54      	ite	pl
 80026f6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80026f8:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->EMR = temp;
 80026fc:	f8cc 5004 	str.w	r5, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002700:	f8dc 5008 	ldr.w	r5, [ip, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002704:	02e2      	lsls	r2, r4, #11
        temp &= ~(iocurrent);
 8002706:	bf54      	ite	pl
 8002708:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800270a:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->RTSR = temp;
 800270e:	f8cc 5008 	str.w	r5, [ip, #8]

        temp = EXTI->FTSR;
 8002712:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002716:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002718:	bf54      	ite	pl
 800271a:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800271c:	ea4e 0202 	orrmi.w	r2, lr, r2
        }
        EXTI->FTSR = temp;
 8002720:	f8cc 200c 	str.w	r2, [ip, #12]
      }
    }

    position++;
 8002724:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002726:	fa36 f203 	lsrs.w	r2, r6, r3
 800272a:	f47f af6b 	bne.w	8002604 <HAL_GPIO_Init+0x18>
  }
}
 800272e:	b003      	add	sp, #12
 8002730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 8002734:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002738:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800273c:	f003 0707 	and.w	r7, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002740:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002744:	00bf      	lsls	r7, r7, #2
 8002746:	f04f 0b0f 	mov.w	fp, #15
 800274a:	fa0b fb07 	lsl.w	fp, fp, r7
 800274e:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002752:	690a      	ldr	r2, [r1, #16]
 8002754:	40ba      	lsls	r2, r7
 8002756:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3u] = temp;
 800275a:	f8c9 2020 	str.w	r2, [r9, #32]
      temp = GPIOx->MODER;
 800275e:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002762:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f209 	lsl.w	r2, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800276c:	f004 0703 	and.w	r7, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002770:	ea2a 0a02 	bic.w	sl, sl, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002774:	fa07 f709 	lsl.w	r7, r7, r9
 8002778:	ea47 070a 	orr.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800277c:	43d2      	mvns	r2, r2
      GPIOx->MODER = temp;
 800277e:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8002780:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002782:	ea02 0a07 	and.w	sl, r2, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002786:	68cf      	ldr	r7, [r1, #12]
 8002788:	fa07 f709 	lsl.w	r7, r7, r9
 800278c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002790:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002792:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002796:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279a:	ea2a 0505 	bic.w	r5, sl, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800279e:	409f      	lsls	r7, r3
 80027a0:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 80027a2:	6047      	str	r7, [r0, #4]
 80027a4:	e753      	b.n	800264e <HAL_GPIO_Init+0x62>
 80027a6:	f04f 0903 	mov.w	r9, #3
 80027aa:	fa09 f505 	lsl.w	r5, r9, r5
 80027ae:	ea4a 0a05 	orr.w	sl, sl, r5
 80027b2:	e78f      	b.n	80026d4 <HAL_GPIO_Init+0xe8>
 80027b4:	fa08 f505 	lsl.w	r5, r8, r5
 80027b8:	ea4a 0a05 	orr.w	sl, sl, r5
 80027bc:	e78a      	b.n	80026d4 <HAL_GPIO_Init+0xe8>
 80027be:	f04f 0902 	mov.w	r9, #2
 80027c2:	fa09 f505 	lsl.w	r5, r9, r5
 80027c6:	ea4a 0a05 	orr.w	sl, sl, r5
 80027ca:	e783      	b.n	80026d4 <HAL_GPIO_Init+0xe8>
 80027cc:	f04f 0904 	mov.w	r9, #4
 80027d0:	fa09 f505 	lsl.w	r5, r9, r5
 80027d4:	ea4a 0a05 	orr.w	sl, sl, r5
 80027d8:	e77c      	b.n	80026d4 <HAL_GPIO_Init+0xe8>
 80027da:	f04f 0905 	mov.w	r9, #5
 80027de:	fa09 f505 	lsl.w	r5, r9, r5
 80027e2:	ea4a 0a05 	orr.w	sl, sl, r5
 80027e6:	e775      	b.n	80026d4 <HAL_GPIO_Init+0xe8>
 80027e8:	40021000 	.word	0x40021000
 80027ec:	48000400 	.word	0x48000400
 80027f0:	48000800 	.word	0x48000800
 80027f4:	48000c00 	.word	0x48000c00
 80027f8:	48001000 	.word	0x48001000
 80027fc:	48001400 	.word	0x48001400
 8002800:	48001800 	.word	0x48001800
 8002804:	40010400 	.word	0x40010400

08002808 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	b10a      	cbz	r2, 800280e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800280a:	6181      	str	r1, [r0, #24]
 800280c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop

08002814 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002814:	6943      	ldr	r3, [r0, #20]
 8002816:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002818:	bf18      	it	ne
 800281a:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800281c:	6181      	str	r1, [r0, #24]
  }
}
 800281e:	4770      	bx	lr

08002820 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002820:	2800      	cmp	r0, #0
 8002822:	f000 827f 	beq.w	8002d24 <HAL_RCC_OscConfig+0x504>
{
 8002826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	07df      	lsls	r7, r3, #31
{
 800282e:	b083      	sub	sp, #12
 8002830:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	d53d      	bpl.n	80028b0 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002834:	49c1      	ldr	r1, [pc, #772]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 8002836:	684a      	ldr	r2, [r1, #4]
 8002838:	f002 020c 	and.w	r2, r2, #12
 800283c:	2a04      	cmp	r2, #4
 800283e:	f000 815f 	beq.w	8002b00 <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002842:	684a      	ldr	r2, [r1, #4]
 8002844:	f002 020c 	and.w	r2, r2, #12
 8002848:	2a08      	cmp	r2, #8
 800284a:	f000 8152 	beq.w	8002af2 <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	6863      	ldr	r3, [r4, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	f000 816b 	beq.w	8002b2e <HAL_RCC_OscConfig+0x30e>
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 819a 	beq.w	8002b92 <HAL_RCC_OscConfig+0x372>
 800285e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002862:	f000 82bc 	beq.w	8002dde <HAL_RCC_OscConfig+0x5be>
 8002866:	4bb5      	ldr	r3, [pc, #724]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002876:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff f836 	bl	80018e8 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287c:	4faf      	ldr	r7, [pc, #700]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 800287e:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002884:	2601      	movs	r6, #1
 8002886:	e005      	b.n	8002894 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7ff f82e 	bl	80018e8 <HAL_GetTick>
 800288c:	1b40      	subs	r0, r0, r5
 800288e:	2864      	cmp	r0, #100	; 0x64
 8002890:	f200 817b 	bhi.w	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002894:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	fa98 f3a8 	rbit	r3, r8
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	fa06 f303 	lsl.w	r3, r6, r3
 80028aa:	4213      	tst	r3, r2
 80028ac:	d0ec      	beq.n	8002888 <HAL_RCC_OscConfig+0x68>
 80028ae:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b0:	079e      	lsls	r6, r3, #30
 80028b2:	d542      	bpl.n	800293a <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028b4:	4aa1      	ldr	r2, [pc, #644]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 80028b6:	6851      	ldr	r1, [r2, #4]
 80028b8:	f011 0f0c 	tst.w	r1, #12
 80028bc:	f000 80cf 	beq.w	8002a5e <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028c0:	6851      	ldr	r1, [r2, #4]
 80028c2:	f001 010c 	and.w	r1, r1, #12
 80028c6:	2908      	cmp	r1, #8
 80028c8:	f000 80c2 	beq.w	8002a50 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028cc:	68e2      	ldr	r2, [r4, #12]
 80028ce:	2a00      	cmp	r2, #0
 80028d0:	f000 81b8 	beq.w	8002c44 <HAL_RCC_OscConfig+0x424>
 80028d4:	2201      	movs	r2, #1
 80028d6:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e6:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 80028ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028ec:	f7fe fffc 	bl	80018e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4e92      	ldr	r6, [pc, #584]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80028f2:	4605      	mov	r5, r0
 80028f4:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	e005      	b.n	8002906 <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fa:	f7fe fff5 	bl	80018e8 <HAL_GetTick>
 80028fe:	1b40      	subs	r0, r0, r5
 8002900:	2802      	cmp	r0, #2
 8002902:	f200 8142 	bhi.w	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002906:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	6832      	ldr	r2, [r6, #0]
 800290c:	fa98 f3a8 	rbit	r3, r8
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa07 f303 	lsl.w	r3, r7, r3
 800291c:	4213      	tst	r3, r2
 800291e:	d0ec      	beq.n	80028fa <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	6831      	ldr	r1, [r6, #0]
 8002922:	22f8      	movs	r2, #248	; 0xf8
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	6923      	ldr	r3, [r4, #16]
 800292a:	fab2 f282 	clz	r2, r2
 800292e:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002932:	4093      	lsls	r3, r2
 8002934:	430b      	orrs	r3, r1
 8002936:	6033      	str	r3, [r6, #0]
 8002938:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	071d      	lsls	r5, r3, #28
 800293c:	d421      	bmi.n	8002982 <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293e:	0758      	lsls	r0, r3, #29
 8002940:	d54e      	bpl.n	80029e0 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002942:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	00d1      	lsls	r1, r2, #3
 8002948:	f140 80c7 	bpl.w	8002ada <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 800294c:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4d7b      	ldr	r5, [pc, #492]	; (8002b40 <HAL_RCC_OscConfig+0x320>)
 8002952:	682b      	ldr	r3, [r5, #0]
 8002954:	05da      	lsls	r2, r3, #23
 8002956:	f140 8108 	bpl.w	8002b6a <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295a:	68a3      	ldr	r3, [r4, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	f000 8197 	beq.w	8002c90 <HAL_RCC_OscConfig+0x470>
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8138 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x3b8>
 8002968:	2b05      	cmp	r3, #5
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 800296c:	6a1a      	ldr	r2, [r3, #32]
 800296e:	f000 81d1 	beq.w	8002d14 <HAL_RCC_OscConfig+0x4f4>
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	621a      	str	r2, [r3, #32]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	621a      	str	r2, [r3, #32]
 8002980:	e18b      	b.n	8002c9a <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002982:	6962      	ldr	r2, [r4, #20]
 8002984:	2a00      	cmp	r2, #0
 8002986:	f000 8081 	beq.w	8002a8c <HAL_RCC_OscConfig+0x26c>
 800298a:	2201      	movs	r2, #1
 800298c:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002990:	4b6c      	ldr	r3, [pc, #432]	; (8002b44 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	4f6a      	ldr	r7, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 8002994:	fab1 f181 	clz	r1, r1
 8002998:	440b      	add	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299c:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 800299e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029a0:	f7fe ffa2 	bl	80018e8 <HAL_GetTick>
 80029a4:	f04f 0802 	mov.w	r8, #2
 80029a8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ac:	f7fe ff9c 	bl	80018e8 <HAL_GetTick>
 80029b0:	1b40      	subs	r0, r0, r5
 80029b2:	2802      	cmp	r0, #2
 80029b4:	f200 80e9 	bhi.w	8002b8a <HAL_RCC_OscConfig+0x36a>
 80029b8:	fa98 f3a8 	rbit	r3, r8
 80029bc:	fa98 f3a8 	rbit	r3, r8
 80029c0:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	fa98 f3a8 	rbit	r3, r8
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	fa06 f303 	lsl.w	r3, r6, r3
 80029d6:	4213      	tst	r3, r2
 80029d8:	d0e8      	beq.n	80029ac <HAL_RCC_OscConfig+0x18c>
 80029da:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	0758      	lsls	r0, r3, #29
 80029de:	d4b0      	bmi.n	8002942 <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e0:	69a0      	ldr	r0, [r4, #24]
 80029e2:	b388      	cbz	r0, 8002a48 <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e4:	4d55      	ldr	r5, [pc, #340]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 80029e6:	686b      	ldr	r3, [r5, #4]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	f000 8179 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	2802      	cmp	r0, #2
 80029f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f8:	f000 8196 	beq.w	8002d28 <HAL_RCC_OscConfig+0x508>
 80029fc:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe ff69 	bl	80018e8 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a16:	462c      	mov	r4, r5
 8002a18:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8002a1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1e:	2601      	movs	r6, #1
 8002a20:	e005      	b.n	8002a2e <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe ff61 	bl	80018e8 <HAL_GetTick>
 8002a26:	1b40      	subs	r0, r0, r5
 8002a28:	2802      	cmp	r0, #2
 8002a2a:	f200 80ae 	bhi.w	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002a2e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	fa97 f3a7 	rbit	r3, r7
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	fa06 f303 	lsl.w	r3, r6, r3
 8002a44:	4213      	tst	r3, r2
 8002a46:	d1ec      	bne.n	8002a22 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 8002a48:	2000      	movs	r0, #0
}
 8002a4a:	b003      	add	sp, #12
 8002a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a50:	6852      	ldr	r2, [r2, #4]
 8002a52:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002a56:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a5a:	f47f af37 	bne.w	80028cc <HAL_RCC_OscConfig+0xac>
 8002a5e:	2202      	movs	r2, #2
 8002a60:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a64:	4935      	ldr	r1, [pc, #212]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 8002a66:	6808      	ldr	r0, [r1, #0]
 8002a68:	fa92 f2a2 	rbit	r2, r2
 8002a6c:	fab2 f282 	clz	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4202      	tst	r2, r0
 8002a7c:	d064      	beq.n	8002b48 <HAL_RCC_OscConfig+0x328>
 8002a7e:	68e2      	ldr	r2, [r4, #12]
 8002a80:	428a      	cmp	r2, r1
 8002a82:	d061      	beq.n	8002b48 <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 8002a84:	2001      	movs	r0, #1
}
 8002a86:	b003      	add	sp, #12
 8002a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a8c:	2501      	movs	r5, #1
 8002a8e:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4f29      	ldr	r7, [pc, #164]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8002a96:	fab1 f181 	clz	r1, r1
 8002a9a:	440b      	add	r3, r1
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	f04f 0802 	mov.w	r8, #2
 8002aa2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002aa4:	f7fe ff20 	bl	80018e8 <HAL_GetTick>
 8002aa8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aaa:	e004      	b.n	8002ab6 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aac:	f7fe ff1c 	bl	80018e8 <HAL_GetTick>
 8002ab0:	1b80      	subs	r0, r0, r6
 8002ab2:	2802      	cmp	r0, #2
 8002ab4:	d869      	bhi.n	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002ab6:	fa98 f3a8 	rbit	r3, r8
 8002aba:	fa98 f3a8 	rbit	r3, r8
 8002abe:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	fa98 f3a8 	rbit	r3, r8
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa05 f303 	lsl.w	r3, r5, r3
 8002ad4:	4213      	tst	r3, r2
 8002ad6:	d1e9      	bne.n	8002aac <HAL_RCC_OscConfig+0x28c>
 8002ad8:	e77f      	b.n	80029da <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ae0:	61da      	str	r2, [r3, #28]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002aec:	f04f 0801 	mov.w	r8, #1
 8002af0:	e72e      	b.n	8002950 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af2:	684a      	ldr	r2, [r1, #4]
 8002af4:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002af8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002afc:	f47f aea7 	bne.w	800284e <HAL_RCC_OscConfig+0x2e>
 8002b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b04:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	490c      	ldr	r1, [pc, #48]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 8002b0a:	6808      	ldr	r0, [r1, #0]
 8002b0c:	fa92 f2a2 	rbit	r2, r2
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	f002 021f 	and.w	r2, r2, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1e:	4202      	tst	r2, r0
 8002b20:	f43f aec6 	beq.w	80028b0 <HAL_RCC_OscConfig+0x90>
 8002b24:	6862      	ldr	r2, [r4, #4]
 8002b26:	2a00      	cmp	r2, #0
 8002b28:	f47f aec2 	bne.w	80028b0 <HAL_RCC_OscConfig+0x90>
 8002b2c:	e7aa      	b.n	8002a84 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	4a03      	ldr	r2, [pc, #12]	; (8002b3c <HAL_RCC_OscConfig+0x31c>)
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	e69e      	b.n	8002878 <HAL_RCC_OscConfig+0x58>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	4dab      	ldr	r5, [pc, #684]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
 8002b4a:	21f8      	movs	r1, #248	; 0xf8
 8002b4c:	6828      	ldr	r0, [r5, #0]
 8002b4e:	fa91 f1a1 	rbit	r1, r1
 8002b52:	6922      	ldr	r2, [r4, #16]
 8002b54:	fab1 f181 	clz	r1, r1
 8002b58:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8002b5c:	408a      	lsls	r2, r1
 8002b5e:	4302      	orrs	r2, r0
 8002b60:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	071d      	lsls	r5, r3, #28
 8002b64:	f57f aeeb 	bpl.w	800293e <HAL_RCC_OscConfig+0x11e>
 8002b68:	e70b      	b.n	8002982 <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b72:	f7fe feb9 	bl	80018e8 <HAL_GetTick>
 8002b76:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	05db      	lsls	r3, r3, #23
 8002b7c:	f53f aeed 	bmi.w	800295a <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fe feb2 	bl	80018e8 <HAL_GetTick>
 8002b84:	1b80      	subs	r0, r0, r6
 8002b86:	2864      	cmp	r0, #100	; 0x64
 8002b88:	d9f6      	bls.n	8002b78 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8002b8a:	2003      	movs	r0, #3
}
 8002b8c:	b003      	add	sp, #12
 8002b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b92:	4d99      	ldr	r5, [pc, #612]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	602b      	str	r3, [r5, #0]
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fea0 	bl	80018e8 <HAL_GetTick>
 8002ba8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002bac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	2701      	movs	r7, #1
 8002bb0:	e004      	b.n	8002bbc <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb2:	f7fe fe99 	bl	80018e8 <HAL_GetTick>
 8002bb6:	1b80      	subs	r0, r0, r6
 8002bb8:	2864      	cmp	r0, #100	; 0x64
 8002bba:	d8e6      	bhi.n	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002bbc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc0:	682a      	ldr	r2, [r5, #0]
 8002bc2:	fa98 f3a8 	rbit	r3, r8
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	fa07 f303 	lsl.w	r3, r7, r3
 8002bd2:	4213      	tst	r3, r2
 8002bd4:	d1ed      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x392>
 8002bd6:	e66a      	b.n	80028ae <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	4d87      	ldr	r5, [pc, #540]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
 8002bda:	6a2b      	ldr	r3, [r5, #32]
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	622b      	str	r3, [r5, #32]
 8002be2:	6a2b      	ldr	r3, [r5, #32]
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002bea:	f7fe fe7d 	bl	80018e8 <HAL_GetTick>
 8002bee:	f04f 0902 	mov.w	r9, #2
 8002bf2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf4:	2701      	movs	r7, #1
 8002bf6:	e013      	b.n	8002c20 <HAL_RCC_OscConfig+0x400>
 8002bf8:	fa99 f3a9 	rbit	r3, r9
 8002bfc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002bfe:	fa99 f3a9 	rbit	r3, r9
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	fa07 f303 	lsl.w	r3, r7, r3
 8002c0e:	4213      	tst	r3, r2
 8002c10:	d00e      	beq.n	8002c30 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe fe69 	bl	80018e8 <HAL_GetTick>
 8002c16:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c1a:	1b80      	subs	r0, r0, r6
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	d8b4      	bhi.n	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002c20:	fa99 f3a9 	rbit	r3, r9
 8002c24:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0e5      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x3d8>
 8002c2c:	6a2a      	ldr	r2, [r5, #32]
 8002c2e:	e7e6      	b.n	8002bfe <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 8002c30:	f1b8 0f00 	cmp.w	r8, #0
 8002c34:	f43f aed4 	beq.w	80029e0 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4a6f      	ldr	r2, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
 8002c3a:	69d3      	ldr	r3, [r2, #28]
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	e6cd      	b.n	80029e0 <HAL_RCC_OscConfig+0x1c0>
 8002c44:	2501      	movs	r5, #1
 8002c46:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c56:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c58:	4f67      	ldr	r7, [pc, #412]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fe44 	bl	80018e8 <HAL_GetTick>
 8002c60:	f04f 0802 	mov.w	r8, #2
 8002c64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e004      	b.n	8002c72 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe fe3e 	bl	80018e8 <HAL_GetTick>
 8002c6c:	1b80      	subs	r0, r0, r6
 8002c6e:	2802      	cmp	r0, #2
 8002c70:	d88b      	bhi.n	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002c72:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	fa98 f3a8 	rbit	r3, r8
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa05 f303 	lsl.w	r3, r5, r3
 8002c88:	4213      	tst	r3, r2
 8002c8a:	d1ed      	bne.n	8002c68 <HAL_RCC_OscConfig+0x448>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	e654      	b.n	800293a <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	4a59      	ldr	r2, [pc, #356]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
 8002c92:	6a13      	ldr	r3, [r2, #32]
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fe25 	bl	80018e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	4f56      	ldr	r7, [pc, #344]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	2601      	movs	r6, #1
 8002ca8:	e014      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4b4>
 8002caa:	fa99 f3a9 	rbit	r3, r9
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	fa99 f3a9 	rbit	r3, r9
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	fa06 f303 	lsl.w	r3, r6, r3
 8002cc0:	4213      	tst	r3, r2
 8002cc2:	d1b5      	bne.n	8002c30 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fe10 	bl	80018e8 <HAL_GetTick>
 8002cc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	4298      	cmp	r0, r3
 8002cd0:	f63f af5b 	bhi.w	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002cd4:	fa99 f3a9 	rbit	r3, r9
 8002cd8:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0e4      	beq.n	8002caa <HAL_RCC_OscConfig+0x48a>
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	e7e5      	b.n	8002cb0 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	2801      	cmp	r0, #1
 8002ce6:	f43f aeb0 	beq.w	8002a4a <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 8002cea:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cec:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8002cee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cf0:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8002cf4:	4288      	cmp	r0, r1
 8002cf6:	f47f aec5 	bne.w	8002a84 <HAL_RCC_OscConfig+0x264>
 8002cfa:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002cfc:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d00:	428a      	cmp	r2, r1
 8002d02:	f47f aebf 	bne.w	8002a84 <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d06:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d08:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 8002d0c:	1a18      	subs	r0, r3, r0
 8002d0e:	bf18      	it	ne
 8002d10:	2001      	movne	r0, #1
 8002d12:	e69a      	b.n	8002a4a <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d14:	f042 0204 	orr.w	r2, r2, #4
 8002d18:	621a      	str	r2, [r3, #32]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	621a      	str	r2, [r3, #32]
 8002d22:	e7ba      	b.n	8002c9a <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 8002d24:	2001      	movs	r0, #1
}
 8002d26:	4770      	bx	lr
 8002d28:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fdd3 	bl	80018e8 <HAL_GetTick>
 8002d42:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002d46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	2701      	movs	r7, #1
 8002d4a:	e005      	b.n	8002d58 <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fdcc 	bl	80018e8 <HAL_GetTick>
 8002d50:	1b80      	subs	r0, r0, r6
 8002d52:	2802      	cmp	r0, #2
 8002d54:	f63f af19 	bhi.w	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002d58:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	682a      	ldr	r2, [r5, #0]
 8002d5e:	fa98 f3a8 	rbit	r3, r8
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	fa07 f303 	lsl.w	r3, r7, r3
 8002d6e:	4213      	tst	r3, r2
 8002d70:	d1ec      	bne.n	8002d4c <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002d74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d76:	f023 030f 	bic.w	r3, r3, #15
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002d7e:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8002d82:	686a      	ldr	r2, [r5, #4]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	606b      	str	r3, [r5, #4]
 8002d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d92:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da2:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da4:	4e14      	ldr	r6, [pc, #80]	; (8002df8 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 8002da6:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8002da8:	f7fe fd9e 	bl	80018e8 <HAL_GetTick>
 8002dac:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002db0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db2:	2501      	movs	r5, #1
 8002db4:	e005      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe fd97 	bl	80018e8 <HAL_GetTick>
 8002dba:	1b00      	subs	r0, r0, r4
 8002dbc:	2802      	cmp	r0, #2
 8002dbe:	f63f aee4 	bhi.w	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002dc2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc6:	6832      	ldr	r2, [r6, #0]
 8002dc8:	fa98 f3a8 	rbit	r3, r8
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa05 f303 	lsl.w	r3, r5, r3
 8002dd8:	4213      	tst	r3, r2
 8002dda:	d0ec      	beq.n	8002db6 <HAL_RCC_OscConfig+0x596>
 8002ddc:	e634      	b.n	8002a48 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002de2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e53f      	b.n	8002878 <HAL_RCC_OscConfig+0x58>
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	f000 80c4 	beq.w	8002f8a <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e02:	4a6d      	ldr	r2, [pc, #436]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	428b      	cmp	r3, r1
{
 8002e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e10:	460d      	mov	r5, r1
 8002e12:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	d20c      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	6813      	ldr	r3, [r2, #0]
 8002e18:	f023 0307 	bic.w	r3, r3, #7
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	428b      	cmp	r3, r1
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002e2a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8002e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	0798      	lsls	r0, r3, #30
 8002e34:	d506      	bpl.n	8002e44 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e36:	4961      	ldr	r1, [pc, #388]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	68a0      	ldr	r0, [r4, #8]
 8002e3a:	684a      	ldr	r2, [r1, #4]
 8002e3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e40:	4302      	orrs	r2, r0
 8002e42:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e44:	07d9      	lsls	r1, r3, #31
 8002e46:	d52f      	bpl.n	8002ea8 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e48:	6861      	ldr	r1, [r4, #4]
 8002e4a:	2901      	cmp	r1, #1
 8002e4c:	f000 809f 	beq.w	8002f8e <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e50:	2902      	cmp	r1, #2
 8002e52:	f000 8087 	beq.w	8002f64 <HAL_RCC_ClockConfig+0x168>
 8002e56:	2202      	movs	r2, #2
 8002e58:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	fab2 f282 	clz	r2, r2
 8002e68:	f002 021f 	and.w	r2, r2, #31
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	fa03 f202 	lsl.w	r2, r3, r2
 8002e72:	4202      	tst	r2, r0
 8002e74:	d0d9      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4e51      	ldr	r6, [pc, #324]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	6873      	ldr	r3, [r6, #4]
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002e82:	f7fe fd31 	bl	80018e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e86:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002e8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8c:	e005      	b.n	8002e9a <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8e:	f7fe fd2b 	bl	80018e8 <HAL_GetTick>
 8002e92:	1bc0      	subs	r0, r0, r7
 8002e94:	4540      	cmp	r0, r8
 8002e96:	f200 808c 	bhi.w	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	6873      	ldr	r3, [r6, #4]
 8002e9c:	6862      	ldr	r2, [r4, #4]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ea6:	d1f2      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4a43      	ldr	r2, [pc, #268]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	42ab      	cmp	r3, r5
 8002eb2:	d909      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	432b      	orrs	r3, r5
 8002ebc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	6813      	ldr	r3, [r2, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	42ab      	cmp	r3, r5
 8002ec6:	d1b0      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	075a      	lsls	r2, r3, #29
 8002ecc:	d506      	bpl.n	8002edc <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ece:	493b      	ldr	r1, [pc, #236]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	68e0      	ldr	r0, [r4, #12]
 8002ed2:	684a      	ldr	r2, [r1, #4]
 8002ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ed8:	4302      	orrs	r2, r0
 8002eda:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	071b      	lsls	r3, r3, #28
 8002ede:	d507      	bpl.n	8002ef0 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee0:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002ee2:	6921      	ldr	r1, [r4, #16]
 8002ee4:	6853      	ldr	r3, [r2, #4]
 8002ee6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002eea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002eee:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002ef0:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002ef2:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ef4:	f003 010c 	and.w	r1, r3, #12
 8002ef8:	2908      	cmp	r1, #8
 8002efa:	d017      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002efc:	4930      	ldr	r1, [pc, #192]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	22f0      	movs	r2, #240	; 0xf0
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f10:	40d3      	lsrs	r3, r2
 8002f12:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 8002f14:	482c      	ldr	r0, [pc, #176]	; (8002fc8 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	4a2c      	ldr	r2, [pc, #176]	; (8002fcc <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8002f1a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8002f20:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002f22:	f7fe fc9f 	bl	8001864 <HAL_InitTick>
  return HAL_OK;
 8002f26:	2000      	movs	r0, #0
}
 8002f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f2c:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8002f30:	fa91 f1a1 	rbit	r1, r1
 8002f34:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f38:	fab1 f181 	clz	r1, r1
 8002f3c:	fa90 f0a0 	rbit	r0, r0
 8002f40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f44:	40cb      	lsrs	r3, r1
 8002f46:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f48:	4c22      	ldr	r4, [pc, #136]	; (8002fd4 <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f4c:	491c      	ldr	r1, [pc, #112]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f4e:	fab0 f080 	clz	r0, r0
 8002f52:	f002 020f 	and.w	r2, r2, #15
 8002f56:	40c2      	lsrs	r2, r0
 8002f58:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f5a:	fbb1 f1f2 	udiv	r1, r1, r2
 8002f5e:	fb03 f101 	mul.w	r1, r3, r1
 8002f62:	e7cc      	b.n	8002efe <HAL_RCC_ClockConfig+0x102>
 8002f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f68:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6c:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f6e:	6810      	ldr	r0, [r2, #0]
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	4203      	tst	r3, r0
 8002f84:	f47f af77 	bne.w	8002e76 <HAL_RCC_ClockConfig+0x7a>
 8002f88:	e74f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002f8a:	2001      	movs	r0, #1
}
 8002f8c:	4770      	bx	lr
 8002f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f92:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa92 f2a2 	rbit	r2, r2
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	f002 021f 	and.w	r2, r2, #31
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	421a      	tst	r2, r3
 8002fac:	f47f af63 	bne.w	8002e76 <HAL_RCC_ClockConfig+0x7a>
 8002fb0:	e73b      	b.n	8002e2a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	e73a      	b.n	8002e2c <HAL_RCC_ClockConfig+0x30>
 8002fb6:	bf00      	nop
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	007a1200 	.word	0x007a1200
 8002fc4:	080049cc 	.word	0x080049cc
 8002fc8:	20000030 	.word	0x20000030
 8002fcc:	20000028 	.word	0x20000028
 8002fd0:	080049e4 	.word	0x080049e4
 8002fd4:	080049f4 	.word	0x080049f4

08002fd8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002fd8:	4a12      	ldr	r2, [pc, #72]	; (8003024 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002fda:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002fdc:	f003 010c 	and.w	r1, r3, #12
 8002fe0:	2908      	cmp	r1, #8
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002fe4:	4810      	ldr	r0, [pc, #64]	; (8003028 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002fe6:	4770      	bx	lr
{
 8002fe8:	b430      	push	{r4, r5}
 8002fea:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 8002fee:	fa90 f0a0 	rbit	r0, r0
 8002ff2:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ff4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ff6:	fab0 f080 	clz	r0, r0
 8002ffa:	fa91 f1a1 	rbit	r1, r1
 8002ffe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003002:	40c3      	lsrs	r3, r0
 8003004:	4809      	ldr	r0, [pc, #36]	; (800302c <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003006:	4d0a      	ldr	r5, [pc, #40]	; (8003030 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003008:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800300a:	4c07      	ldr	r4, [pc, #28]	; (8003028 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800300c:	fab1 f181 	clz	r1, r1
 8003010:	f002 030f 	and.w	r3, r2, #15
 8003014:	40cb      	lsrs	r3, r1
 8003016:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003018:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800301c:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800301e:	fb00 f003 	mul.w	r0, r0, r3
}
 8003022:	4770      	bx	lr
 8003024:	40021000 	.word	0x40021000
 8003028:	007a1200 	.word	0x007a1200
 800302c:	080049e4 	.word	0x080049e4
 8003030:	080049f4 	.word	0x080049f4

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003036:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	fa92 f2a2 	rbit	r2, r2
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003048:	4904      	ldr	r1, [pc, #16]	; (800305c <HAL_RCC_GetPCLK1Freq+0x28>)
 800304a:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	6810      	ldr	r0, [r2, #0]
}    
 8003052:	40d8      	lsrs	r0, r3
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	080049dc 	.word	0x080049dc
 8003060:	20000028 	.word	0x20000028

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003066:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	fa92 f2a2 	rbit	r2, r2
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003078:	4904      	ldr	r1, [pc, #16]	; (800308c <HAL_RCC_GetPCLK2Freq+0x28>)
 800307a:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	6810      	ldr	r0, [r2, #0]
} 
 8003082:	40d8      	lsrs	r0, r3
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	080049dc 	.word	0x080049dc
 8003090:	20000028 	.word	0x20000028

08003094 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003098:	6803      	ldr	r3, [r0, #0]
 800309a:	03d9      	lsls	r1, r3, #15
{
 800309c:	b083      	sub	sp, #12
 800309e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030a0:	d53d      	bpl.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a2:	4ba1      	ldr	r3, [pc, #644]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	00d2      	lsls	r2, r2, #3
 80030a8:	f140 80f6 	bpl.w	8003298 <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4d9f      	ldr	r5, [pc, #636]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80030ae:	682b      	ldr	r3, [r5, #0]
 80030b0:	05df      	lsls	r7, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	f140 80ff 	bpl.w	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ba:	4d9b      	ldr	r5, [pc, #620]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80030bc:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030be:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80030c2:	d01f      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80030c4:	6861      	ldr	r1, [r4, #4]
 80030c6:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d01b      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ce:	6a29      	ldr	r1, [r5, #32]
 80030d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80030d8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030dc:	f8df c250 	ldr.w	ip, [pc, #592]	; 8003330 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	4462      	add	r2, ip
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	2701      	movs	r7, #1
 80030ea:	6017      	str	r7, [r2, #0]
 80030ec:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	4463      	add	r3, ip
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030fa:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fc:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80030fe:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003100:	f100 80ee 	bmi.w	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003104:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003106:	4a88      	ldr	r2, [pc, #544]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003108:	6a13      	ldr	r3, [r2, #32]
 800310a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310e:	430b      	orrs	r3, r1
 8003110:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003112:	b11e      	cbz	r6, 800311c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	69d3      	ldr	r3, [r2, #28]
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	61d3      	str	r3, [r2, #28]
 800311c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311e:	07da      	lsls	r2, r3, #31
 8003120:	d506      	bpl.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	4981      	ldr	r1, [pc, #516]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003124:	68a0      	ldr	r0, [r4, #8]
 8003126:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003128:	f022 0203 	bic.w	r2, r2, #3
 800312c:	4302      	orrs	r2, r0
 800312e:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003130:	079f      	lsls	r7, r3, #30
 8003132:	d506      	bpl.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003134:	497c      	ldr	r1, [pc, #496]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003136:	68e0      	ldr	r0, [r4, #12]
 8003138:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800313a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800313e:	4302      	orrs	r2, r0
 8003140:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003142:	075e      	lsls	r6, r3, #29
 8003144:	d506      	bpl.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003146:	4978      	ldr	r1, [pc, #480]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003148:	6920      	ldr	r0, [r4, #16]
 800314a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800314c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003150:	4302      	orrs	r2, r0
 8003152:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003154:	069d      	lsls	r5, r3, #26
 8003156:	d506      	bpl.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003158:	4973      	ldr	r1, [pc, #460]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800315a:	69e0      	ldr	r0, [r4, #28]
 800315c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800315e:	f022 0210 	bic.w	r2, r2, #16
 8003162:	4302      	orrs	r2, r0
 8003164:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003166:	0398      	lsls	r0, r3, #14
 8003168:	d506      	bpl.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800316a:	496f      	ldr	r1, [pc, #444]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800316c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800316e:	684a      	ldr	r2, [r1, #4]
 8003170:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003174:	4302      	orrs	r2, r0
 8003176:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003178:	0659      	lsls	r1, r3, #25
 800317a:	d506      	bpl.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800317c:	496a      	ldr	r1, [pc, #424]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800317e:	6a20      	ldr	r0, [r4, #32]
 8003180:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003182:	f022 0220 	bic.w	r2, r2, #32
 8003186:	4302      	orrs	r2, r0
 8003188:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800318a:	035a      	lsls	r2, r3, #13
 800318c:	d506      	bpl.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800318e:	4966      	ldr	r1, [pc, #408]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003190:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003192:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003198:	4302      	orrs	r2, r0
 800319a:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800319c:	071f      	lsls	r7, r3, #28
 800319e:	d506      	bpl.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031a0:	4961      	ldr	r1, [pc, #388]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031a2:	6960      	ldr	r0, [r4, #20]
 80031a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031a6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80031aa:	4302      	orrs	r2, r0
 80031ac:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ae:	06de      	lsls	r6, r3, #27
 80031b0:	d506      	bpl.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b2:	495d      	ldr	r1, [pc, #372]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031b4:	69a0      	ldr	r0, [r4, #24]
 80031b6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031b8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80031bc:	4302      	orrs	r2, r0
 80031be:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031c0:	059d      	lsls	r5, r3, #22
 80031c2:	d506      	bpl.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031c4:	4958      	ldr	r1, [pc, #352]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80031c8:	684a      	ldr	r2, [r1, #4]
 80031ca:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80031ce:	4302      	orrs	r2, r0
 80031d0:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031d2:	0618      	lsls	r0, r3, #24
 80031d4:	d506      	bpl.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031d6:	4954      	ldr	r1, [pc, #336]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80031da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80031dc:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80031e0:	4302      	orrs	r2, r0
 80031e2:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80031e4:	05d9      	lsls	r1, r3, #23
 80031e6:	d506      	bpl.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80031e8:	494f      	ldr	r1, [pc, #316]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80031ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80031ee:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80031f2:	4302      	orrs	r2, r0
 80031f4:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031f6:	04da      	lsls	r2, r3, #19
 80031f8:	d506      	bpl.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031fa:	494b      	ldr	r1, [pc, #300]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80031fe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003204:	4302      	orrs	r2, r0
 8003206:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003208:	049f      	lsls	r7, r3, #18
 800320a:	d506      	bpl.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800320c:	4946      	ldr	r1, [pc, #280]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800320e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003210:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003212:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003216:	4302      	orrs	r2, r0
 8003218:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800321a:	02de      	lsls	r6, r3, #11
 800321c:	d506      	bpl.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800321e:	4942      	ldr	r1, [pc, #264]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003220:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003222:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003224:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003228:	4302      	orrs	r2, r0
 800322a:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800322c:	029d      	lsls	r5, r3, #10
 800322e:	d506      	bpl.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003230:	493d      	ldr	r1, [pc, #244]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003232:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003234:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003236:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800323a:	4302      	orrs	r2, r0
 800323c:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800323e:	0258      	lsls	r0, r3, #9
 8003240:	d506      	bpl.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003242:	4939      	ldr	r1, [pc, #228]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003244:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003246:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	4302      	orrs	r2, r0
 800324e:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003250:	0219      	lsls	r1, r3, #8
 8003252:	d506      	bpl.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003254:	4934      	ldr	r1, [pc, #208]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003256:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003258:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800325a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325e:	4302      	orrs	r2, r0
 8003260:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003262:	01da      	lsls	r2, r3, #7
 8003264:	d506      	bpl.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003266:	4930      	ldr	r1, [pc, #192]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003268:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800326a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800326c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003270:	4302      	orrs	r2, r0
 8003272:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003274:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003278:	d103      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800327a:	4618      	mov	r0, r3
}
 800327c:	b003      	add	sp, #12
 800327e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003282:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003284:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003286:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800328c:	430b      	orrs	r3, r1
  return HAL_OK;
 800328e:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003292:	b003      	add	sp, #12
 8003294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003298:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	4d24      	ldr	r5, [pc, #144]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032a0:	61da      	str	r2, [r3, #28]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 80032b0:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	f53f af01 	bmi.w	80030ba <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80032c0:	f7fe fb12 	bl	80018e8 <HAL_GetTick>
 80032c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	05d8      	lsls	r0, r3, #23
 80032ca:	f53f aef6 	bmi.w	80030ba <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fb0b 	bl	80018e8 <HAL_GetTick>
 80032d2:	1bc0      	subs	r0, r0, r7
 80032d4:	2864      	cmp	r0, #100	; 0x64
 80032d6:	d9f6      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 80032d8:	2003      	movs	r0, #3
}
 80032da:	b003      	add	sp, #12
 80032dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80032e0:	f7fe fb02 	bl	80018e8 <HAL_GetTick>
 80032e4:	f04f 0902 	mov.w	r9, #2
 80032e8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ea:	e015      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80032ec:	fa99 f3a9 	rbit	r3, r9
 80032f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80032f2:	fa99 f3a9 	rbit	r3, r9
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	fa07 f303 	lsl.w	r3, r7, r3
 8003302:	4213      	tst	r3, r2
 8003304:	f47f aefe 	bne.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe faee 	bl	80018e8 <HAL_GetTick>
 800330c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003310:	eba0 0008 	sub.w	r0, r0, r8
 8003314:	4298      	cmp	r0, r3
 8003316:	d8df      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003318:	fa99 f3a9 	rbit	r3, r9
 800331c:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0e3      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003324:	6a2a      	ldr	r2, [r5, #32]
 8003326:	e7e4      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
 8003330:	10908100 	.word	0x10908100

08003334 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003334:	6a03      	ldr	r3, [r0, #32]
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6203      	str	r3, [r0, #32]
{
 800333c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003342:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003344:	4f1a      	ldr	r7, [pc, #104]	; (80033b0 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 8003346:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003348:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800334a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800334e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003352:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003356:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8003358:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 800335c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003360:	d012      	beq.n	8003388 <TIM_OC1_SetConfig+0x54>
 8003362:	4c14      	ldr	r4, [pc, #80]	; (80033b4 <TIM_OC1_SetConfig+0x80>)
 8003364:	42a0      	cmp	r0, r4
 8003366:	d00f      	beq.n	8003388 <TIM_OC1_SetConfig+0x54>
 8003368:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800336c:	42a0      	cmp	r0, r4
 800336e:	d00b      	beq.n	8003388 <TIM_OC1_SetConfig+0x54>
 8003370:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003374:	42a0      	cmp	r0, r4
 8003376:	d007      	beq.n	8003388 <TIM_OC1_SetConfig+0x54>
 8003378:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800337c:	42a0      	cmp	r0, r4
 800337e:	d003      	beq.n	8003388 <TIM_OC1_SetConfig+0x54>
 8003380:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003384:	42a0      	cmp	r0, r4
 8003386:	d10b      	bne.n	80033a0 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003388:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800338a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800338e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003390:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003394:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003398:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800339a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800339e:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033a0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80033a2:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033a4:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80033a6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80033a8:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80033aa:	6203      	str	r3, [r0, #32]
}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40013400 	.word	0x40013400

080033b8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033b8:	6a03      	ldr	r3, [r0, #32]
 80033ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033be:	6203      	str	r3, [r0, #32]
{
 80033c0:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033c6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033c8:	4f21      	ldr	r7, [pc, #132]	; (8003450 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ca:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80033cc:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80033d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033da:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80033e0:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e4:	d016      	beq.n	8003414 <TIM_OC3_SetConfig+0x5c>
 80033e6:	4c1b      	ldr	r4, [pc, #108]	; (8003454 <TIM_OC3_SetConfig+0x9c>)
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d013      	beq.n	8003414 <TIM_OC3_SetConfig+0x5c>
 80033ec:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80033f0:	42a0      	cmp	r0, r4
 80033f2:	d024      	beq.n	800343e <TIM_OC3_SetConfig+0x86>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f4:	4c18      	ldr	r4, [pc, #96]	; (8003458 <TIM_OC3_SetConfig+0xa0>)
 80033f6:	42a0      	cmp	r0, r4
 80033f8:	d013      	beq.n	8003422 <TIM_OC3_SetConfig+0x6a>
 80033fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033fe:	42a0      	cmp	r0, r4
 8003400:	d00f      	beq.n	8003422 <TIM_OC3_SetConfig+0x6a>
 8003402:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003406:	42a0      	cmp	r0, r4
 8003408:	d00b      	beq.n	8003422 <TIM_OC3_SetConfig+0x6a>
 800340a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800340e:	42a0      	cmp	r0, r4
 8003410:	d10e      	bne.n	8003430 <TIM_OC3_SetConfig+0x78>
 8003412:	e006      	b.n	8003422 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003414:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800341a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800341e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003422:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003426:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800342a:	432c      	orrs	r4, r5
 800342c:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003430:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003432:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003434:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003436:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8003438:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800343a:	6203      	str	r3, [r0, #32]
}
 800343c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003444:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	e7d2      	b.n	80033f4 <TIM_OC3_SetConfig+0x3c>
 800344e:	bf00      	nop
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40013400 	.word	0x40013400
 8003458:	40014000 	.word	0x40014000

0800345c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800345c:	2800      	cmp	r0, #0
 800345e:	d06e      	beq.n	800353e <HAL_TIM_Base_Init+0xe2>
{
 8003460:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003466:	4604      	mov	r4, r0
 8003468:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05e      	beq.n	800352e <HAL_TIM_Base_Init+0xd2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003470:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003472:	4936      	ldr	r1, [pc, #216]	; (800354c <HAL_TIM_Base_Init+0xf0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800347a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800347c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800347e:	d042      	beq.n	8003506 <HAL_TIM_Base_Init+0xaa>
 8003480:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003484:	d028      	beq.n	80034d8 <HAL_TIM_Base_Init+0x7c>
 8003486:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800348a:	428a      	cmp	r2, r1
 800348c:	d024      	beq.n	80034d8 <HAL_TIM_Base_Init+0x7c>
 800348e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003492:	428a      	cmp	r2, r1
 8003494:	d020      	beq.n	80034d8 <HAL_TIM_Base_Init+0x7c>
 8003496:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 800349a:	428a      	cmp	r2, r1
 800349c:	d033      	beq.n	8003506 <HAL_TIM_Base_Init+0xaa>
 800349e:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80034a2:	428a      	cmp	r2, r1
 80034a4:	d04d      	beq.n	8003542 <HAL_TIM_Base_Init+0xe6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	492a      	ldr	r1, [pc, #168]	; (8003550 <HAL_TIM_Base_Init+0xf4>)
 80034a8:	428a      	cmp	r2, r1
 80034aa:	d045      	beq.n	8003538 <HAL_TIM_Base_Init+0xdc>
 80034ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80034b0:	428a      	cmp	r2, r1
 80034b2:	d041      	beq.n	8003538 <HAL_TIM_Base_Init+0xdc>
 80034b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80034b8:	428a      	cmp	r2, r1
 80034ba:	d03d      	beq.n	8003538 <HAL_TIM_Base_Init+0xdc>
 80034bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c0:	428a      	cmp	r2, r1
 80034c2:	d039      	beq.n	8003538 <HAL_TIM_Base_Init+0xdc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c6:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80034c8:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ce:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80034d0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034d4:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d6:	e010      	b.n	80034fa <HAL_TIM_Base_Init+0x9e>
    tmpcr1 |= Structure->CounterMode;
 80034d8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034da:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034dc:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80034e2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ea:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80034f2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80034f4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034f8:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80034fa:	2301      	movs	r3, #1
 80034fc:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003502:	2000      	movs	r0, #0
}
 8003504:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003506:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003508:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003510:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800351e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	68e3      	ldr	r3, [r4, #12]
 8003522:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003528:	6963      	ldr	r3, [r4, #20]
 800352a:	6313      	str	r3, [r2, #48]	; 0x30
 800352c:	e7e5      	b.n	80034fa <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 800352e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003532:	f7fe f81d 	bl	8001570 <HAL_TIM_Base_MspInit>
 8003536:	e79b      	b.n	8003470 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003538:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800353a:	69a1      	ldr	r1, [r4, #24]
 800353c:	e7e9      	b.n	8003512 <HAL_TIM_Base_Init+0xb6>
    return HAL_ERROR;
 800353e:	2001      	movs	r0, #1
}
 8003540:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003542:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003548:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	e7ac      	b.n	80034a6 <HAL_TIM_Base_Init+0x4a>
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40014000 	.word	0x40014000

08003554 <HAL_TIM_PWM_MspInit>:
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop

08003558 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003558:	2800      	cmp	r0, #0
 800355a:	d06e      	beq.n	800363a <HAL_TIM_PWM_Init+0xe2>
{
 800355c:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003562:	4604      	mov	r4, r0
 8003564:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05e      	beq.n	800362a <HAL_TIM_PWM_Init+0xd2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356e:	4936      	ldr	r1, [pc, #216]	; (8003648 <HAL_TIM_PWM_Init+0xf0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	2302      	movs	r3, #2
 8003572:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003576:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003578:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357a:	d042      	beq.n	8003602 <HAL_TIM_PWM_Init+0xaa>
 800357c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003580:	d028      	beq.n	80035d4 <HAL_TIM_PWM_Init+0x7c>
 8003582:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003586:	428a      	cmp	r2, r1
 8003588:	d024      	beq.n	80035d4 <HAL_TIM_PWM_Init+0x7c>
 800358a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800358e:	428a      	cmp	r2, r1
 8003590:	d020      	beq.n	80035d4 <HAL_TIM_PWM_Init+0x7c>
 8003592:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8003596:	428a      	cmp	r2, r1
 8003598:	d033      	beq.n	8003602 <HAL_TIM_PWM_Init+0xaa>
 800359a:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 800359e:	428a      	cmp	r2, r1
 80035a0:	d04d      	beq.n	800363e <HAL_TIM_PWM_Init+0xe6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a2:	492a      	ldr	r1, [pc, #168]	; (800364c <HAL_TIM_PWM_Init+0xf4>)
 80035a4:	428a      	cmp	r2, r1
 80035a6:	d045      	beq.n	8003634 <HAL_TIM_PWM_Init+0xdc>
 80035a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80035ac:	428a      	cmp	r2, r1
 80035ae:	d041      	beq.n	8003634 <HAL_TIM_PWM_Init+0xdc>
 80035b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80035b4:	428a      	cmp	r2, r1
 80035b6:	d03d      	beq.n	8003634 <HAL_TIM_PWM_Init+0xdc>
 80035b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035bc:	428a      	cmp	r2, r1
 80035be:	d039      	beq.n	8003634 <HAL_TIM_PWM_Init+0xdc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c0:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c2:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80035c4:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ca:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80035cc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ce:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035d0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d2:	e010      	b.n	80035f6 <HAL_TIM_PWM_Init+0x9e>
    tmpcr1 |= Structure->CounterMode;
 80035d4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d6:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d8:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035de:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ec:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80035ee:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80035f0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035f4:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80035f6:	2301      	movs	r3, #1
 80035f8:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80035fe:	2000      	movs	r0, #0
}
 8003600:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003602:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003604:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003606:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800360c:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003618:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800361a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	68e3      	ldr	r3, [r4, #12]
 800361e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003624:	6963      	ldr	r3, [r4, #20]
 8003626:	6313      	str	r3, [r2, #48]	; 0x30
 8003628:	e7e5      	b.n	80035f6 <HAL_TIM_PWM_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 800362a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800362e:	f7ff ff91 	bl	8003554 <HAL_TIM_PWM_MspInit>
 8003632:	e79b      	b.n	800356c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003634:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003636:	69a1      	ldr	r1, [r4, #24]
 8003638:	e7e9      	b.n	800360e <HAL_TIM_PWM_Init+0xb6>
    return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
}
 800363c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800363e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003644:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003646:	e7ac      	b.n	80035a2 <HAL_TIM_PWM_Init+0x4a>
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40014000 	.word	0x40014000

08003650 <HAL_TIM_PWM_Start>:
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	2201      	movs	r2, #1
 8003654:	6a18      	ldr	r0, [r3, #32]
 8003656:	f001 011f 	and.w	r1, r1, #31
 800365a:	fa02 f101 	lsl.w	r1, r2, r1
 800365e:	ea20 0001 	bic.w	r0, r0, r1
 8003662:	b410      	push	{r4}
 8003664:	6218      	str	r0, [r3, #32]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	4c15      	ldr	r4, [pc, #84]	; (80036c0 <HAL_TIM_PWM_Start+0x70>)
 800366a:	4311      	orrs	r1, r2
 800366c:	42a3      	cmp	r3, r4
 800366e:	6219      	str	r1, [r3, #32]
 8003670:	d012      	beq.n	8003698 <HAL_TIM_PWM_Start+0x48>
 8003672:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <HAL_TIM_PWM_Start+0x74>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00f      	beq.n	8003698 <HAL_TIM_PWM_Start+0x48>
 8003678:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800367c:	4293      	cmp	r3, r2
 800367e:	d00b      	beq.n	8003698 <HAL_TIM_PWM_Start+0x48>
 8003680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <HAL_TIM_PWM_Start+0x48>
 8003688:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <HAL_TIM_PWM_Start+0x48>
 8003690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <HAL_TIM_PWM_Start+0x50>
 8003698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_TIM_PWM_Start+0x78>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	2a06      	cmp	r2, #6
 80036a8:	d006      	beq.n	80036b8 <HAL_TIM_PWM_Start+0x68>
 80036aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80036ae:	d003      	beq.n	80036b8 <HAL_TIM_PWM_Start+0x68>
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	2000      	movs	r0, #0
 80036ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40013400 	.word	0x40013400
 80036c8:	00010007 	.word	0x00010007

080036cc <HAL_TIM_PWM_Start_IT>:
 80036cc:	b410      	push	{r4}
 80036ce:	290c      	cmp	r1, #12
 80036d0:	d808      	bhi.n	80036e4 <HAL_TIM_PWM_Start_IT+0x18>
 80036d2:	e8df f001 	tbb	[pc, r1]
 80036d6:	0745      	.short	0x0745
 80036d8:	074b0707 	.word	0x074b0707
 80036dc:	073f0707 	.word	0x073f0707
 80036e0:	0707      	.short	0x0707
 80036e2:	51          	.byte	0x51
 80036e3:	00          	.byte	0x00
 80036e4:	6803      	ldr	r3, [r0, #0]
 80036e6:	6a18      	ldr	r0, [r3, #32]
 80036e8:	4c26      	ldr	r4, [pc, #152]	; (8003784 <HAL_TIM_PWM_Start_IT+0xb8>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	f001 011f 	and.w	r1, r1, #31
 80036f0:	fa02 f101 	lsl.w	r1, r2, r1
 80036f4:	ea20 0001 	bic.w	r0, r0, r1
 80036f8:	6218      	str	r0, [r3, #32]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	ea41 0102 	orr.w	r1, r1, r2
 8003702:	6219      	str	r1, [r3, #32]
 8003704:	d012      	beq.n	800372c <HAL_TIM_PWM_Start_IT+0x60>
 8003706:	4a20      	ldr	r2, [pc, #128]	; (8003788 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00f      	beq.n	800372c <HAL_TIM_PWM_Start_IT+0x60>
 800370c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <HAL_TIM_PWM_Start_IT+0x60>
 8003714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <HAL_TIM_PWM_Start_IT+0x60>
 800371c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <HAL_TIM_PWM_Start_IT+0x60>
 8003724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <HAL_TIM_PWM_Start_IT+0x68>
 800372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_TIM_PWM_Start_IT+0xc0>)
 8003738:	400a      	ands	r2, r1
 800373a:	2a06      	cmp	r2, #6
 800373c:	d006      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x80>
 800373e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003742:	d003      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x80>
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	2000      	movs	r0, #0
 800374e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	f042 0208 	orr.w	r2, r2, #8
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e7c2      	b.n	80036e6 <HAL_TIM_PWM_Start_IT+0x1a>
 8003760:	6803      	ldr	r3, [r0, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	f042 0202 	orr.w	r2, r2, #2
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e7bc      	b.n	80036e6 <HAL_TIM_PWM_Start_IT+0x1a>
 800376c:	6803      	ldr	r3, [r0, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	f042 0204 	orr.w	r2, r2, #4
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	e7b6      	b.n	80036e6 <HAL_TIM_PWM_Start_IT+0x1a>
 8003778:	6803      	ldr	r3, [r0, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	f042 0210 	orr.w	r2, r2, #16
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	e7b0      	b.n	80036e6 <HAL_TIM_PWM_Start_IT+0x1a>
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40013400 	.word	0x40013400
 800378c:	00010007 	.word	0x00010007

08003790 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003790:	2800      	cmp	r0, #0
 8003792:	f000 80a8 	beq.w	80038e6 <HAL_TIM_Encoder_Init+0x156>
{
 8003796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800379e:	460d      	mov	r5, r1
 80037a0:	4604      	mov	r4, r0
 80037a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8092 	beq.w	80038d0 <HAL_TIM_Encoder_Init+0x140>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037ac:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ae:	4951      	ldr	r1, [pc, #324]	; (80038f4 <HAL_TIM_Encoder_Init+0x164>)
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	2202      	movs	r2, #2
 80037b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 80037bc:	f022 0207 	bic.w	r2, r2, #7
 80037c0:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c2:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80037c4:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c6:	d06f      	beq.n	80038a8 <HAL_TIM_Encoder_Init+0x118>
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d028      	beq.n	8003820 <HAL_TIM_Encoder_Init+0x90>
 80037ce:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80037d2:	428b      	cmp	r3, r1
 80037d4:	d024      	beq.n	8003820 <HAL_TIM_Encoder_Init+0x90>
 80037d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80037da:	428b      	cmp	r3, r1
 80037dc:	d020      	beq.n	8003820 <HAL_TIM_Encoder_Init+0x90>
 80037de:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80037e2:	428b      	cmp	r3, r1
 80037e4:	d060      	beq.n	80038a8 <HAL_TIM_Encoder_Init+0x118>
 80037e6:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80037ea:	428b      	cmp	r3, r1
 80037ec:	d07d      	beq.n	80038ea <HAL_TIM_Encoder_Init+0x15a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ee:	4942      	ldr	r1, [pc, #264]	; (80038f8 <HAL_TIM_Encoder_Init+0x168>)
 80037f0:	428b      	cmp	r3, r1
 80037f2:	d072      	beq.n	80038da <HAL_TIM_Encoder_Init+0x14a>
 80037f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80037f8:	428b      	cmp	r3, r1
 80037fa:	d06e      	beq.n	80038da <HAL_TIM_Encoder_Init+0x14a>
 80037fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003800:	428b      	cmp	r3, r1
 8003802:	d06a      	beq.n	80038da <HAL_TIM_Encoder_Init+0x14a>
 8003804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003808:	428b      	cmp	r3, r1
 800380a:	d066      	beq.n	80038da <HAL_TIM_Encoder_Init+0x14a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800380e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003814:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8003816:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003818:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800381c:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800381e:	e010      	b.n	8003842 <HAL_TIM_Encoder_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8003820:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003822:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003824:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003828:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800382a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800382e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003830:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003836:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003838:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800383a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800383c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003840:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003842:	f04f 0c01 	mov.w	ip, #1
 8003846:	f8c3 c014 	str.w	ip, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 800384a:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800384c:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800384e:	69af      	ldr	r7, [r5, #24]
 8003850:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003852:	692a      	ldr	r2, [r5, #16]
  tmpsmcr |= sConfig->EncoderMode;
 8003854:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003858:	f426 7840 	bic.w	r8, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800385c:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800385e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	68ef      	ldr	r7, [r5, #12]
 8003866:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800386a:	433a      	orrs	r2, r7
 800386c:	6a2f      	ldr	r7, [r5, #32]
  tmpccer = htim->Instance->CCER;
 800386e:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003870:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003874:	ea41 0108 	orr.w	r1, r1, r8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003878:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800387c:	696f      	ldr	r7, [r5, #20]
 800387e:	686d      	ldr	r5, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003880:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 8003884:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003888:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800388c:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8003890:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003894:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003896:	4335      	orrs	r5, r6
  htim->Instance->SMCR = tmpsmcr;
 8003898:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800389a:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800389c:	621d      	str	r5, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800389e:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  return HAL_OK;
 80038a2:	2000      	movs	r0, #0
}
 80038a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 80038a8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038aa:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038b0:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b6:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	69a1      	ldr	r1, [r4, #24]
 80038ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038be:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80038c0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c2:	68e2      	ldr	r2, [r4, #12]
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80038ca:	6962      	ldr	r2, [r4, #20]
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
 80038ce:	e7b8      	b.n	8003842 <HAL_TIM_Encoder_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80038d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80038d4:	f7fd fe8a 	bl	80015ec <HAL_TIM_Encoder_MspInit>
 80038d8:	e768      	b.n	80037ac <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038da:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80038de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e2:	4302      	orrs	r2, r0
 80038e4:	e7e9      	b.n	80038ba <HAL_TIM_Encoder_Init+0x12a>
    return HAL_ERROR;
 80038e6:	2001      	movs	r0, #1
}
 80038e8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80038ea:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038f0:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f2:	e77c      	b.n	80037ee <HAL_TIM_Encoder_Init+0x5e>
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40014000 	.word	0x40014000

080038fc <HAL_TIM_Encoder_Start>:
  switch (Channel)
 80038fc:	b1c1      	cbz	r1, 8003930 <HAL_TIM_Encoder_Start+0x34>
 80038fe:	2904      	cmp	r1, #4
 8003900:	d020      	beq.n	8003944 <HAL_TIM_Encoder_Start+0x48>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003902:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003904:	6a1a      	ldr	r2, [r3, #32]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800390c:	6a1a      	ldr	r2, [r3, #32]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	f022 0210 	bic.w	r2, r2, #16
 800391a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	f042 0210 	orr.w	r2, r2, #16
 8003922:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
}
 800392c:	2000      	movs	r0, #0
 800392e:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003930:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	e7ef      	b.n	8003924 <HAL_TIM_Encoder_Start+0x28>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003944:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8003946:	e7e5      	b.n	8003914 <HAL_TIM_Encoder_Start+0x18>

08003948 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003948:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d073      	beq.n	8003a38 <HAL_TIM_ConfigClockSource+0xf0>
{
 8003950:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8003952:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8003954:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003956:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003958:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003960:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003962:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003964:	4c4a      	ldr	r4, [pc, #296]	; (8003a90 <HAL_TIM_ConfigClockSource+0x148>)
  switch (sClockSourceConfig->ClockSource)
 8003966:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003968:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 800396c:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800396e:	d065      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0xf4>
 8003970:	d831      	bhi.n	80039d6 <HAL_TIM_ConfigClockSource+0x8e>
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d048      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0xc0>
 8003976:	d921      	bls.n	80039bc <HAL_TIM_ConfigClockSource+0x74>
 8003978:	2b50      	cmp	r3, #80	; 0x50
 800397a:	d116      	bne.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
  tmpccer = TIMx->CCER;
 800397c:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397e:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003980:	684c      	ldr	r4, [r1, #4]
 8003982:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003984:	f026 0601 	bic.w	r6, r6, #1
 8003988:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003994:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003998:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800399a:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800399c:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800399e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039a4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039a8:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80039aa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	2201      	movs	r2, #1
 80039ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80039b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80039b6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80039b8:	4618      	mov	r0, r3
}
 80039ba:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d002      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x7e>
 80039c0:	d91e      	bls.n	8003a00 <HAL_TIM_ConfigClockSource+0xb8>
 80039c2:	2b30      	cmp	r3, #48	; 0x30
 80039c4:	d1f1      	bne.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 80039c6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039cc:	430b      	orrs	r3, r1
 80039ce:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80039d2:	6093      	str	r3, [r2, #8]
}
 80039d4:	e7e9      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80039d6:	2b70      	cmp	r3, #112	; 0x70
 80039d8:	d049      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0x126>
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	d1e4      	bne.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80039e4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80039e6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e8:	432b      	orrs	r3, r5
 80039ea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ee:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80039f4:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f6:	6893      	ldr	r3, [r2, #8]
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fc:	6093      	str	r3, [r2, #8]
      break;
 80039fe:	e7d4      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003a00:	f033 0110 	bics.w	r1, r3, #16
 8003a04:	d1d1      	bne.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
 8003a06:	e7de      	b.n	80039c6 <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 8003a08:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0a:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0c:	684c      	ldr	r4, [r1, #4]
 8003a0e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a10:	f026 0601 	bic.w	r6, r6, #1
 8003a14:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a16:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a18:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a20:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a24:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003a26:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003a28:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003a2a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a30:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a34:	6093      	str	r3, [r2, #8]
}
 8003a36:	e7b8      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 8003a38:	2002      	movs	r0, #2
}
 8003a3a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3c:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a3e:	684d      	ldr	r5, [r1, #4]
 8003a40:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	f024 0410 	bic.w	r4, r4, #16
 8003a46:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a48:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8003a4a:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a4c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a58:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003a5e:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003a60:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a66:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003a6a:	6093      	str	r3, [r2, #8]
}
 8003a6c:	e79d      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a6e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003a72:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003a74:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a76:	432b      	orrs	r3, r5
 8003a78:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a80:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003a82:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003a84:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003a8a:	6093      	str	r3, [r2, #8]
      break;
 8003a8c:	e78d      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x62>
 8003a8e:	bf00      	nop
 8003a90:	fffe0088 	.word	0xfffe0088

08003a94 <HAL_TIM_PeriodElapsedCallback>:
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_TIM_OC_DelayElapsedCallback>:
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop

08003a9c <HAL_TIM_IC_CaptureCallback>:
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop

08003aa4 <HAL_TIM_TriggerCallback>:
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aa8:	6803      	ldr	r3, [r0, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	0791      	lsls	r1, r2, #30
{
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab2:	d502      	bpl.n	8003aba <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	0792      	lsls	r2, r2, #30
 8003ab8:	d468      	bmi.n	8003b8c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	0752      	lsls	r2, r2, #29
 8003abe:	d502      	bpl.n	8003ac6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	0750      	lsls	r0, r2, #29
 8003ac4:	d44f      	bmi.n	8003b66 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	0711      	lsls	r1, r2, #28
 8003aca:	d502      	bpl.n	8003ad2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	0712      	lsls	r2, r2, #28
 8003ad0:	d437      	bmi.n	8003b42 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	06d0      	lsls	r0, r2, #27
 8003ad6:	d502      	bpl.n	8003ade <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	06d1      	lsls	r1, r2, #27
 8003adc:	d41e      	bmi.n	8003b1c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	07d2      	lsls	r2, r2, #31
 8003ae2:	d502      	bpl.n	8003aea <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	07d0      	lsls	r0, r2, #31
 8003ae8:	d469      	bmi.n	8003bbe <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	0611      	lsls	r1, r2, #24
 8003aee:	d502      	bpl.n	8003af6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	0612      	lsls	r2, r2, #24
 8003af4:	d46b      	bmi.n	8003bce <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	05d0      	lsls	r0, r2, #23
 8003afa:	d502      	bpl.n	8003b02 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	0611      	lsls	r1, r2, #24
 8003b00:	d46d      	bmi.n	8003bde <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	0652      	lsls	r2, r2, #25
 8003b06:	d502      	bpl.n	8003b0e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	0650      	lsls	r0, r2, #25
 8003b0c:	d46f      	bmi.n	8003bee <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	0691      	lsls	r1, r2, #26
 8003b12:	d502      	bpl.n	8003b1a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	0692      	lsls	r2, r2, #26
 8003b18:	d449      	bmi.n	8003bae <HAL_TIM_IRQHandler+0x106>
}
 8003b1a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b1c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b20:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b22:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b24:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b2e:	d16f      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b30:	f7ff ffb2 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7ff ffb3 	bl	8003aa0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	7722      	strb	r2, [r4, #28]
 8003b40:	e7cd      	b.n	8003ade <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b42:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b46:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003b50:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b52:	d15a      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b54:	f7ff ffa0 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff ffa1 	bl	8003aa0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	2200      	movs	r2, #0
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	7722      	strb	r2, [r4, #28]
 8003b64:	e7b5      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b66:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b6c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b78:	d144      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	f7ff ff8d 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f7ff ff8e 	bl	8003aa0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b84:	2200      	movs	r2, #0
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	7722      	strb	r2, [r4, #28]
 8003b8a:	e79c      	b.n	8003ac6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b90:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b92:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b94:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	0799      	lsls	r1, r3, #30
 8003b9a:	d130      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9c:	f7ff ff7c 	bl	8003a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff ff7d 	bl	8003aa0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	7722      	strb	r2, [r4, #28]
 8003bac:	e785      	b.n	8003aba <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003bb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb4:	611a      	str	r2, [r3, #16]
}
 8003bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003bba:	f000 ba77 	b.w	80040ac <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bbe:	f06f 0201 	mvn.w	r2, #1
 8003bc2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f7ff ff65 	bl	8003a94 <HAL_TIM_PeriodElapsedCallback>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	e78d      	b.n	8003aea <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 fa6b 	bl	80040b0 <HAL_TIMEx_BreakCallback>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	e78b      	b.n	8003af6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003be2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 fa65 	bl	80040b4 <HAL_TIMEx_Break2Callback>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	e789      	b.n	8003b02 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff ff55 	bl	8003aa4 <HAL_TIM_TriggerCallback>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	e787      	b.n	8003b0e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	f7ff ff4d 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 8003c02:	e7d0      	b.n	8003ba6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c04:	f7ff ff4a 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 8003c08:	e7bc      	b.n	8003b84 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	f7ff ff47 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 8003c0e:	e7a6      	b.n	8003b5e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c10:	f7ff ff44 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 8003c14:	e791      	b.n	8003b3a <HAL_TIM_IRQHandler+0x92>
 8003c16:	bf00      	nop

08003c18 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c18:	6a03      	ldr	r3, [r0, #32]
 8003c1a:	f023 0310 	bic.w	r3, r3, #16
 8003c1e:	6203      	str	r3, [r0, #32]
{
 8003c20:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8003c22:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003c24:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003c26:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c28:	4f21      	ldr	r7, [pc, #132]	; (8003cb0 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c2a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c2c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c2e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8003c32:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c3a:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c40:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c44:	d016      	beq.n	8003c74 <TIM_OC2_SetConfig+0x5c>
 8003c46:	4c1b      	ldr	r4, [pc, #108]	; (8003cb4 <TIM_OC2_SetConfig+0x9c>)
 8003c48:	42a0      	cmp	r0, r4
 8003c4a:	d013      	beq.n	8003c74 <TIM_OC2_SetConfig+0x5c>
 8003c4c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d024      	beq.n	8003c9e <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c54:	4c18      	ldr	r4, [pc, #96]	; (8003cb8 <TIM_OC2_SetConfig+0xa0>)
 8003c56:	42a0      	cmp	r0, r4
 8003c58:	d013      	beq.n	8003c82 <TIM_OC2_SetConfig+0x6a>
 8003c5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c5e:	42a0      	cmp	r0, r4
 8003c60:	d00f      	beq.n	8003c82 <TIM_OC2_SetConfig+0x6a>
 8003c62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c66:	42a0      	cmp	r0, r4
 8003c68:	d00b      	beq.n	8003c82 <TIM_OC2_SetConfig+0x6a>
 8003c6a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003c6e:	42a0      	cmp	r0, r4
 8003c70:	d10e      	bne.n	8003c90 <TIM_OC2_SetConfig+0x78>
 8003c72:	e006      	b.n	8003c82 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c74:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c7a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c82:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c86:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c8a:	432c      	orrs	r4, r5
 8003c8c:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8003c90:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003c92:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003c94:	6182      	str	r2, [r0, #24]
}
 8003c96:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8003c98:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003c9a:	6203      	str	r3, [r0, #32]
}
 8003c9c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ca4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	e7d2      	b.n	8003c54 <TIM_OC2_SetConfig+0x3c>
 8003cae:	bf00      	nop
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40013400 	.word	0x40013400
 8003cb8:	40014000 	.word	0x40014000

08003cbc <HAL_TIM_PWM_ConfigChannel>:
{
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003cbe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f000 813c 	beq.w	8003f40 <HAL_TIM_PWM_ConfigChannel+0x284>
 8003cc8:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8003cca:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4604      	mov	r4, r0
 8003cd0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003cd8:	2a14      	cmp	r2, #20
 8003cda:	d84e      	bhi.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0xbe>
 8003cdc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003ce0:	004d009e 	.word	0x004d009e
 8003ce4:	004d004d 	.word	0x004d004d
 8003ce8:	004d00b6 	.word	0x004d00b6
 8003cec:	004d004d 	.word	0x004d004d
 8003cf0:	004d00cf 	.word	0x004d00cf
 8003cf4:	004d004d 	.word	0x004d004d
 8003cf8:	004d0015 	.word	0x004d0015
 8003cfc:	004d004d 	.word	0x004d004d
 8003d00:	004d00e7 	.word	0x004d00e7
 8003d04:	004d004d 	.word	0x004d004d
 8003d08:	0054      	.short	0x0054
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d0c:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d10:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d12:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d14:	4e93      	ldr	r6, [pc, #588]	; (8003f64 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d16:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003d1a:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003d1c:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003d1e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003d20:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d22:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8003d26:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d2a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d30:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d34:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	d008      	beq.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x90>
 8003d3a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003d3e:	42b3      	cmp	r3, r6
 8003d40:	d004      	beq.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x90>
 8003d42:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003d46:	42b3      	cmp	r3, r6
 8003d48:	f040 80fc 	bne.w	8003f44 <HAL_TIM_PWM_ConfigChannel+0x288>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d4c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d4e:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d52:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8003d56:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003d58:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003d5a:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003d5c:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003d5e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d60:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d62:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d64:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003d68:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003d70:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003d78:	61da      	str	r2, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003d7c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d82:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d88:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d8a:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d8e:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d90:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	4e74      	ldr	r6, [pc, #464]	; (8003f64 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d94:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8003d98:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003d9a:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003d9c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003d9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003da0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003da4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003da8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dac:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dae:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	d013      	beq.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003db8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003dbc:	42b3      	cmp	r3, r6
 8003dbe:	d00f      	beq.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003dc0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003dc4:	42b3      	cmp	r3, r6
 8003dc6:	d00b      	beq.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003dc8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003dcc:	42b3      	cmp	r3, r6
 8003dce:	d007      	beq.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003dd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003dd4:	42b3      	cmp	r3, r6
 8003dd6:	d003      	beq.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003dd8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003ddc:	42b3      	cmp	r3, r6
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x12e>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003de0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003de2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003de6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8003dea:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003dec:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003df0:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8003df2:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003df6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003df8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003dfc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dfe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e00:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003e04:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e08:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003e0e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e16:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003e1a:	e7b4      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7ff fa88 	bl	8003334 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e24:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e26:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e28:	6999      	ldr	r1, [r3, #24]
 8003e2a:	f041 0108 	orr.w	r1, r1, #8
 8003e2e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e30:	6999      	ldr	r1, [r3, #24]
 8003e32:	f021 0104 	bic.w	r1, r1, #4
 8003e36:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	4302      	orrs	r2, r0
 8003e3c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003e3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e46:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003e4a:	e79c      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e4c:	6800      	ldr	r0, [r0, #0]
 8003e4e:	4629      	mov	r1, r5
 8003e50:	f7ff fee2 	bl	8003c18 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e54:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e56:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003e5e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003e66:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003e6e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003e70:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e78:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003e7c:	e783      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e7e:	6800      	ldr	r0, [r0, #0]
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7ff fa99 	bl	80033b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e86:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e88:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e8a:	69d9      	ldr	r1, [r3, #28]
 8003e8c:	f041 0108 	orr.w	r1, r1, #8
 8003e90:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e92:	69d9      	ldr	r1, [r3, #28]
 8003e94:	f021 0104 	bic.w	r1, r1, #4
 8003e98:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	4302      	orrs	r2, r0
 8003e9e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003ea0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ea8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003eac:	e76b      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003eae:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eb0:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eb4:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003eb6:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb8:	4e2a      	ldr	r6, [pc, #168]	; (8003f64 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eba:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003ebe:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003ec0:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003ec2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ec6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8003eca:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ece:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ed4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	d013      	beq.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003ede:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003ee2:	42b3      	cmp	r3, r6
 8003ee4:	d00f      	beq.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003ee6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003eea:	42b3      	cmp	r3, r6
 8003eec:	d00b      	beq.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003eee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003ef2:	42b3      	cmp	r3, r6
 8003ef4:	d007      	beq.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003ef6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003efa:	42b3      	cmp	r3, r6
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003efe:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f02:	42b3      	cmp	r3, r6
 8003f04:	d104      	bne.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x254>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f06:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f08:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f0c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8003f10:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003f12:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003f16:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8003f18:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f1a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f1c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f1e:	f041 0108 	orr.w	r1, r1, #8
 8003f22:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f26:	f021 0104 	bic.w	r1, r1, #4
 8003f2a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2e:	4302      	orrs	r2, r0
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003f32:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f3a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003f3e:	e722      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0xca>
  __HAL_LOCK(htim);
 8003f40:	2002      	movs	r0, #2
}
 8003f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f48:	42b3      	cmp	r3, r6
 8003f4a:	f43f aeff 	beq.w	8003d4c <HAL_TIM_PWM_ConfigChannel+0x90>
 8003f4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f52:	42b3      	cmp	r3, r6
 8003f54:	f43f aefa 	beq.w	8003d4c <HAL_TIM_PWM_ConfigChannel+0x90>
 8003f58:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f5c:	42b3      	cmp	r3, r6
 8003f5e:	f47f aefa 	bne.w	8003d56 <HAL_TIM_PWM_ConfigChannel+0x9a>
 8003f62:	e6f3      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x90>
 8003f64:	40012c00 	.word	0x40012c00

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d04e      	beq.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 8003f70:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f72:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f74:	4c27      	ldr	r4, [pc, #156]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003f76:	2202      	movs	r2, #2
 8003f78:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f7c:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 8003f7e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f82:	d03a      	beq.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003f84:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d02c      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003f8c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003f90:	42a3      	cmp	r3, r4
 8003f92:	d028      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f9a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d012      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fb2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d104      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fca:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fcc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd0:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd2:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003fd4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003fe0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8003fe2:	4618      	mov	r0, r3
}
 8003fe4:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe6:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fee:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff4:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 8003ff6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff8:	e7d1      	b.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffa:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004002:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004004:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004008:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 800400a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	e7dd      	b.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 800400e:	2002      	movs	r0, #2
}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400

0800401c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800401c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d03f      	beq.n	80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 8004024:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004026:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800402a:	4602      	mov	r2, r0
 800402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004030:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004034:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800403c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004040:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004044:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800404a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800404c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004050:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004052:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004054:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405a:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800405c:	4c12      	ldr	r4, [pc, #72]	; (80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800405e:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004060:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004064:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004066:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800406a:	d007      	beq.n	800407c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 800406c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004070:	42a0      	cmp	r0, r4
 8004072:	d003      	beq.n	800407c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8004074:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8004078:	42a0      	cmp	r0, r4
 800407a:	d10c      	bne.n	8004096 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800407c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800407e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004082:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004086:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004090:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004094:	430b      	orrs	r3, r1
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004096:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004098:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800409a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800409e:	4608      	mov	r0, r1
}
 80040a0:	bc30      	pop	{r4, r5}
 80040a2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80040a4:	2002      	movs	r0, #2
}
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00

080040ac <HAL_TIMEx_CommutCallback>:
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <HAL_TIMEx_BreakCallback>:
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop

080040b4 <HAL_TIMEx_Break2Callback>:
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop

080040b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040bc:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80040be:	2e20      	cmp	r6, #32
 80040c0:	d143      	bne.n	800414a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c2:	b369      	cbz	r1, 8004120 <HAL_UART_Receive_DMA+0x68>
 80040c4:	b362      	cbz	r2, 8004120 <HAL_UART_Receive_DMA+0x68>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80040c6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	4604      	mov	r4, r0
 80040ce:	d03c      	beq.n	800414a <HAL_UART_Receive_DMA+0x92>
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    if (huart->hdmarx != NULL)
 80040d0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    huart->pRxBuffPtr = pData;
 80040d2:	6561      	str	r1, [r4, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80040d6:	2501      	movs	r5, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxXferSize = Size;
 80040dc:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
    __HAL_LOCK(huart);
 80040e0:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040e4:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmarx != NULL)
 80040e6:	b1f0      	cbz	r0, 8004126 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040e8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004150 <HAL_UART_Receive_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80040ec:	f8d4 8000 	ldr.w	r8, [r4]
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040f0:	f8df e060 	ldr.w	lr, [pc, #96]	; 8004154 <HAL_UART_Receive_DMA+0x9c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040f4:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040f8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004158 <HAL_UART_Receive_DMA+0xa0>
      huart->hdmarx->XferAbortCallback = NULL;
 80040fc:	6347      	str	r7, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80040fe:	4613      	mov	r3, r2
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004100:	e9c0 ec0b 	strd	lr, ip, [r0, #44]	; 0x2c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004104:	460a      	mov	r2, r1
 8004106:	f108 0124 	add.w	r1, r8, #36	; 0x24
 800410a:	f7fe f9e3 	bl	80024d4 <HAL_DMA_Start_IT>
 800410e:	b150      	cbz	r0, 8004126 <HAL_UART_Receive_DMA+0x6e>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004110:	2310      	movs	r3, #16

        __HAL_UNLOCK(huart);
 8004112:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004116:	67e3      	str	r3, [r4, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 8004118:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 800411a:	6766      	str	r6, [r4, #116]	; 0x74
  }
  else
  {
    return HAL_BUSY;
  }
}
 800411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8004120:	2001      	movs	r0, #1
}
 8004122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004126:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8004128:	2000      	movs	r0, #0
 800412a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004134:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004144:	609a      	str	r2, [r3, #8]
}
 8004146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800414a:	2002      	movs	r0, #2
}
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004150:	08004161 	.word	0x08004161
 8004154:	08004199 	.word	0x08004199
 8004158:	080041a9 	.word	0x080041a9

0800415c <HAL_UART_RxCpltCallback>:
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004160:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004162:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004164:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004166:	2b20      	cmp	r3, #32
 8004168:	d011      	beq.n	800418e <UART_DMAReceiveCplt+0x2e>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416a:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800416c:	2200      	movs	r2, #0
 800416e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004178:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004182:	689a      	ldr	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004184:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800418c:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800418e:	f7ff ffe5 	bl	800415c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004192:	bd08      	pop	{r3, pc}

08004194 <HAL_UART_RxHalfCpltCallback>:
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop

08004198 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004198:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800419a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800419c:	f7ff fffa 	bl	8004194 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a0:	bd08      	pop	{r3, pc}
 80041a2:	bf00      	nop

080041a4 <HAL_UART_ErrorCallback>:
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041a8:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041aa:	6803      	ldr	r3, [r0, #0]
{
 80041ac:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80041ae:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80041b0:	6f81      	ldr	r1, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	0612      	lsls	r2, r2, #24
 80041b6:	d501      	bpl.n	80041bc <UART_DMAError+0x14>
 80041b8:	2c21      	cmp	r4, #33	; 0x21
 80041ba:	d01a      	beq.n	80041f2 <UART_DMAError+0x4a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	0652      	lsls	r2, r2, #25
 80041c0:	d501      	bpl.n	80041c6 <UART_DMAError+0x1e>
 80041c2:	2922      	cmp	r1, #34	; 0x22
 80041c4:	d006      	beq.n	80041d4 <UART_DMAError+0x2c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041c6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80041c8:	f043 0310 	orr.w	r3, r3, #16
 80041cc:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ce:	f7ff ffe9 	bl	80041a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d2:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 80041d4:	2100      	movs	r1, #0
 80041d6:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80041e4:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 80041ec:	6601      	str	r1, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 80041ee:	6784      	str	r4, [r0, #120]	; 0x78
}
 80041f0:	e7e9      	b.n	80041c6 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041f8:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80041fa:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004200:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004202:	6744      	str	r4, [r0, #116]	; 0x74
}
 8004204:	e7da      	b.n	80041bc <UART_DMAError+0x14>
 8004206:	bf00      	nop

08004208 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004208:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800420a:	07da      	lsls	r2, r3, #31
{
 800420c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800420e:	d506      	bpl.n	800421e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004210:	6801      	ldr	r1, [r0, #0]
 8004212:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004214:	684a      	ldr	r2, [r1, #4]
 8004216:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800421a:	4322      	orrs	r2, r4
 800421c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800421e:	079c      	lsls	r4, r3, #30
 8004220:	d506      	bpl.n	8004230 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004222:	6801      	ldr	r1, [r0, #0]
 8004224:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004226:	684a      	ldr	r2, [r1, #4]
 8004228:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800422c:	4322      	orrs	r2, r4
 800422e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004230:	0759      	lsls	r1, r3, #29
 8004232:	d506      	bpl.n	8004242 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004234:	6801      	ldr	r1, [r0, #0]
 8004236:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004238:	684a      	ldr	r2, [r1, #4]
 800423a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800423e:	4322      	orrs	r2, r4
 8004240:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004242:	071a      	lsls	r2, r3, #28
 8004244:	d506      	bpl.n	8004254 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004246:	6801      	ldr	r1, [r0, #0]
 8004248:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800424a:	684a      	ldr	r2, [r1, #4]
 800424c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004250:	4322      	orrs	r2, r4
 8004252:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004254:	06dc      	lsls	r4, r3, #27
 8004256:	d506      	bpl.n	8004266 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004258:	6801      	ldr	r1, [r0, #0]
 800425a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800425c:	688a      	ldr	r2, [r1, #8]
 800425e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004262:	4322      	orrs	r2, r4
 8004264:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004266:	0699      	lsls	r1, r3, #26
 8004268:	d506      	bpl.n	8004278 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800426a:	6801      	ldr	r1, [r0, #0]
 800426c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800426e:	688a      	ldr	r2, [r1, #8]
 8004270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004274:	4322      	orrs	r2, r4
 8004276:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004278:	065a      	lsls	r2, r3, #25
 800427a:	d509      	bpl.n	8004290 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427c:	6801      	ldr	r1, [r0, #0]
 800427e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004280:	684a      	ldr	r2, [r1, #4]
 8004282:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004286:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004288:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800428c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428e:	d00b      	beq.n	80042a8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	d506      	bpl.n	80042a2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004294:	6802      	ldr	r2, [r0, #0]
 8004296:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004298:	6853      	ldr	r3, [r2, #4]
 800429a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800429e:	430b      	orrs	r3, r1
 80042a0:	6053      	str	r3, [r2, #4]
}
 80042a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042a6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042a8:	684a      	ldr	r2, [r1, #4]
 80042aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80042ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80042b0:	4322      	orrs	r2, r4
 80042b2:	604a      	str	r2, [r1, #4]
 80042b4:	e7ec      	b.n	8004290 <UART_AdvFeatureConfig+0x88>
 80042b6:	bf00      	nop

080042b8 <UART_CheckIdleState>:
{
 80042b8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	2300      	movs	r3, #0
{
 80042bc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80042c0:	f7fd fb12 	bl	80018e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80042ca:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042cc:	d409      	bmi.n	80042e2 <UART_CheckIdleState+0x2a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	0752      	lsls	r2, r2, #29
 80042d2:	d42a      	bmi.n	800432a <UART_CheckIdleState+0x72>
  __HAL_UNLOCK(huart);
 80042d4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80042d6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80042d8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->gState = HAL_UART_STATE_READY;
 80042dc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042de:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80042e0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	0292      	lsls	r2, r2, #10
 80042e6:	d4f2      	bmi.n	80042ce <UART_CheckIdleState+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e8:	f7fd fafe 	bl	80018e8 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ec:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	1b40      	subs	r0, r0, r5
 80042f0:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f4:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	d229      	bcs.n	800434c <UART_CheckIdleState+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042f8:	0750      	lsls	r0, r2, #29
 80042fa:	d5f2      	bpl.n	80042e2 <UART_CheckIdleState+0x2a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	0511      	lsls	r1, r2, #20
 8004300:	d5ef      	bpl.n	80042e2 <UART_CheckIdleState+0x2a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004306:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800430e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8004312:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	f021 0101 	bic.w	r1, r1, #1
 8004318:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800431a:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 800431c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->gState = HAL_UART_STATE_READY;
 8004320:	6762      	str	r2, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8004322:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8004324:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004326:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8004328:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	0258      	lsls	r0, r3, #9
 800432e:	d4d1      	bmi.n	80042d4 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fd fada 	bl	80018e8 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004334:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	1b40      	subs	r0, r0, r5
 8004338:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433c:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433e:	d205      	bcs.n	800434c <UART_CheckIdleState+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004340:	0751      	lsls	r1, r2, #29
 8004342:	d5f2      	bpl.n	800432a <UART_CheckIdleState+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	0512      	lsls	r2, r2, #20
 8004348:	d5ef      	bpl.n	800432a <UART_CheckIdleState+0x72>
 800434a:	e7da      	b.n	8004302 <UART_CheckIdleState+0x4a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800434c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004350:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8004354:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800435c:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800435e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8004362:	6761      	str	r1, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8004364:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8004366:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8004368:	bd38      	pop	{r3, r4, r5, pc}
 800436a:	bf00      	nop

0800436c <HAL_UART_Init>:
  if (huart == NULL)
 800436c:	2800      	cmp	r0, #0
 800436e:	f000 810c 	beq.w	800458a <HAL_UART_Init+0x21e>
{
 8004372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004374:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004376:	4604      	mov	r4, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d036      	beq.n	80043ea <HAL_UART_Init+0x7e>
  __HAL_UART_DISABLE(huart);
 800437c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800437e:	6927      	ldr	r7, [r4, #16]
 8004380:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004382:	499a      	ldr	r1, [pc, #616]	; (80045ec <HAL_UART_Init+0x280>)
  huart->gState = HAL_UART_STATE_BUSY;
 8004384:	2224      	movs	r2, #36	; 0x24
 8004386:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004388:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800438a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800438c:	f020 0001 	bic.w	r0, r0, #1
 8004390:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004392:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004394:	69e0      	ldr	r0, [r4, #28]
 8004396:	433a      	orrs	r2, r7
 8004398:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800439a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800439c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043a6:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80043a8:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043aa:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80043ae:	4329      	orrs	r1, r5
 80043b0:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b2:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043b4:	4d8e      	ldr	r5, [pc, #568]	; (80045f0 <HAL_UART_Init+0x284>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80043ba:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043bc:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043be:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043c0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c2:	d017      	beq.n	80043f4 <HAL_UART_Init+0x88>
 80043c4:	4a8b      	ldr	r2, [pc, #556]	; (80045f4 <HAL_UART_Init+0x288>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d02a      	beq.n	8004420 <HAL_UART_Init+0xb4>
 80043ca:	4a8b      	ldr	r2, [pc, #556]	; (80045f8 <HAL_UART_Init+0x28c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	f000 80c5 	beq.w	800455c <HAL_UART_Init+0x1f0>
 80043d2:	4a8a      	ldr	r2, [pc, #552]	; (80045fc <HAL_UART_Init+0x290>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	f000 8094 	beq.w	8004502 <HAL_UART_Init+0x196>
 80043da:	4a89      	ldr	r2, [pc, #548]	; (8004600 <HAL_UART_Init+0x294>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d05d      	beq.n	800449c <HAL_UART_Init+0x130>
  huart->RxISR = NULL;
 80043e0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80043e2:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80043e6:	2001      	movs	r0, #1
 80043e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80043ea:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80043ee:	f7fd f97b 	bl	80016e8 <HAL_UART_MspInit>
 80043f2:	e7c3      	b.n	800437c <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043f4:	4b83      	ldr	r3, [pc, #524]	; (8004604 <HAL_UART_Init+0x298>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d870      	bhi.n	80044e4 <HAL_UART_Init+0x178>
 8004402:	4a81      	ldr	r2, [pc, #516]	; (8004608 <HAL_UART_Init+0x29c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004404:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	f000 8088 	beq.w	800451e <HAL_UART_Init+0x1b2>
    switch (clocksource)
 800440e:	2b08      	cmp	r3, #8
 8004410:	d841      	bhi.n	8004496 <HAL_UART_Init+0x12a>
 8004412:	e8df f003 	tbb	[pc, r3]
 8004416:	6a73      	.short	0x6a73
 8004418:	4016405c 	.word	0x4016405c
 800441c:	4040      	.short	0x4040
 800441e:	4d          	.byte	0x4d
 800441f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004420:	4b78      	ldr	r3, [pc, #480]	; (8004604 <HAL_UART_Init+0x298>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800442c:	d03d      	beq.n	80044aa <HAL_UART_Init+0x13e>
 800442e:	d848      	bhi.n	80044c2 <HAL_UART_Init+0x156>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d060      	beq.n	80044f6 <HAL_UART_Init+0x18a>
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d1d2      	bne.n	80043e0 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800443e:	f000 80d1 	beq.w	80045e4 <HAL_UART_Init+0x278>
        pclk = HAL_RCC_GetSysClockFreq();
 8004442:	f7fe fdc9 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004446:	6863      	ldr	r3, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004448:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800444a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800444e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004452:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004454:	f1a3 0010 	sub.w	r0, r3, #16
 8004458:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800445c:	4288      	cmp	r0, r1
 800445e:	d8bf      	bhi.n	80043e0 <HAL_UART_Init+0x74>
      huart->Instance->BRR = usartdiv;
 8004460:	6821      	ldr	r1, [r4, #0]
 8004462:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 8004464:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004466:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  if (UART_SetConfig(huart) == HAL_ERROR)
 800446a:	2a00      	cmp	r2, #0
 800446c:	d1bb      	bne.n	80043e6 <HAL_UART_Init+0x7a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800446e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d16e      	bne.n	8004552 <HAL_UART_Init+0x1e6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004474:	684b      	ldr	r3, [r1, #4]
 8004476:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800447a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447c:	688b      	ldr	r3, [r1, #8]
 800447e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004482:	608b      	str	r3, [r1, #8]
  __HAL_UART_ENABLE(huart);
 8004484:	680b      	ldr	r3, [r1, #0]
 8004486:	f043 0301 	orr.w	r3, r3, #1
  return (UART_CheckIdleState(huart));
 800448a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800448c:	600b      	str	r3, [r1, #0]
}
 800448e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8004492:	f7ff bf11 	b.w	80042b8 <UART_CheckIdleState>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004496:	2201      	movs	r2, #1
 8004498:	2300      	movs	r3, #0
 800449a:	e7db      	b.n	8004454 <HAL_UART_Init+0xe8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449c:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_UART_Init+0x298>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80044a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044a8:	d122      	bne.n	80044f0 <HAL_UART_Init+0x184>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044ae:	d077      	beq.n	80045a0 <HAL_UART_Init+0x234>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80044b0:	6861      	ldr	r1, [r4, #4]
 80044b2:	084b      	lsrs	r3, r1, #1
 80044b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b8:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80044ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80044be:	b29b      	uxth	r3, r3
        break;
 80044c0:	e7c8      	b.n	8004454 <HAL_UART_Init+0xe8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044c6:	d18b      	bne.n	80043e0 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044cc:	d071      	beq.n	80045b2 <HAL_UART_Init+0x246>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80044ce:	6861      	ldr	r1, [r4, #4]
 80044d0:	084b      	lsrs	r3, r1, #1
 80044d2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80044d6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
  HAL_StatusTypeDef ret               = HAL_OK;
 80044da:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80044dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e0:	b29b      	uxth	r3, r3
        break;
 80044e2:	e7b7      	b.n	8004454 <HAL_UART_Init+0xe8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044e8:	d079      	beq.n	80045de <HAL_UART_Init+0x272>
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ea:	f7fe fdbb 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ee:	e7aa      	b.n	8004446 <HAL_UART_Init+0xda>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f0:	d852      	bhi.n	8004598 <HAL_UART_Init+0x22c>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d14b      	bne.n	800458e <HAL_UART_Init+0x222>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044fa:	d065      	beq.n	80045c8 <HAL_UART_Init+0x25c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7fe fd9a 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004500:	e7a1      	b.n	8004446 <HAL_UART_Init+0xda>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004502:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_UART_Init+0x298>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800450a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450e:	d0cc      	beq.n	80044aa <HAL_UART_Init+0x13e>
 8004510:	d837      	bhi.n	8004582 <HAL_UART_Init+0x216>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ef      	beq.n	80044f6 <HAL_UART_Init+0x18a>
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d08e      	beq.n	800443a <HAL_UART_Init+0xce>
 800451c:	e760      	b.n	80043e0 <HAL_UART_Init+0x74>
    switch (clocksource)
 800451e:	2b08      	cmp	r3, #8
 8004520:	d806      	bhi.n	8004530 <HAL_UART_Init+0x1c4>
 8004522:	e8df f003 	tbb	[pc, r3]
 8004526:	5c51      	.short	0x5c51
 8004528:	055f0546 	.word	0x055f0546
 800452c:	0505      	.short	0x0505
 800452e:	3d          	.byte	0x3d
 800452f:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004530:	2201      	movs	r2, #1
 8004532:	2300      	movs	r3, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004534:	f1a3 0010 	sub.w	r0, r3, #16
 8004538:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800453c:	4288      	cmp	r0, r1
 800453e:	f63f af4f 	bhi.w	80043e0 <HAL_UART_Init+0x74>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004542:	f023 000f 	bic.w	r0, r3, #15
      huart->Instance->BRR = brrtemp;
 8004546:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004548:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800454c:	4303      	orrs	r3, r0
 800454e:	60cb      	str	r3, [r1, #12]
 8004550:	e788      	b.n	8004464 <HAL_UART_Init+0xf8>
    UART_AdvFeatureConfig(huart);
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff fe58 	bl	8004208 <UART_AdvFeatureConfig>
 8004558:	6821      	ldr	r1, [r4, #0]
 800455a:	e78b      	b.n	8004474 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_UART_Init+0x298>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004564:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004568:	d09f      	beq.n	80044aa <HAL_UART_Init+0x13e>
 800456a:	d806      	bhi.n	800457a <HAL_UART_Init+0x20e>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0c2      	beq.n	80044f6 <HAL_UART_Init+0x18a>
 8004570:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004574:	f43f af61 	beq.w	800443a <HAL_UART_Init+0xce>
 8004578:	e732      	b.n	80043e0 <HAL_UART_Init+0x74>
 800457a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800457e:	d0a3      	beq.n	80044c8 <HAL_UART_Init+0x15c>
 8004580:	e72e      	b.n	80043e0 <HAL_UART_Init+0x74>
 8004582:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004586:	d09f      	beq.n	80044c8 <HAL_UART_Init+0x15c>
 8004588:	e72a      	b.n	80043e0 <HAL_UART_Init+0x74>
}
 800458a:	2001      	movs	r0, #1
 800458c:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004592:	f43f af52 	beq.w	800443a <HAL_UART_Init+0xce>
 8004596:	e723      	b.n	80043e0 <HAL_UART_Init+0x74>
 8004598:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800459c:	d094      	beq.n	80044c8 <HAL_UART_Init+0x15c>
 800459e:	e71f      	b.n	80043e0 <HAL_UART_Init+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80045a0:	6861      	ldr	r1, [r4, #4]
 80045a2:	084b      	lsrs	r3, r1, #1
 80045a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a8:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80045aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ae:	b29b      	uxth	r3, r3
        break;
 80045b0:	e7c0      	b.n	8004534 <HAL_UART_Init+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80045b2:	6861      	ldr	r1, [r4, #4]
 80045b4:	084b      	lsrs	r3, r1, #1
 80045b6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80045ba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
  HAL_StatusTypeDef ret               = HAL_OK;
 80045be:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80045c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80045c4:	b29b      	uxth	r3, r3
        break;
 80045c6:	e7b5      	b.n	8004534 <HAL_UART_Init+0x1c8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7fe fd34 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	085a      	lsrs	r2, r3, #1
 80045d0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  HAL_StatusTypeDef ret               = HAL_OK;
 80045d4:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045da:	b29b      	uxth	r3, r3
        break;
 80045dc:	e7aa      	b.n	8004534 <HAL_UART_Init+0x1c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80045de:	f7fe fd41 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045e2:	e7f3      	b.n	80045cc <HAL_UART_Init+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 80045e4:	f7fe fcf8 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80045e8:	e7f0      	b.n	80045cc <HAL_UART_Init+0x260>
 80045ea:	bf00      	nop
 80045ec:	efff69f3 	.word	0xefff69f3
 80045f0:	40013800 	.word	0x40013800
 80045f4:	40004400 	.word	0x40004400
 80045f8:	40004800 	.word	0x40004800
 80045fc:	40004c00 	.word	0x40004c00
 8004600:	40005000 	.word	0x40005000
 8004604:	40021000 	.word	0x40021000
 8004608:	08004a04 	.word	0x08004a04

0800460c <UART_WaitOnFlagUntilTimeout>:
{
 800460c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004614:	6804      	ldr	r4, [r0, #0]
 8004616:	4607      	mov	r7, r0
 8004618:	460e      	mov	r6, r1
 800461a:	4615      	mov	r5, r2
 800461c:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004622:	d10a      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004624:	69e3      	ldr	r3, [r4, #28]
 8004626:	ea36 0303 	bics.w	r3, r6, r3
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	429d      	cmp	r5, r3
 8004632:	d0f7      	beq.n	8004624 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8004634:	2000      	movs	r0, #0
}
 8004636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	69e3      	ldr	r3, [r4, #28]
 800463c:	ea36 0303 	bics.w	r3, r6, r3
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	429d      	cmp	r5, r3
 8004648:	d1f4      	bne.n	8004634 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464a:	f7fd f94d 	bl	80018e8 <HAL_GetTick>
 800464e:	eba0 0009 	sub.w	r0, r0, r9
 8004652:	4540      	cmp	r0, r8
 8004654:	d81d      	bhi.n	8004692 <UART_WaitOnFlagUntilTimeout+0x86>
 8004656:	f1b8 0f00 	cmp.w	r8, #0
 800465a:	d01a      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800465c:	683c      	ldr	r4, [r7, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	075a      	lsls	r2, r3, #29
 8004662:	d5dc      	bpl.n	800461e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004664:	69e3      	ldr	r3, [r4, #28]
 8004666:	051b      	lsls	r3, r3, #20
 8004668:	d5d9      	bpl.n	800461e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800466e:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004676:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800467a:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467c:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 8004680:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 8004684:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8004686:	677b      	str	r3, [r7, #116]	; 0x74
          __HAL_UNLOCK(huart);
 8004688:	f887 1070 	strb.w	r1, [r7, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800468c:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800468e:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004690:	e7d1      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800469a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800469e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a0:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 80046a4:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80046a8:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80046aa:	6779      	str	r1, [r7, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80046ac:	f887 4070 	strb.w	r4, [r7, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80046b0:	67b9      	str	r1, [r7, #120]	; 0x78
        return HAL_TIMEOUT;
 80046b2:	e7c0      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x2a>

080046b4 <HAL_UART_Transmit>:
{
 80046b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046b8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80046ba:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80046bc:	2820      	cmp	r0, #32
{
 80046be:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80046c0:	d175      	bne.n	80047ae <HAL_UART_Transmit+0xfa>
    if ((pData == NULL) || (Size == 0U))
 80046c2:	4688      	mov	r8, r1
 80046c4:	2900      	cmp	r1, #0
 80046c6:	d045      	beq.n	8004754 <HAL_UART_Transmit+0xa0>
 80046c8:	4617      	mov	r7, r2
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	d042      	beq.n	8004754 <HAL_UART_Transmit+0xa0>
 80046ce:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 80046d0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d06a      	beq.n	80047ae <HAL_UART_Transmit+0xfa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d8:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 80046da:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	f04f 0900 	mov.w	r9, #0
 80046e0:	f8c4 907c 	str.w	r9, [r4, #124]	; 0x7c
    __HAL_LOCK(huart);
 80046e4:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e8:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80046ea:	f7fd f8fd 	bl	80018e8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ee:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80046f0:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80046f8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80046fa:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fe:	d05a      	beq.n	80047b6 <HAL_UART_Transmit+0x102>
      pdata16bits = NULL;
 8004700:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8004702:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004706:	b29b      	uxth	r3, r3
 8004708:	b1b3      	cbz	r3, 8004738 <HAL_UART_Transmit+0x84>
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	1c69      	adds	r1, r5, #1
 800470e:	d125      	bne.n	800475c <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004710:	69d3      	ldr	r3, [r2, #28]
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	d5fc      	bpl.n	8004710 <HAL_UART_Transmit+0x5c>
      if (pdata8bits == NULL)
 8004716:	f1b8 0f00 	cmp.w	r8, #0
 800471a:	d043      	beq.n	80047a4 <HAL_UART_Transmit+0xf0>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800471c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004720:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004722:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004726:	3b01      	subs	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800472e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e9      	bne.n	800470c <HAL_UART_Transmit+0x58>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004738:	9500      	str	r5, [sp, #0]
 800473a:	4633      	mov	r3, r6
 800473c:	2200      	movs	r2, #0
 800473e:	2140      	movs	r1, #64	; 0x40
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff ff63 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 8004746:	2800      	cmp	r0, #0
 8004748:	d14e      	bne.n	80047e8 <HAL_UART_Transmit+0x134>
    huart->gState = HAL_UART_STATE_READY;
 800474a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800474c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8004750:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8004752:	e000      	b.n	8004756 <HAL_UART_Transmit+0xa2>
      return  HAL_ERROR;
 8004754:	2001      	movs	r0, #1
}
 8004756:	b003      	add	sp, #12
 8004758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800475c:	69d3      	ldr	r3, [r2, #28]
 800475e:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8004762:	d1d8      	bne.n	8004716 <HAL_UART_Transmit+0x62>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004764:	f7fd f8c0 	bl	80018e8 <HAL_GetTick>
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	4285      	cmp	r5, r0
 800476c:	d329      	bcc.n	80047c2 <HAL_UART_Transmit+0x10e>
 800476e:	b345      	cbz	r5, 80047c2 <HAL_UART_Transmit+0x10e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	075b      	lsls	r3, r3, #29
 8004776:	d5c9      	bpl.n	800470c <HAL_UART_Transmit+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004778:	69d3      	ldr	r3, [r2, #28]
 800477a:	0518      	lsls	r0, r3, #20
 800477c:	d5c6      	bpl.n	800470c <HAL_UART_Transmit+0x58>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800477e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004782:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004784:	6813      	ldr	r3, [r2, #0]
 8004786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800478a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800478e:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004790:	f021 0101 	bic.w	r1, r1, #1
 8004794:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 8004796:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8004798:	6763      	str	r3, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800479a:	f884 9070 	strb.w	r9, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800479e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a0:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80047a2:	e7d8      	b.n	8004756 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047a4:	f837 3b02 	ldrh.w	r3, [r7], #2
 80047a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ac:	e7b8      	b.n	8004720 <HAL_UART_Transmit+0x6c>
    return HAL_BUSY;
 80047ae:	2002      	movs	r0, #2
}
 80047b0:	b003      	add	sp, #12
 80047b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1a1      	bne.n	8004700 <HAL_UART_Transmit+0x4c>
 80047bc:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 80047be:	4698      	mov	r8, r3
 80047c0:	e79f      	b.n	8004702 <HAL_UART_Transmit+0x4e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80047ce:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d0:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 80047d4:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 80047d6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80047da:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80047dc:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80047e0:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80047e2:	b003      	add	sp, #12
 80047e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80047e8:	2003      	movs	r0, #3
 80047ea:	e7b4      	b.n	8004756 <HAL_UART_Transmit+0xa2>

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4d0d      	ldr	r5, [pc, #52]	; (8004824 <__libc_init_array+0x38>)
 80047f0:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f2:	1b64      	subs	r4, r4, r5
 80047f4:	10a4      	asrs	r4, r4, #2
 80047f6:	2600      	movs	r6, #0
 80047f8:	42a6      	cmp	r6, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	4d0b      	ldr	r5, [pc, #44]	; (800482c <__libc_init_array+0x40>)
 80047fe:	4c0c      	ldr	r4, [pc, #48]	; (8004830 <__libc_init_array+0x44>)
 8004800:	f000 f820 	bl	8004844 <_init>
 8004804:	1b64      	subs	r4, r4, r5
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	2600      	movs	r6, #0
 800480a:	42a6      	cmp	r6, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f855 3b04 	ldr.w	r3, [r5], #4
 8004814:	4798      	blx	r3
 8004816:	3601      	adds	r6, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f855 3b04 	ldr.w	r3, [r5], #4
 800481e:	4798      	blx	r3
 8004820:	3601      	adds	r6, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	08004a08 	.word	0x08004a08
 8004828:	08004a08 	.word	0x08004a08
 800482c:	08004a08 	.word	0x08004a08
 8004830:	08004a0c 	.word	0x08004a0c

08004834 <memset>:
 8004834:	4402      	add	r2, r0
 8004836:	4603      	mov	r3, r0
 8004838:	4293      	cmp	r3, r2
 800483a:	d100      	bne.n	800483e <memset+0xa>
 800483c:	4770      	bx	lr
 800483e:	f803 1b01 	strb.w	r1, [r3], #1
 8004842:	e7f9      	b.n	8004838 <memset+0x4>

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

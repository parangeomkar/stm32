
MPC_22_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a7c  08004a7c  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08004a7c  08004a7c  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a7c  08004a7c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000524c  20000038  08004abc  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005284  08004abc  00025284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1bf  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d9  00000000  00000000  0003d227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00040b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002260  00000000  00000000  00041758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e67b  00000000  00000000  000439b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5e1  00000000  00000000  00062033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b54c4  00000000  00000000  0007c614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  00131b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00010290  00000000  00000000  00134504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080048b8 	.word	0x080048b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	080048b8 	.word	0x080048b8

080001d4 <modelPredictiveControl>:
 *
 */
uint8_t Sa,Sb,Sc;
int states[7] = {1,3,2,6,4,5,0};

void modelPredictiveControl(){
 80001d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d8:	ed2d 8b04 	vpush	{d8-d9}
	computeSinCos();
 80001dc:	f000 fc6a 	bl	8000ab4 <computeSinCos>
	parkTransform(Ia,Ib,Ic,&Idq);
 80001e0:	4c5d      	ldr	r4, [pc, #372]	; (8000358 <modelPredictiveControl+0x184>)
 80001e2:	4b5e      	ldr	r3, [pc, #376]	; (800035c <modelPredictiveControl+0x188>)
 80001e4:	4a5e      	ldr	r2, [pc, #376]	; (8000360 <modelPredictiveControl+0x18c>)
 80001e6:	495f      	ldr	r1, [pc, #380]	; (8000364 <modelPredictiveControl+0x190>)
 80001e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80001ec:	f9b3 0000 	ldrsh.w	r0, [r3]
 80001f0:	f9b1 1000 	ldrsh.w	r1, [r1]

	cost = 100000;

	IdPredTemp = Idq.d/1230;
 80001f4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80003c4 <modelPredictiveControl+0x1f0>
	IqPredTemp = Idq.q/1230;
 80001f8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80003c8 <modelPredictiveControl+0x1f4>

//	V = (Vbus/65);

	for(i=0;i<6;i++){
 80001fc:	4e5a      	ldr	r6, [pc, #360]	; (8000368 <modelPredictiveControl+0x194>)
 80001fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80003a8 <modelPredictiveControl+0x1d4>
 8000202:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 80003cc <modelPredictiveControl+0x1f8>

		costTemp = 0;

//		for(j=0;j<1;j++){
//		IdPred = (int)((8650*IdPredTemp) + (wr*IqPredTemp*2) + (1250*Vdq.d));
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 8000206:	eddf 9a59 	vldr	s19, [pc, #356]	; 800036c <modelPredictiveControl+0x198>
 800020a:	ed9f 9a59 	vldr	s18, [pc, #356]	; 8000370 <modelPredictiveControl+0x19c>

		costTemp = sqr(mod((IqRef - IqPred)))/10000;
 800020e:	eddf 8a59 	vldr	s17, [pc, #356]	; 8000374 <modelPredictiveControl+0x1a0>
//		}

		if(costTemp < cost){
			optimalVector = i;
			cost = costTemp;
			IqTx = IqPred*1230;
 8000212:	ed9f 8a59 	vldr	s16, [pc, #356]	; 8000378 <modelPredictiveControl+0x1a4>
	    Va = 8*((2*Sa-Sb-Sc))/3;
 8000216:	4d59      	ldr	r5, [pc, #356]	; (800037c <modelPredictiveControl+0x1a8>)
	parkTransform(Ia,Ib,Ic,&Idq);
 8000218:	4623      	mov	r3, r4
 800021a:	f000 fc0f 	bl	8000a3c <parkTransform>
	IdPredTemp = Idq.d/1230;
 800021e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000380 <modelPredictiveControl+0x1ac>
 8000222:	ed94 7a00 	vldr	s14, [r4]
	IqPredTemp = Idq.q/1230;
 8000226:	edd4 7a01 	vldr	s15, [r4, #4]
	cost = 100000;
 800022a:	4a56      	ldr	r2, [pc, #344]	; (8000384 <modelPredictiveControl+0x1b0>)
 800022c:	4b56      	ldr	r3, [pc, #344]	; (8000388 <modelPredictiveControl+0x1b4>)
 800022e:	6013      	str	r3, [r2, #0]
	IdPredTemp = Idq.d/1230;
 8000230:	ee27 7a26 	vmul.f32	s14, s14, s13
	IqPredTemp = Idq.q/1230;
 8000234:	ee67 7aa6 	vmul.f32	s15, s15, s13
	for(i=0;i<6;i++){
 8000238:	2300      	movs	r3, #0
	IdPredTemp = Idq.d/1230;
 800023a:	ed8a 7a00 	vstr	s14, [sl]
	IqPredTemp = Idq.q/1230;
 800023e:	edc9 7a00 	vstr	s15, [r9]
	for(i=0;i<6;i++){
 8000242:	6033      	str	r3, [r6, #0]
		Sa = states[i] & 0x01;
 8000244:	4a51      	ldr	r2, [pc, #324]	; (800038c <modelPredictiveControl+0x1b8>)
 8000246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024a:	f003 0c01 	and.w	ip, r3, #1
		Sb = (states[i]>>1) & 0x01;
 800024e:	f3c3 0440 	ubfx	r4, r3, #1, #1
	    Va = 8*((2*Sa-Sb-Sc))/3;
 8000252:	ebc4 004c 	rsb	r0, r4, ip, lsl #1
		Sc = (states[i]>>2) & 0x01;
 8000256:	f3c3 0380 	ubfx	r3, r3, #2, #1
	    Vb = 8*((2*Sb-Sa-Sc))/3;
 800025a:	ebcc 0144 	rsb	r1, ip, r4, lsl #1
	    Va = 8*((2*Sa-Sb-Sc))/3;
 800025e:	1ac0      	subs	r0, r0, r3
	    Vc = 8*((2*Sc-Sb-Sa))/3;
 8000260:	ebc4 0243 	rsb	r2, r4, r3, lsl #1
	    Vb = 8*((2*Sb-Sa-Sc))/3;
 8000264:	1ac9      	subs	r1, r1, r3
	    Va = 8*((2*Sa-Sb-Sc))/3;
 8000266:	00c0      	lsls	r0, r0, #3
 8000268:	fb85 7e00 	smull	r7, lr, r5, r0
	    Vc = 8*((2*Sc-Sb-Sa))/3;
 800026c:	eba2 020c 	sub.w	r2, r2, ip
	    Vb = 8*((2*Sb-Sa-Sc))/3;
 8000270:	00c9      	lsls	r1, r1, #3
	    Vc = 8*((2*Sc-Sb-Sa))/3;
 8000272:	00d2      	lsls	r2, r2, #3
	    Va = 8*((2*Sa-Sb-Sc))/3;
 8000274:	ebae 70e0 	sub.w	r0, lr, r0, asr #31
	    Vb = 8*((2*Sb-Sa-Sc))/3;
 8000278:	fb85 7e01 	smull	r7, lr, r5, r1
 800027c:	ebae 71e1 	sub.w	r1, lr, r1, asr #31
	    Vc = 8*((2*Sc-Sb-Sa))/3;
 8000280:	fb85 7e02 	smull	r7, lr, r5, r2
		Sa = states[i] & 0x01;
 8000284:	4f42      	ldr	r7, [pc, #264]	; (8000390 <modelPredictiveControl+0x1bc>)
 8000286:	f887 c000 	strb.w	ip, [r7]
		Sb = (states[i]>>1) & 0x01;
 800028a:	4f42      	ldr	r7, [pc, #264]	; (8000394 <modelPredictiveControl+0x1c0>)
 800028c:	703c      	strb	r4, [r7, #0]
		Sc = (states[i]>>2) & 0x01;
 800028e:	4c42      	ldr	r4, [pc, #264]	; (8000398 <modelPredictiveControl+0x1c4>)
 8000290:	7023      	strb	r3, [r4, #0]
	    Vb = 8*((2*Sb-Sa-Sc))/3;
 8000292:	4c42      	ldr	r4, [pc, #264]	; (800039c <modelPredictiveControl+0x1c8>)
	    Va = 8*((2*Sa-Sb-Sc))/3;
 8000294:	4b42      	ldr	r3, [pc, #264]	; (80003a0 <modelPredictiveControl+0x1cc>)
	    Vb = 8*((2*Sb-Sa-Sc))/3;
 8000296:	b209      	sxth	r1, r1
 8000298:	8021      	strh	r1, [r4, #0]
	    Va = 8*((2*Sa-Sb-Sc))/3;
 800029a:	b200      	sxth	r0, r0
	    Vc = 8*((2*Sc-Sb-Sa))/3;
 800029c:	ebae 72e2 	sub.w	r2, lr, r2, asr #31
 80002a0:	4c40      	ldr	r4, [pc, #256]	; (80003a4 <modelPredictiveControl+0x1d0>)
	    Va = 8*((2*Sa-Sb-Sc))/3;
 80002a2:	8018      	strh	r0, [r3, #0]
	    Vc = 8*((2*Sc-Sb-Sa))/3;
 80002a4:	b212      	sxth	r2, r2
		parkTransform(Va,Vb,Vc,&Vdq);
 80002a6:	4b40      	ldr	r3, [pc, #256]	; (80003a8 <modelPredictiveControl+0x1d4>)
	    Vc = 8*((2*Sc-Sb-Sa))/3;
 80002a8:	8022      	strh	r2, [r4, #0]
		parkTransform(Va,Vb,Vc,&Vdq);
 80002aa:	f000 fbc7 	bl	8000a3c <parkTransform>
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 80002ae:	edd8 7a01 	vldr	s15, [r8, #4]
 80002b2:	ed99 6a00 	vldr	s12, [r9]
 80002b6:	4b3d      	ldr	r3, [pc, #244]	; (80003ac <modelPredictiveControl+0x1d8>)
 80002b8:	edda 6a00 	vldr	s13, [sl]
 80002bc:	edd3 5a00 	vldr	s11, [r3]
		costTemp = sqr(mod((IqRef - IqPred)))/10000;
 80002c0:	ed9b 7a00 	vldr	s14, [fp]
		if(costTemp < cost){
 80002c4:	4b2f      	ldr	r3, [pc, #188]	; (8000384 <modelPredictiveControl+0x1b0>)
		costTemp = sqr(mod((IqRef - IqPred)))/10000;
 80002c6:	483a      	ldr	r0, [pc, #232]	; (80003b0 <modelPredictiveControl+0x1dc>)
		if(costTemp < cost){
 80002c8:	681a      	ldr	r2, [r3, #0]
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 80002ca:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <modelPredictiveControl+0x1e0>)
			IqTx = IqPred*1230;
 80002cc:	493a      	ldr	r1, [pc, #232]	; (80003b8 <modelPredictiveControl+0x1e4>)
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 80002ce:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80002d2:	ee66 6ae5 	vnmul.f32	s13, s13, s11
 80002d6:	eee6 7a09 	vfma.f32	s15, s12, s18
 80002da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80002de:	eee6 7a86 	vfma.f32	s15, s13, s12
 80002e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		costTemp = sqr(mod((IqRef - IqPred)))/10000;
 80002ea:	ee37 7a67 	vsub.f32	s14, s14, s15
		IqPred = (int)((9062*IqPredTemp) - (wr*IdPredTemp/2) + (1250*Vdq.q));
 80002ee:	edc3 7a00 	vstr	s15, [r3]
		costTemp = sqr(mod((IqRef - IqPred)))/10000;
 80002f2:	ee27 7a07 	vmul.f32	s14, s14, s14
			IqTx = IqPred*1230;
 80002f6:	ee67 6a88 	vmul.f32	s13, s15, s16
		costTemp = sqr(mod((IqRef - IqPred)))/10000;
 80002fa:	ee27 7a28 	vmul.f32	s14, s14, s17
 80002fe:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8000302:	ee17 3a90 	vmov	r3, s15
		if(costTemp < cost){
 8000306:	4293      	cmp	r3, r2
		costTemp = sqr(mod((IqRef - IqPred)))/10000;
 8000308:	edc0 7a00 	vstr	s15, [r0]
		if(costTemp < cost){
 800030c:	db15      	blt.n	800033a <modelPredictiveControl+0x166>
	for(i=0;i<6;i++){
 800030e:	6833      	ldr	r3, [r6, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	2b05      	cmp	r3, #5
 8000314:	6033      	str	r3, [r6, #0]
 8000316:	dd95      	ble.n	8000244 <modelPredictiveControl+0x70>
		}
	}


	wt = (optimalVector)*60;
 8000318:	4b28      	ldr	r3, [pc, #160]	; (80003bc <modelPredictiveControl+0x1e8>)
	if(wt >= 360){
		wt -= 360;
 800031a:	4a29      	ldr	r2, [pc, #164]	; (80003c0 <modelPredictiveControl+0x1ec>)
	wt = (optimalVector)*60;
 800031c:	781b      	ldrb	r3, [r3, #0]
	}
}
 800031e:	ecbd 8b04 	vpop	{d8-d9}
	wt = (optimalVector)*60;
 8000322:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	b29b      	uxth	r3, r3
	if(wt >= 360){
 800032a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
		wt -= 360;
 800032e:	bf28      	it	cs
 8000330:	f5a3 73b4 	subcs.w	r3, r3, #360	; 0x168
 8000334:	8013      	strh	r3, [r2, #0]
}
 8000336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			optimalVector = i;
 800033a:	6832      	ldr	r2, [r6, #0]
			IqTx = IqPred*1230;
 800033c:	edc1 6a00 	vstr	s13, [r1]
	for(i=0;i<6;i++){
 8000340:	1c53      	adds	r3, r2, #1
			cost = costTemp;
 8000342:	4810      	ldr	r0, [pc, #64]	; (8000384 <modelPredictiveControl+0x1b0>)
			optimalVector = i;
 8000344:	491d      	ldr	r1, [pc, #116]	; (80003bc <modelPredictiveControl+0x1e8>)
			cost = costTemp;
 8000346:	edc0 7a00 	vstr	s15, [r0]
	for(i=0;i<6;i++){
 800034a:	2b05      	cmp	r3, #5
			optimalVector = i;
 800034c:	700a      	strb	r2, [r1, #0]
	for(i=0;i<6;i++){
 800034e:	6033      	str	r3, [r6, #0]
 8000350:	f77f af78 	ble.w	8000244 <modelPredictiveControl+0x70>
 8000354:	e7e0      	b.n	8000318 <modelPredictiveControl+0x144>
 8000356:	bf00      	nop
 8000358:	200001e8 	.word	0x200001e8
 800035c:	200000ac 	.word	0x200000ac
 8000360:	20000136 	.word	0x20000136
 8000364:	2000010e 	.word	0x2000010e
 8000368:	20000108 	.word	0x20000108
 800036c:	449c4000 	.word	0x449c4000
 8000370:	460d9800 	.word	0x460d9800
 8000374:	38d1b717 	.word	0x38d1b717
 8000378:	4499c000 	.word	0x4499c000
 800037c:	55555556 	.word	0x55555556
 8000380:	3a55200d 	.word	0x3a55200d
 8000384:	200000d8 	.word	0x200000d8
 8000388:	000186a0 	.word	0x000186a0
 800038c:	20000000 	.word	0x20000000
 8000390:	2000010c 	.word	0x2000010c
 8000394:	200000b6 	.word	0x200000b6
 8000398:	20000104 	.word	0x20000104
 800039c:	2000013a 	.word	0x2000013a
 80003a0:	200000ea 	.word	0x200000ea
 80003a4:	20000114 	.word	0x20000114
 80003a8:	200000f0 	.word	0x200000f0
 80003ac:	2000014c 	.word	0x2000014c
 80003b0:	200000b0 	.word	0x200000b0
 80003b4:	200001dc 	.word	0x200001dc
 80003b8:	20000118 	.word	0x20000118
 80003bc:	200001e6 	.word	0x200001e6
 80003c0:	20000068 	.word	0x20000068
 80003c4:	200000e0 	.word	0x200000e0
 80003c8:	200000d4 	.word	0x200000d4
 80003cc:	200000fc 	.word	0x200000fc

080003d0 <SVPWM>:
uint16_t xxx = 0;
/**
 * This function computes SVPWM timings for TIM1
 *
 */
void SVPWM(){
 80003d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(run == 1){
 80003d4:	4b66      	ldr	r3, [pc, #408]	; (8000570 <SVPWM+0x1a0>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d006      	beq.n	80003ea <SVPWM+0x1a>
		TIM1->CCR1 = Ta;
		TIM1->CCR2 = Tb;
		TIM1->CCR3 = Tc;

	} else {
		TIM1->CCR1 = 0;
 80003dc:	4b65      	ldr	r3, [pc, #404]	; (8000574 <SVPWM+0x1a4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80003e2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80003e4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 80003e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		n = ((uint8_t)(wt/60))+1;
 80003ea:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80005a0 <SVPWM+0x1d0>
 80003ee:	4c62      	ldr	r4, [pc, #392]	; (8000578 <SVPWM+0x1a8>)
 80003f0:	f8b8 0000 	ldrh.w	r0, [r8]
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 80003f4:	4f61      	ldr	r7, [pc, #388]	; (800057c <SVPWM+0x1ac>)
 80003f6:	4d62      	ldr	r5, [pc, #392]	; (8000580 <SVPWM+0x1b0>)
 80003f8:	f8b7 9000 	ldrh.w	r9, [r7]
 80003fc:	4e61      	ldr	r6, [pc, #388]	; (8000584 <SVPWM+0x1b4>)
		n = ((uint8_t)(wt/60))+1;
 80003fe:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000402:	fba3 2300 	umull	r2, r3, r3, r0
 8000406:	095b      	lsrs	r3, r3, #5
 8000408:	3301      	adds	r3, #1
 800040a:	b2db      	uxtb	r3, r3
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 800040c:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8000410:	ebc0 0082 	rsb	r0, r0, r2, lsl #2
 8000414:	b200      	sxth	r0, r0
		n = ((uint8_t)(wt/60))+1;
 8000416:	7023      	strb	r3, [r4, #0]
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000418:	f000 fad2 	bl	80009c0 <sinLowRes>
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 800041c:	7823      	ldrb	r3, [r4, #0]
 800041e:	f8b8 2000 	ldrh.w	r2, [r8]
 8000422:	883f      	ldrh	r7, [r7, #0]
 8000424:	3b01      	subs	r3, #1
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000426:	fb09 f000 	mul.w	r0, r9, r0
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 800042a:	eba3 1303 	sub.w	r3, r3, r3, lsl #4
 800042e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000432:	fb85 1300 	smull	r1, r3, r5, r0
 8000436:	1819      	adds	r1, r3, r0
 8000438:	17c3      	asrs	r3, r0, #31
 800043a:	ebc3 23a1 	rsb	r3, r3, r1, asr #10
 800043e:	b29b      	uxth	r3, r3
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 8000440:	b210      	sxth	r0, r2
		T1 = (uint16_t)(V*(sinLowRes(n*60 - wt))/(1667));
 8000442:	6033      	str	r3, [r6, #0]
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 8000444:	f000 fabc 	bl	80009c0 <sinLowRes>
 8000448:	fb07 f000 	mul.w	r0, r7, r0
 800044c:	fb85 3500 	smull	r3, r5, r5, r0
 8000450:	4405      	add	r5, r0
		T0 = Ts - (T1+T2);
 8000452:	4a4d      	ldr	r2, [pc, #308]	; (8000588 <SVPWM+0x1b8>)
 8000454:	6833      	ldr	r3, [r6, #0]
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 8000456:	4f4d      	ldr	r7, [pc, #308]	; (800058c <SVPWM+0x1bc>)
 8000458:	7821      	ldrb	r1, [r4, #0]
		T0 = Ts - (T1+T2);
 800045a:	8812      	ldrh	r2, [r2, #0]
 800045c:	4e4c      	ldr	r6, [pc, #304]	; (8000590 <SVPWM+0x1c0>)
		T2 = (uint16_t)(V*(sinLowRes(wt - ((n-1)*60)))/(1667));
 800045e:	17c0      	asrs	r0, r0, #31
 8000460:	ebc0 20a5 	rsb	r0, r0, r5, asr #10
 8000464:	b284      	uxth	r4, r0
 8000466:	4620      	mov	r0, r4
 8000468:	603c      	str	r4, [r7, #0]
		T0 = Ts - (T1+T2);
 800046a:	441c      	add	r4, r3
 800046c:	1b12      	subs	r2, r2, r4
 800046e:	3901      	subs	r1, #1
 8000470:	6032      	str	r2, [r6, #0]
		switch(n){
 8000472:	2905      	cmp	r1, #5
 8000474:	d872      	bhi.n	800055c <SVPWM+0x18c>
 8000476:	e8df f001 	tbb	[pc, r1]
 800047a:	2b1a      	.short	0x2b1a
 800047c:	03604e3d 	.word	0x03604e3d
				Ta = T1 + T2 + (T0/2);
 8000480:	b29b      	uxth	r3, r3
 8000482:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000486:	f3c2 044f 	ubfx	r4, r2, #1, #16
 800048a:	4418      	add	r0, r3
 800048c:	1821      	adds	r1, r4, r0
 800048e:	4e41      	ldr	r6, [pc, #260]	; (8000594 <SVPWM+0x1c4>)
				Tc = T1 + (T0/2);
 8000490:	4d41      	ldr	r5, [pc, #260]	; (8000598 <SVPWM+0x1c8>)
				Tb = (T0/2);
 8000492:	4842      	ldr	r0, [pc, #264]	; (800059c <SVPWM+0x1cc>)
				Tc = T1 + (T0/2);
 8000494:	4423      	add	r3, r4
				Ta = T1 + T2 + (T0/2);
 8000496:	b289      	uxth	r1, r1
				Tc = T1 + (T0/2);
 8000498:	b29b      	uxth	r3, r3
 800049a:	4622      	mov	r2, r4
				Ta = T1 + T2 + (T0/2);
 800049c:	8031      	strh	r1, [r6, #0]
				Tc = T1 + (T0/2);
 800049e:	802b      	strh	r3, [r5, #0]
				Tb = (T0/2);
 80004a0:	8004      	strh	r4, [r0, #0]
		TIM1->CCR1 = Ta;
 80004a2:	4c34      	ldr	r4, [pc, #208]	; (8000574 <SVPWM+0x1a4>)
 80004a4:	6361      	str	r1, [r4, #52]	; 0x34
		TIM1->CCR2 = Tb;
 80004a6:	63a2      	str	r2, [r4, #56]	; 0x38
		TIM1->CCR3 = Tc;
 80004a8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80004aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				Ta = T1 + T2 + (T0/2);
 80004ae:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 80004b2:	f3c4 054f 	ubfx	r5, r4, #1, #16
 80004b6:	18c1      	adds	r1, r0, r3
				Tb = T2 + (T0/2);
 80004b8:	1942      	adds	r2, r0, r5
				Ta = T1 + T2 + (T0/2);
 80004ba:	4f36      	ldr	r7, [pc, #216]	; (8000594 <SVPWM+0x1c4>)
				Tb = T2 + (T0/2);
 80004bc:	4e37      	ldr	r6, [pc, #220]	; (800059c <SVPWM+0x1cc>)
				Tc = (T0/2);
 80004be:	4836      	ldr	r0, [pc, #216]	; (8000598 <SVPWM+0x1c8>)
				Ta = T1 + T2 + (T0/2);
 80004c0:	4429      	add	r1, r5
 80004c2:	b289      	uxth	r1, r1
				Tb = T2 + (T0/2);
 80004c4:	b292      	uxth	r2, r2
 80004c6:	462b      	mov	r3, r5
				Ta = T1 + T2 + (T0/2);
 80004c8:	8039      	strh	r1, [r7, #0]
				Tb = T2 + (T0/2);
 80004ca:	8032      	strh	r2, [r6, #0]
				Tc = (T0/2);
 80004cc:	8005      	strh	r5, [r0, #0]
				break;
 80004ce:	e7e8      	b.n	80004a2 <SVPWM+0xd2>
				Ta = T1 + (T0/2);
 80004d0:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	f3c4 054f 	ubfx	r5, r4, #1, #16
				Tb = T1 + T2 + (T0/2);
 80004da:	4418      	add	r0, r3
 80004dc:	182a      	adds	r2, r5, r0
				Ta = T1 + (T0/2);
 80004de:	442b      	add	r3, r5
 80004e0:	4f2c      	ldr	r7, [pc, #176]	; (8000594 <SVPWM+0x1c4>)
				Tb = T1 + T2 + (T0/2);
 80004e2:	4e2e      	ldr	r6, [pc, #184]	; (800059c <SVPWM+0x1cc>)
				Tc = (T0/2);
 80004e4:	482c      	ldr	r0, [pc, #176]	; (8000598 <SVPWM+0x1c8>)
				Ta = T1 + (T0/2);
 80004e6:	b299      	uxth	r1, r3
				Tb = T1 + T2 + (T0/2);
 80004e8:	b292      	uxth	r2, r2
 80004ea:	462b      	mov	r3, r5
				Ta = T1 + (T0/2);
 80004ec:	8039      	strh	r1, [r7, #0]
				Tb = T1 + T2 + (T0/2);
 80004ee:	8032      	strh	r2, [r6, #0]
				Tc = (T0/2);
 80004f0:	8005      	strh	r5, [r0, #0]
				break;
 80004f2:	e7d6      	b.n	80004a2 <SVPWM+0xd2>
				Ta = (T0/2);
 80004f4:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 80004f8:	f3c1 044f 	ubfx	r4, r1, #1, #16
				Tb = T1 + T2 + (T0/2);
 80004fc:	18c2      	adds	r2, r0, r3
 80004fe:	4f27      	ldr	r7, [pc, #156]	; (800059c <SVPWM+0x1cc>)
				Tc = T2 + (T0/2);
 8000500:	4e25      	ldr	r6, [pc, #148]	; (8000598 <SVPWM+0x1c8>)
				Ta = (T0/2);
 8000502:	4d24      	ldr	r5, [pc, #144]	; (8000594 <SVPWM+0x1c4>)
				Tb = T1 + T2 + (T0/2);
 8000504:	4422      	add	r2, r4
				Tc = T2 + (T0/2);
 8000506:	4420      	add	r0, r4
				Tb = T1 + T2 + (T0/2);
 8000508:	b292      	uxth	r2, r2
				Tc = T2 + (T0/2);
 800050a:	b283      	uxth	r3, r0
				Tb = T1 + T2 + (T0/2);
 800050c:	803a      	strh	r2, [r7, #0]
				Tc = T2 + (T0/2);
 800050e:	8033      	strh	r3, [r6, #0]
 8000510:	4621      	mov	r1, r4
				Ta = (T0/2);
 8000512:	802c      	strh	r4, [r5, #0]
				break;
 8000514:	e7c5      	b.n	80004a2 <SVPWM+0xd2>
				Ta = (T0/2);
 8000516:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
				Tb = T1 + (T0/2);
 800051a:	b29b      	uxth	r3, r3
				Ta = (T0/2);
 800051c:	f3c1 044f 	ubfx	r4, r1, #1, #16
				Tc = T1 + T2 + (T0/2);
 8000520:	4418      	add	r0, r3
				Tb = T1 + (T0/2);
 8000522:	18e2      	adds	r2, r4, r3
 8000524:	4f1d      	ldr	r7, [pc, #116]	; (800059c <SVPWM+0x1cc>)
				Tc = T1 + T2 + (T0/2);
 8000526:	4e1c      	ldr	r6, [pc, #112]	; (8000598 <SVPWM+0x1c8>)
				Ta = (T0/2);
 8000528:	4d1a      	ldr	r5, [pc, #104]	; (8000594 <SVPWM+0x1c4>)
				Tc = T1 + T2 + (T0/2);
 800052a:	4420      	add	r0, r4
 800052c:	b283      	uxth	r3, r0
				Tb = T1 + (T0/2);
 800052e:	b292      	uxth	r2, r2
 8000530:	803a      	strh	r2, [r7, #0]
				Tc = T1 + T2 + (T0/2);
 8000532:	8033      	strh	r3, [r6, #0]
 8000534:	4621      	mov	r1, r4
				Ta = (T0/2);
 8000536:	802c      	strh	r4, [r5, #0]
				break;
 8000538:	e7b3      	b.n	80004a2 <SVPWM+0xd2>
				Ta = T2 + (T0/2);
 800053a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800053e:	f3c2 044f 	ubfx	r4, r2, #1, #16
				Tc = T1 + T2 + (T0/2);
 8000542:	4403      	add	r3, r0
				Ta = T2 + (T0/2);
 8000544:	4f13      	ldr	r7, [pc, #76]	; (8000594 <SVPWM+0x1c4>)
				Tc = T1 + T2 + (T0/2);
 8000546:	4e14      	ldr	r6, [pc, #80]	; (8000598 <SVPWM+0x1c8>)
				Tb = (T0/2);
 8000548:	4d14      	ldr	r5, [pc, #80]	; (800059c <SVPWM+0x1cc>)
				Ta = T2 + (T0/2);
 800054a:	4420      	add	r0, r4
				Tc = T1 + T2 + (T0/2);
 800054c:	4423      	add	r3, r4
				Ta = T2 + (T0/2);
 800054e:	b281      	uxth	r1, r0
				Tc = T1 + T2 + (T0/2);
 8000550:	b29b      	uxth	r3, r3
				Ta = T2 + (T0/2);
 8000552:	8039      	strh	r1, [r7, #0]
				Tc = T1 + T2 + (T0/2);
 8000554:	8033      	strh	r3, [r6, #0]
 8000556:	4622      	mov	r2, r4
				Tb = (T0/2);
 8000558:	802c      	strh	r4, [r5, #0]
				break;
 800055a:	e7a2      	b.n	80004a2 <SVPWM+0xd2>
				Ta = 0;
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <SVPWM+0x1c4>)
				Tc = 0;
 800055e:	490e      	ldr	r1, [pc, #56]	; (8000598 <SVPWM+0x1c8>)
				Tb = 0;
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <SVPWM+0x1cc>)
				Ta = 0;
 8000562:	2200      	movs	r2, #0
 8000564:	801a      	strh	r2, [r3, #0]
				Tc = 0;
 8000566:	800a      	strh	r2, [r1, #0]
 8000568:	4613      	mov	r3, r2
				Tb = 0;
 800056a:	8002      	strh	r2, [r0, #0]
				Tc = 0;
 800056c:	4611      	mov	r1, r2
 800056e:	e798      	b.n	80004a2 <SVPWM+0xd2>
 8000570:	20000020 	.word	0x20000020
 8000574:	40012c00 	.word	0x40012c00
 8000578:	20000066 	.word	0x20000066
 800057c:	2000001e 	.word	0x2000001e
 8000580:	9d414457 	.word	0x9d414457
 8000584:	20000058 	.word	0x20000058
 8000588:	2000001c 	.word	0x2000001c
 800058c:	2000005c 	.word	0x2000005c
 8000590:	20000054 	.word	0x20000054
 8000594:	20000060 	.word	0x20000060
 8000598:	20000064 	.word	0x20000064
 800059c:	20000062 	.word	0x20000062
 80005a0:	20000068 	.word	0x20000068

080005a4 <transferUART>:
 *
 */
int16_t arr[10000], idx;
uint32_t err,asdsda;
void transferUART(){
	if(startTx){
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <transferUART+0x44>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b903      	cbnz	r3, 80005ac <transferUART+0x8>
 80005aa:	4770      	bx	lr
			txData[0] = (speed + 10000) & 0xff;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <transferUART+0x48>)
 80005ae:	4910      	ldr	r1, [pc, #64]	; (80005f0 <transferUART+0x4c>)
			txData[1] = ((speed + 10000) >> 8) & 0xff;
			HAL_UART_Transmit(&huart2, txData,2,10);
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <transferUART+0x50>)
void transferUART(){
 80005b2:	b510      	push	{r4, lr}
			txData[0] = (speed + 10000) & 0xff;
 80005b4:	f9b3 4000 	ldrsh.w	r4, [r3]
			txData[1] = ((speed + 10000) >> 8) & 0xff;
 80005b8:	f504 531c 	add.w	r3, r4, #9984	; 0x2700
 80005bc:	3310      	adds	r3, #16
 80005be:	121a      	asrs	r2, r3, #8
 80005c0:	704a      	strb	r2, [r1, #1]
			HAL_UART_Transmit(&huart2, txData,2,10);
 80005c2:	230a      	movs	r3, #10
 80005c4:	2202      	movs	r2, #2
			txData[0] = (speed + 10000) & 0xff;
 80005c6:	3410      	adds	r4, #16
 80005c8:	700c      	strb	r4, [r1, #0]
			HAL_UART_Transmit(&huart2, txData,2,10);
 80005ca:	f004 f8ad 	bl	8004728 <HAL_UART_Transmit>
			asdsda++;
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <transferUART+0x54>)
 80005d0:	6813      	ldr	r3, [r2, #0]
			if(asdsda > 5000){
 80005d2:	f241 3188 	movw	r1, #5000	; 0x1388
			asdsda++;
 80005d6:	3301      	adds	r3, #1
			if(asdsda > 5000){
 80005d8:	428b      	cmp	r3, r1
			asdsda++;
 80005da:	6013      	str	r3, [r2, #0]
			if(asdsda > 5000){
 80005dc:	d903      	bls.n	80005e6 <transferUART+0x42>
				speedReq = 1500;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <transferUART+0x58>)
 80005e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005e4:	801a      	strh	r2, [r3, #0]
//			startTx = 0;
//			testEnd = 0;
//			err = 0;
//		}
	}
}
 80005e6:	bd10      	pop	{r4, pc}
 80005e8:	20005036 	.word	0x20005036
 80005ec:	20000140 	.word	0x20000140
 80005f0:	20005030 	.word	0x20005030
 80005f4:	20000150 	.word	0x20000150
 80005f8:	20005040 	.word	0x20005040
 80005fc:	20000028 	.word	0x20000028

08000600 <receiveUART>:
/**
 * This function initializes UART DMA receive
 *
 */
void receiveUART(){
	HAL_UART_Receive_DMA(&huart2, comCode, 3);
 8000600:	4902      	ldr	r1, [pc, #8]	; (800060c <receiveUART+0xc>)
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <receiveUART+0x10>)
 8000604:	2203      	movs	r2, #3
 8000606:	f003 bd91 	b.w	800412c <HAL_UART_Receive_DMA>
 800060a:	bf00      	nop
 800060c:	20005038 	.word	0x20005038
 8000610:	20000150 	.word	0x20000150

08000614 <handleRxCommands>:
/**
 * This function is a handler for received data
 *
 */
void handleRxCommands(){
	if(comCode[0] == 101){
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <handleRxCommands+0x90>)
 8000616:	7813      	ldrb	r3, [r2, #0]
 8000618:	2b65      	cmp	r3, #101	; 0x65
 800061a:	d016      	beq.n	800064a <handleRxCommands+0x36>
		startTx = 1;
	} else if(comCode[0] == 102){
 800061c:	2b66      	cmp	r3, #102	; 0x66
 800061e:	d010      	beq.n	8000642 <handleRxCommands+0x2e>
//		testEnd = 1;
		startTx = 0;
	} else if(comCode[0] == 103){
 8000620:	2b67      	cmp	r3, #103	; 0x67
 8000622:	d01d      	beq.n	8000660 <handleRxCommands+0x4c>
		stopMotor();
	} else if(comCode[0] == 104){
 8000624:	2b68      	cmp	r3, #104	; 0x68
 8000626:	d01d      	beq.n	8000664 <handleRxCommands+0x50>
		startMotor();
	} else if(comCode[0] == 105){
 8000628:	2b69      	cmp	r3, #105	; 0x69
 800062a:	d012      	beq.n	8000652 <handleRxCommands+0x3e>
		sigma = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 106){
 800062c:	2b6a      	cmp	r3, #106	; 0x6a
 800062e:	d01b      	beq.n	8000668 <handleRxCommands+0x54>
		delta = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 107){
 8000630:	2b6b      	cmp	r3, #107	; 0x6b
 8000632:	d027      	beq.n	8000684 <handleRxCommands+0x70>
		Kp = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 108){
 8000634:	2b6c      	cmp	r3, #108	; 0x6c
 8000636:	d02c      	beq.n	8000692 <handleRxCommands+0x7e>
		Ki = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 109){
 8000638:	2b6d      	cmp	r3, #109	; 0x6d
 800063a:	d01c      	beq.n	8000676 <handleRxCommands+0x62>
		speedReq = comCode[1] + 256*comCode[2];
	} else if(comCode[0] == 110){
 800063c:	2b6e      	cmp	r3, #110	; 0x6e
 800063e:	d02f      	beq.n	80006a0 <handleRxCommands+0x8c>
		HAL_NVIC_SystemReset();
	}
}
 8000640:	4770      	bx	lr
		startTx = 0;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <handleRxCommands+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	4770      	bx	lr
		startTx = 1;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <handleRxCommands+0x94>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	4770      	bx	lr
		sigma = comCode[1] + 256*comCode[2];
 8000652:	7853      	ldrb	r3, [r2, #1]
 8000654:	7891      	ldrb	r1, [r2, #2]
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <handleRxCommands+0x98>)
 8000658:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800065c:	8013      	strh	r3, [r2, #0]
 800065e:	4770      	bx	lr
		stopMotor();
 8000660:	f000 b834 	b.w	80006cc <stopMotor>
		startMotor();
 8000664:	f000 b82c 	b.w	80006c0 <startMotor>
		delta = comCode[1] + 256*comCode[2];
 8000668:	7853      	ldrb	r3, [r2, #1]
 800066a:	7891      	ldrb	r1, [r2, #2]
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <handleRxCommands+0x9c>)
 800066e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8000672:	8013      	strh	r3, [r2, #0]
 8000674:	4770      	bx	lr
		speedReq = comCode[1] + 256*comCode[2];
 8000676:	7853      	ldrb	r3, [r2, #1]
 8000678:	7891      	ldrb	r1, [r2, #2]
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <handleRxCommands+0xa0>)
 800067c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8000680:	8013      	strh	r3, [r2, #0]
 8000682:	4770      	bx	lr
		Kp = comCode[1] + 256*comCode[2];
 8000684:	7853      	ldrb	r3, [r2, #1]
 8000686:	7891      	ldrb	r1, [r2, #2]
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <handleRxCommands+0xa4>)
 800068a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800068e:	8013      	strh	r3, [r2, #0]
 8000690:	4770      	bx	lr
		Ki = comCode[1] + 256*comCode[2];
 8000692:	7853      	ldrb	r3, [r2, #1]
 8000694:	7891      	ldrb	r1, [r2, #2]
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <handleRxCommands+0xa8>)
 8000698:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800069c:	8013      	strh	r3, [r2, #0]
 800069e:	4770      	bx	lr
		HAL_NVIC_SystemReset();
 80006a0:	f001 bee2 	b.w	8002468 <HAL_NVIC_SystemReset>
 80006a4:	20005038 	.word	0x20005038
 80006a8:	20005036 	.word	0x20005036
 80006ac:	20000110 	.word	0x20000110
 80006b0:	20000138 	.word	0x20000138
 80006b4:	20000028 	.word	0x20000028
 80006b8:	20000026 	.word	0x20000026
 80006bc:	20000024 	.word	0x20000024

080006c0 <startMotor>:
/**
 * This function controls starting of motor with Blue button
 *
 */
void startMotor(){
	run = 1;
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <startMotor+0x8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
}
 80006c6:	4770      	bx	lr
 80006c8:	20000020 	.word	0x20000020

080006cc <stopMotor>:
/**
 * This function controls stopping of motor with Blue button
 *
 */
void stopMotor(){
	run = 0;
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <stopMotor+0x8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
}
 80006d2:	4770      	bx	lr
 80006d4:	20000020 	.word	0x20000020

080006d8 <executeAll>:
/**
 * This function controls the execution and ADC measurement
 *
 */
uint16_t ex;
void executeAll(){
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006da:	2120      	movs	r1, #32
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f002 f8d2 	bl	8002888 <HAL_GPIO_TogglePin>
	measureADC();
 80006e4:	f000 f916 	bl	8000914 <measureADC>

	if(run){
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <executeAll+0x90>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b1d3      	cbz	r3, 8000724 <executeAll+0x4c>
		if(cnts < 2000){
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <executeAll+0x94>)
 80006f0:	8813      	ldrh	r3, [r2, #0]
 80006f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006f6:	d220      	bcs.n	800073a <executeAll+0x62>
	if(cnts < 1000){
 80006f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006fc:	d32a      	bcc.n	8000754 <executeAll+0x7c>
		thetaElec = 0;
 80006fe:	481c      	ldr	r0, [pc, #112]	; (8000770 <executeAll+0x98>)
		TIM3->CNT = 0;
 8000700:	4c1c      	ldr	r4, [pc, #112]	; (8000774 <executeAll+0x9c>)
		thetaElecTemp = 0;
 8000702:	4f1d      	ldr	r7, [pc, #116]	; (8000778 <executeAll+0xa0>)
		thetaMech = 0;
 8000704:	4e1d      	ldr	r6, [pc, #116]	; (800077c <executeAll+0xa4>)
		speed = 0;
 8000706:	4d1e      	ldr	r5, [pc, #120]	; (8000780 <executeAll+0xa8>)
		thetaElecTemp = 0;
 8000708:	2100      	movs	r1, #0
		thetaElec = 0;
 800070a:	8001      	strh	r1, [r0, #0]
		wr = 0;
 800070c:	481d      	ldr	r0, [pc, #116]	; (8000784 <executeAll+0xac>)
		thetaElecTemp = 0;
 800070e:	8039      	strh	r1, [r7, #0]
		thetaMech = 0;
 8000710:	8031      	strh	r1, [r6, #0]
		TIM3->CNT = 0;
 8000712:	6261      	str	r1, [r4, #36]	; 0x24
		wr = 0;
 8000714:	2400      	movs	r4, #0
		speed = 0;
 8000716:	8029      	strh	r1, [r5, #0]
		wr = 0;
 8000718:	6004      	str	r4, [r0, #0]
 800071a:	481b      	ldr	r0, [pc, #108]	; (8000788 <executeAll+0xb0>)
			initalPositionSet();
			cnts++;
 800071c:	3301      	adds	r3, #1
 800071e:	8013      	strh	r3, [r2, #0]
 8000720:	8001      	strh	r1, [r0, #0]
 8000722:	e014      	b.n	800074e <executeAll+0x76>
			modelPredictiveControl();
		}

		transferUART();
	} else {
		V = 0;
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <executeAll+0xb4>)
 8000726:	8013      	strh	r3, [r2, #0]
	}
	SVPWM();
 8000728:	f7ff fe52 	bl	80003d0 <SVPWM>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 800072c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000730:	2120      	movs	r1, #32
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f002 b8a7 	b.w	8002888 <HAL_GPIO_TogglePin>
		} else if(cnts >= 2000 && cnts < 3000){
 800073a:	f5a3 61fa 	sub.w	r1, r3, #2000	; 0x7d0
 800073e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8000742:	d209      	bcs.n	8000758 <executeAll+0x80>
			V = 0;
 8000744:	4911      	ldr	r1, [pc, #68]	; (800078c <executeAll+0xb4>)
			cnts++;
 8000746:	3301      	adds	r3, #1
			V = 0;
 8000748:	2000      	movs	r0, #0
			cnts++;
 800074a:	8013      	strh	r3, [r2, #0]
			V = 0;
 800074c:	8008      	strh	r0, [r1, #0]
		transferUART();
 800074e:	f7ff ff29 	bl	80005a4 <transferUART>
 8000752:	e7e9      	b.n	8000728 <executeAll+0x50>
		wt = 30;
 8000754:	211e      	movs	r1, #30
 8000756:	e7e0      	b.n	800071a <executeAll+0x42>
			V = 850;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <executeAll+0xb4>)
 800075a:	f240 3252 	movw	r2, #850	; 0x352
 800075e:	801a      	strh	r2, [r3, #0]
			modelPredictiveControl();
 8000760:	f7ff fd38 	bl	80001d4 <modelPredictiveControl>
 8000764:	e7f3      	b.n	800074e <executeAll+0x76>
 8000766:	bf00      	nop
 8000768:	20000020 	.word	0x20000020
 800076c:	2000006a 	.word	0x2000006a
 8000770:	20000080 	.word	0x20000080
 8000774:	40000400 	.word	0x40000400
 8000778:	200000d0 	.word	0x200000d0
 800077c:	20000102 	.word	0x20000102
 8000780:	20000140 	.word	0x20000140
 8000784:	2000014c 	.word	0x2000014c
 8000788:	20000068 	.word	0x20000068
 800078c:	2000001e 	.word	0x2000001e

08000790 <computePositionWithEncoder>:
/**
 * This function computes rotor position
 *
 */
uint16_t x = 1;
void computePositionWithEncoder(){
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	thetaElec = 90 + 360*TIM3->CNT/300;
 8000792:	4b4f      	ldr	r3, [pc, #316]	; (80008d0 <computePositionWithEncoder+0x140>)
 8000794:	4a4f      	ldr	r2, [pc, #316]	; (80008d4 <computePositionWithEncoder+0x144>)
 8000796:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000798:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800079c:	fb03 f301 	mul.w	r3, r3, r1
 80007a0:	fba2 2303 	umull	r2, r3, r2, r3
 80007a4:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80007a8:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 80007ac:	b210      	sxth	r0, r2


	if(thetaElec >= 360){
 80007ae:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 80007b2:	da60      	bge.n	8000876 <computePositionWithEncoder+0xe6>
	thetaElec = 90 + 360*TIM3->CNT/300;
 80007b4:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <computePositionWithEncoder+0x148>)
		thetaElec -= 360;
	}

	if(thetaElec != thetaElecOld){
 80007b6:	4949      	ldr	r1, [pc, #292]	; (80008dc <computePositionWithEncoder+0x14c>)
	thetaElec = 90 + 360*TIM3->CNT/300;
 80007b8:	8018      	strh	r0, [r3, #0]
	if(thetaElec != thetaElecOld){
 80007ba:	f9b1 3000 	ldrsh.w	r3, [r1]
 80007be:	4283      	cmp	r3, r0
 80007c0:	b292      	uxth	r2, r2
 80007c2:	d063      	beq.n	800088c <computePositionWithEncoder+0xfc>
		dTheta = thetaElec - thetaElecOld;
 80007c4:	1ad2      	subs	r2, r2, r3
 80007c6:	b213      	sxth	r3, r2
		if(dTheta > 300){
 80007c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
		dTheta = thetaElec - thetaElecOld;
 80007cc:	b292      	uxth	r2, r2
		if(dTheta > 300){
 80007ce:	dd62      	ble.n	8000896 <computePositionWithEncoder+0x106>
			dTheta -= 360;
 80007d0:	4c43      	ldr	r4, [pc, #268]	; (80008e0 <computePositionWithEncoder+0x150>)
 80007d2:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80007d6:	b213      	sxth	r3, r2
 80007d8:	8023      	strh	r3, [r4, #0]

		speedTemp = dTheta*672/x;

		x = 1;

		if(k>9){
 80007da:	4d42      	ldr	r5, [pc, #264]	; (80008e4 <computePositionWithEncoder+0x154>)
		speedTemp = dTheta*672/x;
 80007dc:	4c42      	ldr	r4, [pc, #264]	; (80008e8 <computePositionWithEncoder+0x158>)
		thetaElecOld = thetaElec;
 80007de:	8008      	strh	r0, [r1, #0]
		speedTemp = dTheta*672/x;
 80007e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		if(k>9){
 80007e4:	8829      	ldrh	r1, [r5, #0]
		speedTemp = dTheta*672/x;
 80007e6:	4e41      	ldr	r6, [pc, #260]	; (80008ec <computePositionWithEncoder+0x15c>)
 80007e8:	8823      	ldrh	r3, [r4, #0]
 80007ea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80007ee:	0152      	lsls	r2, r2, #5
		if(k>9){
 80007f0:	2909      	cmp	r1, #9
		speedTemp = dTheta*672/x;
 80007f2:	fb92 f2f3 	sdiv	r2, r2, r3
		x = 1;
 80007f6:	f04f 0301 	mov.w	r3, #1
		speedTemp = dTheta*672/x;
 80007fa:	b210      	sxth	r0, r2
		x = 1;
 80007fc:	8023      	strh	r3, [r4, #0]
		speedTemp = dTheta*672/x;
 80007fe:	8030      	strh	r0, [r6, #0]
		if(k>9){
 8000800:	d952      	bls.n	80008a8 <computePositionWithEncoder+0x118>
			sum += (speedTemp - speedArr[e]);
 8000802:	4c3b      	ldr	r4, [pc, #236]	; (80008f0 <computePositionWithEncoder+0x160>)
 8000804:	4e3b      	ldr	r6, [pc, #236]	; (80008f4 <computePositionWithEncoder+0x164>)
 8000806:	8821      	ldrh	r1, [r4, #0]
 8000808:	4d3b      	ldr	r5, [pc, #236]	; (80008f8 <computePositionWithEncoder+0x168>)
 800080a:	f836 7011 	ldrh.w	r7, [r6, r1, lsl #1]
 800080e:	882b      	ldrh	r3, [r5, #0]
			speedArr[e] = speedTemp;
 8000810:	f826 0011 	strh.w	r0, [r6, r1, lsl #1]
			e++;
 8000814:	3101      	adds	r1, #1
			sum += (speedTemp - speedArr[e]);
 8000816:	1bdb      	subs	r3, r3, r7
			e++;
 8000818:	b289      	uxth	r1, r1
			sum += (speedTemp - speedArr[e]);
 800081a:	441a      	add	r2, r3

			if(e>9){
 800081c:	2909      	cmp	r1, #9
			sum += (speedTemp - speedArr[e]);
 800081e:	b213      	sxth	r3, r2
				e = 0;
 8000820:	bf88      	it	hi
 8000822:	2200      	movhi	r2, #0
			sum += (speedTemp - speedArr[e]);
 8000824:	802b      	strh	r3, [r5, #0]
			e++;
 8000826:	bf94      	ite	ls
 8000828:	8021      	strhls	r1, [r4, #0]
				e = 0;
 800082a:	8022      	strhhi	r2, [r4, #0]
			sum += speedTemp;
			speedArr[k] = speedTemp;
			k++;
		}

		speed = (2*speed + sum/10)/3;
 800082c:	4933      	ldr	r1, [pc, #204]	; (80008fc <computePositionWithEncoder+0x16c>)
 800082e:	4834      	ldr	r0, [pc, #208]	; (8000900 <computePositionWithEncoder+0x170>)
 8000830:	4a34      	ldr	r2, [pc, #208]	; (8000904 <computePositionWithEncoder+0x174>)
 8000832:	f9b0 5000 	ldrsh.w	r5, [r0]
		wr = (float)speed*1047/10000;

		if(speedPIrate>9){
 8000836:	4c34      	ldr	r4, [pc, #208]	; (8000908 <computePositionWithEncoder+0x178>)
		wr = (float)speed*1047/10000;
 8000838:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800090c <computePositionWithEncoder+0x17c>
		speed = (2*speed + sum/10)/3;
 800083c:	fb81 6103 	smull	r6, r1, r1, r3
 8000840:	17db      	asrs	r3, r3, #31
 8000842:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8000846:	b21b      	sxth	r3, r3
 8000848:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800084c:	fb82 1203 	smull	r1, r2, r2, r3
 8000850:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
 8000854:	b21b      	sxth	r3, r3
		wr = (float)speed*1047/10000;
 8000856:	ee07 3a90 	vmov	s15, r3
 800085a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if(speedPIrate>9){
 800085e:	8822      	ldrh	r2, [r4, #0]
		wr = (float)speed*1047/10000;
 8000860:	492b      	ldr	r1, [pc, #172]	; (8000910 <computePositionWithEncoder+0x180>)
		speed = (2*speed + sum/10)/3;
 8000862:	8003      	strh	r3, [r0, #0]
		wr = (float)speed*1047/10000;
 8000864:	ee67 7a87 	vmul.f32	s15, s15, s14
		if(speedPIrate>9){
 8000868:	2a09      	cmp	r2, #9
		wr = (float)speed*1047/10000;
 800086a:	edc1 7a00 	vstr	s15, [r1]
		if(speedPIrate>9){
 800086e:	d826      	bhi.n	80008be <computePositionWithEncoder+0x12e>
			SpeedPIController();
			speedPIrate = 0;
		} else {
			speedPIrate++;
 8000870:	3201      	adds	r2, #1
 8000872:	8022      	strh	r2, [r4, #0]
		}

	} else {
		x++;
	}
}
 8000874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		thetaElec -= 360;
 8000876:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800087a:	4917      	ldr	r1, [pc, #92]	; (80008d8 <computePositionWithEncoder+0x148>)
 800087c:	b218      	sxth	r0, r3
 800087e:	8008      	strh	r0, [r1, #0]
	if(thetaElec != thetaElecOld){
 8000880:	4916      	ldr	r1, [pc, #88]	; (80008dc <computePositionWithEncoder+0x14c>)
		thetaElec -= 360;
 8000882:	b29a      	uxth	r2, r3
	if(thetaElec != thetaElecOld){
 8000884:	f9b1 3000 	ldrsh.w	r3, [r1]
 8000888:	4283      	cmp	r3, r0
 800088a:	d19b      	bne.n	80007c4 <computePositionWithEncoder+0x34>
		x++;
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <computePositionWithEncoder+0x158>)
 800088e:	8813      	ldrh	r3, [r2, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	8013      	strh	r3, [r2, #0]
}
 8000894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (dTheta < -300){
 8000896:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800089a:	da15      	bge.n	80008c8 <computePositionWithEncoder+0x138>
			dTheta += 360;
 800089c:	4c10      	ldr	r4, [pc, #64]	; (80008e0 <computePositionWithEncoder+0x150>)
 800089e:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 80008a2:	b213      	sxth	r3, r2
 80008a4:	8023      	strh	r3, [r4, #0]
 80008a6:	e798      	b.n	80007da <computePositionWithEncoder+0x4a>
			sum += speedTemp;
 80008a8:	4c13      	ldr	r4, [pc, #76]	; (80008f8 <computePositionWithEncoder+0x168>)
			speedArr[k] = speedTemp;
 80008aa:	4e12      	ldr	r6, [pc, #72]	; (80008f4 <computePositionWithEncoder+0x164>)
			sum += speedTemp;
 80008ac:	8823      	ldrh	r3, [r4, #0]
			speedArr[k] = speedTemp;
 80008ae:	f826 0011 	strh.w	r0, [r6, r1, lsl #1]
			sum += speedTemp;
 80008b2:	4413      	add	r3, r2
 80008b4:	b21b      	sxth	r3, r3
			k++;
 80008b6:	1c4a      	adds	r2, r1, #1
			sum += speedTemp;
 80008b8:	8023      	strh	r3, [r4, #0]
			k++;
 80008ba:	802a      	strh	r2, [r5, #0]
 80008bc:	e7b6      	b.n	800082c <computePositionWithEncoder+0x9c>
			SpeedPIController();
 80008be:	f000 fa95 	bl	8000dec <SpeedPIController>
			speedPIrate = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	8023      	strh	r3, [r4, #0]
}
 80008c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dTheta = thetaElec - thetaElecOld;
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <computePositionWithEncoder+0x150>)
 80008ca:	8013      	strh	r3, [r2, #0]
 80008cc:	e785      	b.n	80007da <computePositionWithEncoder+0x4a>
 80008ce:	bf00      	nop
 80008d0:	40000400 	.word	0x40000400
 80008d4:	1b4e81b5 	.word	0x1b4e81b5
 80008d8:	20000080 	.word	0x20000080
 80008dc:	20000074 	.word	0x20000074
 80008e0:	200000b8 	.word	0x200000b8
 80008e4:	200000ec 	.word	0x200000ec
 80008e8:	20000022 	.word	0x20000022
 80008ec:	200000b4 	.word	0x200000b4
 80008f0:	200001e0 	.word	0x200001e0
 80008f4:	20000084 	.word	0x20000084
 80008f8:	200000dc 	.word	0x200000dc
 80008fc:	66666667 	.word	0x66666667
 8000900:	20000140 	.word	0x20000140
 8000904:	55555556 	.word	0x55555556
 8000908:	20000082 	.word	0x20000082
 800090c:	3dd66cf4 	.word	0x3dd66cf4
 8000910:	2000014c 	.word	0x2000014c

08000914 <measureADC>:

/**
 * This function computes 2 phase currents and 2 BEMFs
 *
 */
void measureADC(){
 8000914:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Start_DMA(&hadc1, Iabc, 4);
 8000916:	4c22      	ldr	r4, [pc, #136]	; (80009a0 <measureADC+0x8c>)
 8000918:	4822      	ldr	r0, [pc, #136]	; (80009a4 <measureADC+0x90>)

	// Compute abc currents
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 800091a:	4d23      	ldr	r5, [pc, #140]	; (80009a8 <measureADC+0x94>)
	Ib = -((int16_t)Iabc[1]-1916);
	Ic = -((int16_t)Iabc[2]-1955);
	Vbus = ((int16_t)Iabc[3]) + 1;

	if(startOCwatch && (Ia > 1000 || Ia < -1000
 800091c:	4e23      	ldr	r6, [pc, #140]	; (80009ac <measureADC+0x98>)
	HAL_ADC_Start_DMA(&hadc1, Iabc, 4);
 800091e:	4621      	mov	r1, r4
 8000920:	2204      	movs	r2, #4
 8000922:	f001 fa05 	bl	8001d30 <HAL_ADC_Start_DMA>
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 8000926:	f9b4 3000 	ldrsh.w	r3, [r4]
	Ic = -((int16_t)Iabc[2]-1955);
 800092a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 800092e:	f5c3 61f4 	rsb	r1, r3, #1952	; 0x7a0
 8000932:	3104      	adds	r1, #4
 8000934:	2367      	movs	r3, #103	; 0x67
 8000936:	fb03 f301 	mul.w	r3, r3, r1
	Vbus = ((int16_t)Iabc[3]) + 1;
 800093a:	68e4      	ldr	r4, [r4, #12]
	Ic = -((int16_t)Iabc[2]-1955);
 800093c:	f5c0 61f4 	rsb	r1, r0, #1952	; 0x7a0
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 8000940:	fb85 5003 	smull	r5, r0, r5, r3
 8000944:	17db      	asrs	r3, r3, #31
	if(startOCwatch && (Ia > 1000 || Ia < -1000
 8000946:	7835      	ldrb	r5, [r6, #0]
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 8000948:	4e19      	ldr	r6, [pc, #100]	; (80009b0 <measureADC+0x9c>)
 800094a:	ebc3 1360 	rsb	r3, r3, r0, asr #5
	Ic = -((int16_t)Iabc[2]-1955);
 800094e:	3103      	adds	r1, #3
	Vbus = ((int16_t)Iabc[3]) + 1;
 8000950:	1c60      	adds	r0, r4, #1
	Ic = -((int16_t)Iabc[2]-1955);
 8000952:	4c18      	ldr	r4, [pc, #96]	; (80009b4 <measureADC+0xa0>)
	Ia = -(((int16_t)Iabc[0])-1956)*103/100;
 8000954:	8033      	strh	r3, [r6, #0]
	Ib = -((int16_t)Iabc[1]-1916);
 8000956:	f5c2 62ef 	rsb	r2, r2, #1912	; 0x778
	Ic = -((int16_t)Iabc[2]-1955);
 800095a:	b209      	sxth	r1, r1
 800095c:	8021      	strh	r1, [r4, #0]
	Ib = -((int16_t)Iabc[1]-1916);
 800095e:	4e16      	ldr	r6, [pc, #88]	; (80009b8 <measureADC+0xa4>)
	Vbus = ((int16_t)Iabc[3]) + 1;
 8000960:	4c16      	ldr	r4, [pc, #88]	; (80009bc <measureADC+0xa8>)
	Ib = -((int16_t)Iabc[1]-1916);
 8000962:	3204      	adds	r2, #4
 8000964:	b212      	sxth	r2, r2
 8000966:	8032      	strh	r2, [r6, #0]
	Vbus = ((int16_t)Iabc[3]) + 1;
 8000968:	8020      	strh	r0, [r4, #0]
	if(startOCwatch && (Ia > 1000 || Ia < -1000
 800096a:	b185      	cbz	r5, 800098e <measureADC+0x7a>
 800096c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000970:	b29b      	uxth	r3, r3
 8000972:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000976:	d808      	bhi.n	800098a <measureADC+0x76>
	  || Ib > 1000 || Ib < -1000
 8000978:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800097c:	dc05      	bgt.n	800098a <measureADC+0x76>
 800097e:	f512 7f7a 	cmn.w	r2, #1000	; 0x3e8
 8000982:	db02      	blt.n	800098a <measureADC+0x76>
	  || Ic > 1000 || Ic < -1000)){
 8000984:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8000988:	dd05      	ble.n	8000996 <measureADC+0x82>
		stopMotor();
 800098a:	f7ff fe9f 	bl	80006cc <stopMotor>
	}

	// Compute rotor position
	computePositionWithEncoder();
//	fluxObserver();
}
 800098e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	computePositionWithEncoder();
 8000992:	f7ff befd 	b.w	8000790 <computePositionWithEncoder>
	  || Ic > 1000 || Ic < -1000)){
 8000996:	f511 7f7a 	cmn.w	r1, #1000	; 0x3e8
 800099a:	daf8      	bge.n	800098e <measureADC+0x7a>
 800099c:	e7f5      	b.n	800098a <measureADC+0x76>
 800099e:	bf00      	nop
 80009a0:	200000c0 	.word	0x200000c0
 80009a4:	20005124 	.word	0x20005124
 80009a8:	51eb851f 	.word	0x51eb851f
 80009ac:	200000fa 	.word	0x200000fa
 80009b0:	200000ac 	.word	0x200000ac
 80009b4:	20000136 	.word	0x20000136
 80009b8:	2000010e 	.word	0x2000010e
 80009bc:	200001e2 	.word	0x200001e2

080009c0 <sinLowRes>:
 * @param short thetaElec
 * @return short angle between 0 to 360 degrees
 */
short limitTheta(short thetaElec){
	if(thetaElec < 0){
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <sinLowRes+0x74>)
	if(thetaElec < 0){
 80009c2:	2800      	cmp	r0, #0
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 80009c4:	fb83 2300 	smull	r2, r3, r3, r0
 80009c8:	eb03 0200 	add.w	r2, r3, r0
 80009cc:	ea4f 73e0 	mov.w	r3, r0, asr #31
 80009d0:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	if(thetaElec < 0){
 80009d4:	db20      	blt.n	8000a18 <sinLowRes+0x58>
	} else {
		return (thetaElec - 360*(thetaElec/360));
 80009d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80009da:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80009de:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 80009e2:	b283      	uxth	r3, r0
 80009e4:	b200      	sxth	r0, r0
 * @return short sin(x) range -512 to +512
 */
short sinLowRes(short thetaElec){
  thetaElec = limitTheta(thetaElec);

  if(thetaElec <= 90){
 80009e6:	285a      	cmp	r0, #90	; 0x5a
 80009e8:	dd12      	ble.n	8000a10 <sinLowRes+0x50>
    return sinTableLowRes[thetaElec];
  } else if(thetaElec > 90 && thetaElec <=180){
 80009ea:	f1a3 025b 	sub.w	r2, r3, #91	; 0x5b
 80009ee:	2a59      	cmp	r2, #89	; 0x59
 80009f0:	d90c      	bls.n	8000a0c <sinLowRes+0x4c>
    return sinTableLowRes[180 - thetaElec];
  } else if(thetaElec > 180 && thetaElec <= 270){
 80009f2:	3bb5      	subs	r3, #181	; 0xb5
 80009f4:	2b59      	cmp	r3, #89	; 0x59
    return -sinTableLowRes[thetaElec - 180];
 80009f6:	bf98      	it	ls
 80009f8:	38b4      	subls	r0, #180	; 0xb4
  } else {
    return -sinTableLowRes[360 - thetaElec];
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <sinLowRes+0x78>)
 80009fc:	bf88      	it	hi
 80009fe:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
 8000a02:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000a06:	4240      	negs	r0, r0
 8000a08:	b200      	sxth	r0, r0
  }
}
 8000a0a:	4770      	bx	lr
    return sinTableLowRes[180 - thetaElec];
 8000a0c:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <sinLowRes+0x78>)
 8000a12:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8000a16:	4770      	bx	lr
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a20:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000a24:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8000a28:	eba0 00c3 	sub.w	r0, r0, r3, lsl #3
 8000a2c:	b283      	uxth	r3, r0
 8000a2e:	b200      	sxth	r0, r0
 8000a30:	e7d9      	b.n	80009e6 <sinLowRes+0x26>
 8000a32:	bf00      	nop
 8000a34:	b60b60b7 	.word	0xb60b60b7
 8000a38:	08004988 	.word	0x08004988

08000a3c <parkTransform>:

/**
 * This function computes Park transform
 *
 */
void parkTransform(short a, short b, short c, struct directQuad *Xdq){
 8000a3c:	b4f0      	push	{r4, r5, r6, r7}
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a3e:	4c16      	ldr	r4, [pc, #88]	; (8000a98 <parkTransform+0x5c>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a40:	4e16      	ldr	r6, [pc, #88]	; (8000a9c <parkTransform+0x60>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a42:	8824      	ldrh	r4, [r4, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a44:	8836      	ldrh	r6, [r6, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a46:	4d16      	ldr	r5, [pc, #88]	; (8000aa0 <parkTransform+0x64>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a48:	4f16      	ldr	r7, [pc, #88]	; (8000aa4 <parkTransform+0x68>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a4a:	882d      	ldrh	r5, [r5, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a4c:	883f      	ldrh	r7, [r7, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a4e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000aa8 <parkTransform+0x6c>
 8000a52:	fb14 fc01 	smulbb	ip, r4, r1
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a56:	fb16 f101 	smulbb	r1, r6, r1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a5a:	4c14      	ldr	r4, [pc, #80]	; (8000aac <parkTransform+0x70>)
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a5c:	4e14      	ldr	r6, [pc, #80]	; (8000ab0 <parkTransform+0x74>)
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a5e:	8824      	ldrh	r4, [r4, #0]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a60:	8836      	ldrh	r6, [r6, #0]
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a62:	fb15 c500 	smlabb	r5, r5, r0, ip
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a66:	fb10 1007 	smlabb	r0, r0, r7, r1
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a6a:	fb14 5102 	smlabb	r1, r4, r2, r5
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a6e:	fb12 0206 	smlabb	r2, r2, r6, r0
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a72:	ee07 1a10 	vmov	s14, r1
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a76:	ee07 2a90 	vmov	s15, r2
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a82:	ee27 7a26 	vmul.f32	s14, s14, s13
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 8000a8a:	bcf0      	pop	{r4, r5, r6, r7}
	Xdq->d = (float)(sin000*a + sin240*b + sin120*c)/768; // (2/3)*(1/512) = 1/768
 8000a8c:	ed83 7a00 	vstr	s14, [r3]
	Xdq->q = (float)(cos000*a + cos240*b + cos120*c)/768;
 8000a90:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000100 	.word	0x20000100
 8000a9c:	20000076 	.word	0x20000076
 8000aa0:	20000112 	.word	0x20000112
 8000aa4:	2000013c 	.word	0x2000013c
 8000aa8:	3aaaaaab 	.word	0x3aaaaaab
 8000aac:	200001d8 	.word	0x200001d8
 8000ab0:	200000bc 	.word	0x200000bc

08000ab4 <computeSinCos>:
/**
 * This function computes sine & cosine values for given thetaElec to be used in park transform
 *
 */
void computeSinCos(){
	sin000 = sin2(thetaElec);
 8000ab4:	4bc4      	ldr	r3, [pc, #784]	; (8000dc8 <computeSinCos+0x314>)
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000ab6:	4ac5      	ldr	r2, [pc, #788]	; (8000dcc <computeSinCos+0x318>)
	sin000 = sin2(thetaElec);
 8000ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000abc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac0:	18d1      	adds	r1, r2, r3
	if(thetaElec < 0){
 8000ac2:	2b00      	cmp	r3, #0
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000ac4:	ea4f 72e3 	mov.w	r2, r3, asr #31
void computeSinCos(){
 8000ac8:	b430      	push	{r4, r5}
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000aca:	ebc2 2221 	rsb	r2, r2, r1, asr #8
	if(thetaElec < 0){
 8000ace:	f2c0 8144 	blt.w	8000d5a <computeSinCos+0x2a6>
		return (thetaElec - 360*(thetaElec/360));
 8000ad2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ad6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 8000ae0:	b291      	uxth	r1, r2
 8000ae2:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000ae4:	2a5a      	cmp	r2, #90	; 0x5a
 8000ae6:	dd12      	ble.n	8000b0e <computeSinCos+0x5a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000ae8:	f1a1 005b 	sub.w	r0, r1, #91	; 0x5b
 8000aec:	2859      	cmp	r0, #89	; 0x59
 8000aee:	d90c      	bls.n	8000b0a <computeSinCos+0x56>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000af0:	39b5      	subs	r1, #181	; 0xb5
 8000af2:	2959      	cmp	r1, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000af4:	bf98      	it	ls
 8000af6:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000af8:	49b5      	ldr	r1, [pc, #724]	; (8000dd0 <computeSinCos+0x31c>)
 8000afa:	bf88      	it	hi
 8000afc:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000b00:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000b04:	4264      	negs	r4, r4
 8000b06:	b224      	sxth	r4, r4
 8000b08:	e004      	b.n	8000b14 <computeSinCos+0x60>
    return sinTable[180 - thetaElec];
 8000b0a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000b0e:	49b0      	ldr	r1, [pc, #704]	; (8000dd0 <computeSinCos+0x31c>)
 8000b10:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	sin000 = sin2(thetaElec);
 8000b14:	4daf      	ldr	r5, [pc, #700]	; (8000dd4 <computeSinCos+0x320>)
  return sin2(thetaElec+90);
 8000b16:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 8000b1a:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000b1c:	2a00      	cmp	r2, #0
	sin000 = sin2(thetaElec);
 8000b1e:	802c      	strh	r4, [r5, #0]
  return sin2(thetaElec+90);
 8000b20:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000b22:	f2c0 8106 	blt.w	8000d32 <computeSinCos+0x27e>
		return (thetaElec - 360*(thetaElec/360));
 8000b26:	4ca9      	ldr	r4, [pc, #676]	; (8000dcc <computeSinCos+0x318>)
 8000b28:	fb84 5402 	smull	r5, r4, r4, r2
 8000b2c:	4414      	add	r4, r2
 8000b2e:	17d2      	asrs	r2, r2, #31
 8000b30:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000b34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b38:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000b3c:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000b40:	b290      	uxth	r0, r2
 8000b42:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000b44:	2a5a      	cmp	r2, #90	; 0x5a
 8000b46:	dd10      	ble.n	8000b6a <computeSinCos+0xb6>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000b48:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000b4c:	2c59      	cmp	r4, #89	; 0x59
 8000b4e:	d90a      	bls.n	8000b66 <computeSinCos+0xb2>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000b50:	38b5      	subs	r0, #181	; 0xb5
 8000b52:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000b54:	bf94      	ite	ls
 8000b56:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000b58:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000b5c:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000b60:	4264      	negs	r4, r4
 8000b62:	b224      	sxth	r4, r4
 8000b64:	e003      	b.n	8000b6e <computeSinCos+0xba>
    return sinTable[180 - thetaElec];
 8000b66:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000b6a:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	cos000 = cos2(thetaElec);
 8000b6e:	4d9a      	ldr	r5, [pc, #616]	; (8000dd8 <computeSinCos+0x324>)
	sin120 = sin2(thetaElec+120);
 8000b70:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000b74:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000b76:	2a00      	cmp	r2, #0
	cos000 = cos2(thetaElec);
 8000b78:	802c      	strh	r4, [r5, #0]
	sin120 = sin2(thetaElec+120);
 8000b7a:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000b7c:	f2c0 80c5 	blt.w	8000d0a <computeSinCos+0x256>
		return (thetaElec - 360*(thetaElec/360));
 8000b80:	4c92      	ldr	r4, [pc, #584]	; (8000dcc <computeSinCos+0x318>)
 8000b82:	fb84 5402 	smull	r5, r4, r4, r2
 8000b86:	4414      	add	r4, r2
 8000b88:	17d2      	asrs	r2, r2, #31
 8000b8a:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000b8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b92:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000b96:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000b9a:	b290      	uxth	r0, r2
 8000b9c:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000b9e:	2a5a      	cmp	r2, #90	; 0x5a
 8000ba0:	dd10      	ble.n	8000bc4 <computeSinCos+0x110>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000ba2:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000ba6:	2c59      	cmp	r4, #89	; 0x59
 8000ba8:	d90a      	bls.n	8000bc0 <computeSinCos+0x10c>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000baa:	38b5      	subs	r0, #181	; 0xb5
 8000bac:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000bae:	bf94      	ite	ls
 8000bb0:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000bb2:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000bb6:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000bba:	4264      	negs	r4, r4
 8000bbc:	b224      	sxth	r4, r4
 8000bbe:	e003      	b.n	8000bc8 <computeSinCos+0x114>
    return sinTable[180 - thetaElec];
 8000bc0:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000bc4:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	sin120 = sin2(thetaElec+120);
 8000bc8:	4d84      	ldr	r5, [pc, #528]	; (8000ddc <computeSinCos+0x328>)
	sin240 = sin2(thetaElec+240);
 8000bca:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8000bce:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000bd0:	2a00      	cmp	r2, #0
	sin120 = sin2(thetaElec+120);
 8000bd2:	802c      	strh	r4, [r5, #0]
	sin240 = sin2(thetaElec+240);
 8000bd4:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000bd6:	f2c0 8084 	blt.w	8000ce2 <computeSinCos+0x22e>
		return (thetaElec - 360*(thetaElec/360));
 8000bda:	4c7c      	ldr	r4, [pc, #496]	; (8000dcc <computeSinCos+0x318>)
 8000bdc:	fb84 5402 	smull	r5, r4, r4, r2
 8000be0:	4414      	add	r4, r2
 8000be2:	17d2      	asrs	r2, r2, #31
 8000be4:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000be8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000bec:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000bf0:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000bf4:	b290      	uxth	r0, r2
 8000bf6:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000bf8:	2a5a      	cmp	r2, #90	; 0x5a
 8000bfa:	dd10      	ble.n	8000c1e <computeSinCos+0x16a>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000bfc:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000c00:	2c59      	cmp	r4, #89	; 0x59
 8000c02:	d90a      	bls.n	8000c1a <computeSinCos+0x166>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000c04:	38b5      	subs	r0, #181	; 0xb5
 8000c06:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000c08:	bf94      	ite	ls
 8000c0a:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000c0c:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000c10:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000c14:	4264      	negs	r4, r4
 8000c16:	b224      	sxth	r4, r4
 8000c18:	e003      	b.n	8000c22 <computeSinCos+0x16e>
    return sinTable[180 - thetaElec];
 8000c1a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000c1e:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	sin240 = sin2(thetaElec+240);
 8000c22:	4d6f      	ldr	r5, [pc, #444]	; (8000de0 <computeSinCos+0x32c>)
  return sin2(thetaElec+90);
 8000c24:	f103 00d2 	add.w	r0, r3, #210	; 0xd2
 8000c28:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000c2a:	2a00      	cmp	r2, #0
	sin240 = sin2(thetaElec+240);
 8000c2c:	802c      	strh	r4, [r5, #0]
  return sin2(thetaElec+90);
 8000c2e:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000c30:	f2c0 80b5 	blt.w	8000d9e <computeSinCos+0x2ea>
		return (thetaElec - 360*(thetaElec/360));
 8000c34:	4c65      	ldr	r4, [pc, #404]	; (8000dcc <computeSinCos+0x318>)
 8000c36:	fb84 5402 	smull	r5, r4, r4, r2
 8000c3a:	4414      	add	r4, r2
 8000c3c:	17d2      	asrs	r2, r2, #31
 8000c3e:	ebc2 2224 	rsb	r2, r2, r4, asr #8
 8000c42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000c46:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000c4a:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000c4e:	b290      	uxth	r0, r2
 8000c50:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000c52:	2a5a      	cmp	r2, #90	; 0x5a
 8000c54:	dd10      	ble.n	8000c78 <computeSinCos+0x1c4>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000c56:	f1a0 045b 	sub.w	r4, r0, #91	; 0x5b
 8000c5a:	2c59      	cmp	r4, #89	; 0x59
 8000c5c:	d90a      	bls.n	8000c74 <computeSinCos+0x1c0>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000c5e:	38b5      	subs	r0, #181	; 0xb5
 8000c60:	2859      	cmp	r0, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000c62:	bf94      	ite	ls
 8000c64:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000c66:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
 8000c6a:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 8000c6e:	4264      	negs	r4, r4
 8000c70:	b224      	sxth	r4, r4
 8000c72:	e003      	b.n	8000c7c <computeSinCos+0x1c8>
    return sinTable[180 - thetaElec];
 8000c74:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000c78:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
	cos120 = cos2(thetaElec+120);
 8000c7c:	4d59      	ldr	r5, [pc, #356]	; (8000de4 <computeSinCos+0x330>)
  return sin2(thetaElec+90);
 8000c7e:	f503 70a5 	add.w	r0, r3, #330	; 0x14a
 8000c82:	b202      	sxth	r2, r0
	if(thetaElec < 0){
 8000c84:	2a00      	cmp	r2, #0
	cos120 = cos2(thetaElec+120);
 8000c86:	802c      	strh	r4, [r5, #0]
  return sin2(thetaElec+90);
 8000c88:	b280      	uxth	r0, r0
	if(thetaElec < 0){
 8000c8a:	db74      	blt.n	8000d76 <computeSinCos+0x2c2>
		return (thetaElec - 360*(thetaElec/360));
 8000c8c:	4b4f      	ldr	r3, [pc, #316]	; (8000dcc <computeSinCos+0x318>)
 8000c8e:	fb83 4302 	smull	r4, r3, r3, r2
 8000c92:	4413      	add	r3, r2
 8000c94:	17d2      	asrs	r2, r2, #31
 8000c96:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8000c9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000c9e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000ca2:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000ca6:	b293      	uxth	r3, r2
 8000ca8:	b212      	sxth	r2, r2
  if(thetaElec <= 90){
 8000caa:	2a5a      	cmp	r2, #90	; 0x5a
 8000cac:	dd13      	ble.n	8000cd6 <computeSinCos+0x222>
  } else if(thetaElec > 90 && thetaElec <=180){
 8000cae:	f1a3 005b 	sub.w	r0, r3, #91	; 0x5b
 8000cb2:	2859      	cmp	r0, #89	; 0x59
 8000cb4:	d90d      	bls.n	8000cd2 <computeSinCos+0x21e>
  } else if(thetaElec > 180 && thetaElec <= 270){
 8000cb6:	3bb5      	subs	r3, #181	; 0xb5
 8000cb8:	2b59      	cmp	r3, #89	; 0x59
    return -sinTable[thetaElec - 180];
 8000cba:	bf94      	ite	ls
 8000cbc:	3ab4      	subls	r2, #180	; 0xb4
    return -sinTable[360 - thetaElec];
 8000cbe:	f5c2 72b4 	rsbhi	r2, r2, #360	; 0x168
	cos240 = cos2(thetaElec+240);
}
 8000cc2:	bc30      	pop	{r4, r5}
    return -sinTable[360 - thetaElec];
 8000cc4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
	cos240 = cos2(thetaElec+240);
 8000cc8:	4a47      	ldr	r2, [pc, #284]	; (8000de8 <computeSinCos+0x334>)
    return -sinTable[360 - thetaElec];
 8000cca:	425b      	negs	r3, r3
 8000ccc:	b21b      	sxth	r3, r3
	cos240 = cos2(thetaElec+240);
 8000cce:	8013      	strh	r3, [r2, #0]
}
 8000cd0:	4770      	bx	lr
    return sinTable[180 - thetaElec];
 8000cd2:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8000cd6:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
	cos240 = cos2(thetaElec+240);
 8000cda:	4a43      	ldr	r2, [pc, #268]	; (8000de8 <computeSinCos+0x334>)
}
 8000cdc:	bc30      	pop	{r4, r5}
	cos240 = cos2(thetaElec+240);
 8000cde:	8013      	strh	r3, [r2, #0]
}
 8000ce0:	4770      	bx	lr
		return ((360+thetaElec) - 360*(1+(thetaElec/360)));
 8000ce2:	483a      	ldr	r0, [pc, #232]	; (8000dcc <computeSinCos+0x318>)
 8000ce4:	fb80 4002 	smull	r4, r0, r0, r2
 8000ce8:	4410      	add	r0, r2
 8000cea:	17d2      	asrs	r2, r2, #31
 8000cec:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000cf0:	b212      	sxth	r2, r2
 8000cf2:	3201      	adds	r2, #1
 8000cf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000cf8:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8000cfc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d00:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000d04:	b290      	uxth	r0, r2
 8000d06:	b212      	sxth	r2, r2
 8000d08:	e776      	b.n	8000bf8 <computeSinCos+0x144>
 8000d0a:	4830      	ldr	r0, [pc, #192]	; (8000dcc <computeSinCos+0x318>)
 8000d0c:	fb80 4002 	smull	r4, r0, r0, r2
 8000d10:	4410      	add	r0, r2
 8000d12:	17d2      	asrs	r2, r2, #31
 8000d14:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000d18:	b212      	sxth	r2, r2
 8000d1a:	3201      	adds	r2, #1
 8000d1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d20:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 8000d24:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d28:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000d2c:	b290      	uxth	r0, r2
 8000d2e:	b212      	sxth	r2, r2
 8000d30:	e735      	b.n	8000b9e <computeSinCos+0xea>
 8000d32:	4826      	ldr	r0, [pc, #152]	; (8000dcc <computeSinCos+0x318>)
 8000d34:	fb80 4002 	smull	r4, r0, r0, r2
 8000d38:	4410      	add	r0, r2
 8000d3a:	17d2      	asrs	r2, r2, #31
 8000d3c:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000d40:	b212      	sxth	r2, r2
 8000d42:	3201      	adds	r2, #1
 8000d44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d48:	f503 70e1 	add.w	r0, r3, #450	; 0x1c2
 8000d4c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d50:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000d54:	b290      	uxth	r0, r2
 8000d56:	b212      	sxth	r2, r2
 8000d58:	e6f4      	b.n	8000b44 <computeSinCos+0x90>
 8000d5a:	b212      	sxth	r2, r2
 8000d5c:	3201      	adds	r2, #1
 8000d5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8000d68:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8000d6c:	eba2 02c1 	sub.w	r2, r2, r1, lsl #3
 8000d70:	b291      	uxth	r1, r2
 8000d72:	b212      	sxth	r2, r2
 8000d74:	e6b6      	b.n	8000ae4 <computeSinCos+0x30>
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <computeSinCos+0x318>)
 8000d78:	fb80 4002 	smull	r4, r0, r0, r2
 8000d7c:	4410      	add	r0, r2
 8000d7e:	17d2      	asrs	r2, r2, #31
 8000d80:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000d84:	b212      	sxth	r2, r2
 8000d86:	3201      	adds	r2, #1
 8000d88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d8c:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8000d90:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000d94:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 8000d98:	b293      	uxth	r3, r2
 8000d9a:	b212      	sxth	r2, r2
 8000d9c:	e785      	b.n	8000caa <computeSinCos+0x1f6>
 8000d9e:	480b      	ldr	r0, [pc, #44]	; (8000dcc <computeSinCos+0x318>)
 8000da0:	fb80 4002 	smull	r4, r0, r0, r2
 8000da4:	4410      	add	r0, r2
 8000da6:	17d2      	asrs	r2, r2, #31
 8000da8:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8000dac:	b212      	sxth	r2, r2
 8000dae:	3201      	adds	r2, #1
 8000db0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000db4:	f203 203a 	addw	r0, r3, #570	; 0x23a
 8000db8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000dbc:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
 8000dc0:	b290      	uxth	r0, r2
 8000dc2:	b212      	sxth	r2, r2
 8000dc4:	e745      	b.n	8000c52 <computeSinCos+0x19e>
 8000dc6:	bf00      	nop
 8000dc8:	20000080 	.word	0x20000080
 8000dcc:	b60b60b7 	.word	0xb60b60b7
 8000dd0:	080048d0 	.word	0x080048d0
 8000dd4:	20000112 	.word	0x20000112
 8000dd8:	2000013c 	.word	0x2000013c
 8000ddc:	200001d8 	.word	0x200001d8
 8000de0:	20000100 	.word	0x20000100
 8000de4:	200000bc 	.word	0x200000bc
 8000de8:	20000076 	.word	0x20000076

08000dec <SpeedPIController>:
int16_t Ki = 512;

float Iterm = 0;
int16_t speedReq = 1500;
void SpeedPIController(){
	error = speedReq - speed;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <SpeedPIController+0xbc>)
 8000dee:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <SpeedPIController+0xc0>)
	Kterm = (float)(error*Kp)/256;
	Iterm += (float)(error*Ki)/2560;
 8000df0:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <SpeedPIController+0xc4>)
	error = speedReq - speed;
 8000df2:	8812      	ldrh	r2, [r2, #0]
	Iterm += (float)(error*Ki)/2560;
 8000df4:	ed90 7a00 	vldr	s14, [r0]
 8000df8:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8000eb4 <SpeedPIController+0xc8>

	if(Iterm > 10000){
 8000dfc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8000eb8 <SpeedPIController+0xcc>
void SpeedPIController(){
 8000e00:	b430      	push	{r4, r5}
	error = speedReq - speed;
 8000e02:	881d      	ldrh	r5, [r3, #0]
	Iterm += (float)(error*Ki)/2560;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <SpeedPIController+0xd0>)
	error = speedReq - speed;
 8000e06:	4c2e      	ldr	r4, [pc, #184]	; (8000ec0 <SpeedPIController+0xd4>)
	Iterm += (float)(error*Ki)/2560;
 8000e08:	8819      	ldrh	r1, [r3, #0]
	Kterm = (float)(error*Kp)/256;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <SpeedPIController+0xd8>)
	error = speedReq - speed;
 8000e0c:	1b52      	subs	r2, r2, r5
 8000e0e:	b212      	sxth	r2, r2
	Iterm += (float)(error*Ki)/2560;
 8000e10:	fb11 f102 	smulbb	r1, r1, r2
 8000e14:	ee07 1a90 	vmov	s15, r1
 8000e18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	Kterm = (float)(error*Kp)/256;
 8000e1c:	881b      	ldrh	r3, [r3, #0]
	error = speedReq - speed;
 8000e1e:	8022      	strh	r2, [r4, #0]
	Iterm += (float)(error*Ki)/2560;
 8000e20:	eea6 7aa5 	vfma.f32	s14, s13, s11
	Kterm = (float)(error*Kp)/256;
 8000e24:	fb13 f302 	smulbb	r3, r3, r2
 8000e28:	ee07 3a90 	vmov	s15, r3
	if(Iterm > 10000){
 8000e2c:	eeb4 7ac6 	vcmpe.f32	s14, s12
	Kterm = (float)(error*Kp)/256;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <SpeedPIController+0xdc>)
 8000e32:	eefa 7acc 	vcvt.f32.s32	s15, s15, #8
	if(Iterm > 10000){
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Kterm = (float)(error*Kp)/256;
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
	if(Iterm > 10000){
 8000e3e:	dd13      	ble.n	8000e68 <SpeedPIController+0x7c>
		Iterm = 10000;
 8000e40:	ed80 6a00 	vstr	s12, [r0]
 8000e44:	eeb0 7a46 	vmov.f32	s14, s12
	} else if(Iterm < -10000){
		Iterm = -10000;
	}

	IqRef = (int16_t)(Kterm+Iterm);
 8000e48:	ee77 7a87 	vadd.f32	s15, s15, s14

	if(IqRef > 20000){
 8000e4c:	f644 6220 	movw	r2, #20000	; 0x4e20
	IqRef = (int16_t)(Kterm+Iterm);
 8000e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e54:	ee17 3a90 	vmov	r3, s15
 8000e58:	b21b      	sxth	r3, r3
	if(IqRef > 20000){
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	dd12      	ble.n	8000e84 <SpeedPIController+0x98>
		IqRef = 20000;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <SpeedPIController+0xe0>)
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <SpeedPIController+0xe4>)
 8000e62:	601a      	str	r2, [r3, #0]
	} else if(IqRef < -20000){
		IqRef = -20000;
	}
}
 8000e64:	bc30      	pop	{r4, r5}
 8000e66:	4770      	bx	lr
	} else if(Iterm < -10000){
 8000e68:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000ed4 <SpeedPIController+0xe8>
 8000e6c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Iterm += (float)(error*Ki)/2560;
 8000e74:	bf52      	itee	pl
 8000e76:	ed80 7a00 	vstrpl	s14, [r0]
		Iterm = -10000;
 8000e7a:	eeb0 7a66 	vmovmi.f32	s14, s13
 8000e7e:	edc0 6a00 	vstrmi	s13, [r0]
 8000e82:	e7e1      	b.n	8000e48 <SpeedPIController+0x5c>
	} else if(IqRef < -20000){
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <SpeedPIController+0xec>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	da04      	bge.n	8000e94 <SpeedPIController+0xa8>
		IqRef = -20000;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <SpeedPIController+0xe0>)
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <SpeedPIController+0xf0>)
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bc30      	pop	{r4, r5}
 8000e92:	4770      	bx	lr
	IqRef = (int16_t)(Kterm+Iterm);
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <SpeedPIController+0xe0>)
 8000e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000e9e:	bc30      	pop	{r4, r5}
	IqRef = (int16_t)(Kterm+Iterm);
 8000ea0:	edc2 7a00 	vstr	s15, [r2]
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000140 	.word	0x20000140
 8000eac:	20000028 	.word	0x20000028
 8000eb0:	2000006c 	.word	0x2000006c
 8000eb4:	39cccccd 	.word	0x39cccccd
 8000eb8:	461c4000 	.word	0x461c4000
 8000ebc:	20000024 	.word	0x20000024
 8000ec0:	2000013e 	.word	0x2000013e
 8000ec4:	20000026 	.word	0x20000026
 8000ec8:	2000011c 	.word	0x2000011c
 8000ecc:	200000fc 	.word	0x200000fc
 8000ed0:	469c4000 	.word	0x469c4000
 8000ed4:	c61c4000 	.word	0xc61c4000
 8000ed8:	ffffb1e0 	.word	0xffffb1e0
 8000edc:	c69c4000 	.word	0xc69c4000

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b530      	push	{r4, r5, lr}
 8000ee2:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee4:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee6:	2258      	movs	r2, #88	; 0x58
 8000ee8:	a810      	add	r0, sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eea:	e9cd 1100 	strd	r1, r1, [sp]
 8000eee:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	910a      	str	r1, [sp, #40]	; 0x28
 8000ef4:	9108      	str	r1, [sp, #32]
 8000ef6:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	9104      	str	r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efa:	f003 fcd5 	bl	80048a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f04:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f12:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f14:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8000f18:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	9109      	str	r1, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f001 fcb7 	bl	8002894 <HAL_RCC_OscConfig>
 8000f26:	b108      	cbz	r0, 8000f2c <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f36:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f38:	240f      	movs	r4, #15
 8000f3a:	2502      	movs	r5, #2
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f3c:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f42:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f46:	f001 ff93 	bl	8002e70 <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b108      	cbz	r0, 8000f52 <SystemClock_Config+0x72>
 8000f4e:	b672      	cpsid	i
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000f52:	4c09      	ldr	r4, [pc, #36]	; (8000f78 <SystemClock_Config+0x98>)
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f54:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000f56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000f60:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000f62:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000f64:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f66:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f002 f8ce 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	b108      	cbz	r0, 8000f72 <SystemClock_Config+0x92>
 8000f6e:	b672      	cpsid	i
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <SystemClock_Config+0x90>
}
 8000f72:	b027      	add	sp, #156	; 0x9c
 8000f74:	bd30      	pop	{r4, r5, pc}
 8000f76:	bf00      	nop
 8000f78:	00201082 	.word	0x00201082

08000f7c <main>:
{
 8000f7c:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	2400      	movs	r4, #0
{
 8000f80:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8000f82:	f000 fcbb 	bl	80018fc <HAL_Init>
  SystemClock_Config();
 8000f86:	f7ff ffab 	bl	8000ee0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000f8e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f92:	4ea6      	ldr	r6, [pc, #664]	; (800122c <main+0x2b0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f96:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4da5      	ldr	r5, [pc, #660]	; (8001230 <main+0x2b4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f9e:	6173      	str	r3, [r6, #20]
 8000fa0:	6973      	ldr	r3, [r6, #20]
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	9303      	str	r3, [sp, #12]
 8000fa8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	6973      	ldr	r3, [r6, #20]
 8000fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fb0:	6173      	str	r3, [r6, #20]
 8000fb2:	6973      	ldr	r3, [r6, #20]
 8000fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fb8:	9304      	str	r3, [sp, #16]
 8000fba:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	6973      	ldr	r3, [r6, #20]
 8000fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc2:	6173      	str	r3, [r6, #20]
 8000fc4:	6973      	ldr	r3, [r6, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fcc:	4622      	mov	r2, r4
 8000fce:	2120      	movs	r1, #32
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fd6:	f001 fc51 	bl	800287c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000fda:	4896      	ldr	r0, [pc, #600]	; (8001234 <main+0x2b8>)
 8000fdc:	4622      	mov	r2, r4
 8000fde:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000fe2:	f001 fc4b 	bl	800287c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ff8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f001 fb30 	bl	8002660 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8001000:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001004:	2301      	movs	r3, #1
 8001006:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	488a      	ldr	r0, [pc, #552]	; (8001234 <main+0x2b8>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800100c:	2202      	movs	r2, #2
 800100e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8001012:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f001 fb23 	bl	8002660 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101c:	f885 4020 	strb.w	r4, [r5, #32]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6173      	str	r3, [r6, #20]
 8001026:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001028:	62ec      	str	r4, [r5, #44]	; 0x2c
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001032:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001034:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6173      	str	r3, [r6, #20]
 800103e:	6973      	ldr	r3, [r6, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001040:	606c      	str	r4, [r5, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	9302      	str	r3, [sp, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001048:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc1.Instance = ADC1;
 800104c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001050:	9a02      	ldr	r2, [sp, #8]
  hadc1.Instance = ADC1;
 8001052:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	2201      	movs	r2, #1
  hadc1.Init.NbrOfConversion = 4;
 8001056:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800105a:	8329      	strh	r1, [r5, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001060:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8001064:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8001068:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8001070:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001072:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	62aa      	str	r2, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001076:	612a      	str	r2, [r5, #16]
  hadc1.Init.NbrOfConversion = 4;
 8001078:	61eb      	str	r3, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	616b      	str	r3, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	f000 fd02 	bl	8001a84 <HAL_ADC_Init>
 8001080:	b108      	cbz	r0, 8001086 <main+0x10a>
 8001082:	b672      	cpsid	i
  while (1)
 8001084:	e7fe      	b.n	8001084 <main+0x108>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001086:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001088:	a90e      	add	r1, sp, #56	; 0x38
 800108a:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108e:	f001 f901 	bl	8002294 <HAL_ADCEx_MultiModeConfigChannel>
 8001092:	b108      	cbz	r0, 8001098 <main+0x11c>
 8001094:	b672      	cpsid	i
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x11a>
  sConfig.Channel = ADC_CHANNEL_1;
 8001098:	2201      	movs	r2, #1
 800109a:	2301      	movs	r3, #1
 800109c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_1;
 80010a2:	2200      	movs	r2, #0
 80010a4:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a6:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80010a8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80010ac:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	f000 ff30 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80010b4:	b108      	cbz	r0, 80010ba <main+0x13e>
 80010b6:	b672      	cpsid	i
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <main+0x13c>
  sConfig.Channel = ADC_CHANNEL_7;
 80010ba:	2207      	movs	r2, #7
 80010bc:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	a916      	add	r1, sp, #88	; 0x58
 80010c0:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_7;
 80010c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	f000 ff25 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80010ca:	b108      	cbz	r0, 80010d0 <main+0x154>
 80010cc:	b672      	cpsid	i
  while (1)
 80010ce:	e7fe      	b.n	80010ce <main+0x152>
  sConfig.Channel = ADC_CHANNEL_6;
 80010d0:	2206      	movs	r2, #6
 80010d2:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	a916      	add	r1, sp, #88	; 0x58
 80010d6:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 80010d8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	f000 ff1a 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80010e0:	b108      	cbz	r0, 80010e6 <main+0x16a>
 80010e2:	b672      	cpsid	i
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0x168>
  sConfig.Channel = ADC_CHANNEL_2;
 80010e6:	2202      	movs	r2, #2
 80010e8:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ea:	4628      	mov	r0, r5
 80010ec:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_2;
 80010ee:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f2:	f000 ff0f 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80010f6:	4604      	mov	r4, r0
 80010f8:	b108      	cbz	r0, 80010fe <main+0x182>
 80010fa:	b672      	cpsid	i
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x180>
  htim1.Instance = TIM1;
 80010fe:	4d4e      	ldr	r5, [pc, #312]	; (8001238 <main+0x2bc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001100:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001102:	4601      	mov	r1, r0
 8001104:	222c      	movs	r2, #44	; 0x2c
 8001106:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001108:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800110c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8001110:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001114:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800111c:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001120:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001122:	f003 fbc1 	bl	80048a8 <memset>
  htim1.Instance = TIM1;
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <main+0x2c0>)
 8001128:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 30;
 800112a:	201e      	movs	r0, #30
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800112c:	2120      	movs	r1, #32
  htim1.Init.Period = 72;
 800112e:	2248      	movs	r2, #72	; 0x48
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001130:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Prescaler = 30;
 8001132:	6068      	str	r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001134:	4628      	mov	r0, r5
  htim1.Init.Period = 72;
 8001136:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800113c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800113e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001140:	f002 f9c6 	bl	80034d0 <HAL_TIM_Base_Init>
 8001144:	b108      	cbz	r0, 800114a <main+0x1ce>
 8001146:	b672      	cpsid	i
  while (1)
 8001148:	e7fe      	b.n	8001148 <main+0x1cc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800114e:	a90a      	add	r1, sp, #40	; 0x28
 8001150:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001152:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001154:	f002 fc32 	bl	80039bc <HAL_TIM_ConfigClockSource>
 8001158:	b108      	cbz	r0, 800115e <main+0x1e2>
 800115a:	b672      	cpsid	i
  while (1)
 800115c:	e7fe      	b.n	800115c <main+0x1e0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800115e:	4628      	mov	r0, r5
 8001160:	f002 fa34 	bl	80035cc <HAL_TIM_PWM_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	b108      	cbz	r0, 800116c <main+0x1f0>
 8001168:	b672      	cpsid	i
  while (1)
 800116a:	e7fe      	b.n	800116a <main+0x1ee>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800116e:	2470      	movs	r4, #112	; 0x70
 8001170:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001174:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001176:	e9cd 4506 	strd	r4, r5, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117c:	f002 ff2e 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	b108      	cbz	r0, 8001186 <main+0x20a>
 8001182:	b672      	cpsid	i
  while (1)
 8001184:	e7fe      	b.n	8001184 <main+0x208>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001186:	2460      	movs	r4, #96	; 0x60
 8001188:	2500      	movs	r5, #0
 800118a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001190:	2600      	movs	r6, #0
 8001192:	2700      	movs	r7, #0
 8001194:	2404      	movs	r4, #4
 8001196:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001198:	4827      	ldr	r0, [pc, #156]	; (8001238 <main+0x2bc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80011a2:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	f002 fdc3 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 80011aa:	b108      	cbz	r0, 80011b0 <main+0x234>
 80011ac:	b672      	cpsid	i
  while (1)
 80011ae:	e7fe      	b.n	80011ae <main+0x232>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <main+0x2bc>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	a90e      	add	r1, sp, #56	; 0x38
 80011b6:	f002 fdbb 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	b108      	cbz	r0, 80011c0 <main+0x244>
 80011bc:	b672      	cpsid	i
  while (1)
 80011be:	e7fe      	b.n	80011be <main+0x242>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <main+0x2bc>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	a90e      	add	r1, sp, #56	; 0x38
 80011c6:	f002 fdb3 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 80011ca:	b108      	cbz	r0, 80011d0 <main+0x254>
 80011cc:	b672      	cpsid	i
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x252>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011d0:	2470      	movs	r4, #112	; 0x70
 80011d2:	2548      	movs	r5, #72	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d4:	4818      	ldr	r0, [pc, #96]	; (8001238 <main+0x2bc>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011da:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011de:	f002 fda7 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 80011e2:	b108      	cbz	r0, 80011e8 <main+0x26c>
 80011e4:	b672      	cpsid	i
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <main+0x26a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80011f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f8:	2300      	movs	r3, #0
 80011fa:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8001208:	2200      	movs	r2, #0
 800120a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800120e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001212:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001214:	2200      	movs	r2, #0
 8001216:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <main+0x2bc>)
 800121a:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800121c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001220:	f002 ff36 	bl	8004090 <HAL_TIMEx_ConfigBreakDeadTime>
 8001224:	4604      	mov	r4, r0
 8001226:	b158      	cbz	r0, 8001240 <main+0x2c4>
 8001228:	b672      	cpsid	i
  while (1)
 800122a:	e7fe      	b.n	800122a <main+0x2ae>
 800122c:	40021000 	.word	0x40021000
 8001230:	20005124 	.word	0x20005124
 8001234:	48000800 	.word	0x48000800
 8001238:	200051fc 	.word	0x200051fc
 800123c:	40012c00 	.word	0x40012c00
  HAL_TIM_MspPostInit(&htim1);
 8001240:	4862      	ldr	r0, [pc, #392]	; (80013cc <main+0x450>)
 8001242:	f000 fa49 	bl	80016d8 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8001246:	4862      	ldr	r0, [pc, #392]	; (80013d0 <main+0x454>)
 8001248:	4a62      	ldr	r2, [pc, #392]	; (80013d4 <main+0x458>)
  huart2.Init.BaudRate = 2250000;
 800124a:	4963      	ldr	r1, [pc, #396]	; (80013d8 <main+0x45c>)
  huart2.Instance = USART2;
 800124c:	6002      	str	r2, [r0, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 2250000;
 8001250:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001252:	6142      	str	r2, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001258:	f44f 6200 	mov.w	r2, #2048	; 0x800
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800125c:	61c1      	str	r1, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800125e:	6202      	str	r2, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001260:	2120      	movs	r1, #32
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001266:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126c:	6184      	str	r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800126e:	6241      	str	r1, [r0, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001270:	63c2      	str	r2, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001272:	f003 f8b5 	bl	80043e0 <HAL_UART_Init>
 8001276:	b108      	cbz	r0, 800127c <main+0x300>
 8001278:	b672      	cpsid	i
  while (1)
 800127a:	e7fe      	b.n	800127a <main+0x2fe>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800127c:	4c57      	ldr	r4, [pc, #348]	; (80013dc <main+0x460>)
  hadc2.Instance = ADC2;
 800127e:	4958      	ldr	r1, [pc, #352]	; (80013e0 <main+0x464>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001280:	9016      	str	r0, [sp, #88]	; 0x58
  hadc2.Init.NbrOfConversion = 2;
 8001282:	2202      	movs	r2, #2
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001284:	2304      	movs	r3, #4
  hadc2.Init.NbrOfConversion = 2;
 8001286:	61e2      	str	r2, [r4, #28]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001288:	f44f 7280 	mov.w	r2, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 800128c:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 8001290:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001294:	e9c4 0001 	strd	r0, r0, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001298:	901b      	str	r0, [sp, #108]	; 0x6c
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800129a:	f884 0020 	strb.w	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129e:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012a0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a4:	60e0      	str	r0, [r4, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012a6:	6360      	str	r0, [r4, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012aa:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	2301      	movs	r3, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012ae:	8322      	strh	r2, [r4, #24]
  hadc2.Instance = ADC2;
 80012b0:	6021      	str	r1, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b4:	6123      	str	r3, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012b6:	f000 fbe5 	bl	8001a84 <HAL_ADC_Init>
 80012ba:	b108      	cbz	r0, 80012c0 <main+0x344>
 80012bc:	b672      	cpsid	i
  while (1)
 80012be:	e7fe      	b.n	80012be <main+0x342>
  sConfig.Channel = ADC_CHANNEL_4;
 80012c0:	2204      	movs	r2, #4
 80012c2:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012c4:	a916      	add	r1, sp, #88	; 0x58
 80012c6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80012c8:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 80012cc:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 80012d0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012d4:	f000 fe1e 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80012d8:	b108      	cbz	r0, 80012de <main+0x362>
 80012da:	b672      	cpsid	i
  while (1)
 80012dc:	e7fe      	b.n	80012dc <main+0x360>
  sConfig.Channel = ADC_CHANNEL_9;
 80012de:	2209      	movs	r2, #9
 80012e0:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012e2:	4620      	mov	r0, r4
 80012e4:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_9;
 80012e6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012ea:	f000 fe13 	bl	8001f14 <HAL_ADC_ConfigChannel>
 80012ee:	b108      	cbz	r0, 80012f4 <main+0x378>
 80012f0:	b672      	cpsid	i
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <main+0x376>
  htim3.Instance = TIM3;
 80012f4:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <main+0x468>)
 80012f6:	4d3c      	ldr	r5, [pc, #240]	; (80013e8 <main+0x46c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	6118      	str	r0, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012fa:	2280      	movs	r2, #128	; 0x80
  htim3.Init.Period = 299;
 80012fc:	f240 142b 	movw	r4, #299	; 0x12b
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	e9c3 0001 	strd	r0, r0, [r3, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001304:	619a      	str	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800130a:	2201      	movs	r2, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC2Filter = 0;
 800130e:	901e      	str	r0, [sp, #120]	; 0x78
  htim3.Instance = TIM3;
 8001310:	601d      	str	r5, [r3, #0]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001312:	4618      	mov	r0, r3
  htim3.Init.Period = 299;
 8001314:	60dc      	str	r4, [r3, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001316:	2302      	movs	r3, #2
 8001318:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800131c:	2201      	movs	r2, #1
 800131e:	2300      	movs	r3, #0
 8001320:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8001324:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001328:	a916      	add	r1, sp, #88	; 0x58
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800132a:	2200      	movs	r2, #0
 800132c:	2302      	movs	r3, #2
 800132e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001332:	f002 fa67 	bl	8003804 <HAL_TIM_Encoder_Init>
 8001336:	b108      	cbz	r0, 800133c <main+0x3c0>
 8001338:	b672      	cpsid	i
  while (1)
 800133a:	e7fe      	b.n	800133a <main+0x3be>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133e:	4829      	ldr	r0, [pc, #164]	; (80013e4 <main+0x468>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001342:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001346:	f002 fe49 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4604      	mov	r4, r0
 800134c:	b108      	cbz	r0, 8001352 <main+0x3d6>
 800134e:	b672      	cpsid	i
  while (1)
 8001350:	e7fe      	b.n	8001350 <main+0x3d4>
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001352:	4602      	mov	r2, r0
 8001354:	4601      	mov	r1, r0
 8001356:	201b      	movs	r0, #27
 8001358:	f001 f840 	bl	80023dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800135c:	201b      	movs	r0, #27
 800135e:	f001 f875 	bl	800244c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 1, 0);
 8001362:	4622      	mov	r2, r4
 8001364:	2101      	movs	r1, #1
 8001366:	2010      	movs	r0, #16
 8001368:	f001 f838 	bl	80023dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800136c:	2010      	movs	r0, #16
 800136e:	f001 f86d 	bl	800244c <HAL_NVIC_EnableIRQ>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001372:	213c      	movs	r1, #60	; 0x3c
 8001374:	481b      	ldr	r0, [pc, #108]	; (80013e4 <main+0x468>)
 8001376:	f002 fafb 	bl	8003970 <HAL_TIM_Encoder_Start>
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800137a:	4621      	mov	r1, r4
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <main+0x470>)
 800137e:	f000 fd83 	bl	8001e88 <HAL_ADCEx_Calibration_Start>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 8001382:	481b      	ldr	r0, [pc, #108]	; (80013f0 <main+0x474>)
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138a:	f001 fa77 	bl	800287c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <main+0x474>)
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001396:	f001 fa71 	bl	800287c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	4814      	ldr	r0, [pc, #80]	; (80013f0 <main+0x474>)
 800139e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a2:	f001 fa6b 	bl	800287c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 80013a6:	210c      	movs	r1, #12
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <main+0x450>)
 80013aa:	f002 f9c9 	bl	8003740 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013ae:	4621      	mov	r1, r4
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <main+0x450>)
 80013b2:	f002 f987 	bl	80036c4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013b6:	2104      	movs	r1, #4
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <main+0x450>)
 80013ba:	f002 f983 	bl	80036c4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013be:	2108      	movs	r1, #8
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <main+0x450>)
 80013c2:	f002 f97f 	bl	80036c4 <HAL_TIM_PWM_Start>
		receiveUART();
 80013c6:	f7ff f91b 	bl	8000600 <receiveUART>
  while (1)
 80013ca:	e7fe      	b.n	80013ca <main+0x44e>
 80013cc:	200051fc 	.word	0x200051fc
 80013d0:	20000150 	.word	0x20000150
 80013d4:	40004400 	.word	0x40004400
 80013d8:	00225510 	.word	0x00225510
 80013dc:	20005094 	.word	0x20005094
 80013e0:	50000100 	.word	0x50000100
 80013e4:	200050e4 	.word	0x200050e4
 80013e8:	40000400 	.word	0x40000400
 80013ec:	20005124 	.word	0x20005124
 80013f0:	48000800 	.word	0x48000800

080013f4 <Error_Handler>:
 80013f4:	b672      	cpsid	i
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <Error_Handler+0x2>

080013f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_MspInit+0x30>)
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	f042 0201 	orr.w	r2, r2, #1
 8001400:	619a      	str	r2, [r3, #24]
 8001402:	699a      	ldr	r2, [r3, #24]
{
 8001404:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	f002 0201 	and.w	r2, r2, #1
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001414:	61da      	str	r2, [r3, #28]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001420:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001424:	f000 bfc6 	b.w	80023b4 <HAL_NVIC_SetPriorityGrouping>
 8001428:	40021000 	.word	0x40021000

0800142c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800142c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001430:	6802      	ldr	r2, [r0, #0]
{
 8001432:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8001436:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800143e:	e9cd 3308 	strd	r3, r3, [sp, #32]
{
 8001442:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8001446:	d04d      	beq.n	80014e4 <HAL_ADC_MspInit+0xb8>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001448:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <HAL_ADC_MspInit+0x174>)
 800144a:	429a      	cmp	r2, r3
 800144c:	d002      	beq.n	8001454 <HAL_ADC_MspInit+0x28>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800144e:	b00d      	add	sp, #52	; 0x34
 8001450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001454:	4a53      	ldr	r2, [pc, #332]	; (80015a4 <HAL_ADC_MspInit+0x178>)
 8001456:	6813      	ldr	r3, [r2, #0]
 8001458:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800145a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800145c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800145e:	f000 8093 	beq.w	8001588 <HAL_ADC_MspInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_ADC_MspInit+0x17c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	4851      	ldr	r0, [pc, #324]	; (80015ac <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA2_Channel1;
 8001468:	4d51      	ldr	r5, [pc, #324]	; (80015b0 <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001476:	9204      	str	r2, [sp, #16]
 8001478:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800148c:	2208      	movs	r2, #8
 800148e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001496:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f001 f8e1 	bl	8002660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	a906      	add	r1, sp, #24
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f001 f8d7 	bl	8002660 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80014b2:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <HAL_ADC_MspInit+0x188>)
 80014b4:	602b      	str	r3, [r5, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014b6:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014b8:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014c0:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014c2:	60e8      	str	r0, [r5, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014c4:	e9c5 1204 	strd	r1, r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80014c8:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014ca:	61ab      	str	r3, [r5, #24]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014cc:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ce:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80014d2:	f000 fff5 	bl	80024c0 <HAL_DMA_Init>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d148      	bne.n	800156c <HAL_ADC_MspInit+0x140>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80014da:	63a5      	str	r5, [r4, #56]	; 0x38
 80014dc:	626c      	str	r4, [r5, #36]	; 0x24
}
 80014de:	b00d      	add	sp, #52	; 0x34
 80014e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_ADC_MspInit+0x178>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014ea:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014ee:	d040      	beq.n	8001572 <HAL_ADC_MspInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_ADC_MspInit+0x17c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	482e      	ldr	r0, [pc, #184]	; (80015ac <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	695a      	ldr	r2, [r3, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80014f6:	4d30      	ldr	r5, [pc, #192]	; (80015b8 <HAL_ADC_MspInit+0x18c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001504:	9201      	str	r2, [sp, #4]
 8001506:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|M1_CURR_AMPL_V_Pin;
 800151a:	f04f 0803 	mov.w	r8, #3
 800151e:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|M1_CURR_AMPL_V_Pin;
 8001528:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f001 f898 	bl	8002660 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	a906      	add	r1, sp, #24
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|GPIO_PIN_1;
 8001536:	e9cd 8906 	strd	r8, r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f001 f890 	bl	8002660 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001540:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001544:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001548:	2320      	movs	r3, #32
    hdma_adc1.Instance = DMA1_Channel1;
 800154a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80015bc <HAL_ADC_MspInit+0x190>
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800154e:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	2780      	movs	r7, #128	; 0x80
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001552:	e9c5 1204 	strd	r1, r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001556:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001558:	606e      	str	r6, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800155a:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800155c:	61ee      	str	r6, [r5, #28]
    hdma_adc1.Instance = DMA1_Channel1;
 800155e:	f8c5 c000 	str.w	ip, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001562:	60ef      	str	r7, [r5, #12]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001564:	f000 ffac 	bl	80024c0 <HAL_DMA_Init>
 8001568:	2800      	cmp	r0, #0
 800156a:	d0b6      	beq.n	80014da <HAL_ADC_MspInit+0xae>
      Error_Handler();
 800156c:	f7ff ff42 	bl	80013f4 <Error_Handler>
 8001570:	e7b3      	b.n	80014da <HAL_ADC_MspInit+0xae>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_ADC_MspInit+0x17c>)
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	e7b3      	b.n	80014f0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_ADC_MspInit+0x17c>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001590:	615a      	str	r2, [r3, #20]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	9303      	str	r3, [sp, #12]
 800159a:	9b03      	ldr	r3, [sp, #12]
 800159c:	e761      	b.n	8001462 <HAL_ADC_MspInit+0x36>
 800159e:	bf00      	nop
 80015a0:	50000100 	.word	0x50000100
 80015a4:	20000070 	.word	0x20000070
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000800 	.word	0x48000800
 80015b0:	2000523c 	.word	0x2000523c
 80015b4:	40020408 	.word	0x40020408
 80015b8:	200051b8 	.word	0x200051b8
 80015bc:	40020008 	.word	0x40020008

080015c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80015c2:	6802      	ldr	r2, [r0, #0]
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_TIM_Base_MspInit+0x78>)
{
 80015c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 80015ca:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80015d0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80015d4:	9406      	str	r4, [sp, #24]
  if(htim_base->Instance==TIM1)
 80015d6:	d001      	beq.n	80015dc <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015d8:	b008      	add	sp, #32
 80015da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015dc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80015e0:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e8:	619a      	str	r2, [r3, #24]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015f0:	9200      	str	r2, [sp, #0]
 80015f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001608:	2302      	movs	r3, #2
 800160a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800160e:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001610:	2300      	movs	r3, #0
 8001612:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001618:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800161e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001620:	f001 f81e 	bl	8002660 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001624:	4622      	mov	r2, r4
 8001626:	4621      	mov	r1, r4
 8001628:	2018      	movs	r0, #24
 800162a:	f000 fed7 	bl	80023dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800162e:	2018      	movs	r0, #24
 8001630:	f000 ff0c 	bl	800244c <HAL_NVIC_EnableIRQ>
}
 8001634:	b008      	add	sp, #32
 8001636:	bd70      	pop	{r4, r5, r6, pc}
 8001638:	40012c00 	.word	0x40012c00

0800163c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800163c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 800163e:	6801      	ldr	r1, [r0, #0]
 8001640:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_TIM_Encoder_MspInit+0x94>)
{
 8001642:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 8001646:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800164c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001650:	9308      	str	r3, [sp, #32]
  if(htim_encoder->Instance==TIM3)
 8001652:	d001      	beq.n	8001658 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001654:	b00a      	add	sp, #40	; 0x28
 8001656:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800165c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001660:	2401      	movs	r4, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001662:	69da      	ldr	r2, [r3, #28]
 8001664:	f042 0202 	orr.w	r2, r2, #2
 8001668:	61da      	str	r2, [r3, #28]
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	f002 0202 	and.w	r2, r2, #2
 8001670:	9201      	str	r2, [sp, #4]
 8001672:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001682:	9202      	str	r2, [sp, #8]
 8001684:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001694:	9303      	str	r3, [sp, #12]
 8001696:	9803      	ldr	r0, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001698:	2210      	movs	r2, #16
 800169a:	2302      	movs	r3, #2
 800169c:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800169e:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	a904      	add	r1, sp, #16
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ae:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f000 ffd6 	bl	8002660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b4:	2240      	movs	r2, #64	; 0x40
 80016b6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <HAL_TIM_Encoder_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ba:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80016c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f000 ffcb 	bl	8002660 <HAL_GPIO_Init>
}
 80016ca:	b00a      	add	sp, #40	; 0x28
 80016cc:	bd70      	pop	{r4, r5, r6, pc}
 80016ce:	bf00      	nop
 80016d0:	40000400 	.word	0x40000400
 80016d4:	48000800 	.word	0x48000800

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80016da:	6801      	ldr	r1, [r0, #0]
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <HAL_TIM_MspPostInit+0x5c>)
{
 80016de:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80016e2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80016ec:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80016ee:	d001      	beq.n	80016f4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f0:	b008      	add	sp, #32
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016fc:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001708:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001710:	2202      	movs	r2, #2
 8001712:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001716:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 800171a:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001720:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001724:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f000 ff99 	bl	8002660 <HAL_GPIO_Init>
}
 800172e:	b008      	add	sp, #32
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	bf00      	nop
 8001734:	40012c00 	.word	0x40012c00

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800173a:	6802      	ldr	r2, [r0, #0]
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_UART_MspInit+0xc0>)
{
 800173e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8001742:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001748:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800174c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 800174e:	d001      	beq.n	8001754 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001750:	b008      	add	sp, #32
 8001752:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001754:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001758:	4e28      	ldr	r6, [pc, #160]	; (80017fc <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001760:	61da      	str	r2, [r3, #28]
 8001762:	69da      	ldr	r2, [r3, #28]
 8001764:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001768:	9200      	str	r2, [sp, #0]
 800176a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800177c:	220c      	movs	r2, #12
 800177e:	2302      	movs	r3, #2
 8001780:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001784:	2200      	movs	r2, #0
 8001786:	2300      	movs	r3, #0
 8001788:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178e:	2307      	movs	r3, #7
 8001790:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001794:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f000 ff61 	bl	8002660 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800179e:	4918      	ldr	r1, [pc, #96]	; (8001800 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a0:	6074      	str	r4, [r6, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80017a4:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017a6:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a8:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ac:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80017b0:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b2:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80017b4:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017b6:	f000 fe83 	bl	80024c0 <HAL_DMA_Init>
 80017ba:	b9b0      	cbnz	r0, 80017ea <HAL_UART_MspInit+0xb2>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80017bc:	4c11      	ldr	r4, [pc, #68]	; (8001804 <HAL_UART_MspInit+0xcc>)
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_UART_MspInit+0xd0>)
 80017c0:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c2:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c4:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c6:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017c8:	66ee      	str	r6, [r5, #108]	; 0x6c
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017ca:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d0:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017d8:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017da:	6061      	str	r1, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017dc:	f000 fe70 	bl	80024c0 <HAL_DMA_Init>
 80017e0:	b930      	cbnz	r0, 80017f0 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017e2:	66ac      	str	r4, [r5, #104]	; 0x68
 80017e4:	6265      	str	r5, [r4, #36]	; 0x24
}
 80017e6:	b008      	add	sp, #32
 80017e8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80017ea:	f7ff fe03 	bl	80013f4 <Error_Handler>
 80017ee:	e7e5      	b.n	80017bc <HAL_UART_MspInit+0x84>
      Error_Handler();
 80017f0:	f7ff fe00 	bl	80013f4 <Error_Handler>
 80017f4:	e7f5      	b.n	80017e2 <HAL_UART_MspInit+0xaa>
 80017f6:	bf00      	nop
 80017f8:	40004400 	.word	0x40004400
 80017fc:	20005050 	.word	0x20005050
 8001800:	4002006c 	.word	0x4002006c
 8001804:	20005174 	.word	0x20005174
 8001808:	40020080 	.word	0x40020080

0800180c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 b888 	b.w	8001920 <HAL_IncTick>

08001810 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001810:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	  handleRxCommands();
 8001812:	f7fe feff 	bl	8000614 <handleRxCommands>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800181a:	4801      	ldr	r0, [pc, #4]	; (8001820 <DMA1_Channel6_IRQHandler+0x10>)
 800181c:	f000 bed6 	b.w	80025cc <HAL_DMA_IRQHandler>
 8001820:	20005050 	.word	0x20005050

08001824 <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001824:	4801      	ldr	r0, [pc, #4]	; (800182c <TIM1_BRK_TIM15_IRQHandler+0x8>)
 8001826:	f002 b979 	b.w	8003b1c <HAL_TIM_IRQHandler>
 800182a:	bf00      	nop
 800182c:	200051fc 	.word	0x200051fc

08001830 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001830:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	  executeAll();
 8001832:	f7fe ff51 	bl	80006d8 <executeAll>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 800183a:	4801      	ldr	r0, [pc, #4]	; (8001840 <TIM1_CC_IRQHandler+0x10>)
 800183c:	f002 b96e 	b.w	8003b1c <HAL_TIM_IRQHandler>
 8001840:	200051fc 	.word	0x200051fc

08001844 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SystemInit+0x18>)
 8001846:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800184a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001856:	6099      	str	r1, [r3, #8]
#endif
}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001864:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001866:	e003      	b.n	8001870 <LoopCopyDataInit>

08001868 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800186a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800186c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800186e:	3104      	adds	r1, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001870:	480b      	ldr	r0, [pc, #44]	; (80018a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001874:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001876:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001878:	d3f6      	bcc.n	8001868 <CopyDataInit>
	ldr	r2, =_sbss
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800187c:	e002      	b.n	8001884 <LoopFillZerobss>

0800187e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800187e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001880:	f842 3b04 	str.w	r3, [r2], #4

08001884 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <LoopForever+0x16>)
	cmp	r2, r3
 8001886:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001888:	d3f9      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800188a:	f7ff ffdb 	bl	8001844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188e:	f002 ffe7 	bl	8004860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001892:	f7ff fb73 	bl	8000f7c <main>

08001896 <LoopForever>:

LoopForever:
    b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001898:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800189c:	08004a84 	.word	0x08004a84
	ldr	r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018a4:	20000038 	.word	0x20000038
	ldr	r2, =_sbss
 80018a8:	20000038 	.word	0x20000038
	ldr	r3, = _ebss
 80018ac:	20005284 	.word	0x20005284

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>
	...

080018b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_InitTick+0x3c>)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_InitTick+0x40>)
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
{
 80018be:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c4:	fbb0 f0f2 	udiv	r0, r0, r2
 80018c8:	fbb3 f0f0 	udiv	r0, r3, r0
 80018cc:	f000 fdde 	bl	800248c <HAL_SYSTICK_Config>
 80018d0:	b908      	cbnz	r0, 80018d6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	2d0f      	cmp	r5, #15
 80018d4:	d901      	bls.n	80018da <HAL_InitTick+0x26>
    return HAL_ERROR;
 80018d6:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80018d8:	bd38      	pop	{r3, r4, r5, pc}
 80018da:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	4602      	mov	r2, r0
 80018de:	4629      	mov	r1, r5
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fd7a 	bl	80023dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_InitTick+0x44>)
 80018ea:	4620      	mov	r0, r4
 80018ec:	601d      	str	r5, [r3, #0]
}
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	20000030 	.word	0x20000030
 80018f4:	2000002c 	.word	0x2000002c
 80018f8:	20000034 	.word	0x20000034

080018fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_Init+0x20>)
{
 80018fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 fd53 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	2004      	movs	r0, #4
 8001910:	f7ff ffd0 	bl	80018b4 <HAL_InitTick>
  HAL_MspInit();
 8001914:	f7ff fd70 	bl	80013f8 <HAL_MspInit>
}
 8001918:	2000      	movs	r0, #0
 800191a:	bd08      	pop	{r3, pc}
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_IncTick+0x10>)
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <HAL_IncTick+0x14>)
 8001924:	6811      	ldr	r1, [r2, #0]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	440b      	add	r3, r1
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20005280 	.word	0x20005280
 8001934:	20000030 	.word	0x20000030

08001938 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001938:	4b01      	ldr	r3, [pc, #4]	; (8001940 <HAL_GetTick+0x8>)
 800193a:	6818      	ldr	r0, [r3, #0]
}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20005280 	.word	0x20005280

08001944 <HAL_ADC_ConvCpltCallback>:
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <HAL_ADC_ConvHalfCpltCallback>:
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <HAL_ADC_ErrorCallback>:
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001950:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001952:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800195a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001962:	f7ff bff3 	b.w	800194c <HAL_ADC_ErrorCallback>
 8001966:	bf00      	nop

08001968 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001968:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800196a:	f7ff bfed 	b.w	8001948 <HAL_ADC_ConvHalfCpltCallback>
 800196e:	bf00      	nop

08001970 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001970:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001974:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001978:	d118      	bne.n	80019ac <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800197a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800197c:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800197e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001984:	68ca      	ldr	r2, [r1, #12]
 8001986:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800198a:	d10c      	bne.n	80019a6 <ADC_DMAConvCplt+0x36>
 800198c:	7e5a      	ldrb	r2, [r3, #25]
 800198e:	b952      	cbnz	r2, 80019a6 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199a:	04d2      	lsls	r2, r2, #19
 800199c:	d403      	bmi.n	80019a6 <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff bfcc 	b.w	8001944 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4718      	bx	r3
 80019b2:	bf00      	nop

080019b4 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019b4:	6802      	ldr	r2, [r0, #0]
{
 80019b6:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019b8:	6893      	ldr	r3, [r2, #8]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019c2:	2000      	movs	r0, #0
}
 80019c4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019c6:	6811      	ldr	r1, [r2, #0]
 80019c8:	07c9      	lsls	r1, r1, #31
 80019ca:	d5fa      	bpl.n	80019c2 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019cc:	6891      	ldr	r1, [r2, #8]
 80019ce:	f001 010d 	and.w	r1, r1, #13
 80019d2:	2901      	cmp	r1, #1
 80019d4:	4604      	mov	r4, r0
 80019d6:	d009      	beq.n	80019ec <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80019da:	f042 0210 	orr.w	r2, r2, #16
 80019de:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80019e2:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 80019e6:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e8:	6462      	str	r2, [r4, #68]	; 0x44
}
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80019ec:	6893      	ldr	r3, [r2, #8]
 80019ee:	2103      	movs	r1, #3
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6093      	str	r3, [r2, #8]
 80019f6:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80019f8:	f7ff ff9e 	bl	8001938 <HAL_GetTick>
 80019fc:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	07db      	lsls	r3, r3, #31
 8001a04:	d5dd      	bpl.n	80019c2 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a06:	f7ff ff97 	bl	8001938 <HAL_GetTick>
 8001a0a:	1b40      	subs	r0, r0, r5
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d9f6      	bls.n	80019fe <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6463      	str	r3, [r4, #68]	; 0x44
 8001a20:	2001      	movs	r0, #1
}
 8001a22:	bd38      	pop	{r3, r4, r5, pc}

08001a24 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a24:	6802      	ldr	r2, [r0, #0]
{
 8001a26:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a28:	6893      	ldr	r3, [r2, #8]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
{
 8001a30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a32:	d020      	beq.n	8001a76 <ADC_Enable+0x52>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a34:	6891      	ldr	r1, [r2, #8]
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <ADC_Enable+0x5c>)
 8001a38:	4219      	tst	r1, r3
 8001a3a:	d009      	beq.n	8001a50 <ADC_Enable+0x2c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a3e:	f043 0310 	orr.w	r3, r3, #16
 8001a42:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6463      	str	r3, [r4, #68]	; 0x44
 8001a4c:	2001      	movs	r0, #1
}
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a50:	6893      	ldr	r3, [r2, #8]
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001a58:	f7ff ff6e 	bl	8001938 <HAL_GetTick>
 8001a5c:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a5e:	e004      	b.n	8001a6a <ADC_Enable+0x46>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a60:	f7ff ff6a 	bl	8001938 <HAL_GetTick>
 8001a64:	1b43      	subs	r3, r0, r5
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d8e8      	bhi.n	8001a3c <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	07db      	lsls	r3, r3, #31
 8001a70:	d5f6      	bpl.n	8001a60 <ADC_Enable+0x3c>
  return HAL_OK;
 8001a72:	2000      	movs	r0, #0
}
 8001a74:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a76:	6813      	ldr	r3, [r2, #0]
 8001a78:	07d9      	lsls	r1, r3, #31
 8001a7a:	d5db      	bpl.n	8001a34 <ADC_Enable+0x10>
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e7f9      	b.n	8001a74 <ADC_Enable+0x50>
 8001a80:	8000003f 	.word	0x8000003f

08001a84 <HAL_ADC_Init>:
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	f000 809d 	beq.w	8001bcc <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a94:	f013 0310 	ands.w	r3, r3, #16
 8001a98:	4604      	mov	r4, r0
 8001a9a:	d118      	bne.n	8001ace <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a9c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001a9e:	2d00      	cmp	r5, #0
 8001aa0:	f000 8097 	beq.w	8001bd2 <HAL_ADC_Init+0x14e>
 8001aa4:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001aa6:	6891      	ldr	r1, [r2, #8]
 8001aa8:	00cd      	lsls	r5, r1, #3
 8001aaa:	f140 8083 	bpl.w	8001bb4 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001aae:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ab0:	0088      	lsls	r0, r1, #2
 8001ab2:	d47f      	bmi.n	8001bb4 <HAL_ADC_Init+0x130>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ab4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ab6:	06c9      	lsls	r1, r1, #27
 8001ab8:	d400      	bmi.n	8001abc <HAL_ADC_Init+0x38>
 8001aba:	b163      	cbz	r3, 8001ad6 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8001abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001abe:	f023 0312 	bic.w	r3, r3, #18
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8001ac6:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001aca:	b002      	add	sp, #8
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ace:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ad0:	06da      	lsls	r2, r3, #27
 8001ad2:	d4f3      	bmi.n	8001abc <HAL_ADC_Init+0x38>
 8001ad4:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ad6:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001ad8:	f010 0004 	ands.w	r0, r0, #4
 8001adc:	d1ee      	bne.n	8001abc <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8001ade:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ae0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8001ae4:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001aec:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aee:	f000 80e3 	beq.w	8001cb8 <HAL_ADC_Init+0x234>
 8001af2:	4b87      	ldr	r3, [pc, #540]	; (8001d10 <HAL_ADC_Init+0x28c>)
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f000 80e7 	beq.w	8001cc8 <HAL_ADC_Init+0x244>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001afa:	4986      	ldr	r1, [pc, #536]	; (8001d14 <HAL_ADC_Init+0x290>)
 8001afc:	428a      	cmp	r2, r1
 8001afe:	d075      	beq.n	8001bec <HAL_ADC_Init+0x168>
 8001b00:	4b85      	ldr	r3, [pc, #532]	; (8001d18 <HAL_ADC_Init+0x294>)
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d073      	beq.n	8001bee <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b06:	6893      	ldr	r3, [r2, #8]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	f000 80ed 	beq.w	8001cec <HAL_ADC_Init+0x268>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b12:	4d82      	ldr	r5, [pc, #520]	; (8001d1c <HAL_ADC_Init+0x298>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b14:	68ab      	ldr	r3, [r5, #8]
 8001b16:	6861      	ldr	r1, [r4, #4]
 8001b18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b20:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8001b24:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001b26:	7e65      	ldrb	r5, [r4, #25]
 8001b28:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b2a:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b2e:	2e01      	cmp	r6, #1
 8001b30:	bf18      	it	ne
 8001b32:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001b36:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b3a:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b3c:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	f000 8095 	beq.w	8001c6e <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b46:	2901      	cmp	r1, #1
 8001b48:	d00d      	beq.n	8001b66 <HAL_ADC_Init+0xe2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001b4a:	4872      	ldr	r0, [pc, #456]	; (8001d14 <HAL_ADC_Init+0x290>)
 8001b4c:	4282      	cmp	r2, r0
 8001b4e:	f000 809e 	beq.w	8001c8e <HAL_ADC_Init+0x20a>
 8001b52:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001b56:	4282      	cmp	r2, r0
 8001b58:	f000 8099 	beq.w	8001c8e <HAL_ADC_Init+0x20a>
 8001b5c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001b60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001b62:	4303      	orrs	r3, r0
 8001b64:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b66:	6891      	ldr	r1, [r2, #8]
 8001b68:	f011 0f0c 	tst.w	r1, #12
 8001b6c:	d10c      	bne.n	8001b88 <HAL_ADC_Init+0x104>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b6e:	68d1      	ldr	r1, [r2, #12]
 8001b70:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001b74:	f021 0102 	bic.w	r1, r1, #2
 8001b78:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b7a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001b7e:	7e20      	ldrb	r0, [r4, #24]
 8001b80:	0049      	lsls	r1, r1, #1
 8001b82:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8001b86:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001b88:	68d5      	ldr	r5, [r2, #12]
 8001b8a:	4965      	ldr	r1, [pc, #404]	; (8001d20 <HAL_ADC_Init+0x29c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b8c:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001b8e:	4029      	ands	r1, r5
 8001b90:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b92:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8001b94:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b96:	d072      	beq.n	8001c7e <HAL_ADC_Init+0x1fa>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b9a:	f023 030f 	bic.w	r3, r3, #15
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bb6:	f023 0312 	bic.w	r3, r3, #18
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bca:	e777      	b.n	8001abc <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8001bcc:	2001      	movs	r0, #1
}
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bd2:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd6:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8001bd8:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001bdc:	f7ff fc26 	bl	800142c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	6893      	ldr	r3, [r2, #8]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	d511      	bpl.n	8001c0c <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be8:	462b      	mov	r3, r5
 8001bea:	e75c      	b.n	8001aa6 <HAL_ADC_Init+0x22>
 8001bec:	494a      	ldr	r1, [pc, #296]	; (8001d18 <HAL_ADC_Init+0x294>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bee:	4d4b      	ldr	r5, [pc, #300]	; (8001d1c <HAL_ADC_Init+0x298>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bf0:	6893      	ldr	r3, [r2, #8]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d061      	beq.n	8001cbe <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bfa:	688b      	ldr	r3, [r1, #8]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d187      	bne.n	8001b14 <HAL_ADC_Init+0x90>
 8001c04:	680b      	ldr	r3, [r1, #0]
 8001c06:	07db      	lsls	r3, r3, #31
 8001c08:	d48a      	bmi.n	8001b20 <HAL_ADC_Init+0x9c>
 8001c0a:	e783      	b.n	8001b14 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff fed1 	bl	80019b4 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c14:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8001c16:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c18:	f53f af44 	bmi.w	8001aa4 <HAL_ADC_Init+0x20>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	f47f af41 	bne.w	8001aa4 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8001c22:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c24:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c26:	493f      	ldr	r1, [pc, #252]	; (8001d24 <HAL_ADC_Init+0x2a0>)
 8001c28:	4d3f      	ldr	r5, [pc, #252]	; (8001d28 <HAL_ADC_Init+0x2a4>)
 8001c2a:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8001c30:	f020 0002 	bic.w	r0, r0, #2
 8001c34:	f040 0002 	orr.w	r0, r0, #2
 8001c38:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c3a:	6890      	ldr	r0, [r2, #8]
 8001c3c:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8001c40:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c42:	fba5 0101 	umull	r0, r1, r5, r1
 8001c46:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c48:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001c4e:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c50:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001c54:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c56:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001c58:	9901      	ldr	r1, [sp, #4]
 8001c5a:	2900      	cmp	r1, #0
 8001c5c:	f43f af23 	beq.w	8001aa6 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8001c60:	9901      	ldr	r1, [sp, #4]
 8001c62:	3901      	subs	r1, #1
 8001c64:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001c66:	9901      	ldr	r1, [sp, #4]
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	d1f9      	bne.n	8001c60 <HAL_ADC_Init+0x1dc>
 8001c6c:	e71b      	b.n	8001aa6 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c6e:	bb7d      	cbnz	r5, 8001cd0 <HAL_ADC_Init+0x24c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c72:	3901      	subs	r1, #1
 8001c74:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	e762      	b.n	8001b44 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c80:	69e3      	ldr	r3, [r4, #28]
 8001c82:	f021 010f 	bic.w	r1, r1, #15
 8001c86:	3b01      	subs	r3, #1
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8c:	e788      	b.n	8001ba0 <HAL_ADC_Init+0x11c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c8e:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8001c92:	d028      	beq.n	8001ce6 <HAL_ADC_Init+0x262>
 8001c94:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001c98:	d02d      	beq.n	8001cf6 <HAL_ADC_Init+0x272>
 8001c9a:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8001c9e:	d02d      	beq.n	8001cfc <HAL_ADC_Init+0x278>
 8001ca0:	f5b1 5f8a 	cmp.w	r1, #4416	; 0x1140
 8001ca4:	d02d      	beq.n	8001d02 <HAL_ADC_Init+0x27e>
 8001ca6:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 8001caa:	d02d      	beq.n	8001d08 <HAL_ADC_Init+0x284>
 8001cac:	f5b1 5f86 	cmp.w	r1, #4288	; 0x10c0
 8001cb0:	bf08      	it	eq
 8001cb2:	f44f 71c0 	moveq.w	r1, #384	; 0x180
 8001cb6:	e753      	b.n	8001b60 <HAL_ADC_Init+0xdc>
 8001cb8:	4915      	ldr	r1, [pc, #84]	; (8001d10 <HAL_ADC_Init+0x28c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cba:	4d1c      	ldr	r5, [pc, #112]	; (8001d2c <HAL_ADC_Init+0x2a8>)
 8001cbc:	e798      	b.n	8001bf0 <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	07de      	lsls	r6, r3, #31
 8001cc2:	f53f af2d 	bmi.w	8001b20 <HAL_ADC_Init+0x9c>
 8001cc6:	e798      	b.n	8001bfa <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc8:	4d18      	ldr	r5, [pc, #96]	; (8001d2c <HAL_ADC_Init+0x2a8>)
 8001cca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001cce:	e78f      	b.n	8001bf0 <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001cd2:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8001cd6:	f041 0120 	orr.w	r1, r1, #32
 8001cda:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001cde:	f041 0101 	orr.w	r1, r1, #1
 8001ce2:	6461      	str	r1, [r4, #68]	; 0x44
 8001ce4:	e72e      	b.n	8001b44 <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ce6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001cea:	e739      	b.n	8001b60 <HAL_ADC_Init+0xdc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	07db      	lsls	r3, r3, #31
 8001cf0:	f53f af16 	bmi.w	8001b20 <HAL_ADC_Init+0x9c>
 8001cf4:	e70d      	b.n	8001b12 <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cf6:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001cfa:	e731      	b.n	8001b60 <HAL_ADC_Init+0xdc>
 8001cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d00:	e72e      	b.n	8001b60 <HAL_ADC_Init+0xdc>
 8001d02:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001d06:	e72b      	b.n	8001b60 <HAL_ADC_Init+0xdc>
 8001d08:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001d0c:	e728      	b.n	8001b60 <HAL_ADC_Init+0xdc>
 8001d0e:	bf00      	nop
 8001d10:	50000100 	.word	0x50000100
 8001d14:	50000400 	.word	0x50000400
 8001d18:	50000500 	.word	0x50000500
 8001d1c:	50000700 	.word	0x50000700
 8001d20:	fff0c007 	.word	0xfff0c007
 8001d24:	2000002c 	.word	0x2000002c
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	50000300 	.word	0x50000300

08001d30 <HAL_ADC_Start_DMA>:
{
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d34:	6800      	ldr	r0, [r0, #0]
 8001d36:	6885      	ldr	r5, [r0, #8]
 8001d38:	076d      	lsls	r5, r5, #29
 8001d3a:	d478      	bmi.n	8001e2e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001d3c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d074      	beq.n	8001e2e <HAL_ADC_Start_DMA+0xfe>
 8001d44:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d46:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001d4a:	460f      	mov	r7, r1
 8001d4c:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 8001d4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d52:	d00f      	beq.n	8001d74 <HAL_ADC_Start_DMA+0x44>
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <HAL_ADC_Start_DMA+0x13c>)
 8001d56:	4298      	cmp	r0, r3
 8001d58:	d00c      	beq.n	8001d74 <HAL_ADC_Start_DMA+0x44>
 8001d5a:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <HAL_ADC_Start_DMA+0x140>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f013 0f1f 	tst.w	r3, #31
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b96b      	cbnz	r3, 8001d86 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8001d6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001d6e:	2501      	movs	r5, #1
}
 8001d70:	4628      	mov	r0, r5
 8001d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d74:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_ADC_Start_DMA+0x144>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f013 0f1f 	tst.w	r3, #31
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f1      	beq.n	8001d6a <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff fe4c 	bl	8001a24 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d150      	bne.n	8001e34 <HAL_ADC_Start_DMA+0x104>
        ADC_STATE_CLR_SET(hadc->State,
 8001d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d94:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001d96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001da2:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8001da6:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001da8:	d056      	beq.n	8001e58 <HAL_ADC_Start_DMA+0x128>
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_ADC_Start_DMA+0x13c>)
 8001dac:	4299      	cmp	r1, r3
 8001dae:	d045      	beq.n	8001e3c <HAL_ADC_Start_DMA+0x10c>
 8001db0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	06d8      	lsls	r0, r3, #27
 8001db8:	d050      	beq.n	8001e5c <HAL_ADC_Start_DMA+0x12c>
 8001dba:	4a2f      	ldr	r2, [pc, #188]	; (8001e78 <HAL_ADC_Start_DMA+0x148>)
 8001dbc:	4291      	cmp	r1, r2
 8001dbe:	d04d      	beq.n	8001e5c <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc6:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dc8:	68d3      	ldr	r3, [r2, #12]
 8001dca:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001dce:	b12b      	cbz	r3, 8001ddc <HAL_ADC_Start_DMA+0xac>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dda:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001de0:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <HAL_ADC_Start_DMA+0x14c>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001de6:	bf1c      	itt	ne
 8001de8:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001dea:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001dee:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001df0:	f04f 0c00 	mov.w	ip, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 8001df6:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dfa:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dfc:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dfe:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_ADC_Start_DMA+0x154>)
 8001e00:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e02:	231c      	movs	r3, #28
 8001e04:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e06:	684b      	ldr	r3, [r1, #4]
 8001e08:	f043 0310 	orr.w	r3, r3, #16
 8001e0c:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e0e:	68cb      	ldr	r3, [r1, #12]
 8001e10:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e14:	463a      	mov	r2, r7
 8001e16:	4633      	mov	r3, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e18:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e1c:	3140      	adds	r1, #64	; 0x40
 8001e1e:	f000 fb93 	bl	8002548 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	6893      	ldr	r3, [r2, #8]
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6093      	str	r3, [r2, #8]
 8001e2c:	e7a0      	b.n	8001d70 <HAL_ADC_Start_DMA+0x40>
    tmp_hal_status = HAL_BUSY;
 8001e2e:	2502      	movs	r5, #2
}
 8001e30:	4628      	mov	r0, r5
 8001e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8001e34:	2300      	movs	r3, #0
 8001e36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001e3a:	e799      	b.n	8001d70 <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_ADC_Start_DMA+0x144>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	06db      	lsls	r3, r3, #27
 8001e42:	d00b      	beq.n	8001e5c <HAL_ADC_Start_DMA+0x12c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e4e:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e50:	68d3      	ldr	r3, [r2, #12]
 8001e52:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8001e56:	e7ba      	b.n	8001dce <HAL_ADC_Start_DMA+0x9e>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_ADC_Start_DMA+0x144>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e62:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e64:	68cb      	ldr	r3, [r1, #12]
 8001e66:	019a      	lsls	r2, r3, #6
 8001e68:	d5b8      	bpl.n	8001ddc <HAL_ADC_Start_DMA+0xac>
 8001e6a:	e7b1      	b.n	8001dd0 <HAL_ADC_Start_DMA+0xa0>
 8001e6c:	50000100 	.word	0x50000100
 8001e70:	50000700 	.word	0x50000700
 8001e74:	50000300 	.word	0x50000300
 8001e78:	50000400 	.word	0x50000400
 8001e7c:	08001971 	.word	0x08001971
 8001e80:	08001969 	.word	0x08001969
 8001e84:	08001951 	.word	0x08001951

08001e88 <HAL_ADCEx_Calibration_Start>:
{
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001e8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d030      	beq.n	8001ef4 <HAL_ADCEx_Calibration_Start+0x6c>
 8001e92:	2701      	movs	r7, #1
 8001e94:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8001e98:	4604      	mov	r4, r0
 8001e9a:	460d      	mov	r5, r1
 8001e9c:	f7ff fd8a 	bl	80019b4 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	bb10      	cbnz	r0, 8001eea <HAL_ADCEx_Calibration_Start+0x62>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001ea4:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8001ea6:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001ea8:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eaa:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001eac:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001eb0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eb2:	d103      	bne.n	8001ebc <HAL_ADCEx_Calibration_Start+0x34>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ec2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001ec4:	f7ff fd38 	bl	8001938 <HAL_GetTick>
 8001ec8:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001eca:	e004      	b.n	8001ed6 <HAL_ADCEx_Calibration_Start+0x4e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ecc:	f7ff fd34 	bl	8001938 <HAL_GetTick>
 8001ed0:	1b43      	subs	r3, r0, r5
 8001ed2:	2b0a      	cmp	r3, #10
 8001ed4:	d811      	bhi.n	8001efa <HAL_ADCEx_Calibration_Start+0x72>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dbf6      	blt.n	8001ecc <HAL_ADCEx_Calibration_Start+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee0:	f023 0303 	bic.w	r3, r3, #3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001eea:	2300      	movs	r3, #0
 8001eec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8001ef4:	2602      	movs	r6, #2
}
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8001efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001efc:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8001efe:	f023 0312 	bic.w	r3, r3, #18
 8001f02:	f043 0310 	orr.w	r3, r3, #16
        return HAL_ERROR;
 8001f06:	2601      	movs	r6, #1
        __HAL_UNLOCK(hadc);
 8001f08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        ADC_STATE_CLR_SET(hadc->State,
 8001f0c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001f0e:	4630      	mov	r0, r6
 8001f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f12:	bf00      	nop

08001f14 <HAL_ADC_ConfigChannel>:
{
 8001f14:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8001f16:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f1a:	68cc      	ldr	r4, [r1, #12]
{
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001f20:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001f28:	f000 80fe 	beq.w	8002128 <HAL_ADC_ConfigChannel+0x214>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f2c:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f34:	6895      	ldr	r5, [r2, #8]
 8001f36:	076d      	lsls	r5, r5, #29
 8001f38:	d436      	bmi.n	8001fa8 <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 8001f3a:	6848      	ldr	r0, [r1, #4]
 8001f3c:	2804      	cmp	r0, #4
 8001f3e:	f200 8088 	bhi.w	8002052 <HAL_ADC_ConfigChannel+0x13e>
      MODIFY_REG(hadc->Instance->SQR1,
 8001f42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001f46:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001f48:	680d      	ldr	r5, [r1, #0]
 8001f4a:	0040      	lsls	r0, r0, #1
 8001f4c:	271f      	movs	r7, #31
 8001f4e:	4087      	lsls	r7, r0
 8001f50:	ea26 0607 	bic.w	r6, r6, r7
 8001f54:	fa05 f000 	lsl.w	r0, r5, r0
 8001f58:	4330      	orrs	r0, r6
 8001f5a:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f5c:	6890      	ldr	r0, [r2, #8]
 8001f5e:	f010 0f0c 	tst.w	r0, #12
 8001f62:	d134      	bne.n	8001fce <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f64:	2d09      	cmp	r5, #9
 8001f66:	f200 8089 	bhi.w	800207c <HAL_ADC_ConfigChannel+0x168>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f6a:	6950      	ldr	r0, [r2, #20]
 8001f6c:	688e      	ldr	r6, [r1, #8]
 8001f6e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001f72:	2707      	movs	r7, #7
 8001f74:	fa07 f70c 	lsl.w	r7, r7, ip
 8001f78:	ea20 0007 	bic.w	r0, r0, r7
 8001f7c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001f80:	4330      	orrs	r0, r6
 8001f82:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f84:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8001f88:	68d0      	ldr	r0, [r2, #12]
 8001f8a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001f8e:	0040      	lsls	r0, r0, #1
 8001f90:	3e01      	subs	r6, #1
 8001f92:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8001f96:	2e03      	cmp	r6, #3
 8001f98:	f200 8142 	bhi.w	8002220 <HAL_ADC_ConfigChannel+0x30c>
 8001f9c:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001fa0:	0105000e 	.word	0x0105000e
 8001fa4:	00f100fb 	.word	0x00f100fb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001fb6:	b002      	add	sp, #8
 8001fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8001fba:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fbc:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8001fbe:	4eae      	ldr	r6, [pc, #696]	; (8002278 <HAL_ADC_ConfigChannel+0x364>)
 8001fc0:	403e      	ands	r6, r7
 8001fc2:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001fc6:	4330      	orrs	r0, r6
 8001fc8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001fcc:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fce:	6890      	ldr	r0, [r2, #8]
 8001fd0:	f000 0003 	and.w	r0, r0, #3
 8001fd4:	2801      	cmp	r0, #1
 8001fd6:	f000 80a2 	beq.w	800211e <HAL_ADC_ConfigChannel+0x20a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fda:	2c01      	cmp	r4, #1
 8001fdc:	f000 80a8 	beq.w	8002130 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fe0:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	40a8      	lsls	r0, r5
 8001fe8:	ea21 0100 	bic.w	r1, r1, r0
 8001fec:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001ff4:	d073      	beq.n	80020de <HAL_ADC_ConfigChannel+0x1ca>
 8001ff6:	49a1      	ldr	r1, [pc, #644]	; (800227c <HAL_ADC_ConfigChannel+0x368>)
 8001ff8:	428a      	cmp	r2, r1
 8001ffa:	d070      	beq.n	80020de <HAL_ADC_ConfigChannel+0x1ca>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ffc:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffe:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002002:	d06f      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x1d0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002004:	2d11      	cmp	r5, #17
 8002006:	f040 80aa 	bne.w	800215e <HAL_ADC_ConfigChannel+0x24a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800200a:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800200c:	01c4      	lsls	r4, r0, #7
 800200e:	d46c      	bmi.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002010:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002014:	f000 80d3 	beq.w	80021be <HAL_ADC_ConfigChannel+0x2aa>
 8002018:	4898      	ldr	r0, [pc, #608]	; (800227c <HAL_ADC_ConfigChannel+0x368>)
 800201a:	4282      	cmp	r2, r0
 800201c:	d067      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x1da>
 800201e:	4c98      	ldr	r4, [pc, #608]	; (8002280 <HAL_ADC_ConfigChannel+0x36c>)
 8002020:	42a2      	cmp	r2, r4
 8002022:	f000 80f7 	beq.w	8002214 <HAL_ADC_ConfigChannel+0x300>
 8002026:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800202a:	4282      	cmp	r2, r0
 800202c:	d061      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800202e:	6890      	ldr	r0, [r2, #8]
 8002030:	f000 0003 	and.w	r0, r0, #3
 8002034:	2801      	cmp	r0, #1
 8002036:	f000 80ef 	beq.w	8002218 <HAL_ADC_ConfigChannel+0x304>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800203a:	2d10      	cmp	r5, #16
 800203c:	d055      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800203e:	2d11      	cmp	r5, #17
 8002040:	d053      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002042:	2d12      	cmp	r5, #18
 8002044:	d151      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002046:	688a      	ldr	r2, [r1, #8]
 8002048:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800204c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204e:	2000      	movs	r0, #0
 8002050:	e7ae      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 8002052:	2809      	cmp	r0, #9
 8002054:	d921      	bls.n	800209a <HAL_ADC_ConfigChannel+0x186>
    else if (sConfig->Rank < 15U)
 8002056:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002058:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800205c:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8002060:	f200 8083 	bhi.w	800216a <HAL_ADC_ConfigChannel+0x256>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002064:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8002066:	680d      	ldr	r5, [r1, #0]
 8002068:	383c      	subs	r0, #60	; 0x3c
 800206a:	271f      	movs	r7, #31
 800206c:	4087      	lsls	r7, r0
 800206e:	ea26 0607 	bic.w	r6, r6, r7
 8002072:	fa05 f000 	lsl.w	r0, r5, r0
 8002076:	4330      	orrs	r0, r6
 8002078:	6390      	str	r0, [r2, #56]	; 0x38
 800207a:	e76f      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800207c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002080:	6990      	ldr	r0, [r2, #24]
 8002082:	688e      	ldr	r6, [r1, #8]
 8002084:	3f1e      	subs	r7, #30
 8002086:	f04f 0c07 	mov.w	ip, #7
 800208a:	fa0c fc07 	lsl.w	ip, ip, r7
 800208e:	ea20 000c 	bic.w	r0, r0, ip
 8002092:	40be      	lsls	r6, r7
 8002094:	4330      	orrs	r0, r6
 8002096:	6190      	str	r0, [r2, #24]
 8002098:	e774      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 800209a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800209e:	0040      	lsls	r0, r0, #1
 80020a0:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80020a2:	680d      	ldr	r5, [r1, #0]
 80020a4:	381e      	subs	r0, #30
 80020a6:	271f      	movs	r7, #31
 80020a8:	4087      	lsls	r7, r0
 80020aa:	ea26 0607 	bic.w	r6, r6, r7
 80020ae:	fa05 f000 	lsl.w	r0, r5, r0
 80020b2:	4330      	orrs	r0, r6
 80020b4:	6350      	str	r0, [r2, #52]	; 0x34
 80020b6:	e751      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x48>
        MODIFY_REG(hadc->Instance->SMPR1,
 80020b8:	1c68      	adds	r0, r5, #1
 80020ba:	688e      	ldr	r6, [r1, #8]
 80020bc:	6954      	ldr	r4, [r2, #20]
 80020be:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80020c2:	2707      	movs	r7, #7
 80020c4:	408f      	lsls	r7, r1
 80020c6:	fa06 f001 	lsl.w	r0, r6, r1
 80020ca:	ea24 0107 	bic.w	r1, r4, r7
 80020ce:	4301      	orrs	r1, r0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80020d4:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d6:	d008      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
 80020d8:	4968      	ldr	r1, [pc, #416]	; (800227c <HAL_ADC_ConfigChannel+0x368>)
 80020da:	428a      	cmp	r2, r1
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020de:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e0:	4968      	ldr	r1, [pc, #416]	; (8002284 <HAL_ADC_ConfigChannel+0x370>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020e2:	d18f      	bne.n	8002004 <HAL_ADC_ConfigChannel+0xf0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020e4:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020e6:	0206      	lsls	r6, r0, #8
 80020e8:	d592      	bpl.n	8002010 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ea:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020ec:	e760      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x9c>
 80020ee:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020f2:	6890      	ldr	r0, [r2, #8]
 80020f4:	f000 0003 	and.w	r0, r0, #3
 80020f8:	2801      	cmp	r0, #1
 80020fa:	d062      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x2ae>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020fc:	68a0      	ldr	r0, [r4, #8]
 80020fe:	f000 0003 	and.w	r0, r0, #3
 8002102:	2801      	cmp	r0, #1
 8002104:	d066      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x2c0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002106:	2d10      	cmp	r5, #16
 8002108:	d068      	beq.n	80021dc <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800210a:	2d11      	cmp	r5, #17
 800210c:	d199      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x12e>
 800210e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002112:	d1ea      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002114:	688a      	ldr	r2, [r1, #8]
 8002116:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800211a:	608a      	str	r2, [r1, #8]
 800211c:	e7e5      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800211e:	6810      	ldr	r0, [r2, #0]
 8002120:	07c7      	lsls	r7, r0, #31
 8002122:	f57f af5a 	bpl.w	8001fda <HAL_ADC_ConfigChannel+0xc6>
 8002126:	e7e0      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
  __HAL_LOCK(hadc);
 8002128:	2002      	movs	r0, #2
}
 800212a:	b002      	add	sp, #8
 800212c:	bcf0      	pop	{r4, r5, r6, r7}
 800212e:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002130:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8002134:	40ac      	lsls	r4, r5
 8002136:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002138:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800213a:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800213e:	d9bb      	bls.n	80020b8 <HAL_ADC_ConfigChannel+0x1a4>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002140:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8002144:	688e      	ldr	r6, [r1, #8]
 8002146:	6994      	ldr	r4, [r2, #24]
 8002148:	f1a0 011b 	sub.w	r1, r0, #27
 800214c:	2707      	movs	r7, #7
 800214e:	408f      	lsls	r7, r1
 8002150:	fa06 f001 	lsl.w	r0, r6, r1
 8002154:	ea24 0107 	bic.w	r1, r4, r7
 8002158:	4301      	orrs	r1, r0
 800215a:	6191      	str	r1, [r2, #24]
 800215c:	e748      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0xdc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800215e:	2d12      	cmp	r5, #18
 8002160:	d1c3      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002162:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002164:	0240      	lsls	r0, r0, #9
 8002166:	d4c0      	bmi.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
 8002168:	e752      	b.n	8002010 <HAL_ADC_ConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800216a:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800216c:	680d      	ldr	r5, [r1, #0]
 800216e:	385a      	subs	r0, #90	; 0x5a
 8002170:	271f      	movs	r7, #31
 8002172:	4087      	lsls	r7, r0
 8002174:	ea26 0607 	bic.w	r6, r6, r7
 8002178:	fa05 f000 	lsl.w	r0, r5, r0
 800217c:	4330      	orrs	r0, r6
 800217e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002180:	e6ec      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002182:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8002184:	4e3c      	ldr	r6, [pc, #240]	; (8002278 <HAL_ADC_ConfigChannel+0x364>)
 8002186:	403e      	ands	r6, r7
 8002188:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800218c:	4330      	orrs	r0, r6
 800218e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002192:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8002194:	e71b      	b.n	8001fce <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002196:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8002198:	4e37      	ldr	r6, [pc, #220]	; (8002278 <HAL_ADC_ConfigChannel+0x364>)
 800219a:	403e      	ands	r6, r7
 800219c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80021a0:	4330      	orrs	r0, r6
 80021a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80021a6:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80021a8:	e711      	b.n	8001fce <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80021aa:	6e57      	ldr	r7, [r2, #100]	; 0x64
 80021ac:	4e32      	ldr	r6, [pc, #200]	; (8002278 <HAL_ADC_ConfigChannel+0x364>)
 80021ae:	403e      	ands	r6, r7
 80021b0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80021b4:	4330      	orrs	r0, r6
 80021b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80021ba:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80021bc:	e707      	b.n	8001fce <HAL_ADC_ConfigChannel+0xba>
 80021be:	4c2f      	ldr	r4, [pc, #188]	; (800227c <HAL_ADC_ConfigChannel+0x368>)
 80021c0:	e797      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021c2:	6810      	ldr	r0, [r2, #0]
 80021c4:	07c6      	lsls	r6, r0, #31
 80021c6:	d599      	bpl.n	80020fc <HAL_ADC_ConfigChannel+0x1e8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ca:	f042 0220 	orr.w	r2, r2, #32
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
 80021d2:	e6ed      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x9c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	07c0      	lsls	r0, r0, #31
 80021d8:	d4f6      	bmi.n	80021c8 <HAL_ADC_ConfigChannel+0x2b4>
 80021da:	e794      	b.n	8002106 <HAL_ADC_ConfigChannel+0x1f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021dc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80021e0:	d183      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e2:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_ADC_ConfigChannel+0x374>)
 80021e4:	4c29      	ldr	r4, [pc, #164]	; (800228c <HAL_ADC_ConfigChannel+0x378>)
 80021e6:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021e8:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	fba4 4202 	umull	r4, r2, r4, r2
 80021ee:	0c92      	lsrs	r2, r2, #18
 80021f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80021f4:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80021fa:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021fc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80021fe:	9a01      	ldr	r2, [sp, #4]
 8002200:	2a00      	cmp	r2, #0
 8002202:	f43f af72 	beq.w	80020ea <HAL_ADC_ConfigChannel+0x1d6>
            wait_loop_index--;
 8002206:	9a01      	ldr	r2, [sp, #4]
 8002208:	3a01      	subs	r2, #1
 800220a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800220c:	9a01      	ldr	r2, [sp, #4]
 800220e:	2a00      	cmp	r2, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x2f2>
 8002212:	e76a      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1d6>
 8002214:	4c1e      	ldr	r4, [pc, #120]	; (8002290 <HAL_ADC_ConfigChannel+0x37c>)
 8002216:	e76c      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x1de>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	07d7      	lsls	r7, r2, #31
 800221c:	d4d4      	bmi.n	80021c8 <HAL_ADC_ConfigChannel+0x2b4>
 800221e:	e70c      	b.n	800203a <HAL_ADC_ConfigChannel+0x126>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002220:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002222:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002226:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 800222a:	ea4f 6685 	mov.w	r6, r5, lsl #26
 800222e:	d014      	beq.n	800225a <HAL_ADC_ConfigChannel+0x346>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002230:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002232:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002236:	4286      	cmp	r6, r0
 8002238:	d014      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x350>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800223a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800223c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002240:	4286      	cmp	r6, r0
 8002242:	d014      	beq.n	800226e <HAL_ADC_ConfigChannel+0x35a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002244:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002246:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800224a:	4286      	cmp	r6, r0
 800224c:	f47f aebf 	bne.w	8001fce <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002250:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002252:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002256:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002258:	e6b9      	b.n	8001fce <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800225a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800225c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002260:	6610      	str	r0, [r2, #96]	; 0x60
 8002262:	e7e5      	b.n	8002230 <HAL_ADC_ConfigChannel+0x31c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002264:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002266:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800226a:	6650      	str	r0, [r2, #100]	; 0x64
 800226c:	e7e5      	b.n	800223a <HAL_ADC_ConfigChannel+0x326>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800226e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002270:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002274:	6690      	str	r0, [r2, #104]	; 0x68
 8002276:	e7e5      	b.n	8002244 <HAL_ADC_ConfigChannel+0x330>
 8002278:	83fff000 	.word	0x83fff000
 800227c:	50000100 	.word	0x50000100
 8002280:	50000400 	.word	0x50000400
 8002284:	50000300 	.word	0x50000300
 8002288:	2000002c 	.word	0x2000002c
 800228c:	431bde83 	.word	0x431bde83
 8002290:	50000500 	.word	0x50000500

08002294 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002294:	6803      	ldr	r3, [r0, #0]
 8002296:	4a43      	ldr	r2, [pc, #268]	; (80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800229c:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800229e:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022a0:	d00e      	beq.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00a      	beq.n	80022bc <HAL_ADCEx_MultiModeConfigChannel+0x28>
 80022a6:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d049      	beq.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022ae:	4c3e      	ldr	r4, [pc, #248]	; (80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80022b0:	42a3      	cmp	r3, r4
 80022b2:	d005      	beq.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
} 
 80022b6:	4618      	mov	r0, r3
 80022b8:	bcf0      	pop	{r4, r5, r6, r7}
 80022ba:	4770      	bx	lr
 80022bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 80022c0:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80022c4:	2c01      	cmp	r4, #1
 80022c6:	d041      	beq.n	800234c <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 80022c8:	2401      	movs	r4, #1
 80022ca:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80022ce:	689c      	ldr	r4, [r3, #8]
 80022d0:	0766      	lsls	r6, r4, #29
 80022d2:	d50a      	bpl.n	80022ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022d6:	f043 0320 	orr.w	r3, r3, #32
 80022da:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 80022de:	2200      	movs	r2, #0
 80022e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 80022e4:	bcf0      	pop	{r4, r5, r6, r7}
 80022e6:	4618      	mov	r0, r3
 80022e8:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80022ea:	6894      	ldr	r4, [r2, #8]
 80022ec:	0764      	lsls	r4, r4, #29
 80022ee:	d4f1      	bmi.n	80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f4:	d044      	beq.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80022f6:	4f2b      	ldr	r7, [pc, #172]	; (80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80022f8:	4c2c      	ldr	r4, [pc, #176]	; (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80022fa:	4e2d      	ldr	r6, [pc, #180]	; (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80022fc:	42bb      	cmp	r3, r7
 80022fe:	bf18      	it	ne
 8002300:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002302:	b33d      	cbz	r5, 8002354 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002304:	68a7      	ldr	r7, [r4, #8]
 8002306:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 800230a:	684e      	ldr	r6, [r1, #4]
 800230c:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 8002310:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8002314:	433e      	orrs	r6, r7
 8002316:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002318:	689e      	ldr	r6, [r3, #8]
 800231a:	f006 0603 	and.w	r6, r6, #3
 800231e:	2e01      	cmp	r6, #1
 8002320:	d03c      	beq.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002322:	6893      	ldr	r3, [r2, #8]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d02f      	beq.n	800238c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800232c:	68a2      	ldr	r2, [r4, #8]
 800232e:	688b      	ldr	r3, [r1, #8]
 8002330:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002334:	431d      	orrs	r5, r3
 8002336:	f022 020f 	bic.w	r2, r2, #15
 800233a:	4315      	orrs	r5, r2
 800233c:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e7cd      	b.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8002342:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002348:	2c01      	cmp	r4, #1
 800234a:	d1bd      	bne.n	80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 800234c:	2302      	movs	r3, #2
} 
 800234e:	4618      	mov	r0, r3
 8002350:	bcf0      	pop	{r4, r5, r6, r7}
 8002352:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002354:	68a1      	ldr	r1, [r4, #8]
 8002356:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800235a:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	f001 0103 	and.w	r1, r1, #3
 8002362:	2901      	cmp	r1, #1
 8002364:	d016      	beq.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002366:	6893      	ldr	r3, [r2, #8]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d009      	beq.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002370:	68a3      	ldr	r3, [r4, #8]
 8002372:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002376:	f023 030f 	bic.w	r3, r3, #15
 800237a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	e7ae      	b.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002380:	4c0a      	ldr	r4, [pc, #40]	; (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002382:	e7be      	b.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	07db      	lsls	r3, r3, #31
 8002388:	d4d9      	bmi.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800238a:	e7f1      	b.n	8002370 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	07de      	lsls	r6, r3, #31
 8002390:	d4d5      	bmi.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002392:	e7cb      	b.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	07d9      	lsls	r1, r3, #31
 8002398:	d4d1      	bmi.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800239a:	e7e4      	b.n	8002366 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	07df      	lsls	r7, r3, #31
 80023a0:	d5bf      	bpl.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80023a2:	e7cc      	b.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80023a4:	50000100 	.word	0x50000100
 80023a8:	50000500 	.word	0x50000500
 80023ac:	50000300 	.word	0x50000300
 80023b0:	50000700 	.word	0x50000700

080023b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4908      	ldr	r1, [pc, #32]	; (80023d8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80023b6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ba:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023bc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80023c0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80023d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80023d4:	60cb      	str	r3, [r1, #12]
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_NVIC_SetPriority+0x68>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e6:	f1c3 0507 	rsb	r5, r3, #7
 80023ea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ec:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	bf28      	it	cs
 80023f2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f4:	2c06      	cmp	r4, #6
 80023f6:	d919      	bls.n	800242c <HAL_NVIC_SetPriority+0x50>
 80023f8:	3b03      	subs	r3, #3
 80023fa:	f04f 34ff 	mov.w	r4, #4294967295
 80023fe:	409c      	lsls	r4, r3
 8002400:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 34ff 	mov.w	r4, #4294967295
 8002408:	40ac      	lsls	r4, r5
 800240a:	ea21 0104 	bic.w	r1, r1, r4
 800240e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002410:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002412:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002416:	db0c      	blt.n	8002432 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800241c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002420:	0109      	lsls	r1, r1, #4
 8002422:	b2c9      	uxtb	r1, r1
 8002424:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002428:	bc30      	pop	{r4, r5}
 800242a:	4770      	bx	lr
 800242c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	4613      	mov	r3, r2
 8002430:	e7e8      	b.n	8002404 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_NVIC_SetPriority+0x6c>)
 8002434:	f000 000f 	and.w	r0, r0, #15
 8002438:	0109      	lsls	r1, r1, #4
 800243a:	4403      	add	r3, r0
 800243c:	b2c9      	uxtb	r1, r1
 800243e:	7619      	strb	r1, [r3, #24]
 8002440:	bc30      	pop	{r4, r5}
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	e000ecfc 	.word	0xe000ecfc

0800244c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800244c:	2800      	cmp	r0, #0
 800244e:	db07      	blt.n	8002460 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002450:	f000 011f 	and.w	r1, r0, #31
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_NVIC_EnableIRQ+0x18>)
 8002456:	0940      	lsrs	r0, r0, #5
 8002458:	2301      	movs	r3, #1
 800245a:	408b      	lsls	r3, r1
 800245c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002468:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800246c:	4905      	ldr	r1, [pc, #20]	; (8002484 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002470:	68ca      	ldr	r2, [r1, #12]
 8002472:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002476:	4313      	orrs	r3, r2
 8002478:	60cb      	str	r3, [r1, #12]
 800247a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800247e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002480:	e7fd      	b.n	800247e <HAL_NVIC_SystemReset+0x16>
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	05fa0004 	.word	0x05fa0004

0800248c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	3801      	subs	r0, #1
 800248e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002492:	d20e      	bcs.n	80024b2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	4c08      	ldr	r4, [pc, #32]	; (80024bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	20f0      	movs	r0, #240	; 0xf0
 800249e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80024aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	6019      	str	r1, [r3, #0]
 80024b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2001      	movs	r0, #1
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d034      	beq.n	800252e <HAL_DMA_Init+0x6e>
{ 
 80024c4:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024c6:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 80024ce:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 80024d0:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
  tmp = hdma->Instance->CCR;
 80024d8:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024da:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024dc:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 80024de:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e0:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e4:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024e6:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ea:	4c12      	ldr	r4, [pc, #72]	; (8002534 <HAL_DMA_Init+0x74>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024ec:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80024f0:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024f2:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 80024f4:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024f6:	d910      	bls.n	800251a <HAL_DMA_Init+0x5a>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_DMA_Init+0x78>)
 80024fa:	4910      	ldr	r1, [pc, #64]	; (800253c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 80024fc:	4c10      	ldr	r4, [pc, #64]	; (8002540 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024fe:	4402      	add	r2, r0
 8002500:	fba1 1202 	umull	r1, r2, r1, r2
 8002504:	0912      	lsrs	r2, r2, #4
 8002506:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 8002508:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800250e:	8419      	strh	r1, [r3, #32]
 8002510:	e9c3 420f 	strd	r4, r2, [r3, #60]	; 0x3c
}  
 8002514:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002516:	6398      	str	r0, [r3, #56]	; 0x38
}  
 8002518:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_DMA_Init+0x84>)
 800251c:	4907      	ldr	r1, [pc, #28]	; (800253c <HAL_DMA_Init+0x7c>)
 800251e:	4402      	add	r2, r0
 8002520:	fba1 1202 	umull	r1, r2, r1, r2
 8002524:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8002526:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800252a:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800252c:	e7ec      	b.n	8002508 <HAL_DMA_Init+0x48>
    return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
}  
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40020407 	.word	0x40020407
 8002538:	bffdfbf8 	.word	0xbffdfbf8
 800253c:	cccccccd 	.word	0xcccccccd
 8002540:	40020400 	.word	0x40020400
 8002544:	bffdfff8 	.word	0xbffdfff8

08002548 <HAL_DMA_Start_IT>:
{
 8002548:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800254a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800254e:	2c01      	cmp	r4, #1
 8002550:	d039      	beq.n	80025c6 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002552:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002556:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002558:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800255a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800255e:	d005      	beq.n	800256c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8002560:	2300      	movs	r3, #0
 8002562:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8002566:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8002568:	2002      	movs	r0, #2
} 
 800256a:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800256c:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 800256e:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002572:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002576:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002578:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800257a:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800257c:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002580:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002582:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002586:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002588:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800258a:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 800258c:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 800258e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002590:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 8002592:	bf0b      	itete	eq
 8002594:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002596:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002598:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800259a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800259c:	b153      	cbz	r3, 80025b4 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	f043 030e 	orr.w	r3, r3, #14
 80025a4:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2000      	movs	r0, #0
} 
 80025b0:	bcf0      	pop	{r4, r5, r6, r7}
 80025b2:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f043 030a 	orr.w	r3, r3, #10
 80025ba:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	6023      	str	r3, [r4, #0]
 80025c4:	e7ef      	b.n	80025a6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80025c6:	2002      	movs	r0, #2
} 
 80025c8:	bcf0      	pop	{r4, r5, r6, r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_DMA_IRQHandler>:
{
 80025cc:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80025ce:	e9d0 620f 	ldrd	r6, r2, [r0, #60]	; 0x3c
 80025d2:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025d4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80025d6:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80025d8:	4093      	lsls	r3, r2
 80025da:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 80025dc:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80025de:	d00e      	beq.n	80025fe <HAL_DMA_IRQHandler+0x32>
 80025e0:	f015 0f04 	tst.w	r5, #4
 80025e4:	d00b      	beq.n	80025fe <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	0692      	lsls	r2, r2, #26
 80025ea:	d403      	bmi.n	80025f4 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025ec:	6822      	ldr	r2, [r4, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80025f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80025f6:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	b1ca      	cbz	r2, 800262e <HAL_DMA_IRQHandler+0x62>
}  
 80025fa:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 80025fc:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025fe:	2302      	movs	r3, #2
 8002600:	4093      	lsls	r3, r2
 8002602:	420b      	tst	r3, r1
 8002604:	d015      	beq.n	8002632 <HAL_DMA_IRQHandler+0x66>
 8002606:	f015 0f02 	tst.w	r5, #2
 800260a:	d012      	beq.n	8002632 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	0692      	lsls	r2, r2, #26
 8002610:	d406      	bmi.n	8002620 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002612:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002614:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002616:	f022 020a 	bic.w	r2, r2, #10
 800261a:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800261c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8002620:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002622:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8002624:	2300      	movs	r3, #0
 8002626:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800262a:	2a00      	cmp	r2, #0
 800262c:	d1e5      	bne.n	80025fa <HAL_DMA_IRQHandler+0x2e>
}  
 800262e:	bc70      	pop	{r4, r5, r6}
 8002630:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002632:	2308      	movs	r3, #8
 8002634:	4093      	lsls	r3, r2
 8002636:	420b      	tst	r3, r1
 8002638:	d0f9      	beq.n	800262e <HAL_DMA_IRQHandler+0x62>
 800263a:	072b      	lsls	r3, r5, #28
 800263c:	d5f7      	bpl.n	800262e <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800263e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8002640:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002642:	f023 030e 	bic.w	r3, r3, #14
 8002646:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002648:	2301      	movs	r3, #1
 800264a:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800264e:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002652:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002654:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 8002656:	8404      	strh	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002658:	2900      	cmp	r1, #0
 800265a:	d0e8      	beq.n	800262e <HAL_DMA_IRQHandler+0x62>
}  
 800265c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800265e:	4708      	bx	r1

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002664:	680e      	ldr	r6, [r1, #0]
{
 8002666:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002668:	2e00      	cmp	r6, #0
 800266a:	f000 809a 	beq.w	80027a2 <HAL_GPIO_Init+0x142>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266e:	f8df c208 	ldr.w	ip, [pc, #520]	; 8002878 <HAL_GPIO_Init+0x218>
  uint32_t position = 0x00u;
 8002672:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002674:	f04f 0801 	mov.w	r8, #1
 8002678:	fa08 f503 	lsl.w	r5, r8, r3
    if (iocurrent != 0x00u)
 800267c:	ea15 0e06 	ands.w	lr, r5, r6
 8002680:	f000 808a 	beq.w	8002798 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002684:	684c      	ldr	r4, [r1, #4]
 8002686:	f024 0a10 	bic.w	sl, r4, #16
 800268a:	f1ba 0f02 	cmp.w	sl, #2
 800268e:	f000 808b 	beq.w	80027a8 <HAL_GPIO_Init+0x148>
      temp = GPIOx->MODER;
 8002692:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002696:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f209 	lsl.w	r2, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a0:	f004 0703 	and.w	r7, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026a4:	ea2b 0b02 	bic.w	fp, fp, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a8:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ac:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026b0:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026b8:	ea6f 0202 	mvn.w	r2, r2
      GPIOx->MODER = temp;
 80026bc:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026be:	f240 8099 	bls.w	80027f4 <HAL_GPIO_Init+0x194>
      temp = GPIOx->PUPDR;
 80026c2:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026c4:	688d      	ldr	r5, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026c6:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026c8:	fa05 f509 	lsl.w	r5, r5, r9
 80026cc:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ce:	00e7      	lsls	r7, r4, #3
      GPIOx->PUPDR = temp;
 80026d0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d2:	d561      	bpl.n	8002798 <HAL_GPIO_Init+0x138>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d4:	4d61      	ldr	r5, [pc, #388]	; (800285c <HAL_GPIO_Init+0x1fc>)
 80026d6:	69aa      	ldr	r2, [r5, #24]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	61aa      	str	r2, [r5, #24]
 80026de:	69aa      	ldr	r2, [r5, #24]
 80026e0:	f023 0703 	bic.w	r7, r3, #3
 80026e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80026e8:	f002 0201 	and.w	r2, r2, #1
 80026ec:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80026f0:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026f2:	f003 0503 	and.w	r5, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80026f8:	f8d7 9008 	ldr.w	r9, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fc:	00ad      	lsls	r5, r5, #2
 80026fe:	220f      	movs	r2, #15
 8002700:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002702:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002706:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800270a:	d01d      	beq.n	8002748 <HAL_GPIO_Init+0xe8>
 800270c:	4a54      	ldr	r2, [pc, #336]	; (8002860 <HAL_GPIO_Init+0x200>)
 800270e:	4290      	cmp	r0, r2
 8002710:	f000 808a 	beq.w	8002828 <HAL_GPIO_Init+0x1c8>
 8002714:	4a53      	ldr	r2, [pc, #332]	; (8002864 <HAL_GPIO_Init+0x204>)
 8002716:	4290      	cmp	r0, r2
 8002718:	f000 808b 	beq.w	8002832 <HAL_GPIO_Init+0x1d2>
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x208>)
 800271e:	4290      	cmp	r0, r2
 8002720:	d07b      	beq.n	800281a <HAL_GPIO_Init+0x1ba>
 8002722:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_GPIO_Init+0x20c>)
 8002724:	4290      	cmp	r0, r2
 8002726:	f000 808b 	beq.w	8002840 <HAL_GPIO_Init+0x1e0>
 800272a:	4a51      	ldr	r2, [pc, #324]	; (8002870 <HAL_GPIO_Init+0x210>)
 800272c:	4290      	cmp	r0, r2
 800272e:	f000 808e 	beq.w	800284e <HAL_GPIO_Init+0x1ee>
 8002732:	4a50      	ldr	r2, [pc, #320]	; (8002874 <HAL_GPIO_Init+0x214>)
 8002734:	4290      	cmp	r0, r2
 8002736:	bf0c      	ite	eq
 8002738:	f04f 0906 	moveq.w	r9, #6
 800273c:	f04f 0907 	movne.w	r9, #7
 8002740:	fa09 f505 	lsl.w	r5, r9, r5
 8002744:	ea4a 0a05 	orr.w	sl, sl, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002748:	f8c7 a008 	str.w	sl, [r7, #8]
        temp = EXTI->IMR;
 800274c:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002750:	03e5      	lsls	r5, r4, #15
        temp &= ~(iocurrent);
 8002752:	ea6f 070e 	mvn.w	r7, lr
 8002756:	bf54      	ite	pl
 8002758:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800275a:	ea4e 0202 	orrmi.w	r2, lr, r2
        }
        EXTI->IMR = temp;
 800275e:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8002762:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002766:	03a2      	lsls	r2, r4, #14
        temp &= ~(iocurrent);
 8002768:	bf54      	ite	pl
 800276a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800276c:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->EMR = temp;
 8002770:	f8cc 5004 	str.w	r5, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002774:	f8dc 5008 	ldr.w	r5, [ip, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002778:	02e2      	lsls	r2, r4, #11
        temp &= ~(iocurrent);
 800277a:	bf54      	ite	pl
 800277c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800277e:	ea4e 0505 	orrmi.w	r5, lr, r5
        }
        EXTI->RTSR = temp;
 8002782:	f8cc 5008 	str.w	r5, [ip, #8]

        temp = EXTI->FTSR;
 8002786:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800278a:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800278c:	bf54      	ite	pl
 800278e:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8002790:	ea4e 0202 	orrmi.w	r2, lr, r2
        }
        EXTI->FTSR = temp;
 8002794:	f8cc 200c 	str.w	r2, [ip, #12]
      }
    }

    position++;
 8002798:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279a:	fa36 f203 	lsrs.w	r2, r6, r3
 800279e:	f47f af6b 	bne.w	8002678 <HAL_GPIO_Init+0x18>
  }
}
 80027a2:	b003      	add	sp, #12
 80027a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 80027a8:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80027ac:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b0:	f003 0707 	and.w	r7, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80027b4:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b8:	00bf      	lsls	r7, r7, #2
 80027ba:	f04f 0b0f 	mov.w	fp, #15
 80027be:	fa0b fb07 	lsl.w	fp, fp, r7
 80027c2:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027c6:	690a      	ldr	r2, [r1, #16]
 80027c8:	40ba      	lsls	r2, r7
 80027ca:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3u] = temp;
 80027ce:	f8c9 2020 	str.w	r2, [r9, #32]
      temp = GPIOx->MODER;
 80027d2:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027d6:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f209 	lsl.w	r2, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e0:	f004 0703 	and.w	r7, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027e4:	ea2a 0a02 	bic.w	sl, sl, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e8:	fa07 f709 	lsl.w	r7, r7, r9
 80027ec:	ea47 070a 	orr.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027f0:	43d2      	mvns	r2, r2
      GPIOx->MODER = temp;
 80027f2:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80027f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027f6:	ea02 0a07 	and.w	sl, r2, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027fa:	68cf      	ldr	r7, [r1, #12]
 80027fc:	fa07 f709 	lsl.w	r7, r7, r9
 8002800:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002804:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002806:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800280a:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800280e:	ea2a 0505 	bic.w	r5, sl, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002812:	409f      	lsls	r7, r3
 8002814:	432f      	orrs	r7, r5
        GPIOx->OTYPER = temp;
 8002816:	6047      	str	r7, [r0, #4]
 8002818:	e753      	b.n	80026c2 <HAL_GPIO_Init+0x62>
 800281a:	f04f 0903 	mov.w	r9, #3
 800281e:	fa09 f505 	lsl.w	r5, r9, r5
 8002822:	ea4a 0a05 	orr.w	sl, sl, r5
 8002826:	e78f      	b.n	8002748 <HAL_GPIO_Init+0xe8>
 8002828:	fa08 f505 	lsl.w	r5, r8, r5
 800282c:	ea4a 0a05 	orr.w	sl, sl, r5
 8002830:	e78a      	b.n	8002748 <HAL_GPIO_Init+0xe8>
 8002832:	f04f 0902 	mov.w	r9, #2
 8002836:	fa09 f505 	lsl.w	r5, r9, r5
 800283a:	ea4a 0a05 	orr.w	sl, sl, r5
 800283e:	e783      	b.n	8002748 <HAL_GPIO_Init+0xe8>
 8002840:	f04f 0904 	mov.w	r9, #4
 8002844:	fa09 f505 	lsl.w	r5, r9, r5
 8002848:	ea4a 0a05 	orr.w	sl, sl, r5
 800284c:	e77c      	b.n	8002748 <HAL_GPIO_Init+0xe8>
 800284e:	f04f 0905 	mov.w	r9, #5
 8002852:	fa09 f505 	lsl.w	r5, r9, r5
 8002856:	ea4a 0a05 	orr.w	sl, sl, r5
 800285a:	e775      	b.n	8002748 <HAL_GPIO_Init+0xe8>
 800285c:	40021000 	.word	0x40021000
 8002860:	48000400 	.word	0x48000400
 8002864:	48000800 	.word	0x48000800
 8002868:	48000c00 	.word	0x48000c00
 800286c:	48001000 	.word	0x48001000
 8002870:	48001400 	.word	0x48001400
 8002874:	48001800 	.word	0x48001800
 8002878:	40010400 	.word	0x40010400

0800287c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800287c:	b10a      	cbz	r2, 8002882 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800287e:	6181      	str	r1, [r0, #24]
 8002880:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002882:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002888:	6943      	ldr	r3, [r0, #20]
 800288a:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800288c:	bf18      	it	ne
 800288e:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002890:	6181      	str	r1, [r0, #24]
  }
}
 8002892:	4770      	bx	lr

08002894 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	2800      	cmp	r0, #0
 8002896:	f000 827f 	beq.w	8002d98 <HAL_RCC_OscConfig+0x504>
{
 800289a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	6803      	ldr	r3, [r0, #0]
 80028a0:	07df      	lsls	r7, r3, #31
{
 80028a2:	b083      	sub	sp, #12
 80028a4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	d53d      	bpl.n	8002924 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028a8:	49c1      	ldr	r1, [pc, #772]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 80028aa:	684a      	ldr	r2, [r1, #4]
 80028ac:	f002 020c 	and.w	r2, r2, #12
 80028b0:	2a04      	cmp	r2, #4
 80028b2:	f000 815f 	beq.w	8002b74 <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b6:	684a      	ldr	r2, [r1, #4]
 80028b8:	f002 020c 	and.w	r2, r2, #12
 80028bc:	2a08      	cmp	r2, #8
 80028be:	f000 8152 	beq.w	8002b66 <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	6863      	ldr	r3, [r4, #4]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	f000 816b 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x30e>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 819a 	beq.w	8002c06 <HAL_RCC_OscConfig+0x372>
 80028d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d6:	f000 82bc 	beq.w	8002e52 <HAL_RCC_OscConfig+0x5be>
 80028da:	4bb5      	ldr	r3, [pc, #724]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028ea:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff f824 	bl	8001938 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f0:	4faf      	ldr	r7, [pc, #700]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80028f2:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f8:	2601      	movs	r6, #1
 80028fa:	e005      	b.n	8002908 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff f81c 	bl	8001938 <HAL_GetTick>
 8002900:	1b40      	subs	r0, r0, r5
 8002902:	2864      	cmp	r0, #100	; 0x64
 8002904:	f200 817b 	bhi.w	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002908:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	fa98 f3a8 	rbit	r3, r8
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	fa06 f303 	lsl.w	r3, r6, r3
 800291e:	4213      	tst	r3, r2
 8002920:	d0ec      	beq.n	80028fc <HAL_RCC_OscConfig+0x68>
 8002922:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002924:	079e      	lsls	r6, r3, #30
 8002926:	d542      	bpl.n	80029ae <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002928:	4aa1      	ldr	r2, [pc, #644]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 800292a:	6851      	ldr	r1, [r2, #4]
 800292c:	f011 0f0c 	tst.w	r1, #12
 8002930:	f000 80cf 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002934:	6851      	ldr	r1, [r2, #4]
 8002936:	f001 010c 	and.w	r1, r1, #12
 800293a:	2908      	cmp	r1, #8
 800293c:	f000 80c2 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002940:	68e2      	ldr	r2, [r4, #12]
 8002942:	2a00      	cmp	r2, #0
 8002944:	f000 81b8 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x424>
 8002948:	2201      	movs	r2, #1
 800294a:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002956:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800295a:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295c:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 800295e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002960:	f7fe ffea 	bl	8001938 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4e92      	ldr	r6, [pc, #584]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8002966:	4605      	mov	r5, r0
 8002968:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e005      	b.n	800297a <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe ffe3 	bl	8001938 <HAL_GetTick>
 8002972:	1b40      	subs	r0, r0, r5
 8002974:	2802      	cmp	r0, #2
 8002976:	f200 8142 	bhi.w	8002bfe <HAL_RCC_OscConfig+0x36a>
 800297a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	6832      	ldr	r2, [r6, #0]
 8002980:	fa98 f3a8 	rbit	r3, r8
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa07 f303 	lsl.w	r3, r7, r3
 8002990:	4213      	tst	r3, r2
 8002992:	d0ec      	beq.n	800296e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	6831      	ldr	r1, [r6, #0]
 8002996:	22f8      	movs	r2, #248	; 0xf8
 8002998:	fa92 f2a2 	rbit	r2, r2
 800299c:	6923      	ldr	r3, [r4, #16]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80029a6:	4093      	lsls	r3, r2
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6033      	str	r3, [r6, #0]
 80029ac:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	071d      	lsls	r5, r3, #28
 80029b0:	d421      	bmi.n	80029f6 <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b2:	0758      	lsls	r0, r3, #29
 80029b4:	d54e      	bpl.n	8002a54 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b6:	4b7e      	ldr	r3, [pc, #504]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	00d1      	lsls	r1, r2, #3
 80029bc:	f140 80c7 	bpl.w	8002b4e <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 80029c0:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4d7b      	ldr	r5, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x320>)
 80029c6:	682b      	ldr	r3, [r5, #0]
 80029c8:	05da      	lsls	r2, r3, #23
 80029ca:	f140 8108 	bpl.w	8002bde <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ce:	68a3      	ldr	r3, [r4, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f000 8197 	beq.w	8002d04 <HAL_RCC_OscConfig+0x470>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8138 	beq.w	8002c4c <HAL_RCC_OscConfig+0x3b8>
 80029dc:	2b05      	cmp	r3, #5
 80029de:	4b74      	ldr	r3, [pc, #464]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	f000 81d1 	beq.w	8002d88 <HAL_RCC_OscConfig+0x4f4>
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	621a      	str	r2, [r3, #32]
 80029ec:	6a1a      	ldr	r2, [r3, #32]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	621a      	str	r2, [r3, #32]
 80029f4:	e18b      	b.n	8002d0e <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f6:	6962      	ldr	r2, [r4, #20]
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	f000 8081 	beq.w	8002b00 <HAL_RCC_OscConfig+0x26c>
 80029fe:	2201      	movs	r2, #1
 8002a00:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8002a04:	4b6c      	ldr	r3, [pc, #432]	; (8002bb8 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	4f6a      	ldr	r7, [pc, #424]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 8002a08:	fab1 f181 	clz	r1, r1
 8002a0c:	440b      	add	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a10:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 8002a12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a14:	f7fe ff90 	bl	8001938 <HAL_GetTick>
 8002a18:	f04f 0802 	mov.w	r8, #2
 8002a1c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe ff8a 	bl	8001938 <HAL_GetTick>
 8002a24:	1b40      	subs	r0, r0, r5
 8002a26:	2802      	cmp	r0, #2
 8002a28:	f200 80e9 	bhi.w	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002a2c:	fa98 f3a8 	rbit	r3, r8
 8002a30:	fa98 f3a8 	rbit	r3, r8
 8002a34:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	fa98 f3a8 	rbit	r3, r8
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	fa06 f303 	lsl.w	r3, r6, r3
 8002a4a:	4213      	tst	r3, r2
 8002a4c:	d0e8      	beq.n	8002a20 <HAL_RCC_OscConfig+0x18c>
 8002a4e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	0758      	lsls	r0, r3, #29
 8002a52:	d4b0      	bmi.n	80029b6 <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a54:	69a0      	ldr	r0, [r4, #24]
 8002a56:	b388      	cbz	r0, 8002abc <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a58:	4d55      	ldr	r5, [pc, #340]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 8002a5a:	686b      	ldr	r3, [r5, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	f000 8179 	beq.w	8002d58 <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a66:	2802      	cmp	r0, #2
 8002a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a6c:	f000 8196 	beq.w	8002d9c <HAL_RCC_OscConfig+0x508>
 8002a70:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe ff57 	bl	8001938 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	462c      	mov	r4, r5
 8002a8c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8002a90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a92:	2601      	movs	r6, #1
 8002a94:	e005      	b.n	8002aa2 <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe ff4f 	bl	8001938 <HAL_GetTick>
 8002a9a:	1b40      	subs	r0, r0, r5
 8002a9c:	2802      	cmp	r0, #2
 8002a9e:	f200 80ae 	bhi.w	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002aa2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	fa97 f3a7 	rbit	r3, r7
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	fa06 f303 	lsl.w	r3, r6, r3
 8002ab8:	4213      	tst	r3, r2
 8002aba:	d1ec      	bne.n	8002a96 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 8002abc:	2000      	movs	r0, #0
}
 8002abe:	b003      	add	sp, #12
 8002ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ac4:	6852      	ldr	r2, [r2, #4]
 8002ac6:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002aca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ace:	f47f af37 	bne.w	8002940 <HAL_RCC_OscConfig+0xac>
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad8:	4935      	ldr	r1, [pc, #212]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 8002ada:	6808      	ldr	r0, [r1, #0]
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4202      	tst	r2, r0
 8002af0:	d064      	beq.n	8002bbc <HAL_RCC_OscConfig+0x328>
 8002af2:	68e2      	ldr	r2, [r4, #12]
 8002af4:	428a      	cmp	r2, r1
 8002af6:	d061      	beq.n	8002bbc <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
}
 8002afa:	b003      	add	sp, #12
 8002afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b00:	2501      	movs	r5, #1
 8002b02:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4f29      	ldr	r7, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	fab1 f181 	clz	r1, r1
 8002b0e:	440b      	add	r3, r1
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	f04f 0802 	mov.w	r8, #2
 8002b16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b18:	f7fe ff0e 	bl	8001938 <HAL_GetTick>
 8002b1c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1e:	e004      	b.n	8002b2a <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe ff0a 	bl	8001938 <HAL_GetTick>
 8002b24:	1b80      	subs	r0, r0, r6
 8002b26:	2802      	cmp	r0, #2
 8002b28:	d869      	bhi.n	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002b2a:	fa98 f3a8 	rbit	r3, r8
 8002b2e:	fa98 f3a8 	rbit	r3, r8
 8002b32:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	fa98 f3a8 	rbit	r3, r8
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	fa05 f303 	lsl.w	r3, r5, r3
 8002b48:	4213      	tst	r3, r2
 8002b4a:	d1e9      	bne.n	8002b20 <HAL_RCC_OscConfig+0x28c>
 8002b4c:	e77f      	b.n	8002a4e <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b54:	61da      	str	r2, [r3, #28]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b60:	f04f 0801 	mov.w	r8, #1
 8002b64:	e72e      	b.n	80029c4 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b66:	684a      	ldr	r2, [r1, #4]
 8002b68:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8002b6c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002b70:	f47f aea7 	bne.w	80028c2 <HAL_RCC_OscConfig+0x2e>
 8002b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b78:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 8002b7e:	6808      	ldr	r0, [r1, #0]
 8002b80:	fa92 f2a2 	rbit	r2, r2
 8002b84:	fab2 f282 	clz	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4202      	tst	r2, r0
 8002b94:	f43f aec6 	beq.w	8002924 <HAL_RCC_OscConfig+0x90>
 8002b98:	6862      	ldr	r2, [r4, #4]
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	f47f aec2 	bne.w	8002924 <HAL_RCC_OscConfig+0x90>
 8002ba0:	e7aa      	b.n	8002af8 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba2:	4a03      	ldr	r2, [pc, #12]	; (8002bb0 <HAL_RCC_OscConfig+0x31c>)
 8002ba4:	6813      	ldr	r3, [r2, #0]
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bac:	e69e      	b.n	80028ec <HAL_RCC_OscConfig+0x58>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4dab      	ldr	r5, [pc, #684]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
 8002bbe:	21f8      	movs	r1, #248	; 0xf8
 8002bc0:	6828      	ldr	r0, [r5, #0]
 8002bc2:	fa91 f1a1 	rbit	r1, r1
 8002bc6:	6922      	ldr	r2, [r4, #16]
 8002bc8:	fab1 f181 	clz	r1, r1
 8002bcc:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8002bd0:	408a      	lsls	r2, r1
 8002bd2:	4302      	orrs	r2, r0
 8002bd4:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	071d      	lsls	r5, r3, #28
 8002bd8:	f57f aeeb 	bpl.w	80029b2 <HAL_RCC_OscConfig+0x11e>
 8002bdc:	e70b      	b.n	80029f6 <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002be6:	f7fe fea7 	bl	8001938 <HAL_GetTick>
 8002bea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	05db      	lsls	r3, r3, #23
 8002bf0:	f53f aeed 	bmi.w	80029ce <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7fe fea0 	bl	8001938 <HAL_GetTick>
 8002bf8:	1b80      	subs	r0, r0, r6
 8002bfa:	2864      	cmp	r0, #100	; 0x64
 8002bfc:	d9f6      	bls.n	8002bec <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8002bfe:	2003      	movs	r0, #3
}
 8002c00:	b003      	add	sp, #12
 8002c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	4d99      	ldr	r5, [pc, #612]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
 8002c08:	682b      	ldr	r3, [r5, #0]
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c18:	f7fe fe8e 	bl	8001938 <HAL_GetTick>
 8002c1c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002c20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	2701      	movs	r7, #1
 8002c24:	e004      	b.n	8002c30 <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c26:	f7fe fe87 	bl	8001938 <HAL_GetTick>
 8002c2a:	1b80      	subs	r0, r0, r6
 8002c2c:	2864      	cmp	r0, #100	; 0x64
 8002c2e:	d8e6      	bhi.n	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002c30:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c34:	682a      	ldr	r2, [r5, #0]
 8002c36:	fa98 f3a8 	rbit	r3, r8
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	fa07 f303 	lsl.w	r3, r7, r3
 8002c46:	4213      	tst	r3, r2
 8002c48:	d1ed      	bne.n	8002c26 <HAL_RCC_OscConfig+0x392>
 8002c4a:	e66a      	b.n	8002922 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	4d87      	ldr	r5, [pc, #540]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
 8002c4e:	6a2b      	ldr	r3, [r5, #32]
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	622b      	str	r3, [r5, #32]
 8002c56:	6a2b      	ldr	r3, [r5, #32]
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fe6b 	bl	8001938 <HAL_GetTick>
 8002c62:	f04f 0902 	mov.w	r9, #2
 8002c66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	2701      	movs	r7, #1
 8002c6a:	e013      	b.n	8002c94 <HAL_RCC_OscConfig+0x400>
 8002c6c:	fa99 f3a9 	rbit	r3, r9
 8002c70:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002c72:	fa99 f3a9 	rbit	r3, r9
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	fa07 f303 	lsl.w	r3, r7, r3
 8002c82:	4213      	tst	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe fe57 	bl	8001938 <HAL_GetTick>
 8002c8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c8e:	1b80      	subs	r0, r0, r6
 8002c90:	4298      	cmp	r0, r3
 8002c92:	d8b4      	bhi.n	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002c94:	fa99 f3a9 	rbit	r3, r9
 8002c98:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0e5      	beq.n	8002c6c <HAL_RCC_OscConfig+0x3d8>
 8002ca0:	6a2a      	ldr	r2, [r5, #32]
 8002ca2:	e7e6      	b.n	8002c72 <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 8002ca4:	f1b8 0f00 	cmp.w	r8, #0
 8002ca8:	f43f aed4 	beq.w	8002a54 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4a6f      	ldr	r2, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
 8002cae:	69d3      	ldr	r3, [r2, #28]
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	e6cd      	b.n	8002a54 <HAL_RCC_OscConfig+0x1c0>
 8002cb8:	2501      	movs	r5, #1
 8002cba:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cca:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ccc:	4f67      	ldr	r7, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 8002cce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fe32 	bl	8001938 <HAL_GetTick>
 8002cd4:	f04f 0802 	mov.w	r8, #2
 8002cd8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	e004      	b.n	8002ce6 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7fe fe2c 	bl	8001938 <HAL_GetTick>
 8002ce0:	1b80      	subs	r0, r0, r6
 8002ce2:	2802      	cmp	r0, #2
 8002ce4:	d88b      	bhi.n	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002ce6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	fa98 f3a8 	rbit	r3, r8
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	fa05 f303 	lsl.w	r3, r5, r3
 8002cfc:	4213      	tst	r3, r2
 8002cfe:	d1ed      	bne.n	8002cdc <HAL_RCC_OscConfig+0x448>
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	e654      	b.n	80029ae <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	4a59      	ldr	r2, [pc, #356]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
 8002d06:	6a13      	ldr	r3, [r2, #32]
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fe13 	bl	8001938 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	4f56      	ldr	r7, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8002d14:	4605      	mov	r5, r0
 8002d16:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	2601      	movs	r6, #1
 8002d1c:	e014      	b.n	8002d48 <HAL_RCC_OscConfig+0x4b4>
 8002d1e:	fa99 f3a9 	rbit	r3, r9
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	fa99 f3a9 	rbit	r3, r9
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	fa06 f303 	lsl.w	r3, r6, r3
 8002d34:	4213      	tst	r3, r2
 8002d36:	d1b5      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fdfe 	bl	8001938 <HAL_GetTick>
 8002d3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d40:	1b40      	subs	r0, r0, r5
 8002d42:	4298      	cmp	r0, r3
 8002d44:	f63f af5b 	bhi.w	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002d48:	fa99 f3a9 	rbit	r3, r9
 8002d4c:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0e4      	beq.n	8002d1e <HAL_RCC_OscConfig+0x48a>
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	e7e5      	b.n	8002d24 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d58:	2801      	cmp	r0, #1
 8002d5a:	f43f aeb0 	beq.w	8002abe <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 8002d5e:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d60:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8002d62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d64:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8002d68:	4288      	cmp	r0, r1
 8002d6a:	f47f aec5 	bne.w	8002af8 <HAL_RCC_OscConfig+0x264>
 8002d6e:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d70:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d74:	428a      	cmp	r2, r1
 8002d76:	f47f aebf 	bne.w	8002af8 <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d7c:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 8002d80:	1a18      	subs	r0, r3, r0
 8002d82:	bf18      	it	ne
 8002d84:	2001      	movne	r0, #1
 8002d86:	e69a      	b.n	8002abe <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d88:	f042 0204 	orr.w	r2, r2, #4
 8002d8c:	621a      	str	r2, [r3, #32]
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	621a      	str	r2, [r3, #32]
 8002d96:	e7ba      	b.n	8002d0e <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 8002d98:	2001      	movs	r0, #1
}
 8002d9a:	4770      	bx	lr
 8002d9c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002db2:	f7fe fdc1 	bl	8001938 <HAL_GetTick>
 8002db6:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002dba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbc:	2701      	movs	r7, #1
 8002dbe:	e005      	b.n	8002dcc <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fdba 	bl	8001938 <HAL_GetTick>
 8002dc4:	1b80      	subs	r0, r0, r6
 8002dc6:	2802      	cmp	r0, #2
 8002dc8:	f63f af19 	bhi.w	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002dcc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	682a      	ldr	r2, [r5, #0]
 8002dd2:	fa98 f3a8 	rbit	r3, r8
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	fa07 f303 	lsl.w	r3, r7, r3
 8002de2:	4213      	tst	r3, r2
 8002de4:	d1ec      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002de8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dea:	f023 030f 	bic.w	r3, r3, #15
 8002dee:	4313      	orrs	r3, r2
 8002df0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002df2:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8002df6:	686a      	ldr	r2, [r5, #4]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	606b      	str	r3, [r5, #4]
 8002e02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e06:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e16:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e18:	4e14      	ldr	r6, [pc, #80]	; (8002e6c <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 8002e1a:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fd8c 	bl	8001938 <HAL_GetTick>
 8002e20:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002e24:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e26:	2501      	movs	r5, #1
 8002e28:	e005      	b.n	8002e36 <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fd85 	bl	8001938 <HAL_GetTick>
 8002e2e:	1b00      	subs	r0, r0, r4
 8002e30:	2802      	cmp	r0, #2
 8002e32:	f63f aee4 	bhi.w	8002bfe <HAL_RCC_OscConfig+0x36a>
 8002e36:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3a:	6832      	ldr	r2, [r6, #0]
 8002e3c:	fa98 f3a8 	rbit	r3, r8
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	fa05 f303 	lsl.w	r3, r5, r3
 8002e4c:	4213      	tst	r3, r2
 8002e4e:	d0ec      	beq.n	8002e2a <HAL_RCC_OscConfig+0x596>
 8002e50:	e634      	b.n	8002abc <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e56:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e53f      	b.n	80028ec <HAL_RCC_OscConfig+0x58>
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f000 80c4 	beq.w	8002ffe <HAL_RCC_ClockConfig+0x18e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e76:	4a6d      	ldr	r2, [pc, #436]	; (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	428b      	cmp	r3, r1
{
 8002e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e84:	460d      	mov	r5, r1
 8002e86:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	d20c      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	f023 0307 	bic.w	r3, r3, #7
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e94:	6813      	ldr	r3, [r2, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	428b      	cmp	r3, r1
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8002ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	0798      	lsls	r0, r3, #30
 8002ea8:	d506      	bpl.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eaa:	4961      	ldr	r1, [pc, #388]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	68a0      	ldr	r0, [r4, #8]
 8002eae:	684a      	ldr	r2, [r1, #4]
 8002eb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002eb4:	4302      	orrs	r2, r0
 8002eb6:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb8:	07d9      	lsls	r1, r3, #31
 8002eba:	d52f      	bpl.n	8002f1c <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	6861      	ldr	r1, [r4, #4]
 8002ebe:	2901      	cmp	r1, #1
 8002ec0:	f000 809f 	beq.w	8003002 <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec4:	2902      	cmp	r1, #2
 8002ec6:	f000 8087 	beq.w	8002fd8 <HAL_RCC_ClockConfig+0x168>
 8002eca:	2202      	movs	r2, #2
 8002ecc:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	fa92 f2a2 	rbit	r2, r2
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	f002 021f 	and.w	r2, r2, #31
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	fa03 f202 	lsl.w	r2, r3, r2
 8002ee6:	4202      	tst	r2, r0
 8002ee8:	d0d9      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eea:	4e51      	ldr	r6, [pc, #324]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	6873      	ldr	r3, [r6, #4]
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002ef6:	f7fe fd1f 	bl	8001938 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002efe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f00:	e005      	b.n	8002f0e <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f02:	f7fe fd19 	bl	8001938 <HAL_GetTick>
 8002f06:	1bc0      	subs	r0, r0, r7
 8002f08:	4540      	cmp	r0, r8
 8002f0a:	f200 808c 	bhi.w	8003026 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	6873      	ldr	r3, [r6, #4]
 8002f10:	6862      	ldr	r2, [r4, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002f1a:	d1f2      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4a43      	ldr	r2, [pc, #268]	; (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	6813      	ldr	r3, [r2, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	42ab      	cmp	r3, r5
 8002f26:	d909      	bls.n	8002f3c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	f023 0307 	bic.w	r3, r3, #7
 8002f2e:	432b      	orrs	r3, r5
 8002f30:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	42ab      	cmp	r3, r5
 8002f3a:	d1b0      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	075a      	lsls	r2, r3, #29
 8002f40:	d506      	bpl.n	8002f50 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f42:	493b      	ldr	r1, [pc, #236]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	68e0      	ldr	r0, [r4, #12]
 8002f46:	684a      	ldr	r2, [r1, #4]
 8002f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4c:	4302      	orrs	r2, r0
 8002f4e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	071b      	lsls	r3, r3, #28
 8002f52:	d507      	bpl.n	8002f64 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f54:	4a36      	ldr	r2, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	6921      	ldr	r1, [r4, #16]
 8002f58:	6853      	ldr	r3, [r2, #4]
 8002f5a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002f5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f62:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002f64:	4a32      	ldr	r2, [pc, #200]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002f66:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f68:	f003 010c 	and.w	r1, r3, #12
 8002f6c:	2908      	cmp	r1, #8
 8002f6e:	d017      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f70:	4930      	ldr	r1, [pc, #192]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	22f0      	movs	r2, #240	; 0xf0
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	fa92 f2a2 	rbit	r2, r2
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f84:	40d3      	lsrs	r3, r2
 8002f86:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
  HAL_InitTick (uwTickPrio);
 8002f88:	482c      	ldr	r0, [pc, #176]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8002f8e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f90:	fa21 f303 	lsr.w	r3, r1, r3
 8002f94:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002f96:	f7fe fc8d 	bl	80018b4 <HAL_InitTick>
  return HAL_OK;
 8002f9a:	2000      	movs	r0, #0
}
 8002f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa0:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8002fa4:	fa91 f1a1 	rbit	r1, r1
 8002fa8:	200f      	movs	r0, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002faa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002fac:	fab1 f181 	clz	r1, r1
 8002fb0:	fa90 f0a0 	rbit	r0, r0
 8002fb4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fb8:	40cb      	lsrs	r3, r1
 8002fba:	4922      	ldr	r1, [pc, #136]	; (8003044 <HAL_RCC_ClockConfig+0x1d4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fbc:	4c22      	ldr	r4, [pc, #136]	; (8003048 <HAL_RCC_ClockConfig+0x1d8>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc0:	491c      	ldr	r1, [pc, #112]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fc2:	fab0 f080 	clz	r0, r0
 8002fc6:	f002 020f 	and.w	r2, r2, #15
 8002fca:	40c2      	lsrs	r2, r0
 8002fcc:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fce:	fbb1 f1f2 	udiv	r1, r1, r2
 8002fd2:	fb03 f101 	mul.w	r1, r3, r1
 8002fd6:	e7cc      	b.n	8002f72 <HAL_RCC_ClockConfig+0x102>
 8002fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fdc:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe2:	6810      	ldr	r0, [r2, #0]
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	4203      	tst	r3, r0
 8002ff8:	f47f af77 	bne.w	8002eea <HAL_RCC_ClockConfig+0x7a>
 8002ffc:	e74f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002ffe:	2001      	movs	r0, #1
}
 8003000:	4770      	bx	lr
 8003002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003006:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	fa92 f2a2 	rbit	r2, r2
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	f002 021f 	and.w	r2, r2, #31
 800301a:	fa01 f202 	lsl.w	r2, r1, r2
 800301e:	421a      	tst	r2, r3
 8003020:	f47f af63 	bne.w	8002eea <HAL_RCC_ClockConfig+0x7a>
 8003024:	e73b      	b.n	8002e9e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003026:	2003      	movs	r0, #3
 8003028:	e73a      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x30>
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	007a1200 	.word	0x007a1200
 8003038:	08004a40 	.word	0x08004a40
 800303c:	20000034 	.word	0x20000034
 8003040:	2000002c 	.word	0x2000002c
 8003044:	08004a58 	.word	0x08004a58
 8003048:	08004a68 	.word	0x08004a68

0800304c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_RCC_GetSysClockFreq+0x4c>)
 800304e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003050:	f003 010c 	and.w	r1, r3, #12
 8003054:	2908      	cmp	r1, #8
 8003056:	d001      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003058:	4810      	ldr	r0, [pc, #64]	; (800309c <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800305a:	4770      	bx	lr
{
 800305c:	b430      	push	{r4, r5}
 800305e:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 8003062:	fa90 f0a0 	rbit	r0, r0
 8003066:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003068:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800306a:	fab0 f080 	clz	r0, r0
 800306e:	fa91 f1a1 	rbit	r1, r1
 8003072:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003076:	40c3      	lsrs	r3, r0
 8003078:	4809      	ldr	r0, [pc, #36]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800307a:	4d0a      	ldr	r5, [pc, #40]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800307c:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800307e:	4c07      	ldr	r4, [pc, #28]	; (800309c <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003080:	fab1 f181 	clz	r1, r1
 8003084:	f002 030f 	and.w	r3, r2, #15
 8003088:	40cb      	lsrs	r3, r1
 800308a:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800308c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003090:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003092:	fb00 f003 	mul.w	r0, r0, r3
}
 8003096:	4770      	bx	lr
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	08004a58 	.word	0x08004a58
 80030a4:	08004a68 	.word	0x08004a68

080030a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	fa92 f2a2 	rbit	r2, r2
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030bc:	4904      	ldr	r1, [pc, #16]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030be:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	6810      	ldr	r0, [r2, #0]
}    
 80030c6:	40d8      	lsrs	r0, r3
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08004a50 	.word	0x08004a50
 80030d4:	2000002c 	.word	0x2000002c

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030ec:	4904      	ldr	r1, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ee:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	6810      	ldr	r0, [r2, #0]
} 
 80030f6:	40d8      	lsrs	r0, r3
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	08004a50 	.word	0x08004a50
 8003104:	2000002c 	.word	0x2000002c

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800310c:	6803      	ldr	r3, [r0, #0]
 800310e:	03d9      	lsls	r1, r3, #15
{
 8003110:	b083      	sub	sp, #12
 8003112:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003114:	d53d      	bpl.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4ba1      	ldr	r3, [pc, #644]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	00d2      	lsls	r2, r2, #3
 800311c:	f140 80f6 	bpl.w	800330c <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4d9f      	ldr	r5, [pc, #636]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003122:	682b      	ldr	r3, [r5, #0]
 8003124:	05df      	lsls	r7, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8003126:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	f140 80ff 	bpl.w	800332c <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800312e:	4d9b      	ldr	r5, [pc, #620]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003130:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003132:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003136:	d01f      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003138:	6861      	ldr	r1, [r4, #4]
 800313a:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800313e:	429a      	cmp	r2, r3
 8003140:	d01b      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003142:	6a29      	ldr	r1, [r5, #32]
 8003144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003148:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800314c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003150:	f8df c250 	ldr.w	ip, [pc, #592]	; 80033a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003154:	fab2 f282 	clz	r2, r2
 8003158:	4462      	add	r2, ip
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	2701      	movs	r7, #1
 800315e:	6017      	str	r7, [r2, #0]
 8003160:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	4463      	add	r3, ip
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800316e:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003170:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8003172:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003174:	f100 80ee 	bmi.w	8003354 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003178:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800317a:	4a88      	ldr	r2, [pc, #544]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800317c:	6a13      	ldr	r3, [r2, #32]
 800317e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003182:	430b      	orrs	r3, r1
 8003184:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003186:	b11e      	cbz	r6, 8003190 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003188:	69d3      	ldr	r3, [r2, #28]
 800318a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
 8003190:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003192:	07da      	lsls	r2, r3, #31
 8003194:	d506      	bpl.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003196:	4981      	ldr	r1, [pc, #516]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003198:	68a0      	ldr	r0, [r4, #8]
 800319a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800319c:	f022 0203 	bic.w	r2, r2, #3
 80031a0:	4302      	orrs	r2, r0
 80031a2:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a4:	079f      	lsls	r7, r3, #30
 80031a6:	d506      	bpl.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031a8:	497c      	ldr	r1, [pc, #496]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031aa:	68e0      	ldr	r0, [r4, #12]
 80031ac:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80031b2:	4302      	orrs	r2, r0
 80031b4:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031b6:	075e      	lsls	r6, r3, #29
 80031b8:	d506      	bpl.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ba:	4978      	ldr	r1, [pc, #480]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031bc:	6920      	ldr	r0, [r4, #16]
 80031be:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031c0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80031c4:	4302      	orrs	r2, r0
 80031c6:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c8:	069d      	lsls	r5, r3, #26
 80031ca:	d506      	bpl.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031cc:	4973      	ldr	r1, [pc, #460]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031ce:	69e0      	ldr	r0, [r4, #28]
 80031d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031d2:	f022 0210 	bic.w	r2, r2, #16
 80031d6:	4302      	orrs	r2, r0
 80031d8:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031da:	0398      	lsls	r0, r3, #14
 80031dc:	d506      	bpl.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80031de:	496f      	ldr	r1, [pc, #444]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031e2:	684a      	ldr	r2, [r1, #4]
 80031e4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80031e8:	4302      	orrs	r2, r0
 80031ea:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ec:	0659      	lsls	r1, r3, #25
 80031ee:	d506      	bpl.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f0:	496a      	ldr	r1, [pc, #424]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80031f2:	6a20      	ldr	r0, [r4, #32]
 80031f4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80031f6:	f022 0220 	bic.w	r2, r2, #32
 80031fa:	4302      	orrs	r2, r0
 80031fc:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031fe:	035a      	lsls	r2, r3, #13
 8003200:	d506      	bpl.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003202:	4966      	ldr	r1, [pc, #408]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003204:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003206:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320c:	4302      	orrs	r2, r0
 800320e:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003210:	071f      	lsls	r7, r3, #28
 8003212:	d506      	bpl.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003214:	4961      	ldr	r1, [pc, #388]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003216:	6960      	ldr	r0, [r4, #20]
 8003218:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800321a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800321e:	4302      	orrs	r2, r0
 8003220:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003222:	06de      	lsls	r6, r3, #27
 8003224:	d506      	bpl.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003226:	495d      	ldr	r1, [pc, #372]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003228:	69a0      	ldr	r0, [r4, #24]
 800322a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800322c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003230:	4302      	orrs	r2, r0
 8003232:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003234:	059d      	lsls	r5, r3, #22
 8003236:	d506      	bpl.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003238:	4958      	ldr	r1, [pc, #352]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800323a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800323c:	684a      	ldr	r2, [r1, #4]
 800323e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003242:	4302      	orrs	r2, r0
 8003244:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003246:	0618      	lsls	r0, r3, #24
 8003248:	d506      	bpl.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800324a:	4954      	ldr	r1, [pc, #336]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800324c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800324e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003250:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8003254:	4302      	orrs	r2, r0
 8003256:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003258:	05d9      	lsls	r1, r3, #23
 800325a:	d506      	bpl.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800325c:	494f      	ldr	r1, [pc, #316]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800325e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003260:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003262:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8003266:	4302      	orrs	r2, r0
 8003268:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800326a:	04da      	lsls	r2, r3, #19
 800326c:	d506      	bpl.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800326e:	494b      	ldr	r1, [pc, #300]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003270:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003272:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003278:	4302      	orrs	r2, r0
 800327a:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800327c:	049f      	lsls	r7, r3, #18
 800327e:	d506      	bpl.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003280:	4946      	ldr	r1, [pc, #280]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003282:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003284:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003286:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800328a:	4302      	orrs	r2, r0
 800328c:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800328e:	02de      	lsls	r6, r3, #11
 8003290:	d506      	bpl.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003292:	4942      	ldr	r1, [pc, #264]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003294:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003296:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003298:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800329c:	4302      	orrs	r2, r0
 800329e:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032a0:	029d      	lsls	r5, r3, #10
 80032a2:	d506      	bpl.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032a4:	493d      	ldr	r1, [pc, #244]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80032a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80032a8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80032aa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80032ae:	4302      	orrs	r2, r0
 80032b0:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032b2:	0258      	lsls	r0, r3, #9
 80032b4:	d506      	bpl.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032b6:	4939      	ldr	r1, [pc, #228]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80032b8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80032ba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c0:	4302      	orrs	r2, r0
 80032c2:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80032c4:	0219      	lsls	r1, r3, #8
 80032c6:	d506      	bpl.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80032c8:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80032ca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80032cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80032ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d2:	4302      	orrs	r2, r0
 80032d4:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80032d6:	01da      	lsls	r2, r3, #7
 80032d8:	d506      	bpl.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80032da:	4930      	ldr	r1, [pc, #192]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80032dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80032de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80032e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e4:	4302      	orrs	r2, r0
 80032e6:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80032e8:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80032ec:	d103      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032ee:	4618      	mov	r0, r3
}
 80032f0:	b003      	add	sp, #12
 80032f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80032f6:	4a29      	ldr	r2, [pc, #164]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80032f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80032fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003300:	430b      	orrs	r3, r1
  return HAL_OK;
 8003302:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003306:	b003      	add	sp, #12
 8003308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800330c:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4d24      	ldr	r5, [pc, #144]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003314:	61da      	str	r2, [r3, #28]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 8003324:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	f53f af01 	bmi.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003334:	f7fe fb00 	bl	8001938 <HAL_GetTick>
 8003338:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	682b      	ldr	r3, [r5, #0]
 800333c:	05d8      	lsls	r0, r3, #23
 800333e:	f53f aef6 	bmi.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fe faf9 	bl	8001938 <HAL_GetTick>
 8003346:	1bc0      	subs	r0, r0, r7
 8003348:	2864      	cmp	r0, #100	; 0x64
 800334a:	d9f6      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 800334c:	2003      	movs	r0, #3
}
 800334e:	b003      	add	sp, #12
 8003350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8003354:	f7fe faf0 	bl	8001938 <HAL_GetTick>
 8003358:	f04f 0902 	mov.w	r9, #2
 800335c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335e:	e015      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003360:	fa99 f3a9 	rbit	r3, r9
 8003364:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003366:	fa99 f3a9 	rbit	r3, r9
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	fa07 f303 	lsl.w	r3, r7, r3
 8003376:	4213      	tst	r3, r2
 8003378:	f47f aefe 	bne.w	8003178 <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe fadc 	bl	8001938 <HAL_GetTick>
 8003380:	f241 3388 	movw	r3, #5000	; 0x1388
 8003384:	eba0 0008 	sub.w	r0, r0, r8
 8003388:	4298      	cmp	r0, r3
 800338a:	d8df      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800338c:	fa99 f3a9 	rbit	r3, r9
 8003390:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0e3      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003398:	6a2a      	ldr	r2, [r5, #32]
 800339a:	e7e4      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
 80033a4:	10908100 	.word	0x10908100

080033a8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a8:	6a03      	ldr	r3, [r0, #32]
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6203      	str	r3, [r0, #32]
{
 80033b0:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b6:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033b8:	4f1a      	ldr	r7, [pc, #104]	; (8003424 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 80033ba:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80033c2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ca:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 80033cc:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d4:	d012      	beq.n	80033fc <TIM_OC1_SetConfig+0x54>
 80033d6:	4c14      	ldr	r4, [pc, #80]	; (8003428 <TIM_OC1_SetConfig+0x80>)
 80033d8:	42a0      	cmp	r0, r4
 80033da:	d00f      	beq.n	80033fc <TIM_OC1_SetConfig+0x54>
 80033dc:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80033e0:	42a0      	cmp	r0, r4
 80033e2:	d00b      	beq.n	80033fc <TIM_OC1_SetConfig+0x54>
 80033e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d007      	beq.n	80033fc <TIM_OC1_SetConfig+0x54>
 80033ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033f0:	42a0      	cmp	r0, r4
 80033f2:	d003      	beq.n	80033fc <TIM_OC1_SetConfig+0x54>
 80033f4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d10b      	bne.n	8003414 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033fc:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80033fe:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003402:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003404:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003408:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800340c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800340e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003412:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003414:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003416:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003418:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800341a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 800341c:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800341e:	6203      	str	r3, [r0, #32]
}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40013400 	.word	0x40013400

0800342c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800342c:	6a03      	ldr	r3, [r0, #32]
 800342e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003432:	6203      	str	r3, [r0, #32]
{
 8003434:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800343a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800343c:	4f21      	ldr	r7, [pc, #132]	; (80034c4 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800343e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8003440:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003442:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8003446:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800344a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800344e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003450:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8003454:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003458:	d016      	beq.n	8003488 <TIM_OC3_SetConfig+0x5c>
 800345a:	4c1b      	ldr	r4, [pc, #108]	; (80034c8 <TIM_OC3_SetConfig+0x9c>)
 800345c:	42a0      	cmp	r0, r4
 800345e:	d013      	beq.n	8003488 <TIM_OC3_SetConfig+0x5c>
 8003460:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003464:	42a0      	cmp	r0, r4
 8003466:	d024      	beq.n	80034b2 <TIM_OC3_SetConfig+0x86>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003468:	4c18      	ldr	r4, [pc, #96]	; (80034cc <TIM_OC3_SetConfig+0xa0>)
 800346a:	42a0      	cmp	r0, r4
 800346c:	d013      	beq.n	8003496 <TIM_OC3_SetConfig+0x6a>
 800346e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003472:	42a0      	cmp	r0, r4
 8003474:	d00f      	beq.n	8003496 <TIM_OC3_SetConfig+0x6a>
 8003476:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800347a:	42a0      	cmp	r0, r4
 800347c:	d00b      	beq.n	8003496 <TIM_OC3_SetConfig+0x6a>
 800347e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003482:	42a0      	cmp	r0, r4
 8003484:	d10e      	bne.n	80034a4 <TIM_OC3_SetConfig+0x78>
 8003486:	e006      	b.n	8003496 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003488:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800348a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800348e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003496:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349a:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800349e:	432c      	orrs	r4, r5
 80034a0:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034a4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80034a6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80034a8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80034aa:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80034ac:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80034ae:	6203      	str	r3, [r0, #32]
}
 80034b0:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80034b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80034bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c0:	e7d2      	b.n	8003468 <TIM_OC3_SetConfig+0x3c>
 80034c2:	bf00      	nop
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40013400 	.word	0x40013400
 80034cc:	40014000 	.word	0x40014000

080034d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d06e      	beq.n	80035b2 <HAL_TIM_Base_Init+0xe2>
{
 80034d4:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80034d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034da:	4604      	mov	r4, r0
 80034dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05e      	beq.n	80035a2 <HAL_TIM_Base_Init+0xd2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e6:	4936      	ldr	r1, [pc, #216]	; (80035c0 <HAL_TIM_Base_Init+0xf0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	2302      	movs	r3, #2
 80034ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ee:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80034f0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f2:	d042      	beq.n	800357a <HAL_TIM_Base_Init+0xaa>
 80034f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80034f8:	d028      	beq.n	800354c <HAL_TIM_Base_Init+0x7c>
 80034fa:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80034fe:	428a      	cmp	r2, r1
 8003500:	d024      	beq.n	800354c <HAL_TIM_Base_Init+0x7c>
 8003502:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003506:	428a      	cmp	r2, r1
 8003508:	d020      	beq.n	800354c <HAL_TIM_Base_Init+0x7c>
 800350a:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 800350e:	428a      	cmp	r2, r1
 8003510:	d033      	beq.n	800357a <HAL_TIM_Base_Init+0xaa>
 8003512:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8003516:	428a      	cmp	r2, r1
 8003518:	d04d      	beq.n	80035b6 <HAL_TIM_Base_Init+0xe6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	492a      	ldr	r1, [pc, #168]	; (80035c4 <HAL_TIM_Base_Init+0xf4>)
 800351c:	428a      	cmp	r2, r1
 800351e:	d045      	beq.n	80035ac <HAL_TIM_Base_Init+0xdc>
 8003520:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003524:	428a      	cmp	r2, r1
 8003526:	d041      	beq.n	80035ac <HAL_TIM_Base_Init+0xdc>
 8003528:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800352c:	428a      	cmp	r2, r1
 800352e:	d03d      	beq.n	80035ac <HAL_TIM_Base_Init+0xdc>
 8003530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003534:	428a      	cmp	r2, r1
 8003536:	d039      	beq.n	80035ac <HAL_TIM_Base_Init+0xdc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353a:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800353c:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800353e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003542:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003544:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003546:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003548:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354a:	e010      	b.n	800356e <HAL_TIM_Base_Init+0x9e>
    tmpcr1 |= Structure->CounterMode;
 800354c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003550:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003556:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800355c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003564:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003566:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003568:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800356c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800356e:	2301      	movs	r3, #1
 8003570:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8003572:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003576:	2000      	movs	r0, #0
}
 8003578:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800357a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003584:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003590:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003592:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003594:	68e3      	ldr	r3, [r4, #12]
 8003596:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800359c:	6963      	ldr	r3, [r4, #20]
 800359e:	6313      	str	r3, [r2, #48]	; 0x30
 80035a0:	e7e5      	b.n	800356e <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 80035a2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80035a6:	f7fe f80b 	bl	80015c0 <HAL_TIM_Base_MspInit>
 80035aa:	e79b      	b.n	80034e4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ac:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ae:	69a1      	ldr	r1, [r4, #24]
 80035b0:	e7e9      	b.n	8003586 <HAL_TIM_Base_Init+0xb6>
    return HAL_ERROR;
 80035b2:	2001      	movs	r0, #1
}
 80035b4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80035b6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035bc:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035be:	e7ac      	b.n	800351a <HAL_TIM_Base_Init+0x4a>
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40014000 	.word	0x40014000

080035c8 <HAL_TIM_PWM_MspInit>:
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop

080035cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d06e      	beq.n	80036ae <HAL_TIM_PWM_Init+0xe2>
{
 80035d0:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80035d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035d6:	4604      	mov	r4, r0
 80035d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05e      	beq.n	800369e <HAL_TIM_PWM_Init+0xd2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e2:	4936      	ldr	r1, [pc, #216]	; (80036bc <HAL_TIM_PWM_Init+0xf0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	2302      	movs	r3, #2
 80035e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ea:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80035ec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ee:	d042      	beq.n	8003676 <HAL_TIM_PWM_Init+0xaa>
 80035f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80035f4:	d028      	beq.n	8003648 <HAL_TIM_PWM_Init+0x7c>
 80035f6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80035fa:	428a      	cmp	r2, r1
 80035fc:	d024      	beq.n	8003648 <HAL_TIM_PWM_Init+0x7c>
 80035fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003602:	428a      	cmp	r2, r1
 8003604:	d020      	beq.n	8003648 <HAL_TIM_PWM_Init+0x7c>
 8003606:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 800360a:	428a      	cmp	r2, r1
 800360c:	d033      	beq.n	8003676 <HAL_TIM_PWM_Init+0xaa>
 800360e:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8003612:	428a      	cmp	r2, r1
 8003614:	d04d      	beq.n	80036b2 <HAL_TIM_PWM_Init+0xe6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	492a      	ldr	r1, [pc, #168]	; (80036c0 <HAL_TIM_PWM_Init+0xf4>)
 8003618:	428a      	cmp	r2, r1
 800361a:	d045      	beq.n	80036a8 <HAL_TIM_PWM_Init+0xdc>
 800361c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003620:	428a      	cmp	r2, r1
 8003622:	d041      	beq.n	80036a8 <HAL_TIM_PWM_Init+0xdc>
 8003624:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003628:	428a      	cmp	r2, r1
 800362a:	d03d      	beq.n	80036a8 <HAL_TIM_PWM_Init+0xdc>
 800362c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003630:	428a      	cmp	r2, r1
 8003632:	d039      	beq.n	80036a8 <HAL_TIM_PWM_Init+0xdc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003634:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003636:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003638:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003640:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003642:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003644:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003646:	e010      	b.n	800366a <HAL_TIM_PWM_Init+0x9e>
    tmpcr1 |= Structure->CounterMode;
 8003648:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800364c:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003652:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800365c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003660:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003662:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003664:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003666:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003668:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800366a:	2301      	movs	r3, #1
 800366c:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800366e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003672:	2000      	movs	r0, #0
}
 8003674:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003676:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003678:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800367a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003680:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800368e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003690:	68e3      	ldr	r3, [r4, #12]
 8003692:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003694:	6863      	ldr	r3, [r4, #4]
 8003696:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003698:	6963      	ldr	r3, [r4, #20]
 800369a:	6313      	str	r3, [r2, #48]	; 0x30
 800369c:	e7e5      	b.n	800366a <HAL_TIM_PWM_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 800369e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036a2:	f7ff ff91 	bl	80035c8 <HAL_TIM_PWM_MspInit>
 80036a6:	e79b      	b.n	80035e0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036aa:	69a1      	ldr	r1, [r4, #24]
 80036ac:	e7e9      	b.n	8003682 <HAL_TIM_PWM_Init+0xb6>
    return HAL_ERROR;
 80036ae:	2001      	movs	r0, #1
}
 80036b0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80036b2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036b8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	e7ac      	b.n	8003616 <HAL_TIM_PWM_Init+0x4a>
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40014000 	.word	0x40014000

080036c4 <HAL_TIM_PWM_Start>:
 80036c4:	6803      	ldr	r3, [r0, #0]
 80036c6:	2201      	movs	r2, #1
 80036c8:	6a18      	ldr	r0, [r3, #32]
 80036ca:	f001 011f 	and.w	r1, r1, #31
 80036ce:	fa02 f101 	lsl.w	r1, r2, r1
 80036d2:	ea20 0001 	bic.w	r0, r0, r1
 80036d6:	b410      	push	{r4}
 80036d8:	6218      	str	r0, [r3, #32]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	4c15      	ldr	r4, [pc, #84]	; (8003734 <HAL_TIM_PWM_Start+0x70>)
 80036de:	4311      	orrs	r1, r2
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	6219      	str	r1, [r3, #32]
 80036e4:	d012      	beq.n	800370c <HAL_TIM_PWM_Start+0x48>
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <HAL_TIM_PWM_Start+0x74>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00f      	beq.n	800370c <HAL_TIM_PWM_Start+0x48>
 80036ec:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00b      	beq.n	800370c <HAL_TIM_PWM_Start+0x48>
 80036f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <HAL_TIM_PWM_Start+0x48>
 80036fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <HAL_TIM_PWM_Start+0x48>
 8003704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003708:	4293      	cmp	r3, r2
 800370a:	d103      	bne.n	8003714 <HAL_TIM_PWM_Start+0x50>
 800370c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003712:	645a      	str	r2, [r3, #68]	; 0x44
 8003714:	6899      	ldr	r1, [r3, #8]
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_TIM_PWM_Start+0x78>)
 8003718:	400a      	ands	r2, r1
 800371a:	2a06      	cmp	r2, #6
 800371c:	d006      	beq.n	800372c <HAL_TIM_PWM_Start+0x68>
 800371e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003722:	d003      	beq.n	800372c <HAL_TIM_PWM_Start+0x68>
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	2000      	movs	r0, #0
 800372e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40013400 	.word	0x40013400
 800373c:	00010007 	.word	0x00010007

08003740 <HAL_TIM_PWM_Start_IT>:
 8003740:	b410      	push	{r4}
 8003742:	290c      	cmp	r1, #12
 8003744:	d808      	bhi.n	8003758 <HAL_TIM_PWM_Start_IT+0x18>
 8003746:	e8df f001 	tbb	[pc, r1]
 800374a:	0745      	.short	0x0745
 800374c:	074b0707 	.word	0x074b0707
 8003750:	073f0707 	.word	0x073f0707
 8003754:	0707      	.short	0x0707
 8003756:	51          	.byte	0x51
 8003757:	00          	.byte	0x00
 8003758:	6803      	ldr	r3, [r0, #0]
 800375a:	6a18      	ldr	r0, [r3, #32]
 800375c:	4c26      	ldr	r4, [pc, #152]	; (80037f8 <HAL_TIM_PWM_Start_IT+0xb8>)
 800375e:	2201      	movs	r2, #1
 8003760:	f001 011f 	and.w	r1, r1, #31
 8003764:	fa02 f101 	lsl.w	r1, r2, r1
 8003768:	ea20 0001 	bic.w	r0, r0, r1
 800376c:	6218      	str	r0, [r3, #32]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	42a3      	cmp	r3, r4
 8003772:	ea41 0102 	orr.w	r1, r1, r2
 8003776:	6219      	str	r1, [r3, #32]
 8003778:	d012      	beq.n	80037a0 <HAL_TIM_PWM_Start_IT+0x60>
 800377a:	4a20      	ldr	r2, [pc, #128]	; (80037fc <HAL_TIM_PWM_Start_IT+0xbc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00f      	beq.n	80037a0 <HAL_TIM_PWM_Start_IT+0x60>
 8003780:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003784:	4293      	cmp	r3, r2
 8003786:	d00b      	beq.n	80037a0 <HAL_TIM_PWM_Start_IT+0x60>
 8003788:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <HAL_TIM_PWM_Start_IT+0x60>
 8003790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <HAL_TIM_PWM_Start_IT+0x60>
 8003798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <HAL_TIM_PWM_Start_IT+0x68>
 80037a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	4a15      	ldr	r2, [pc, #84]	; (8003800 <HAL_TIM_PWM_Start_IT+0xc0>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	2a06      	cmp	r2, #6
 80037b0:	d006      	beq.n	80037c0 <HAL_TIM_PWM_Start_IT+0x80>
 80037b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80037b6:	d003      	beq.n	80037c0 <HAL_TIM_PWM_Start_IT+0x80>
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	2000      	movs	r0, #0
 80037c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	6803      	ldr	r3, [r0, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	f042 0208 	orr.w	r2, r2, #8
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	e7c2      	b.n	800375a <HAL_TIM_PWM_Start_IT+0x1a>
 80037d4:	6803      	ldr	r3, [r0, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	f042 0202 	orr.w	r2, r2, #2
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	e7bc      	b.n	800375a <HAL_TIM_PWM_Start_IT+0x1a>
 80037e0:	6803      	ldr	r3, [r0, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	f042 0204 	orr.w	r2, r2, #4
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	e7b6      	b.n	800375a <HAL_TIM_PWM_Start_IT+0x1a>
 80037ec:	6803      	ldr	r3, [r0, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	f042 0210 	orr.w	r2, r2, #16
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	e7b0      	b.n	800375a <HAL_TIM_PWM_Start_IT+0x1a>
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40013400 	.word	0x40013400
 8003800:	00010007 	.word	0x00010007

08003804 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003804:	2800      	cmp	r0, #0
 8003806:	f000 80a8 	beq.w	800395a <HAL_TIM_Encoder_Init+0x156>
{
 800380a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800380e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003812:	460d      	mov	r5, r1
 8003814:	4604      	mov	r4, r0
 8003816:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8092 	beq.w	8003944 <HAL_TIM_Encoder_Init+0x140>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003820:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003822:	4951      	ldr	r1, [pc, #324]	; (8003968 <HAL_TIM_Encoder_Init+0x164>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	2202      	movs	r2, #2
 8003826:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8003830:	f022 0207 	bic.w	r2, r2, #7
 8003834:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003836:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8003838:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383a:	d06f      	beq.n	800391c <HAL_TIM_Encoder_Init+0x118>
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d028      	beq.n	8003894 <HAL_TIM_Encoder_Init+0x90>
 8003842:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003846:	428b      	cmp	r3, r1
 8003848:	d024      	beq.n	8003894 <HAL_TIM_Encoder_Init+0x90>
 800384a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800384e:	428b      	cmp	r3, r1
 8003850:	d020      	beq.n	8003894 <HAL_TIM_Encoder_Init+0x90>
 8003852:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8003856:	428b      	cmp	r3, r1
 8003858:	d060      	beq.n	800391c <HAL_TIM_Encoder_Init+0x118>
 800385a:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 800385e:	428b      	cmp	r3, r1
 8003860:	d07d      	beq.n	800395e <HAL_TIM_Encoder_Init+0x15a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003862:	4942      	ldr	r1, [pc, #264]	; (800396c <HAL_TIM_Encoder_Init+0x168>)
 8003864:	428b      	cmp	r3, r1
 8003866:	d072      	beq.n	800394e <HAL_TIM_Encoder_Init+0x14a>
 8003868:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800386c:	428b      	cmp	r3, r1
 800386e:	d06e      	beq.n	800394e <HAL_TIM_Encoder_Init+0x14a>
 8003870:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003874:	428b      	cmp	r3, r1
 8003876:	d06a      	beq.n	800394e <HAL_TIM_Encoder_Init+0x14a>
 8003878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800387c:	428b      	cmp	r3, r1
 800387e:	d066      	beq.n	800394e <HAL_TIM_Encoder_Init+0x14a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003880:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003882:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003888:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800388a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800388c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003890:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003892:	e010      	b.n	80038b6 <HAL_TIM_Encoder_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8003894:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800389c:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800389e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a4:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038aa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ac:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80038ae:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80038b0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b2:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038b4:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80038b6:	f04f 0c01 	mov.w	ip, #1
 80038ba:	f8c3 c014 	str.w	ip, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 80038be:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80038c0:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038c2:	69af      	ldr	r7, [r5, #24]
 80038c4:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038c6:	692a      	ldr	r2, [r5, #16]
  tmpsmcr |= sConfig->EncoderMode;
 80038c8:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038cc:	f426 7840 	bic.w	r8, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038d0:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038d2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	68ef      	ldr	r7, [r5, #12]
 80038da:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80038de:	433a      	orrs	r2, r7
 80038e0:	6a2f      	ldr	r7, [r5, #32]
  tmpccer = htim->Instance->CCER;
 80038e2:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038e4:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038e8:	ea41 0108 	orr.w	r1, r1, r8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038f0:	696f      	ldr	r7, [r5, #20]
 80038f2:	686d      	ldr	r5, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038f4:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 80038f8:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038fc:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003900:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8003904:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003908:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800390a:	4335      	orrs	r5, r6
  htim->Instance->SMCR = tmpsmcr;
 800390c:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800390e:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8003910:	621d      	str	r5, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 8003912:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  return HAL_OK;
 8003916:	2000      	movs	r0, #0
}
 8003918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 800391c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003924:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003926:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	69a1      	ldr	r1, [r4, #24]
 800392e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003932:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8003934:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003936:	68e2      	ldr	r2, [r4, #12]
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800393e:	6962      	ldr	r2, [r4, #20]
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
 8003942:	e7b8      	b.n	80038b6 <HAL_TIM_Encoder_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8003944:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003948:	f7fd fe78 	bl	800163c <HAL_TIM_Encoder_MspInit>
 800394c:	e768      	b.n	8003820 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003950:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	4302      	orrs	r2, r0
 8003958:	e7e9      	b.n	800392e <HAL_TIM_Encoder_Init+0x12a>
    return HAL_ERROR;
 800395a:	2001      	movs	r0, #1
}
 800395c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800395e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003960:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003964:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003966:	e77c      	b.n	8003862 <HAL_TIM_Encoder_Init+0x5e>
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40014000 	.word	0x40014000

08003970 <HAL_TIM_Encoder_Start>:
  switch (Channel)
 8003970:	b1c1      	cbz	r1, 80039a4 <HAL_TIM_Encoder_Start+0x34>
 8003972:	2904      	cmp	r1, #4
 8003974:	d020      	beq.n	80039b8 <HAL_TIM_Encoder_Start+0x48>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003976:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003978:	6a1a      	ldr	r2, [r3, #32]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8003988:	6a1a      	ldr	r2, [r3, #32]
 800398a:	f022 0210 	bic.w	r2, r2, #16
 800398e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	f042 0210 	orr.w	r2, r2, #16
 8003996:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	2000      	movs	r0, #0
 80039a2:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039a4:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	e7ef      	b.n	8003998 <HAL_TIM_Encoder_Start+0x28>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039b8:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80039ba:	e7e5      	b.n	8003988 <HAL_TIM_Encoder_Start+0x18>

080039bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80039bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d073      	beq.n	8003aac <HAL_TIM_ConfigClockSource+0xf0>
{
 80039c4:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 80039c6:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80039c8:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80039ca:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80039cc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80039d6:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d8:	4c4a      	ldr	r4, [pc, #296]	; (8003b04 <HAL_TIM_ConfigClockSource+0x148>)
  switch (sClockSourceConfig->ClockSource)
 80039da:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039dc:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80039e0:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80039e2:	d065      	beq.n	8003ab0 <HAL_TIM_ConfigClockSource+0xf4>
 80039e4:	d831      	bhi.n	8003a4a <HAL_TIM_ConfigClockSource+0x8e>
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d048      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0xc0>
 80039ea:	d921      	bls.n	8003a30 <HAL_TIM_ConfigClockSource+0x74>
 80039ec:	2b50      	cmp	r3, #80	; 0x50
 80039ee:	d116      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
  tmpccer = TIMx->CCER;
 80039f0:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f2:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f4:	684c      	ldr	r4, [r1, #4]
 80039f6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f8:	f026 0601 	bic.w	r6, r6, #1
 80039fc:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a00:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a08:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a0c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003a0e:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003a10:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003a12:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a18:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003a1c:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8003a1e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	2201      	movs	r2, #1
 8003a22:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003a2a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003a2c:	4618      	mov	r0, r3
}
 8003a2e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d002      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x7e>
 8003a34:	d91e      	bls.n	8003a74 <HAL_TIM_ConfigClockSource+0xb8>
 8003a36:	2b30      	cmp	r3, #48	; 0x30
 8003a38:	d1f1      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8003a3a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a40:	430b      	orrs	r3, r1
 8003a42:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003a46:	6093      	str	r3, [r2, #8]
}
 8003a48:	e7e9      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003a4a:	2b70      	cmp	r3, #112	; 0x70
 8003a4c:	d049      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x126>
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a52:	d1e4      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a54:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003a58:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003a5a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a5c:	432b      	orrs	r3, r5
 8003a5e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a62:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a66:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003a68:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a6a:	6893      	ldr	r3, [r2, #8]
 8003a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a70:	6093      	str	r3, [r2, #8]
      break;
 8003a72:	e7d4      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003a74:	f033 0110 	bics.w	r1, r3, #16
 8003a78:	d1d1      	bne.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
 8003a7a:	e7de      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 8003a7c:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7e:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a80:	684c      	ldr	r4, [r1, #4]
 8003a82:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a84:	f026 0601 	bic.w	r6, r6, #1
 8003a88:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a8a:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a8c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a94:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a98:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003a9a:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003a9e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003aa8:	6093      	str	r3, [r2, #8]
}
 8003aaa:	e7b8      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 8003aac:	2002      	movs	r0, #2
}
 8003aae:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab0:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ab2:	684d      	ldr	r5, [r1, #4]
 8003ab4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab6:	f024 0410 	bic.w	r4, r4, #16
 8003aba:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abc:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8003abe:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003acc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003ad0:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003ad2:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003ad4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ada:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003ade:	6093      	str	r3, [r2, #8]
}
 8003ae0:	e79d      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003ae6:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003ae8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aea:	432b      	orrs	r3, r5
 8003aec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003af6:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003af8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003afa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003afe:	6093      	str	r3, [r2, #8]
      break;
 8003b00:	e78d      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x62>
 8003b02:	bf00      	nop
 8003b04:	fffe0088 	.word	0xfffe0088

08003b08 <HAL_TIM_PeriodElapsedCallback>:
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop

08003b0c <HAL_TIM_OC_DelayElapsedCallback>:
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <HAL_TIM_IC_CaptureCallback>:
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop

08003b14 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop

08003b18 <HAL_TIM_TriggerCallback>:
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b1c:	6803      	ldr	r3, [r0, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	0791      	lsls	r1, r2, #30
{
 8003b22:	b510      	push	{r4, lr}
 8003b24:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b26:	d502      	bpl.n	8003b2e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	0792      	lsls	r2, r2, #30
 8003b2c:	d468      	bmi.n	8003c00 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	0752      	lsls	r2, r2, #29
 8003b32:	d502      	bpl.n	8003b3a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	0750      	lsls	r0, r2, #29
 8003b38:	d44f      	bmi.n	8003bda <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	0711      	lsls	r1, r2, #28
 8003b3e:	d502      	bpl.n	8003b46 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	0712      	lsls	r2, r2, #28
 8003b44:	d437      	bmi.n	8003bb6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	06d0      	lsls	r0, r2, #27
 8003b4a:	d502      	bpl.n	8003b52 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	06d1      	lsls	r1, r2, #27
 8003b50:	d41e      	bmi.n	8003b90 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	07d2      	lsls	r2, r2, #31
 8003b56:	d502      	bpl.n	8003b5e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	07d0      	lsls	r0, r2, #31
 8003b5c:	d469      	bmi.n	8003c32 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	0611      	lsls	r1, r2, #24
 8003b62:	d502      	bpl.n	8003b6a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	0612      	lsls	r2, r2, #24
 8003b68:	d46b      	bmi.n	8003c42 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	05d0      	lsls	r0, r2, #23
 8003b6e:	d502      	bpl.n	8003b76 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	0611      	lsls	r1, r2, #24
 8003b74:	d46d      	bmi.n	8003c52 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	0652      	lsls	r2, r2, #25
 8003b7a:	d502      	bpl.n	8003b82 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	0650      	lsls	r0, r2, #25
 8003b80:	d46f      	bmi.n	8003c62 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	0691      	lsls	r1, r2, #26
 8003b86:	d502      	bpl.n	8003b8e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	0692      	lsls	r2, r2, #26
 8003b8c:	d449      	bmi.n	8003c22 <HAL_TIM_IRQHandler+0x106>
}
 8003b8e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b90:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b94:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b96:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba2:	d16f      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba4:	f7ff ffb2 	bl	8003b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff ffb3 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	2200      	movs	r2, #0
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	7722      	strb	r2, [r4, #28]
 8003bb4:	e7cd      	b.n	8003b52 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bb6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bba:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bbc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bbe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc6:	d15a      	bne.n	8003c7e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc8:	f7ff ffa0 	bl	8003b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f7ff ffa1 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	7722      	strb	r2, [r4, #28]
 8003bd8:	e7b5      	b.n	8003b46 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bda:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bde:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bec:	d144      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	f7ff ff8d 	bl	8003b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff ff8e 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	7722      	strb	r2, [r4, #28]
 8003bfe:	e79c      	b.n	8003b3a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c00:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c04:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c06:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c08:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	0799      	lsls	r1, r3, #30
 8003c0e:	d130      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c10:	f7ff ff7c 	bl	8003b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7ff ff7d 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	7722      	strb	r2, [r4, #28]
 8003c20:	e785      	b.n	8003b2e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c22:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003c26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c28:	611a      	str	r2, [r3, #16]
}
 8003c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003c2e:	f000 ba77 	b.w	8004120 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c32:	f06f 0201 	mvn.w	r2, #1
 8003c36:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f7ff ff65 	bl	8003b08 <HAL_TIM_PeriodElapsedCallback>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	e78d      	b.n	8003b5e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f000 fa6b 	bl	8004124 <HAL_TIMEx_BreakCallback>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	e78b      	b.n	8003b6a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f000 fa65 	bl	8004128 <HAL_TIMEx_Break2Callback>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	e789      	b.n	8003b76 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c66:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff ff55 	bl	8003b18 <HAL_TIM_TriggerCallback>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	e787      	b.n	8003b82 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	f7ff ff4d 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
 8003c76:	e7d0      	b.n	8003c1a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c78:	f7ff ff4a 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e7bc      	b.n	8003bf8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	f7ff ff47 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
 8003c82:	e7a6      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c84:	f7ff ff44 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
 8003c88:	e791      	b.n	8003bae <HAL_TIM_IRQHandler+0x92>
 8003c8a:	bf00      	nop

08003c8c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8c:	6a03      	ldr	r3, [r0, #32]
 8003c8e:	f023 0310 	bic.w	r3, r3, #16
 8003c92:	6203      	str	r3, [r0, #32]
{
 8003c94:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8003c96:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003c98:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003c9a:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c9c:	4f21      	ldr	r7, [pc, #132]	; (8003d24 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c9e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8003ca6:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003caa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cae:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb8:	d016      	beq.n	8003ce8 <TIM_OC2_SetConfig+0x5c>
 8003cba:	4c1b      	ldr	r4, [pc, #108]	; (8003d28 <TIM_OC2_SetConfig+0x9c>)
 8003cbc:	42a0      	cmp	r0, r4
 8003cbe:	d013      	beq.n	8003ce8 <TIM_OC2_SetConfig+0x5c>
 8003cc0:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d024      	beq.n	8003d12 <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	4c18      	ldr	r4, [pc, #96]	; (8003d2c <TIM_OC2_SetConfig+0xa0>)
 8003cca:	42a0      	cmp	r0, r4
 8003ccc:	d013      	beq.n	8003cf6 <TIM_OC2_SetConfig+0x6a>
 8003cce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003cd2:	42a0      	cmp	r0, r4
 8003cd4:	d00f      	beq.n	8003cf6 <TIM_OC2_SetConfig+0x6a>
 8003cd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003cda:	42a0      	cmp	r0, r4
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_OC2_SetConfig+0x6a>
 8003cde:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003ce2:	42a0      	cmp	r0, r4
 8003ce4:	d10e      	bne.n	8003d04 <TIM_OC2_SetConfig+0x78>
 8003ce6:	e006      	b.n	8003cf6 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce8:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cee:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf6:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cfa:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cfe:	432c      	orrs	r4, r5
 8003d00:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003d06:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003d08:	6182      	str	r2, [r0, #24]
}
 8003d0a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8003d0c:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003d0e:	6203      	str	r3, [r0, #32]
}
 8003d10:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d12:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d18:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d20:	e7d2      	b.n	8003cc8 <TIM_OC2_SetConfig+0x3c>
 8003d22:	bf00      	nop
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40013400 	.word	0x40013400
 8003d2c:	40014000 	.word	0x40014000

08003d30 <HAL_TIM_PWM_ConfigChannel>:
{
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003d32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	f000 813c 	beq.w	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x284>
 8003d3c:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003d40:	2101      	movs	r1, #1
 8003d42:	4604      	mov	r4, r0
 8003d44:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003d4c:	2a14      	cmp	r2, #20
 8003d4e:	d84e      	bhi.n	8003dee <HAL_TIM_PWM_ConfigChannel+0xbe>
 8003d50:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003d54:	004d009e 	.word	0x004d009e
 8003d58:	004d004d 	.word	0x004d004d
 8003d5c:	004d00b6 	.word	0x004d00b6
 8003d60:	004d004d 	.word	0x004d004d
 8003d64:	004d00cf 	.word	0x004d00cf
 8003d68:	004d004d 	.word	0x004d004d
 8003d6c:	004d0015 	.word	0x004d0015
 8003d70:	004d004d 	.word	0x004d004d
 8003d74:	004d00e7 	.word	0x004d00e7
 8003d78:	004d004d 	.word	0x004d004d
 8003d7c:	0054      	.short	0x0054
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d7e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d80:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d84:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d86:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d88:	4e93      	ldr	r6, [pc, #588]	; (8003fd8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d8a:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003d8e:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003d90:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003d92:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003d94:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8003d9a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d9e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da2:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da4:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dac:	d008      	beq.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003dae:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003db2:	42b3      	cmp	r3, r6
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003db6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003dba:	42b3      	cmp	r3, r6
 8003dbc:	f040 80fc 	bne.w	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x288>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc2:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc6:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8003dca:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003dcc:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003dce:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd0:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003dd2:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd4:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dd6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003ddc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003de4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003dec:	61da      	str	r2, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 8003dee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003df0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003df2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003df6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dfc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dfe:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e02:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	4e74      	ldr	r6, [pc, #464]	; (8003fd8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e08:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8003e0c:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003e0e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003e10:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003e12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e14:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e18:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e1c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e20:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e22:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e26:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2a:	d013      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003e2c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003e30:	42b3      	cmp	r3, r6
 8003e32:	d00f      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003e34:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003e38:	42b3      	cmp	r3, r6
 8003e3a:	d00b      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003e3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e40:	42b3      	cmp	r3, r6
 8003e42:	d007      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003e44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e48:	42b3      	cmp	r3, r6
 8003e4a:	d003      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003e4c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003e50:	42b3      	cmp	r3, r6
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x12e>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e54:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e56:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e5a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8003e5e:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003e60:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003e64:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8003e66:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e6a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e6c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003e70:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e72:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e74:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003e78:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003e82:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e8a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003e8e:	e7b4      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	4629      	mov	r1, r5
 8003e94:	f7ff fa88 	bl	80033a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e98:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e9a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	f041 0108 	orr.w	r1, r1, #8
 8003ea2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea4:	6999      	ldr	r1, [r3, #24]
 8003ea6:	f021 0104 	bic.w	r1, r1, #4
 8003eaa:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	4302      	orrs	r2, r0
 8003eb0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003eb2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003eba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003ebe:	e79c      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	6800      	ldr	r0, [r0, #0]
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f7ff fee2 	bl	8003c8c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ec8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eca:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ecc:	6999      	ldr	r1, [r3, #24]
 8003ece:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003ed2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ed4:	6999      	ldr	r1, [r3, #24]
 8003ed6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003eda:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003ee2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003ee4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003eec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003ef0:	e783      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ef2:	6800      	ldr	r0, [r0, #0]
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f7ff fa99 	bl	800342c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003efc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efe:	69d9      	ldr	r1, [r3, #28]
 8003f00:	f041 0108 	orr.w	r1, r1, #8
 8003f04:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f06:	69d9      	ldr	r1, [r3, #28]
 8003f08:	f021 0104 	bic.w	r1, r1, #4
 8003f0c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	4302      	orrs	r2, r0
 8003f12:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003f14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f1c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003f20:	e76b      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0xca>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f22:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f24:	f8d5 c008 	ldr.w	ip, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f28:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003f2a:	682f      	ldr	r7, [r5, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	4e2a      	ldr	r6, [pc, #168]	; (8003fd8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f2e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003f32:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f34:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f36:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8003f3e:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f48:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f50:	d013      	beq.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003f52:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f56:	42b3      	cmp	r3, r6
 8003f58:	d00f      	beq.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003f5a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003f5e:	42b3      	cmp	r3, r6
 8003f60:	d00b      	beq.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003f62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f66:	42b3      	cmp	r3, r6
 8003f68:	d007      	beq.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003f6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f6e:	42b3      	cmp	r3, r6
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8003f72:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003f76:	42b3      	cmp	r3, r6
 8003f78:	d104      	bne.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x254>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f7a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f7c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f80:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8003f84:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003f86:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003f8a:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8003f8c:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f90:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f92:	f041 0108 	orr.w	r1, r1, #8
 8003f96:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f9a:	f021 0104 	bic.w	r1, r1, #4
 8003f9e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa2:	4302      	orrs	r2, r0
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003fa6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003fb2:	e722      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0xca>
  __HAL_LOCK(htim);
 8003fb4:	2002      	movs	r0, #2
}
 8003fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003fbc:	42b3      	cmp	r3, r6
 8003fbe:	f43f aeff 	beq.w	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003fc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003fc6:	42b3      	cmp	r3, r6
 8003fc8:	f43f aefa 	beq.w	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003fcc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003fd0:	42b3      	cmp	r3, r6
 8003fd2:	f47f aefa 	bne.w	8003dca <HAL_TIM_PWM_ConfigChannel+0x9a>
 8003fd6:	e6f3      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003fd8:	40012c00 	.word	0x40012c00

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fdc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d04e      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 8003fe4:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe6:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fe8:	4c27      	ldr	r4, [pc, #156]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003fea:	2202      	movs	r2, #2
 8003fec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff0:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 8003ff2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003ff4:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff6:	d03a      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003ff8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d02c      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004000:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8004004:	42a3      	cmp	r3, r4
 8004006:	d028      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004008:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800400a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800400e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d012      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004018:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800401e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004026:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800402e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004036:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800403a:	4293      	cmp	r3, r2
 800403c:	d104      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403e:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004040:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004044:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004046:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004048:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800404a:	2201      	movs	r2, #1
 800404c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004050:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004054:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004056:	4618      	mov	r0, r3
}
 8004058:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800405a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800405e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004062:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004064:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004068:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 800406a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406c:	e7d1      	b.n	8004012 <HAL_TIMEx_MasterConfigSynchronization+0x36>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800406e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004072:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004076:	4332      	orrs	r2, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004078:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800407c:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 800407e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004080:	e7dd      	b.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x62>
  __HAL_LOCK(htim);
 8004082:	2002      	movs	r0, #2
}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400

08004090 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004090:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d03f      	beq.n	8004118 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
{
 8004098:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800409a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800409e:	4602      	mov	r2, r0
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040a4:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040a8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ae:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040b4:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040be:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040c4:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040c6:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040c8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ce:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040d0:	4c12      	ldr	r4, [pc, #72]	; (800411c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80040d2:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040d8:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040da:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040de:	d007      	beq.n	80040f0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80040e0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80040e4:	42a0      	cmp	r0, r4
 80040e6:	d003      	beq.n	80040f0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80040e8:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d10c      	bne.n	800410a <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040f0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80040f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040f6:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040fa:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004102:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004104:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004108:	430b      	orrs	r3, r1
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800410a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800410c:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800410e:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8004112:	4608      	mov	r0, r1
}
 8004114:	bc30      	pop	{r4, r5}
 8004116:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004118:	2002      	movs	r0, #2
}
 800411a:	4770      	bx	lr
 800411c:	40012c00 	.word	0x40012c00

08004120 <HAL_TIMEx_CommutCallback>:
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop

08004124 <HAL_TIMEx_BreakCallback>:
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <HAL_TIMEx_Break2Callback>:
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop

0800412c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004130:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8004132:	2e20      	cmp	r6, #32
 8004134:	d143      	bne.n	80041be <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004136:	b369      	cbz	r1, 8004194 <HAL_UART_Receive_DMA+0x68>
 8004138:	b362      	cbz	r2, 8004194 <HAL_UART_Receive_DMA+0x68>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800413a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800413e:	2b01      	cmp	r3, #1
 8004140:	4604      	mov	r4, r0
 8004142:	d03c      	beq.n	80041be <HAL_UART_Receive_DMA+0x92>
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    if (huart->hdmarx != NULL)
 8004144:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    huart->pRxBuffPtr = pData;
 8004146:	6561      	str	r1, [r4, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800414a:	2501      	movs	r5, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800414c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414e:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxXferSize = Size;
 8004150:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
    __HAL_LOCK(huart);
 8004154:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004158:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800415a:	b1f0      	cbz	r0, 800419a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800415c:	f8df c064 	ldr.w	ip, [pc, #100]	; 80041c4 <HAL_UART_Receive_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004160:	f8d4 8000 	ldr.w	r8, [r4]
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004164:	f8df e060 	ldr.w	lr, [pc, #96]	; 80041c8 <HAL_UART_Receive_DMA+0x9c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004168:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800416c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80041cc <HAL_UART_Receive_DMA+0xa0>
      huart->hdmarx->XferAbortCallback = NULL;
 8004170:	6347      	str	r7, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004172:	4613      	mov	r3, r2
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004174:	e9c0 ec0b 	strd	lr, ip, [r0, #44]	; 0x2c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004178:	460a      	mov	r2, r1
 800417a:	f108 0124 	add.w	r1, r8, #36	; 0x24
 800417e:	f7fe f9e3 	bl	8002548 <HAL_DMA_Start_IT>
 8004182:	b150      	cbz	r0, 800419a <HAL_UART_Receive_DMA+0x6e>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004184:	2310      	movs	r3, #16

        __HAL_UNLOCK(huart);
 8004186:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800418a:	67e3      	str	r3, [r4, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 800418c:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 800418e:	6766      	str	r6, [r4, #116]	; 0x74
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8004194:	2001      	movs	r0, #1
}
 8004196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419a:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800419c:	2000      	movs	r0, #0
 800419e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b8:	609a      	str	r2, [r3, #8]
}
 80041ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80041be:	2002      	movs	r0, #2
}
 80041c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	0800420d 	.word	0x0800420d
 80041cc:	0800421d 	.word	0x0800421d

080041d0 <HAL_UART_RxCpltCallback>:
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop

080041d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80041d6:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d011      	beq.n	8004202 <UART_DMAReceiveCplt+0x2e>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041de:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f6:	689a      	ldr	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041f8:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fe:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8004200:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004202:	f7ff ffe5 	bl	80041d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	bd08      	pop	{r3, pc}

08004208 <HAL_UART_RxHalfCpltCallback>:
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop

0800420c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800420c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800420e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004210:	f7ff fffa 	bl	8004208 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004214:	bd08      	pop	{r3, pc}
 8004216:	bf00      	nop

08004218 <HAL_UART_ErrorCallback>:
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop

0800421c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800421c:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800421e:	6803      	ldr	r3, [r0, #0]
{
 8004220:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004222:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004224:	6f81      	ldr	r1, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	0612      	lsls	r2, r2, #24
 800422a:	d501      	bpl.n	8004230 <UART_DMAError+0x14>
 800422c:	2c21      	cmp	r4, #33	; 0x21
 800422e:	d01a      	beq.n	8004266 <UART_DMAError+0x4a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	0652      	lsls	r2, r2, #25
 8004234:	d501      	bpl.n	800423a <UART_DMAError+0x1e>
 8004236:	2922      	cmp	r1, #34	; 0x22
 8004238:	d006      	beq.n	8004248 <UART_DMAError+0x2c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800423a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800423c:	f043 0310 	orr.w	r3, r3, #16
 8004240:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004242:	f7ff ffe9 	bl	8004218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004246:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8004248:	2100      	movs	r1, #0
 800424a:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004254:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 8004260:	6601      	str	r1, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 8004262:	6784      	str	r4, [r0, #120]	; 0x78
}
 8004264:	e7e9      	b.n	800423a <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 8004266:	2200      	movs	r2, #0
 8004268:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800426c:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800426e:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004270:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004274:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004276:	6744      	str	r4, [r0, #116]	; 0x74
}
 8004278:	e7da      	b.n	8004230 <UART_DMAError+0x14>
 800427a:	bf00      	nop

0800427c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800427c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800427e:	07da      	lsls	r2, r3, #31
{
 8004280:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004282:	d506      	bpl.n	8004292 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004284:	6801      	ldr	r1, [r0, #0]
 8004286:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004288:	684a      	ldr	r2, [r1, #4]
 800428a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800428e:	4322      	orrs	r2, r4
 8004290:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004292:	079c      	lsls	r4, r3, #30
 8004294:	d506      	bpl.n	80042a4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004296:	6801      	ldr	r1, [r0, #0]
 8004298:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800429a:	684a      	ldr	r2, [r1, #4]
 800429c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042a0:	4322      	orrs	r2, r4
 80042a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a4:	0759      	lsls	r1, r3, #29
 80042a6:	d506      	bpl.n	80042b6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042a8:	6801      	ldr	r1, [r0, #0]
 80042aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80042ac:	684a      	ldr	r2, [r1, #4]
 80042ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042b2:	4322      	orrs	r2, r4
 80042b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042b6:	071a      	lsls	r2, r3, #28
 80042b8:	d506      	bpl.n	80042c8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ba:	6801      	ldr	r1, [r0, #0]
 80042bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80042be:	684a      	ldr	r2, [r1, #4]
 80042c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c4:	4322      	orrs	r2, r4
 80042c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c8:	06dc      	lsls	r4, r3, #27
 80042ca:	d506      	bpl.n	80042da <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042cc:	6801      	ldr	r1, [r0, #0]
 80042ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042d6:	4322      	orrs	r2, r4
 80042d8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042da:	0699      	lsls	r1, r3, #26
 80042dc:	d506      	bpl.n	80042ec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042de:	6801      	ldr	r1, [r0, #0]
 80042e0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80042e2:	688a      	ldr	r2, [r1, #8]
 80042e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e8:	4322      	orrs	r2, r4
 80042ea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ec:	065a      	lsls	r2, r3, #25
 80042ee:	d509      	bpl.n	8004304 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f0:	6801      	ldr	r1, [r0, #0]
 80042f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80042f4:	684a      	ldr	r2, [r1, #4]
 80042f6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80042fa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004300:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004302:	d00b      	beq.n	800431c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	d506      	bpl.n	8004316 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004308:	6802      	ldr	r2, [r0, #0]
 800430a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800430c:	6853      	ldr	r3, [r2, #4]
 800430e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004312:	430b      	orrs	r3, r1
 8004314:	6053      	str	r3, [r2, #4]
}
 8004316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800431a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800431c:	684a      	ldr	r2, [r1, #4]
 800431e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004320:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004324:	4322      	orrs	r2, r4
 8004326:	604a      	str	r2, [r1, #4]
 8004328:	e7ec      	b.n	8004304 <UART_AdvFeatureConfig+0x88>
 800432a:	bf00      	nop

0800432c <UART_CheckIdleState>:
{
 800432c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432e:	2300      	movs	r3, #0
{
 8004330:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004332:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004334:	f7fd fb00 	bl	8001938 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800433e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004340:	d409      	bmi.n	8004356 <UART_CheckIdleState+0x2a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	0752      	lsls	r2, r2, #29
 8004346:	d42a      	bmi.n	800439e <UART_CheckIdleState+0x72>
  __HAL_UNLOCK(huart);
 8004348:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800434a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800434c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->gState = HAL_UART_STATE_READY;
 8004350:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004352:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004354:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	0292      	lsls	r2, r2, #10
 800435a:	d4f2      	bmi.n	8004342 <UART_CheckIdleState+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435c:	f7fd faec 	bl	8001938 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004360:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	1b40      	subs	r0, r0, r5
 8004364:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004368:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436a:	d229      	bcs.n	80043c0 <UART_CheckIdleState+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800436c:	0750      	lsls	r0, r2, #29
 800436e:	d5f2      	bpl.n	8004356 <UART_CheckIdleState+0x2a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	0511      	lsls	r1, r2, #20
 8004374:	d5ef      	bpl.n	8004356 <UART_CheckIdleState+0x2a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800437a:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004382:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8004386:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	f021 0101 	bic.w	r1, r1, #1
 800438c:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800438e:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8004390:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->gState = HAL_UART_STATE_READY;
 8004394:	6762      	str	r2, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8004396:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8004398:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800439a:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 800439c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	0258      	lsls	r0, r3, #9
 80043a2:	d4d1      	bmi.n	8004348 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a4:	f7fd fac8 	bl	8001938 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	1b40      	subs	r0, r0, r5
 80043ac:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b0:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	d205      	bcs.n	80043c0 <UART_CheckIdleState+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043b4:	0751      	lsls	r1, r2, #29
 80043b6:	d5f2      	bpl.n	800439e <UART_CheckIdleState+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	0512      	lsls	r2, r2, #20
 80043bc:	d5ef      	bpl.n	800439e <UART_CheckIdleState+0x72>
 80043be:	e7da      	b.n	8004376 <UART_CheckIdleState+0x4a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80043c8:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	f022 0201 	bic.w	r2, r2, #1
 80043ce:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80043d0:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80043d2:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 80043d6:	6761      	str	r1, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 80043d8:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80043da:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80043dc:	bd38      	pop	{r3, r4, r5, pc}
 80043de:	bf00      	nop

080043e0 <HAL_UART_Init>:
  if (huart == NULL)
 80043e0:	2800      	cmp	r0, #0
 80043e2:	f000 810c 	beq.w	80045fe <HAL_UART_Init+0x21e>
{
 80043e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80043e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80043ea:	4604      	mov	r4, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d036      	beq.n	800445e <HAL_UART_Init+0x7e>
  __HAL_UART_DISABLE(huart);
 80043f0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f2:	6927      	ldr	r7, [r4, #16]
 80043f4:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f6:	499a      	ldr	r1, [pc, #616]	; (8004660 <HAL_UART_Init+0x280>)
  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	2224      	movs	r2, #36	; 0x24
 80043fa:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80043fc:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043fe:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004400:	f020 0001 	bic.w	r0, r0, #1
 8004404:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004406:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004408:	69e0      	ldr	r0, [r4, #28]
 800440a:	433a      	orrs	r2, r7
 800440c:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800440e:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004410:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004412:	430a      	orrs	r2, r1
 8004414:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800441a:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800441c:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004422:	4329      	orrs	r1, r5
 8004424:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004426:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004428:	4d8e      	ldr	r5, [pc, #568]	; (8004664 <HAL_UART_Init+0x284>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800442a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800442e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004430:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004432:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004434:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004436:	d017      	beq.n	8004468 <HAL_UART_Init+0x88>
 8004438:	4a8b      	ldr	r2, [pc, #556]	; (8004668 <HAL_UART_Init+0x288>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d02a      	beq.n	8004494 <HAL_UART_Init+0xb4>
 800443e:	4a8b      	ldr	r2, [pc, #556]	; (800466c <HAL_UART_Init+0x28c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	f000 80c5 	beq.w	80045d0 <HAL_UART_Init+0x1f0>
 8004446:	4a8a      	ldr	r2, [pc, #552]	; (8004670 <HAL_UART_Init+0x290>)
 8004448:	4293      	cmp	r3, r2
 800444a:	f000 8094 	beq.w	8004576 <HAL_UART_Init+0x196>
 800444e:	4a89      	ldr	r2, [pc, #548]	; (8004674 <HAL_UART_Init+0x294>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d05d      	beq.n	8004510 <HAL_UART_Init+0x130>
  huart->RxISR = NULL;
 8004454:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004456:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800445a:	2001      	movs	r0, #1
 800445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800445e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004462:	f7fd f969 	bl	8001738 <HAL_UART_MspInit>
 8004466:	e7c3      	b.n	80043f0 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004468:	4b83      	ldr	r3, [pc, #524]	; (8004678 <HAL_UART_Init+0x298>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	3b01      	subs	r3, #1
 8004472:	2b02      	cmp	r3, #2
 8004474:	d870      	bhi.n	8004558 <HAL_UART_Init+0x178>
 8004476:	4a81      	ldr	r2, [pc, #516]	; (800467c <HAL_UART_Init+0x29c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004478:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	f000 8088 	beq.w	8004592 <HAL_UART_Init+0x1b2>
    switch (clocksource)
 8004482:	2b08      	cmp	r3, #8
 8004484:	d841      	bhi.n	800450a <HAL_UART_Init+0x12a>
 8004486:	e8df f003 	tbb	[pc, r3]
 800448a:	6a73      	.short	0x6a73
 800448c:	4016405c 	.word	0x4016405c
 8004490:	4040      	.short	0x4040
 8004492:	4d          	.byte	0x4d
 8004493:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004494:	4b78      	ldr	r3, [pc, #480]	; (8004678 <HAL_UART_Init+0x298>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800449c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a0:	d03d      	beq.n	800451e <HAL_UART_Init+0x13e>
 80044a2:	d848      	bhi.n	8004536 <HAL_UART_Init+0x156>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d060      	beq.n	800456a <HAL_UART_Init+0x18a>
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d1d2      	bne.n	8004454 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044b2:	f000 80d1 	beq.w	8004658 <HAL_UART_Init+0x278>
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fe fdc9 	bl	800304c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ba:	6863      	ldr	r3, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 80044bc:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044be:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80044c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c6:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c8:	f1a3 0010 	sub.w	r0, r3, #16
 80044cc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80044d0:	4288      	cmp	r0, r1
 80044d2:	d8bf      	bhi.n	8004454 <HAL_UART_Init+0x74>
      huart->Instance->BRR = usartdiv;
 80044d4:	6821      	ldr	r1, [r4, #0]
 80044d6:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 80044d8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80044da:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d1bb      	bne.n	800445a <HAL_UART_Init+0x7a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d16e      	bne.n	80045c6 <HAL_UART_Init+0x1e6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e8:	684b      	ldr	r3, [r1, #4]
 80044ea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80044ee:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f0:	688b      	ldr	r3, [r1, #8]
 80044f2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80044f6:	608b      	str	r3, [r1, #8]
  __HAL_UART_ENABLE(huart);
 80044f8:	680b      	ldr	r3, [r1, #0]
 80044fa:	f043 0301 	orr.w	r3, r3, #1
  return (UART_CheckIdleState(huart));
 80044fe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004500:	600b      	str	r3, [r1, #0]
}
 8004502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8004506:	f7ff bf11 	b.w	800432c <UART_CheckIdleState>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800450a:	2201      	movs	r2, #1
 800450c:	2300      	movs	r3, #0
 800450e:	e7db      	b.n	80044c8 <HAL_UART_Init+0xe8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_UART_Init+0x298>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800451c:	d122      	bne.n	8004564 <HAL_UART_Init+0x184>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004522:	d077      	beq.n	8004614 <HAL_UART_Init+0x234>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004524:	6861      	ldr	r1, [r4, #4]
 8004526:	084b      	lsrs	r3, r1, #1
 8004528:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 800452c:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800452e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004532:	b29b      	uxth	r3, r3
        break;
 8004534:	e7c8      	b.n	80044c8 <HAL_UART_Init+0xe8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800453a:	d18b      	bne.n	8004454 <HAL_UART_Init+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004540:	d071      	beq.n	8004626 <HAL_UART_Init+0x246>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004542:	6861      	ldr	r1, [r4, #4]
 8004544:	084b      	lsrs	r3, r1, #1
 8004546:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800454a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
  HAL_StatusTypeDef ret               = HAL_OK;
 800454e:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004550:	fbb3 f3f1 	udiv	r3, r3, r1
 8004554:	b29b      	uxth	r3, r3
        break;
 8004556:	e7b7      	b.n	80044c8 <HAL_UART_Init+0xe8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004558:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800455c:	d079      	beq.n	8004652 <HAL_UART_Init+0x272>
        pclk = HAL_RCC_GetPCLK2Freq();
 800455e:	f7fe fdbb 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004562:	e7aa      	b.n	80044ba <HAL_UART_Init+0xda>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004564:	d852      	bhi.n	800460c <HAL_UART_Init+0x22c>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d14b      	bne.n	8004602 <HAL_UART_Init+0x222>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800456e:	d065      	beq.n	800463c <HAL_UART_Init+0x25c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe fd9a 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004574:	e7a1      	b.n	80044ba <HAL_UART_Init+0xda>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004576:	4b40      	ldr	r3, [pc, #256]	; (8004678 <HAL_UART_Init+0x298>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800457e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004582:	d0cc      	beq.n	800451e <HAL_UART_Init+0x13e>
 8004584:	d837      	bhi.n	80045f6 <HAL_UART_Init+0x216>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ef      	beq.n	800456a <HAL_UART_Init+0x18a>
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458e:	d08e      	beq.n	80044ae <HAL_UART_Init+0xce>
 8004590:	e760      	b.n	8004454 <HAL_UART_Init+0x74>
    switch (clocksource)
 8004592:	2b08      	cmp	r3, #8
 8004594:	d806      	bhi.n	80045a4 <HAL_UART_Init+0x1c4>
 8004596:	e8df f003 	tbb	[pc, r3]
 800459a:	5c51      	.short	0x5c51
 800459c:	055f0546 	.word	0x055f0546
 80045a0:	0505      	.short	0x0505
 80045a2:	3d          	.byte	0x3d
 80045a3:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a4:	2201      	movs	r2, #1
 80045a6:	2300      	movs	r3, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a8:	f1a3 0010 	sub.w	r0, r3, #16
 80045ac:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80045b0:	4288      	cmp	r0, r1
 80045b2:	f63f af4f 	bhi.w	8004454 <HAL_UART_Init+0x74>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b6:	f023 000f 	bic.w	r0, r3, #15
      huart->Instance->BRR = brrtemp;
 80045ba:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045bc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80045c0:	4303      	orrs	r3, r0
 80045c2:	60cb      	str	r3, [r1, #12]
 80045c4:	e788      	b.n	80044d8 <HAL_UART_Init+0xf8>
    UART_AdvFeatureConfig(huart);
 80045c6:	4620      	mov	r0, r4
 80045c8:	f7ff fe58 	bl	800427c <UART_AdvFeatureConfig>
 80045cc:	6821      	ldr	r1, [r4, #0]
 80045ce:	e78b      	b.n	80044e8 <HAL_UART_Init+0x108>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d0:	4b29      	ldr	r3, [pc, #164]	; (8004678 <HAL_UART_Init+0x298>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80045d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045dc:	d09f      	beq.n	800451e <HAL_UART_Init+0x13e>
 80045de:	d806      	bhi.n	80045ee <HAL_UART_Init+0x20e>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0c2      	beq.n	800456a <HAL_UART_Init+0x18a>
 80045e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045e8:	f43f af61 	beq.w	80044ae <HAL_UART_Init+0xce>
 80045ec:	e732      	b.n	8004454 <HAL_UART_Init+0x74>
 80045ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045f2:	d0a3      	beq.n	800453c <HAL_UART_Init+0x15c>
 80045f4:	e72e      	b.n	8004454 <HAL_UART_Init+0x74>
 80045f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045fa:	d09f      	beq.n	800453c <HAL_UART_Init+0x15c>
 80045fc:	e72a      	b.n	8004454 <HAL_UART_Init+0x74>
}
 80045fe:	2001      	movs	r0, #1
 8004600:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004606:	f43f af52 	beq.w	80044ae <HAL_UART_Init+0xce>
 800460a:	e723      	b.n	8004454 <HAL_UART_Init+0x74>
 800460c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004610:	d094      	beq.n	800453c <HAL_UART_Init+0x15c>
 8004612:	e71f      	b.n	8004454 <HAL_UART_Init+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004614:	6861      	ldr	r1, [r4, #4]
 8004616:	084b      	lsrs	r3, r1, #1
 8004618:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  HAL_StatusTypeDef ret               = HAL_OK;
 800461c:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800461e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004622:	b29b      	uxth	r3, r3
        break;
 8004624:	e7c0      	b.n	80045a8 <HAL_UART_Init+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004626:	6861      	ldr	r1, [r4, #4]
 8004628:	084b      	lsrs	r3, r1, #1
 800462a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800462e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
  HAL_StatusTypeDef ret               = HAL_OK;
 8004632:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004634:	fbb3 f3f1 	udiv	r3, r3, r1
 8004638:	b29b      	uxth	r3, r3
        break;
 800463a:	e7b5      	b.n	80045a8 <HAL_UART_Init+0x1c8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe fd34 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	085a      	lsrs	r2, r3, #1
 8004644:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  HAL_StatusTypeDef ret               = HAL_OK;
 8004648:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	b29b      	uxth	r3, r3
        break;
 8004650:	e7aa      	b.n	80045a8 <HAL_UART_Init+0x1c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004652:	f7fe fd41 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004656:	e7f3      	b.n	8004640 <HAL_UART_Init+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 8004658:	f7fe fcf8 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800465c:	e7f0      	b.n	8004640 <HAL_UART_Init+0x260>
 800465e:	bf00      	nop
 8004660:	efff69f3 	.word	0xefff69f3
 8004664:	40013800 	.word	0x40013800
 8004668:	40004400 	.word	0x40004400
 800466c:	40004800 	.word	0x40004800
 8004670:	40004c00 	.word	0x40004c00
 8004674:	40005000 	.word	0x40005000
 8004678:	40021000 	.word	0x40021000
 800467c:	08004a78 	.word	0x08004a78

08004680 <UART_WaitOnFlagUntilTimeout>:
{
 8004680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004688:	6804      	ldr	r4, [r0, #0]
 800468a:	4607      	mov	r7, r0
 800468c:	460e      	mov	r6, r1
 800468e:	4615      	mov	r5, r2
 8004690:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004692:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004696:	d10a      	bne.n	80046ae <UART_WaitOnFlagUntilTimeout+0x2e>
 8004698:	69e3      	ldr	r3, [r4, #28]
 800469a:	ea36 0303 	bics.w	r3, r6, r3
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	429d      	cmp	r5, r3
 80046a6:	d0f7      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 80046a8:	2000      	movs	r0, #0
}
 80046aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ae:	69e3      	ldr	r3, [r4, #28]
 80046b0:	ea36 0303 	bics.w	r3, r6, r3
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	429d      	cmp	r5, r3
 80046bc:	d1f4      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fd f93b 	bl	8001938 <HAL_GetTick>
 80046c2:	eba0 0009 	sub.w	r0, r0, r9
 80046c6:	4540      	cmp	r0, r8
 80046c8:	d81d      	bhi.n	8004706 <UART_WaitOnFlagUntilTimeout+0x86>
 80046ca:	f1b8 0f00 	cmp.w	r8, #0
 80046ce:	d01a      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046d0:	683c      	ldr	r4, [r7, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	075a      	lsls	r2, r3, #29
 80046d6:	d5dc      	bpl.n	8004692 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d8:	69e3      	ldr	r3, [r4, #28]
 80046da:	051b      	lsls	r3, r3, #20
 80046dc:	d5d9      	bpl.n	8004692 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046e2:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ea:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ec:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80046ee:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 80046f4:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 80046f8:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 80046fa:	677b      	str	r3, [r7, #116]	; 0x74
          __HAL_UNLOCK(huart);
 80046fc:	f887 1070 	strb.w	r1, [r7, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8004700:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004702:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004704:	e7d1      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800470e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004710:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004712:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004714:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8004718:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 800471c:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800471e:	6779      	str	r1, [r7, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8004720:	f887 4070 	strb.w	r4, [r7, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8004724:	67b9      	str	r1, [r7, #120]	; 0x78
        return HAL_TIMEOUT;
 8004726:	e7c0      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0x2a>

08004728 <HAL_UART_Transmit>:
{
 8004728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800472c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800472e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8004730:	2820      	cmp	r0, #32
{
 8004732:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8004734:	d175      	bne.n	8004822 <HAL_UART_Transmit+0xfa>
    if ((pData == NULL) || (Size == 0U))
 8004736:	4688      	mov	r8, r1
 8004738:	2900      	cmp	r1, #0
 800473a:	d045      	beq.n	80047c8 <HAL_UART_Transmit+0xa0>
 800473c:	4617      	mov	r7, r2
 800473e:	2a00      	cmp	r2, #0
 8004740:	d042      	beq.n	80047c8 <HAL_UART_Transmit+0xa0>
 8004742:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8004744:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8004748:	2b01      	cmp	r3, #1
 800474a:	d06a      	beq.n	8004822 <HAL_UART_Transmit+0xfa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800474c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800474e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	f04f 0900 	mov.w	r9, #0
 8004754:	f8c4 907c 	str.w	r9, [r4, #124]	; 0x7c
    __HAL_LOCK(huart);
 8004758:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475c:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800475e:	f7fd f8eb 	bl	8001938 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004762:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8004764:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800476c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800476e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004772:	d05a      	beq.n	800482a <HAL_UART_Transmit+0x102>
      pdata16bits = NULL;
 8004774:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8004776:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800477a:	b29b      	uxth	r3, r3
 800477c:	b1b3      	cbz	r3, 80047ac <HAL_UART_Transmit+0x84>
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	1c69      	adds	r1, r5, #1
 8004782:	d125      	bne.n	80047d0 <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004784:	69d3      	ldr	r3, [r2, #28]
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	d5fc      	bpl.n	8004784 <HAL_UART_Transmit+0x5c>
      if (pdata8bits == NULL)
 800478a:	f1b8 0f00 	cmp.w	r8, #0
 800478e:	d043      	beq.n	8004818 <HAL_UART_Transmit+0xf0>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004790:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004794:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004796:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800479a:	3b01      	subs	r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047a2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e9      	bne.n	8004780 <HAL_UART_Transmit+0x58>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ac:	9500      	str	r5, [sp, #0]
 80047ae:	4633      	mov	r3, r6
 80047b0:	2200      	movs	r2, #0
 80047b2:	2140      	movs	r1, #64	; 0x40
 80047b4:	4620      	mov	r0, r4
 80047b6:	f7ff ff63 	bl	8004680 <UART_WaitOnFlagUntilTimeout>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d14e      	bne.n	800485c <HAL_UART_Transmit+0x134>
    huart->gState = HAL_UART_STATE_READY;
 80047be:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80047c0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80047c4:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80047c6:	e000      	b.n	80047ca <HAL_UART_Transmit+0xa2>
      return  HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
}
 80047ca:	b003      	add	sp, #12
 80047cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d0:	69d3      	ldr	r3, [r2, #28]
 80047d2:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 80047d6:	d1d8      	bne.n	800478a <HAL_UART_Transmit+0x62>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d8:	f7fd f8ae 	bl	8001938 <HAL_GetTick>
 80047dc:	1b80      	subs	r0, r0, r6
 80047de:	4285      	cmp	r5, r0
 80047e0:	d329      	bcc.n	8004836 <HAL_UART_Transmit+0x10e>
 80047e2:	b345      	cbz	r5, 8004836 <HAL_UART_Transmit+0x10e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	075b      	lsls	r3, r3, #29
 80047ea:	d5c9      	bpl.n	8004780 <HAL_UART_Transmit+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ec:	69d3      	ldr	r3, [r2, #28]
 80047ee:	0518      	lsls	r0, r3, #20
 80047f0:	d5c6      	bpl.n	8004780 <HAL_UART_Transmit+0x58>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047f6:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f8:	6813      	ldr	r3, [r2, #0]
 80047fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047fe:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004800:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004802:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004804:	f021 0101 	bic.w	r1, r1, #1
 8004808:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 800480a:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 800480c:	6763      	str	r3, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800480e:	f884 9070 	strb.w	r9, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8004812:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004814:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004816:	e7d8      	b.n	80047ca <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004818:	f837 3b02 	ldrh.w	r3, [r7], #2
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	e7b8      	b.n	8004794 <HAL_UART_Transmit+0x6c>
    return HAL_BUSY;
 8004822:	2002      	movs	r0, #2
}
 8004824:	b003      	add	sp, #12
 8004826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1a1      	bne.n	8004774 <HAL_UART_Transmit+0x4c>
 8004830:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8004832:	4698      	mov	r8, r3
 8004834:	e79f      	b.n	8004776 <HAL_UART_Transmit+0x4e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800483e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004842:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004844:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8004848:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 800484a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800484e:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8004850:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8004854:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8004856:	b003      	add	sp, #12
 8004858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800485c:	2003      	movs	r0, #3
 800485e:	e7b4      	b.n	80047ca <HAL_UART_Transmit+0xa2>

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4d0d      	ldr	r5, [pc, #52]	; (8004898 <__libc_init_array+0x38>)
 8004864:	4c0d      	ldr	r4, [pc, #52]	; (800489c <__libc_init_array+0x3c>)
 8004866:	1b64      	subs	r4, r4, r5
 8004868:	10a4      	asrs	r4, r4, #2
 800486a:	2600      	movs	r6, #0
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	4d0b      	ldr	r5, [pc, #44]	; (80048a0 <__libc_init_array+0x40>)
 8004872:	4c0c      	ldr	r4, [pc, #48]	; (80048a4 <__libc_init_array+0x44>)
 8004874:	f000 f820 	bl	80048b8 <_init>
 8004878:	1b64      	subs	r4, r4, r5
 800487a:	10a4      	asrs	r4, r4, #2
 800487c:	2600      	movs	r6, #0
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f855 3b04 	ldr.w	r3, [r5], #4
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	08004a7c 	.word	0x08004a7c
 800489c:	08004a7c 	.word	0x08004a7c
 80048a0:	08004a7c 	.word	0x08004a7c
 80048a4:	08004a80 	.word	0x08004a80

080048a8 <memset>:
 80048a8:	4402      	add	r2, r0
 80048aa:	4603      	mov	r3, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <_init>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr

080048c4 <_fini>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr
